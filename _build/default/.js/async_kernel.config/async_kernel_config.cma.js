// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Here_is_an_explanation_of_=
      caml_string_of_jsbytes("\n\nHere is an explanation of each field.\n"),
     cst_environment_variable_affec=
      caml_string_of_jsbytes
       (" environment variable affects Async\nin various ways.  Its value should be a sexp of the following form,\nwhere all fields are optional:\n\n"),
     cst_The=caml_string_of_jsbytes("The "),
     cst$1=caml_string_of_jsbytes(")"),
     cst_default$1=caml_string_of_jsbytes(" (default "),
     cst$2=caml_string_of_jsbytes("\n"),
     cst_min=caml_string_of_jsbytes("min "),
     cst$0=caml_string_of_jsbytes("    "),
     cst_A_list_of_tags_specifying_=
      caml_string_of_jsbytes
       ("\n  A list of tags specifying which Async functions should print debug\n  messages to stderr.  Each tag identifies a group of related Async\n  functions.  The tag [all] means to print debug messages for all\n  functions.  Allowed values are:\n\n"),
     cst_This_determines_what_OS_su=
      caml_string_of_jsbytes
       ("\n  This determines what OS subsystem Async uses to watch file descriptors for being ready.\n  The default is to use [epoll] if timerfd's are supported and if not, use [select].\n\n  Allowed values are:"),
     level_bits=[0,14,[0,15,[0,9,[0,6,0]]]],
     level_bits$0=[0,10,[0,10,[0,9,0]]],
     cst_max_num_open_file_descrs$0=
      caml_string_of_jsbytes("max_num_open_file_descrs"),
     cst_abort_after_thread_pool_st$0=
      caml_string_of_jsbytes("abort_after_thread_pool_stuck_for"),
     cst_check_invariants$0=caml_string_of_jsbytes("check_invariants"),
     cst_detect_invalid_access_from$0=
      caml_string_of_jsbytes("detect_invalid_access_from_thread"),
     cst_dump_core_on_job_delay$0=
      caml_string_of_jsbytes("dump_core_on_job_delay"),
     cst_epoll_max_ready_events$0=
      caml_string_of_jsbytes("epoll_max_ready_events"),
     cst_file_descr_watcher$2=caml_string_of_jsbytes("file_descr_watcher"),
     cst_max_inter_cycle_timeout$0=
      caml_string_of_jsbytes("max_inter_cycle_timeout"),
     cst_max_num_jobs_per_priority_$0=
      caml_string_of_jsbytes("max_num_jobs_per_priority_per_cycle"),
     cst_max_num_threads$0=caml_string_of_jsbytes("max_num_threads"),
     cst_min_inter_cycle_timeout$0=
      caml_string_of_jsbytes("min_inter_cycle_timeout"),
     cst_print_debug_messages_for$0=
      caml_string_of_jsbytes("print_debug_messages_for"),
     cst_record_backtraces$0=caml_string_of_jsbytes("record_backtraces"),
     cst_report_thread_pool_stuck_f$0=
      caml_string_of_jsbytes("report_thread_pool_stuck_for"),
     cst_thread_pool_cpu_affinity$0=
      caml_string_of_jsbytes("thread_pool_cpu_affinity"),
     cst_timing_wheel_config$0=caml_string_of_jsbytes("timing_wheel_config"),
     cst_Epoll=caml_string_of_jsbytes("Epoll"),
     cst_Epoll_if_timerfd=caml_string_of_jsbytes("Epoll_if_timerfd"),
     cst_Select=caml_string_of_jsbytes("Select"),
     cst_epoll=caml_string_of_jsbytes("epoll"),
     cst_epoll_if_timerfd=caml_string_of_jsbytes("epoll_if_timerfd"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_Epoll$0=caml_string_of_jsbytes("Epoll"),
     cst_Epoll_if_timerfd$0=caml_string_of_jsbytes("Epoll_if_timerfd"),
     cst_Select$0=caml_string_of_jsbytes("Select"),
     cst_epoll$0=caml_string_of_jsbytes("epoll"),
     cst_epoll_if_timerfd$0=caml_string_of_jsbytes("epoll_if_timerfd"),
     cst_select$0=caml_string_of_jsbytes("select"),
     cst_all=caml_string_of_jsbytes("all"),
     cst_Monitor_send_exn=caml_string_of_jsbytes("Monitor_send_exn"),
     cst_All=caml_string_of_jsbytes("All"),
     cst_Clock=caml_string_of_jsbytes("Clock"),
     cst_Fd=caml_string_of_jsbytes("Fd"),
     cst_File_descr_watcher=caml_string_of_jsbytes("File_descr_watcher"),
     cst_Finalizers=caml_string_of_jsbytes("Finalizers"),
     cst_Interruptor=caml_string_of_jsbytes("Interruptor"),
     cst_Monitor=caml_string_of_jsbytes("Monitor"),
     cst_Parallel=caml_string_of_jsbytes("Parallel"),
     cst_Reader=caml_string_of_jsbytes("Reader"),
     cst_Scheduler=caml_string_of_jsbytes("Scheduler"),
     cst_Shutdown=caml_string_of_jsbytes("Shutdown"),
     cst_Thread_pool=caml_string_of_jsbytes("Thread_pool"),
     cst_Thread_safe=caml_string_of_jsbytes("Thread_safe"),
     cst_Writer=caml_string_of_jsbytes("Writer"),
     cst_parallel=caml_string_of_jsbytes("parallel"),
     cst_clock=caml_string_of_jsbytes("clock"),
     cst_fd=caml_string_of_jsbytes("fd"),
     cst_file_descr_watcher=caml_string_of_jsbytes("file_descr_watcher"),
     cst_finalizers=caml_string_of_jsbytes("finalizers"),
     cst_interruptor=caml_string_of_jsbytes("interruptor"),
     cst_monitor=caml_string_of_jsbytes("monitor"),
     cst_monitor_send_exn=caml_string_of_jsbytes("monitor_send_exn"),
     cst_reader=caml_string_of_jsbytes("reader"),
     cst_scheduler=caml_string_of_jsbytes("scheduler"),
     cst_shutdown=caml_string_of_jsbytes("shutdown"),
     cst_thread_pool=caml_string_of_jsbytes("thread_pool"),
     cst_thread_safe=caml_string_of_jsbytes("thread_safe"),
     cst_writer=caml_string_of_jsbytes("writer"),
     cst_all$0=caml_string_of_jsbytes("all"),
     cst_Monitor_send_exn$0=caml_string_of_jsbytes("Monitor_send_exn"),
     cst_All$0=caml_string_of_jsbytes("All"),
     cst_Clock$0=caml_string_of_jsbytes("Clock"),
     cst_Fd$0=caml_string_of_jsbytes("Fd"),
     cst_File_descr_watcher$0=caml_string_of_jsbytes("File_descr_watcher"),
     cst_Finalizers$0=caml_string_of_jsbytes("Finalizers"),
     cst_Interruptor$0=caml_string_of_jsbytes("Interruptor"),
     cst_Monitor$0=caml_string_of_jsbytes("Monitor"),
     cst_Parallel$0=caml_string_of_jsbytes("Parallel"),
     cst_Reader$0=caml_string_of_jsbytes("Reader"),
     cst_Scheduler$0=caml_string_of_jsbytes("Scheduler"),
     cst_Shutdown$0=caml_string_of_jsbytes("Shutdown"),
     cst_Thread_pool$0=caml_string_of_jsbytes("Thread_pool"),
     cst_Thread_safe$0=caml_string_of_jsbytes("Thread_safe"),
     cst_Writer$0=caml_string_of_jsbytes("Writer"),
     cst_parallel$0=caml_string_of_jsbytes("parallel"),
     cst_clock$0=caml_string_of_jsbytes("clock"),
     cst_fd$0=caml_string_of_jsbytes("fd"),
     cst_file_descr_watcher$0=caml_string_of_jsbytes("file_descr_watcher"),
     cst_finalizers$0=caml_string_of_jsbytes("finalizers"),
     cst_interruptor$0=caml_string_of_jsbytes("interruptor"),
     cst_monitor$0=caml_string_of_jsbytes("monitor"),
     cst_monitor_send_exn$0=caml_string_of_jsbytes("monitor_send_exn"),
     cst_reader$0=caml_string_of_jsbytes("reader"),
     cst_scheduler$0=caml_string_of_jsbytes("scheduler"),
     cst_shutdown$0=caml_string_of_jsbytes("shutdown"),
     cst_thread_pool$0=caml_string_of_jsbytes("thread_pool"),
     cst_thread_safe$0=caml_string_of_jsbytes("thread_safe"),
     cst_writer$0=caml_string_of_jsbytes("writer"),
     cst_Do_not_watch=caml_string_of_jsbytes("Do_not_watch"),
     cst_Watch=caml_string_of_jsbytes("Watch"),
     cst_do_not_watch=caml_string_of_jsbytes("do_not_watch"),
     cst_watch=caml_string_of_jsbytes("watch"),
     cst_Do_not_watch$0=caml_string_of_jsbytes("Do_not_watch"),
     cst_Watch$0=caml_string_of_jsbytes("Watch"),
     cst_do_not_watch$0=caml_string_of_jsbytes("do_not_watch"),
     cst_watch$0=caml_string_of_jsbytes("watch"),
     cst_dump_if_delayed_by=caml_string_of_jsbytes("dump_if_delayed_by"),
     cst_how_to_dump=caml_string_of_jsbytes("how_to_dump"),
     cst_how_to_dump$0=caml_string_of_jsbytes("how_to_dump"),
     cst_dump_if_delayed_by$0=caml_string_of_jsbytes("dump_if_delayed_by"),
     cst_Call_abort=caml_string_of_jsbytes("Call_abort"),
     cst_Call_gcore=caml_string_of_jsbytes("Call_gcore"),
     cst_Default=caml_string_of_jsbytes("Default"),
     cst_call_abort=caml_string_of_jsbytes("call_abort"),
     cst_call_gcore=caml_string_of_jsbytes("call_gcore"),
     cst_default=caml_string_of_jsbytes("default"),
     cst_Call_abort$0=caml_string_of_jsbytes("Call_abort"),
     cst_Call_gcore$0=caml_string_of_jsbytes("Call_gcore"),
     cst_Default$0=caml_string_of_jsbytes("Default"),
     cst_call_abort$0=caml_string_of_jsbytes("call_abort"),
     cst_call_gcore$0=caml_string_of_jsbytes("call_gcore"),
     cst_default$0=caml_string_of_jsbytes("default"),
     cst_Async_kernel_config=caml_string_of_jsbytes("Async_kernel_config"),
     cst_async_kernel_config=caml_string_of_jsbytes("async_kernel_config"),
     cst_config_async_kernel_config=
      caml_string_of_jsbytes("config/async_kernel_config.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_async_kernel_config$0=caml_string_of_jsbytes("async_kernel_config"),
     here=
      [0,caml_string_of_jsbytes("config/async_kernel_config.ml"),12,227,242],
     here$0=
      [0,caml_string_of_jsbytes("config/async_kernel_config.ml"),19,381,396],
     here$1=
      [0,caml_string_of_jsbytes("config/async_kernel_config.ml"),26,548,563],
     here$2=
      [0,caml_string_of_jsbytes("config/async_kernel_config.ml"),34,726,743],
     here$3=
      [0,caml_string_of_jsbytes("config/async_kernel_config.ml"),45,946,961],
     here$4=
      [0,caml_string_of_jsbytes("config/async_kernel_config.ml"),52,1103,1118],
     error_source_003=
      caml_string_of_jsbytes
       ("config/async_kernel_config.ml.Dump_core_on_job_delay.How_to_dump.t"),
     error_source_019=
      caml_string_of_jsbytes
       ("config/async_kernel_config.ml.Dump_core_on_job_delay.watch"),
     error_source_030=
      caml_string_of_jsbytes
       ("config/async_kernel_config.ml.Dump_core_on_job_delay.t"),
     error_source_043=
      caml_string_of_jsbytes("config/async_kernel_config.ml.Debug_tag.T.t"),
     list=caml_list_of_js_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]),
     error_source_051=
      caml_string_of_jsbytes
       ("config/async_kernel_config.ml.File_descr_watcher.T.t"),
     list$0=[0,0,[0,1,[0,2,0]]],
     cst_timing_wheel_config=caml_string_of_jsbytes("timing_wheel_config"),
     cst_thread_pool_cpu_affinity=
      caml_string_of_jsbytes("thread_pool_cpu_affinity"),
     cst_report_thread_pool_stuck_f=
      caml_string_of_jsbytes("report_thread_pool_stuck_for"),
     cst_record_backtraces=caml_string_of_jsbytes("record_backtraces"),
     cst_print_debug_messages_for=
      caml_string_of_jsbytes("print_debug_messages_for"),
     cst_min_inter_cycle_timeout=
      caml_string_of_jsbytes("min_inter_cycle_timeout"),
     cst_max_num_jobs_per_priority_=
      caml_string_of_jsbytes("max_num_jobs_per_priority_per_cycle"),
     cst_max_num_threads=caml_string_of_jsbytes("max_num_threads"),
     cst_max_num_open_file_descrs=
      caml_string_of_jsbytes("max_num_open_file_descrs"),
     cst_max_inter_cycle_timeout=
      caml_string_of_jsbytes("max_inter_cycle_timeout"),
     cst_file_descr_watcher$1=caml_string_of_jsbytes("file_descr_watcher"),
     cst_epoll_max_ready_events=
      caml_string_of_jsbytes("epoll_max_ready_events"),
     cst_dump_core_on_job_delay=
      caml_string_of_jsbytes("dump_core_on_job_delay"),
     cst_detect_invalid_access_from=
      caml_string_of_jsbytes("detect_invalid_access_from_thread"),
     cst_check_invariants=caml_string_of_jsbytes("check_invariants"),
     cst_abort_after_thread_pool_st=
      caml_string_of_jsbytes("abort_after_thread_pool_stuck_for"),
     error_source_112=
      caml_string_of_jsbytes("config/async_kernel_config.ml.t"),
     empty=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     environment_variable=caml_string_of_jsbytes("ASYNC_CONFIG"),
     cst$3=caml_string_of_jsbytes(""),
     cst_async_kernel_config$1=caml_string_of_jsbytes("async_kernel_config"),
     cst_Async_kernel_config$0=caml_string_of_jsbytes("Async_kernel_config"),
     Base_Field=global_data.Base__Field,
     Core_Option=global_data.Core__Option,
     Core_List=global_data.Core__List,
     Core_Sexp=global_data.Core__Sexp,
     Core=global_data.Core,
     Core_String=global_data.Core__String,
     Core_Int=global_data.Core__Int,
     Timing_wheel=global_data.Timing_wheel,
     Thread_pool_cpu_affinity=global_data.Thread_pool_cpu_affinity,
     Core_Time_ns=global_data.Core__Time_ns,
     Assert_failure=global_data.Assert_failure,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Core_Validated=global_data.Core__Validated,
     Core_Sexpable=global_data.Core__Sexpable,
     Base_Word_size=global_data.Base__Word_size,
     Core_Result=global_data.Core__Result,
     Core_Error=global_data.Core__Error;
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_config);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel_config);
    caml_call1(Expect_test_collector[5][1],cst_config_async_kernel_config);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel_config$0,cst);
    var
     sec=Core_Time_ns[1][81],
     concat=Core_String[32],
     t_of_sexp=Core_Int[79],
     sexp_of_t=Core_Int[80],
     validate=Core_Int[112],
     Epoll_max_ready_events=
      caml_call1(Core_Validated[2],[0,t_of_sexp,sexp_of_t,here,validate]),
     include=Core_Time_ns[1],
     t_of_sexp$0=include[9],
     sexp_of_t$0=include[10],
     validate$0=Core_Time_ns[1][43],
     Max_inter_cycle_timeout=
      caml_call1
       (Core_Validated[2],[0,t_of_sexp$0,sexp_of_t$0,here$0,validate$0]),
     include$0=Core_Time_ns[1],
     t_of_sexp$1=include$0[9],
     sexp_of_t$1=include$0[10],
     validate$1=Core_Time_ns[1][43],
     Min_inter_cycle_timeout=
      caml_call1
       (Core_Validated[2],[0,t_of_sexp$1,sexp_of_t$1,here$1,validate$1]),
     t_of_sexp$2=Core_Int[79],
     sexp_of_t$2=Core_Int[80],
     validate$2=Core_Int[112],
     include$1=
      caml_call1
       (Core_Validated[2],[0,t_of_sexp$2,sexp_of_t$2,here$2,validate$2]),
     _a_=include$1[1],
     _b_=include$1[2],
     _d_=include$1[4],
     _e_=include$1[5],
     _c_=include$1[3],
     default$0=caml_call1(_d_,65536),
     _bf_=[0,caml_string_of_jsbytes("<no task id>")],
     _bb_=[0,[2,0,[10,0]],caml_string_of_jsbytes("%s%!")],
     _a4_=[0,caml_string_of_jsbytes(" [ulimit -n -H]"),0],
     _aZ_=[0,caml_string_of_jsbytes("\n"),0],
     _aU_=
      [0,
       caml_string_of_jsbytes
        ("\n  This is used to adjust the time/space tradeoff in the timing wheel\n  used to implement Async's clock.  Time is split into intervals of\n  size [alarm_precision], and alarms with times in the same interval\n  fire in the same cycle.  Level [i] in the timing wheel has an\n  array of size [2^b], where [b] is the [i]'th entry in [level_bits].\n"),
       0],
     _aV_=
      [0,
       caml_string_of_jsbytes
        ("\n   Whether and how threads in the thread pool should be affinitized to CPUs.\n"),
       0],
     _aW_=
      [0,
       caml_string_of_jsbytes
        ("\n  By default, Async will print a message to stderr every second if\n  the thread pool is stuck for longer than this.\n"),
       0],
     _aX_=
      [0,
       caml_string_of_jsbytes
        ("\n  If true, this will cause Async to keep in the execution context the\n  history of stack backtraces (obtained via [Backtrace.get]) that led\n  to the current job.  If an Async job has an unhandled exception,\n  this backtrace history will be recorded in the exception.  In\n  particular the history will appear in an unhandled exception that\n  reaches the main monitor.  This can have a substantial performance\n  impact, both in running time and space usage.\n"),
       0],
     _aY_=
      [0,
       caml_string_of_jsbytes
        ("\n  Turning on debug messages will substantially slow down most programs.\n"),
       0],
     _a0_=
      [0,
       caml_string_of_jsbytes
        ("\n  The minimum timeout the scheduler will pass to the OS when it checks\n  for I/O between cycles.  This is zero by default.  Setting it to a\n  nonzero value is used to increase thread fairness between the scheduler\n  and other threads.  A plausible setting is 1us.  This is also\n  configurable in OCaml via [Scheduler.set_min_inter_cycle_timeout].\n"),
       0],
     _a1_=
      [0,
       caml_string_of_jsbytes
        ("\n  The maximum number of jobs that will be done at each priority within\n  each Async cycle.  This limits how many jobs the scheduler will run\n  before pausing to check for I/O.\n"),
       0],
     _a2_=
      [0,
       caml_string_of_jsbytes
        ("\n  The maximum number of threads that Async will create to do blocking\n  system calls and handle calls to [In_thread.run].\n"),
       0],
     _a3_=
      [0,
       caml_string_of_jsbytes
        ("\n  The maximum number of open file descriptors allowed at any one time."),
       0],
     _a5_=
      [0,
       caml_string_of_jsbytes
        ("\n  The maximum amount of time the scheduler will pause between cycles\n  when it has no jobs and is going to wait for I/O.  In principle one\n  doesn't need this, and we could use an infinite timeout.  We instead\n  use a small timeout (by default), to be more robust to bugs that\n  could prevent Async from waking up and servicing events.  For\n  example, as of 2013-01, the OCaml runtime has a bug that causes it\n  to not necessarily run an OCaml signal handler in a timely manner.\n  This in turn can cause a simple Async program that is waiting on a\n  signal to hang, when in fact it should handle the signal.\n\n  We use 50ms as the default timeout, because it is infrequent enough\n  to have a negligible performance impact, and frequent enough that\n  the latency would typically be not noticeable.  Also, 50ms is what\n  the OCaml ticker thread uses.\n"),
       0],
     _a6_=[0,caml_string_of_jsbytes(".\n"),0],
     _a7_=[0,caml_string_of_jsbytes(", ")],
     _a8_=
      [0,
       caml_string_of_jsbytes
        ("\n  The maximum number of ready events that Async's call to [Epoll.wait]\n  will handle.\n"),
       0],
     _a9_=
      [0,
       caml_string_of_jsbytes
        ("\n  Can be set to [Do_not_watch] or:\n\n    (Watch ((dump_if_delayed_by SPAN) (how_to_dump HOW)))\n\n  If set to [Watch], then on program start this will start a regular\n  Async job that increments a counter, and a C thread that will\n  detect if that job is delayed by [dump_if_delayed_by], and if so,\n  will core dump the program.  If available, [/usr/bin/gcore] is\n  used by default to dump the core, which should allow the program\n  to continue running.  Otherwise, [abort] will be called from C,\n  which will kill the program while causing a core dump.  One can\n  force [abort] or [gcore] via [how_to_dump], which should be one of:\n  [Call_abort], [Call_gcore], or [Default].\n"),
       0],
     _a__=
      [0,
       caml_string_of_jsbytes
        ("\n  If true, causes Async routines to check if they are being accessed\n  from some thread other than the thread currently holding the Async\n  lock, which is not allowed and can lead to very confusing behavior.\n"),
       0],
     _a$_=
      [0,
       caml_string_of_jsbytes
        ("\n  If true, causes Async to regularly check invariants of its internal\n  data structures.  This can substantially slow down your program.\n"),
       0],
     _ba_=
      [0,
       caml_string_of_jsbytes
        ("\n  By default, Async will send an exception to the toplevel monitor\n  if it detects that the thread pool is stuck for longer than this.\n"),
       0],
     _ak_=[0,caml_string_of_jsbytes("timing_wheel_config")],
     _al_=[0,caml_string_of_jsbytes("thread_pool_cpu_affinity")],
     _am_=[0,caml_string_of_jsbytes("report_thread_pool_stuck_for")],
     _an_=[0,caml_string_of_jsbytes("record_backtraces")],
     _ao_=[0,caml_string_of_jsbytes("print_debug_messages_for")],
     _ap_=[0,caml_string_of_jsbytes("min_inter_cycle_timeout")],
     _aq_=[0,caml_string_of_jsbytes("max_num_jobs_per_priority_per_cycle")],
     _ar_=[0,caml_string_of_jsbytes("max_num_threads")],
     _as_=[0,caml_string_of_jsbytes("max_num_open_file_descrs")],
     _at_=[0,caml_string_of_jsbytes("max_inter_cycle_timeout")],
     _au_=[0,caml_string_of_jsbytes("file_descr_watcher")],
     _av_=[0,caml_string_of_jsbytes("epoll_max_ready_events")],
     _aw_=[0,caml_string_of_jsbytes("dump_core_on_job_delay")],
     _ax_=[0,caml_string_of_jsbytes("detect_invalid_access_from_thread")],
     _ay_=[0,caml_string_of_jsbytes("check_invariants")],
     _az_=[0,caml_string_of_jsbytes("abort_after_thread_pool_stuck_for")],
     _aj_=[0,caml_string_of_jsbytes("config/async_kernel_config.ml"),138,0],
     _C_=[0,caml_string_of_jsbytes("Epoll_if_timerfd")],
     _D_=[0,caml_string_of_jsbytes("Epoll")],
     _E_=[0,caml_string_of_jsbytes("Select")],
     _n_=[0,caml_string_of_jsbytes("All")],
     _o_=[0,caml_string_of_jsbytes("Clock")],
     _p_=[0,caml_string_of_jsbytes("Fd")],
     _q_=[0,caml_string_of_jsbytes("File_descr_watcher")],
     _r_=[0,caml_string_of_jsbytes("Finalizers")],
     _s_=[0,caml_string_of_jsbytes("Interruptor")],
     _t_=[0,caml_string_of_jsbytes("Monitor")],
     _u_=[0,caml_string_of_jsbytes("Monitor_send_exn")],
     _v_=[0,caml_string_of_jsbytes("Parallel")],
     _w_=[0,caml_string_of_jsbytes("Reader")],
     _x_=[0,caml_string_of_jsbytes("Scheduler")],
     _y_=[0,caml_string_of_jsbytes("Shutdown")],
     _z_=[0,caml_string_of_jsbytes("Thread_pool")],
     _A_=[0,caml_string_of_jsbytes("Thread_safe")],
     _B_=[0,caml_string_of_jsbytes("Writer")],
     _l_=[0,caml_string_of_jsbytes("Watch")],
     _m_=[0,caml_string_of_jsbytes("Do_not_watch")],
     _j_=[0,caml_string_of_jsbytes("how_to_dump")],
     _k_=[0,caml_string_of_jsbytes("dump_if_delayed_by")],
     _i_=[0,caml_string_of_jsbytes("config/async_kernel_config.ml"),65,2],
     _f_=[0,caml_string_of_jsbytes("Default")],
     _g_=[0,caml_string_of_jsbytes("Call_abort")],
     _h_=[0,caml_string_of_jsbytes("Call_gcore")],
     _aA_=[0,0],
     _aC_=[0,0],
     _aD_=[0,0],
     _aK_=[0,0],
     _aM_=[0,0],
     _aN_=[0,0],
     _aO_=[0,0],
     _aQ_=[0,0,[0,1,[0,2,0]]],
     _aT_=[0,[0,2,[0,10,0]]],
     _bh_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid value for "),
        [2,0,[11,caml_string_of_jsbytes(" environment variable"),0]]],
       caml_string_of_jsbytes("invalid value for %s environment variable")],
     _bm_=
      [0,
       [2,0,[11,caml_string_of_jsbytes("\n\n"),0]],
       caml_string_of_jsbytes("%s\n\n")];
    function equal(t1,t2){return t1 === t2?1:0}
    var
     t_of_sexp$3=Core_Int[79],
     sexp_of_t$3=Core_Int[80],
     validate$3=Core_Int[112],
     Max_num_threads=
      caml_call1
       (Core_Validated[2],[0,t_of_sexp$3,sexp_of_t$3,here$3,validate$3]),
     t_of_sexp$4=Core_Int[79],
     sexp_of_t$4=Core_Int[80],
     validate$4=Core_Int[112],
     Max_num_jobs_per_priority_per_=
      caml_call1
       (Core_Validated[2],[0,t_of_sexp$4,sexp_of_t$4,here$4,validate$4]);
    function t_of_sexp$5(sexp_004)
     {if(0 === sexp_004[0])
       {var _co_=sexp_004[1],switch$0=0;
        if(caml_string_notequal(_co_,cst_Call_abort))
         {var switch$1=0;
          if(caml_string_notequal(_co_,cst_Call_gcore))
           {var switch$2=0;
            if(caml_string_notequal(_co_,cst_Default))
             if(caml_string_notequal(_co_,cst_call_abort))
              if(caml_string_notequal(_co_,cst_call_gcore))
               {if(caml_string_notequal(_co_,cst_default))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 0}
          if(! switch$1)return 2}
        if(! switch$0)return 1}
      else
       {var _cp_=sexp_004[1];
        if(! _cp_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_003,sexp_004);
        var _cq_=_cp_[1];
        if(0 !== _cq_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_003,sexp_004);
        var _cr_=_cq_[1],switch$3=0;
        if(caml_string_notequal(_cr_,cst_Call_abort$0))
         {var switch$4=0;
          if(caml_string_notequal(_cr_,cst_Call_gcore$0))
           {var switch$5=0;
            if(caml_string_notequal(_cr_,cst_Default$0))
             if(caml_string_notequal(_cr_,cst_call_abort$0))
              if(caml_string_notequal(_cr_,cst_call_gcore$0))
               {if(caml_string_notequal(_cr_,cst_default$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_003,sexp_004)}
          if(! switch$4)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003,sexp_004)}
        if(! switch$3)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_003,sexp_004)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_003,sexp_004)}
    function sexp_of_t$5(param)
     {switch(param){case 0:return _f_;case 1:return _g_;default:return _h_}}
    var How_to_dump=[0,t_of_sexp$5,sexp_of_t$5];
    function watch_of_sexp(sexp_006)
     {if(0 === sexp_006[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_019,sexp_006);
      var
       field_sexps_007=sexp_006[1],
       dump_if_delayed_by_008=[0,0],
       how_to_dump_010=[0,0],
       duplicates_012=[0,0],
       extra_013=[0,0],
       param=field_sexps_007;
      for(;;)
       {if(param)
         {var _cg_=param[1];
          if(1 === _cg_[0])
           {var _ch_=_cg_[1];
            if(_ch_)
             {var _ci_=_ch_[1];
              if(0 === _ci_[0])
               {var _cj_=_ch_[2],_ck_=_ci_[1],switch$0=0;
                if(! _cj_ || ! _cj_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_021=param[2],
                   field_sexp_015$2=
                    function(_cn_)
                     {function field_sexp_015(param)
                       {if(! _cn_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_019,sexp_006);
                        if(_cn_[2])throw [0,Assert_failure,_i_];
                        var x_022=_cn_[1];
                        return x_022}
                      return field_sexp_015},
                   field_sexp_015=field_sexp_015$2(_cj_);
                  if(caml_string_notequal(_ck_,cst_dump_if_delayed_by))
                   if(caml_string_notequal(_ck_,cst_how_to_dump))
                    {if(Sexplib0_Sexp_conv[26][1])
                      extra_013[1] = [0,_ck_,extra_013[1]]}
                   else
                    if(how_to_dump_010[1])
                     duplicates_012[1] = [0,_ck_,duplicates_012[1]];
                    else
                     {var
                       field_sexp_015$0=field_sexp_015(0),
                       fvalue_017=caml_call1(How_to_dump[1],field_sexp_015$0);
                      how_to_dump_010[1] = [0,fvalue_017]}
                  else
                   if(dump_if_delayed_by_008[1])
                    duplicates_012[1] = [0,_ck_,duplicates_012[1]];
                   else
                    {var
                      field_sexp_015$1=field_sexp_015(0),
                      fvalue_018=caml_call1(Core_Time_ns[1][9],field_sexp_015$1);
                     dump_if_delayed_by_008[1] = [0,fvalue_018]}
                  var param=tail_021;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_019,_cg_)}
        if(duplicates_012[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_019,
                  duplicates_012[1],
                  sexp_006);
        if(extra_013[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_019,
                  extra_013[1],
                  sexp_006);
        var _cl_=dump_if_delayed_by_008[1],_cm_=how_to_dump_010[1];
        if(_cl_ && _cm_)
         {var how_to_dump_011=_cm_[1],dump_if_delayed_by_009=_cl_[1];
          return [0,dump_if_delayed_by_009,how_to_dump_011]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_019,
                 sexp_006,
                 [0,
                  [0,
                   0 === dump_if_delayed_by_008[1]?1:0,
                   cst_dump_if_delayed_by$0],
                  [0,[0,0 === how_to_dump_010[1]?1:0,cst_how_to_dump$0],0]])}}
    function sexp_of_watch(param)
     {var
       how_to_dump_026=param[2],
       dump_if_delayed_by_024=param[1],
       arg_027=caml_call1(How_to_dump[2],how_to_dump_026),
       bnds_023=[0,[1,[0,_j_,[0,arg_027,0]]],0],
       arg_025=caml_call1(Core_Time_ns[1][10],dump_if_delayed_by_024),
       bnds_023$0=[0,[1,[0,_k_,[0,arg_025,0]]],bnds_023];
      return [1,bnds_023$0]}
    function t_of_sexp$6(sexp_032)
     {if(0 === sexp_032[0])
       {var _cc_=sexp_032[1],switch$0=0;
        if(caml_string_notequal(_cc_,cst_Do_not_watch))
         {var switch$1=0;
          if(caml_string_notequal(_cc_,cst_Watch))
           if(caml_string_notequal(_cc_,cst_do_not_watch))
            {if(caml_string_notequal(_cc_,cst_watch))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_030,sexp_032)}
        if(! switch$0)return 0}
      else
       {var _cd_=sexp_032[1];
        if(! _cd_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_030,sexp_032);
        var _ce_=_cd_[1];
        if(0 !== _ce_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_030,sexp_032);
        var _cf_=_ce_[1],switch$2=0;
        if(caml_string_notequal(_cf_,cst_Do_not_watch$0))
         {var switch$3=0;
          if(caml_string_notequal(_cf_,cst_Watch$0))
           if(caml_string_notequal(_cf_,cst_do_not_watch$0))
            {if(caml_string_notequal(_cf_,cst_watch$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args_034=_cd_[2];
            if(sexp_args_034 && ! sexp_args_034[2])
             {var arg0_035=sexp_args_034[1],res0_036=watch_of_sexp(arg0_035);
              return [0,res0_036]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],error_source_030,_cf_,sexp_032)}}
        if(! switch$2)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_030,sexp_032)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_030,sexp_032)}
    function sexp_of_t$6(param)
     {if(! param)return _m_;
      var arg0_037=param[1],res0_038=sexp_of_watch(arg0_037);
      return [1,[0,_l_,[0,res0_038,0]]]}
    function t_of_sexp$7(sexp_044)
     {if(0 === sexp_044[0])
       {var
         _b4_=sexp_044[1],
         _b5_=caml_string_compare(_b4_,cst_all),
         switch$0=0;
        if(0 <= _b5_)
         if(0 < _b5_)
          {var _b6_=caml_string_compare(_b4_,cst_parallel);
           if(0 <= _b6_)
            if(0 < _b6_)
             if(caml_string_notequal(_b4_,cst_reader))
              if(caml_string_notequal(_b4_,cst_scheduler))
               if(caml_string_notequal(_b4_,cst_shutdown))
                if(caml_string_notequal(_b4_,cst_thread_pool))
                 if(caml_string_notequal(_b4_,cst_thread_safe))
                  {if(! caml_string_notequal(_b4_,cst_writer))switch$0 = 15}
                 else
                  switch$0 = 14;
                else
                 switch$0 = 13;
               else
                switch$0 = 12;
              else
               switch$0 = 11;
             else
              switch$0 = 10;
            else
             switch$0 = 9;
           else
            if(caml_string_notequal(_b4_,cst_clock))
             if(caml_string_notequal(_b4_,cst_fd))
              if(caml_string_notequal(_b4_,cst_file_descr_watcher))
               if(caml_string_notequal(_b4_,cst_finalizers))
                if(caml_string_notequal(_b4_,cst_interruptor))
                 if(caml_string_notequal(_b4_,cst_monitor))
                  {if(! caml_string_notequal(_b4_,cst_monitor_send_exn))
                    switch$0 = 8}
                 else
                  switch$0 = 7;
                else
                 switch$0 = 6;
               else
                switch$0 = 5;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 2}
         else
          switch$0 = 1;
        else
         {var _b7_=caml_string_compare(_b4_,cst_Monitor_send_exn);
          if(0 <= _b7_)
           if(0 < _b7_)
            if(caml_string_notequal(_b4_,cst_Parallel))
             if(caml_string_notequal(_b4_,cst_Reader))
              if(caml_string_notequal(_b4_,cst_Scheduler))
               if(caml_string_notequal(_b4_,cst_Shutdown))
                if(caml_string_notequal(_b4_,cst_Thread_pool))
                 if(caml_string_notequal(_b4_,cst_Thread_safe))
                  {if(! caml_string_notequal(_b4_,cst_Writer))switch$0 = 15}
                 else
                  switch$0 = 14;
                else
                 switch$0 = 13;
               else
                switch$0 = 12;
              else
               switch$0 = 11;
             else
              switch$0 = 10;
            else
             switch$0 = 9;
           else
            switch$0 = 8;
          else
           if(caml_string_notequal(_b4_,cst_All))
            if(caml_string_notequal(_b4_,cst_Clock))
             if(caml_string_notequal(_b4_,cst_Fd))
              if(caml_string_notequal(_b4_,cst_File_descr_watcher))
               if(caml_string_notequal(_b4_,cst_Finalizers))
                if(caml_string_notequal(_b4_,cst_Interruptor))
                 {if(! caml_string_notequal(_b4_,cst_Monitor))switch$0 = 7}
                else
                 switch$0 = 6;
               else
                switch$0 = 5;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 2;
           else
            switch$0 = 1}
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11;
          case 13:return 12;
          case 14:return 13;
          case 15:return 14
          }}
      else
       {var _b8_=sexp_044[1];
        if(! _b8_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_043,sexp_044);
        var _b9_=_b8_[1];
        if(0 !== _b9_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_043,sexp_044);
        var _b__=_b9_[1],_b$_=caml_string_compare(_b__,cst_all$0),switch$1=0;
        if(0 <= _b$_)
         if(0 < _b$_)
          {var _ca_=caml_string_compare(_b__,cst_parallel$0);
           if(0 <= _ca_)
            if(0 < _ca_)
             if(caml_string_notequal(_b__,cst_reader$0))
              if(caml_string_notequal(_b__,cst_scheduler$0))
               if(caml_string_notequal(_b__,cst_shutdown$0))
                if(caml_string_notequal(_b__,cst_thread_pool$0))
                 if(caml_string_notequal(_b__,cst_thread_safe$0))
                  {if(! caml_string_notequal(_b__,cst_writer$0))switch$1 = 15}
                 else
                  switch$1 = 14;
                else
                 switch$1 = 13;
               else
                switch$1 = 12;
              else
               switch$1 = 11;
             else
              switch$1 = 10;
            else
             switch$1 = 9;
           else
            if(caml_string_notequal(_b__,cst_clock$0))
             if(caml_string_notequal(_b__,cst_fd$0))
              if(caml_string_notequal(_b__,cst_file_descr_watcher$0))
               if(caml_string_notequal(_b__,cst_finalizers$0))
                if(caml_string_notequal(_b__,cst_interruptor$0))
                 if(caml_string_notequal(_b__,cst_monitor$0))
                  {if(! caml_string_notequal(_b__,cst_monitor_send_exn$0))
                    switch$1 = 8}
                 else
                  switch$1 = 7;
                else
                 switch$1 = 6;
               else
                switch$1 = 5;
              else
               switch$1 = 4;
             else
              switch$1 = 3;
            else
             switch$1 = 2}
         else
          switch$1 = 1;
        else
         {var _cb_=caml_string_compare(_b__,cst_Monitor_send_exn$0);
          if(0 <= _cb_)
           if(0 < _cb_)
            if(caml_string_notequal(_b__,cst_Parallel$0))
             if(caml_string_notequal(_b__,cst_Reader$0))
              if(caml_string_notequal(_b__,cst_Scheduler$0))
               if(caml_string_notequal(_b__,cst_Shutdown$0))
                if(caml_string_notequal(_b__,cst_Thread_pool$0))
                 if(caml_string_notequal(_b__,cst_Thread_safe$0))
                  {if(! caml_string_notequal(_b__,cst_Writer$0))switch$1 = 15}
                 else
                  switch$1 = 14;
                else
                 switch$1 = 13;
               else
                switch$1 = 12;
              else
               switch$1 = 11;
             else
              switch$1 = 10;
            else
             switch$1 = 9;
           else
            switch$1 = 8;
          else
           if(caml_string_notequal(_b__,cst_All$0))
            if(caml_string_notequal(_b__,cst_Clock$0))
             if(caml_string_notequal(_b__,cst_Fd$0))
              if(caml_string_notequal(_b__,cst_File_descr_watcher$0))
               if(caml_string_notequal(_b__,cst_Finalizers$0))
                if(caml_string_notequal(_b__,cst_Interruptor$0))
                 {if(! caml_string_notequal(_b__,cst_Monitor$0))switch$1 = 7}
                else
                 switch$1 = 6;
               else
                switch$1 = 5;
              else
               switch$1 = 4;
             else
              switch$1 = 3;
            else
             switch$1 = 2;
           else
            switch$1 = 1}
        switch(switch$1)
         {case 1:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 2:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 3:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 4:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 5:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 6:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 7:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 8:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 9:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 10:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 11:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 12:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 13:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 14:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044);
          case 15:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_043,sexp_044)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_043,sexp_044)}
    function sexp_of_t$7(param)
     {switch(param)
       {case 0:return _n_;
        case 1:return _o_;
        case 2:return _p_;
        case 3:return _q_;
        case 4:return _r_;
        case 5:return _s_;
        case 6:return _t_;
        case 7:return _u_;
        case 8:return _v_;
        case 9:return _w_;
        case 10:return _x_;
        case 11:return _y_;
        case 12:return _z_;
        case 13:return _A_;
        default:return _B_}}
    function equal$0(x_045,x_046)
     {var match=runtime.caml_int_compare(x_045,x_046);return 0 === match?1:0}
    var
     include$2=caml_call1(Core_Sexpable[1],[0,t_of_sexp$7,sexp_of_t$7]),
     to_string=include$2[2];
    function t_of_sexp$8(sexp_052)
     {if(0 === sexp_052[0])
       {var _b0_=sexp_052[1],switch$0=0;
        if(caml_string_notequal(_b0_,cst_Epoll))
         {var switch$1=0;
          if(caml_string_notequal(_b0_,cst_Epoll_if_timerfd))
           {var switch$2=0;
            if(caml_string_notequal(_b0_,cst_Select))
             if(caml_string_notequal(_b0_,cst_epoll))
              if(caml_string_notequal(_b0_,cst_epoll_if_timerfd))
               {if(caml_string_notequal(_b0_,cst_select))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 2}
          if(! switch$1)return 0}
        if(! switch$0)return 1}
      else
       {var _b1_=sexp_052[1];
        if(! _b1_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_051,sexp_052);
        var _b2_=_b1_[1];
        if(0 !== _b2_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_051,sexp_052);
        var _b3_=_b2_[1],switch$3=0;
        if(caml_string_notequal(_b3_,cst_Epoll$0))
         {var switch$4=0;
          if(caml_string_notequal(_b3_,cst_Epoll_if_timerfd$0))
           {var switch$5=0;
            if(caml_string_notequal(_b3_,cst_Select$0))
             if(caml_string_notequal(_b3_,cst_epoll$0))
              if(caml_string_notequal(_b3_,cst_epoll_if_timerfd$0))
               {if(caml_string_notequal(_b3_,cst_select$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_051,sexp_052)}
          if(! switch$4)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_051,sexp_052)}
        if(! switch$3)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_051,sexp_052)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_051,sexp_052)}
    function sexp_of_t$8(param)
     {switch(param){case 0:return _C_;case 1:return _D_;default:return _E_}}
    var
     T=[0,t_of_sexp$8,sexp_of_t$8],
     t_of_sexp$9=T[1],
     sexp_of_t$9=T[2],
     include$3=caml_call1(Core_Sexpable[1],T),
     to_string$0=include$3[2];
    function timing_wheel_config(r){return r[16]}
    function thread_pool_cpu_affinity(r){return r[15]}
    function report_thread_pool_stuck_for(r){return r[14]}
    function record_backtraces(r){return r[13]}
    function print_debug_messages_for(r){return r[12]}
    function min_inter_cycle_timeout(r){return r[11]}
    function max_num_jobs_per_priority_per_(r){return r[10]}
    function max_num_threads(r){return r[9]}
    function max_num_open_file_descrs(r){return r[8]}
    function max_inter_cycle_timeout(r){return r[7]}
    function file_descr_watcher(r){return r[6]}
    function epoll_max_ready_events(r){return r[5]}
    function dump_core_on_job_delay(r){return r[4]}
    function detect_invalid_access_from_thr(r){return r[3]}
    function check_invariants(r){return r[2]}
    function abort_after_thread_pool_stuck_(r){return r[1]}
    function _F_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v]}
    var
     _G_=0,
     timing_wheel_config$0=
      [0,
       function(param){return 0},
       cst_timing_wheel_config,
       _G_,
       timing_wheel_config,
       _F_];
    function _H_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16]]}
    var
     _I_=0,
     thread_pool_cpu_affinity$0=
      [0,
       function(param){return 0},
       cst_thread_pool_cpu_affinity,
       _I_,
       thread_pool_cpu_affinity,
       _H_];
    function _J_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16]]}
    var
     _K_=0,
     report_thread_pool_stuck_for$0=
      [0,
       function(param){return 0},
       cst_report_thread_pool_stuck_f,
       _K_,
       report_thread_pool_stuck_for,
       _J_];
    function _L_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16]]}
    var
     _M_=0,
     record_backtraces$0=
      [0,
       function(param){return 0},
       cst_record_backtraces,
       _M_,
       record_backtraces,
       _L_];
    function _N_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _O_=0,
     print_debug_messages_for$0=
      [0,
       function(param){return 0},
       cst_print_debug_messages_for,
       _O_,
       print_debug_messages_for,
       _N_];
    function _P_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Q_=0,
     min_inter_cycle_timeout$0=
      [0,
       function(param){return 0},
       cst_min_inter_cycle_timeout,
       _Q_,
       min_inter_cycle_timeout,
       _P_];
    function _R_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _S_=0,
     max_num_jobs_per_priority_per_$0=
      [0,
       function(param){return 0},
       cst_max_num_jobs_per_priority_,
       _S_,
       max_num_jobs_per_priority_per_,
       _R_];
    function _T_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _U_=0,
     max_num_threads$0=
      [0,
       function(param){return 0},
       cst_max_num_threads,
       _U_,
       max_num_threads,
       _T_];
    function _V_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _W_=0,
     max_num_open_file_descrs$0=
      [0,
       function(param){return 0},
       cst_max_num_open_file_descrs,
       _W_,
       max_num_open_file_descrs,
       _V_];
    function _X_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Y_=0,
     max_inter_cycle_timeout$0=
      [0,
       function(param){return 0},
       cst_max_inter_cycle_timeout,
       _Y_,
       max_inter_cycle_timeout,
       _X_];
    function _Z_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     ___=0,
     file_descr_watcher$0=
      [0,
       function(param){return 0},
       cst_file_descr_watcher$1,
       ___,
       file_descr_watcher,
       _Z_];
    function _$_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _aa_=0,
     epoll_max_ready_events$0=
      [0,
       function(param){return 0},
       cst_epoll_max_ready_events,
       _aa_,
       epoll_max_ready_events,
       _$_];
    function _ab_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ac_=0,
     dump_core_on_job_delay$0=
      [0,
       function(param){return 0},
       cst_dump_core_on_job_delay,
       _ac_,
       dump_core_on_job_delay,
       _ab_];
    function _ad_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ae_=0,
     detect_invalid_access_from_thr$0=
      [0,
       function(param){return 0},
       cst_detect_invalid_access_from,
       _ae_,
       detect_invalid_access_from_thr,
       _ad_];
    function _af_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ag_=0,
     check_invariants$0=
      [0,
       function(param){return 0},
       cst_check_invariants,
       _ag_,
       check_invariants,
       _af_];
    function _ah_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ai_=0,
     abort_after_thread_pool_stuck_$0=
      [0,
       function(param){return 0},
       cst_abort_after_thread_pool_st,
       _ai_,
       abort_after_thread_pool_stuck_,
       _ah_];
    function sexp_of_t$10(param)
     {var
       timing_wheel_config_174=param[16],
       thread_pool_cpu_affinity_170=param[15],
       report_thread_pool_stuck_for_1=param[14],
       record_backtraces_162=param[13],
       print_debug_messages_for_158=param[12],
       min_inter_cycle_timeout_154=param[11],
       max_num_jobs_per_priority_per_=param[10],
       max_num_threads_146=param[9],
       max_num_open_file_descrs_142=param[8],
       max_inter_cycle_timeout_138=param[7],
       file_descr_watcher_134=param[6],
       epoll_max_ready_events_130=param[5],
       dump_core_on_job_delay_126=param[4],
       detect_invalid_access_from_thr=param[3],
       check_invariants_118=param[2],
       abort_after_thread_pool_stuck_=param[1],
       bnds_113=0;
      if(timing_wheel_config_174)
       var
        v_175=timing_wheel_config_174[1],
        arg_177=caml_call1(Timing_wheel[8][2],v_175),
        bnd_176=[1,[0,_ak_,[0,arg_177,0]]],
        bnds_113$0=[0,bnd_176,bnds_113];
      else
       var bnds_113$0=bnds_113;
      if(thread_pool_cpu_affinity_170)
       var
        v_171=thread_pool_cpu_affinity_170[1],
        arg_173=caml_call1(Thread_pool_cpu_affinity[3],v_171),
        bnd_172=[1,[0,_al_,[0,arg_173,0]]],
        bnds_113$1=[0,bnd_172,bnds_113$0];
      else
       var bnds_113$1=bnds_113$0;
      if(report_thread_pool_stuck_for_1)
       var
        v_167=report_thread_pool_stuck_for_1[1],
        arg_169=caml_call1(Core_Time_ns[1][10],v_167),
        bnd_168=[1,[0,_am_,[0,arg_169,0]]],
        bnds_113$2=[0,bnd_168,bnds_113$1];
      else
       var bnds_113$2=bnds_113$1;
      if(record_backtraces_162)
       var
        v_163=record_backtraces_162[1],
        arg_165=caml_call1(Core[305],v_163),
        bnd_164=[1,[0,_an_,[0,arg_165,0]]],
        bnds_113$3=[0,bnd_164,bnds_113$2];
      else
       var bnds_113$3=bnds_113$2;
      if(print_debug_messages_for_158)
       var
        v_159=print_debug_messages_for_158[1],
        arg_161=caml_call2(Core[421],sexp_of_t$7,v_159),
        bnd_160=[1,[0,_ao_,[0,arg_161,0]]],
        bnds_113$4=[0,bnd_160,bnds_113$3];
      else
       var bnds_113$4=bnds_113$3;
      if(min_inter_cycle_timeout_154)
       var
        v_155=min_inter_cycle_timeout_154[1],
        arg_157=caml_call1(Min_inter_cycle_timeout[2],v_155),
        bnd_156=[1,[0,_ap_,[0,arg_157,0]]],
        bnds_113$5=[0,bnd_156,bnds_113$4];
      else
       var bnds_113$5=bnds_113$4;
      if(max_num_jobs_per_priority_per_)
       var
        v_151=max_num_jobs_per_priority_per_[1],
        arg_153=caml_call1(Max_num_jobs_per_priority_per_[2],v_151),
        bnd_152=[1,[0,_aq_,[0,arg_153,0]]],
        bnds_113$6=[0,bnd_152,bnds_113$5];
      else
       var bnds_113$6=bnds_113$5;
      if(max_num_threads_146)
       var
        v_147=max_num_threads_146[1],
        arg_149=caml_call1(Max_num_threads[2],v_147),
        bnd_148=[1,[0,_ar_,[0,arg_149,0]]],
        bnds_113$7=[0,bnd_148,bnds_113$6];
      else
       var bnds_113$7=bnds_113$6;
      if(max_num_open_file_descrs_142)
       var
        v_143=max_num_open_file_descrs_142[1],
        arg_145=caml_call1(_b_,v_143),
        bnd_144=[1,[0,_as_,[0,arg_145,0]]],
        bnds_113$8=[0,bnd_144,bnds_113$7];
      else
       var bnds_113$8=bnds_113$7;
      if(max_inter_cycle_timeout_138)
       var
        v_139=max_inter_cycle_timeout_138[1],
        arg_141=caml_call1(Max_inter_cycle_timeout[2],v_139),
        bnd_140=[1,[0,_at_,[0,arg_141,0]]],
        bnds_113$9=[0,bnd_140,bnds_113$8];
      else
       var bnds_113$9=bnds_113$8;
      if(file_descr_watcher_134)
       var
        v_135=file_descr_watcher_134[1],
        arg_137=caml_call1(sexp_of_t$9,v_135),
        bnd_136=[1,[0,_au_,[0,arg_137,0]]],
        bnds_113$10=[0,bnd_136,bnds_113$9];
      else
       var bnds_113$10=bnds_113$9;
      if(epoll_max_ready_events_130)
       var
        v_131=epoll_max_ready_events_130[1],
        arg_133=caml_call1(Epoll_max_ready_events[2],v_131),
        bnd_132=[1,[0,_av_,[0,arg_133,0]]],
        bnds_113$11=[0,bnd_132,bnds_113$10];
      else
       var bnds_113$11=bnds_113$10;
      if(dump_core_on_job_delay_126)
       var
        v_127=dump_core_on_job_delay_126[1],
        arg_129=sexp_of_t$6(v_127),
        bnd_128=[1,[0,_aw_,[0,arg_129,0]]],
        bnds_113$12=[0,bnd_128,bnds_113$11];
      else
       var bnds_113$12=bnds_113$11;
      if(detect_invalid_access_from_thr)
       var
        v_123=detect_invalid_access_from_thr[1],
        arg_125=caml_call1(Core[305],v_123),
        bnd_124=[1,[0,_ax_,[0,arg_125,0]]],
        bnds_113$13=[0,bnd_124,bnds_113$12];
      else
       var bnds_113$13=bnds_113$12;
      if(check_invariants_118)
       var
        v_119=check_invariants_118[1],
        arg_121=caml_call1(Core[305],v_119),
        bnd_120=[1,[0,_ay_,[0,arg_121,0]]],
        bnds_113$14=[0,bnd_120,bnds_113$13];
      else
       var bnds_113$14=bnds_113$13;
      if(abort_after_thread_pool_stuck_)
       var
        v_115=abort_after_thread_pool_stuck_[1],
        arg_117=caml_call1(Core_Time_ns[1][10],v_115),
        bnd_116=[1,[0,_az_,[0,arg_117,0]]],
        bnds_113$15=[0,bnd_116,bnds_113$14];
      else
       var bnds_113$15=bnds_113$14;
      return [1,bnds_113$15]}
    function create
     (abort_after_thread_pool_stuck_,
      check_invariants,
      detect_invalid_access_from_thr,
      dump_core_on_job_delay,
      epoll_max_ready_events,
      file_descr_watcher,
      max_inter_cycle_timeout,
      max_num_open_file_descrs,
      max_num_threads,
      max_num_jobs_per_priority_per_,
      min_inter_cycle_timeout,
      print_debug_messages_for,
      record_backtraces,
      report_thread_pool_stuck_for,
      thread_pool_cpu_affinity,
      timing_wheel_config,
      param)
     {return [0,
              abort_after_thread_pool_stuck_,
              check_invariants,
              detect_invalid_access_from_thr,
              dump_core_on_job_delay,
              epoll_max_ready_events,
              file_descr_watcher,
              max_inter_cycle_timeout,
              max_num_open_file_descrs,
              max_num_threads,
              max_num_jobs_per_priority_per_,
              min_inter_cycle_timeout,
              print_debug_messages_for,
              record_backtraces,
              report_thread_pool_stuck_for,
              thread_pool_cpu_affinity,
              timing_wheel_config]}
    function default_timing_wheel_config_fo(word_size)
     {if(word_size)
       var
        level_bits$1=level_bits,
        alarm_precision=caml_call2(Timing_wheel[1][13],Timing_wheel[1][10],3);
      else
       var
        alarm_precision$0=Timing_wheel[1][10],
        level_bits$1=level_bits$0,
        alarm_precision=alarm_precision$0;
      var _bZ_=[0,caml_call2(Timing_wheel[7][5],0,level_bits$1)];
      return caml_call4(Timing_wheel[8][4],0,_bZ_,alarm_precision,0)}
    var
     default_timing_wheel_config=
      default_timing_wheel_config_fo(Base_Word_size[3]),
     _aB_=[0,caml_call1(sec,1.)],
     _aE_=caml_call1(sec,0.),
     _aF_=[0,caml_call1(Min_inter_cycle_timeout[4],_aE_)],
     _aG_=[0,caml_call1(Max_num_jobs_per_priority_per_[4],500)],
     _aH_=[0,caml_call1(Max_num_threads[4],50)],
     _aI_=caml_call1(sec,0.05),
     _aJ_=[0,caml_call1(Max_inter_cycle_timeout[4],_aI_)],
     _aL_=[0,caml_call1(Epoll_max_ready_events[4],256)],
     default$1=
      [0,
       [0,caml_call1(sec,60.)],
       _aO_,
       _aN_,
       _aM_,
       _aL_,
       _aK_,
       _aJ_,
       [0,default$0],
       _aH_,
       _aG_,
       _aF_,
       _aD_,
       _aC_,
       _aB_,
       _aA_,
       [0,default_timing_wheel_config]],
     _aP_=default$1[16],
     _aR_=caml_call1(Core_Int[102][57],_aQ_),
     _aS_=[0,[0,caml_call1(Thread_pool_cpu_affinity[1][4],_aR_)]],
     example=
      [0,
       default$1[1],
       default$1[2],
       default$1[3],
       default$1[4],
       default$1[5],
       default$1[6],
       default$1[7],
       default$1[8],
       default$1[9],
       default$1[10],
       default$1[11],
       _aT_,
       default$1[13],
       default$1[14],
       _aS_,
       _aP_];
    function usage(param)
     {var _bQ_=0;
      function field(to_sexp,description,ac,field)
       {var
         _bX_=caml_call2(Base_Field[3],field,default$1),
         _bY_=caml_call1(to_sexp,caml_call4(Core_Option[35],0,0,0,_bX_));
        return [0,[0,caml_call1(Base_Field[2],field),_bY_,description],ac]}
      var
       _bx_=Timing_wheel[8][2],
       _by_=Thread_pool_cpu_affinity[3],
       _bz_=Core_Time_ns[1][10],
       _bA_=Core[305];
      function _bB_(d)
       {return caml_call2(concat,0,[0,cst$0,[0,caml_call1(to_string,d),_aZ_]])}
      var
       _bC_=
        [0,
         cst_A_list_of_tags_specifying_,
         [0,caml_call2(concat,0,caml_call2(Core_List[72],list,_bB_)),_aY_]];
      function _bD_(x_178){return caml_call2(Core[421],sexp_of_t$7,x_178)}
      var
       _bE_=Min_inter_cycle_timeout[2],
       _bF_=Max_num_jobs_per_priority_per_[2],
       _bG_=Max_num_threads[2];
      function _bH_(default$0)
       {var
         _bV_=caml_call1(_e_,default$0),
         _bW_=
          caml_call2
           (concat,0,[0,cst_min,[0,caml_call2(Core_Int[12],0,_bV_),_a4_]]);
        return caml_call1(Core[471],_bW_)}
      var
       _bI_=Max_inter_cycle_timeout[2],
       _bJ_=
        [0,
         cst_This_determines_what_OS_su,
         [0,
          caml_call2(concat,_a7_,caml_call2(Core_List[72],list$0,to_string$0)),
          _a6_]],
       _bK_=Epoll_max_ready_events[2],
       _bL_=Core[305],
       _bM_=Core[305],
       fields=
        field
         (_bx_,
          _aU_,
          field
           (_by_,
            _aV_,
            field
             (_bz_,
              _aW_,
              field
               (_bA_,
                _aX_,
                field
                 (_bD_,
                  _bC_,
                  field
                   (_bE_,
                    _a0_,
                    field
                     (_bF_,
                      _a1_,
                      field
                       (_bG_,
                        _a2_,
                        field
                         (_bH_,
                          _a3_,
                          field
                           (_bI_,
                            _a5_,
                            field
                             (sexp_of_t$9,
                              _bJ_,
                              field
                               (_bK_,
                                _a8_,
                                field
                                 (sexp_of_t$6,
                                  _a9_,
                                  field
                                   (_bL_,
                                    _a__,
                                    field
                                     (_bM_,
                                      _a$_,
                                      field
                                       (Core_Time_ns[1][10],
                                        _ba_,
                                        0,
                                        abort_after_thread_pool_stuck_$0),
                                      check_invariants$0),
                                    detect_invalid_access_from_thr$0),
                                  dump_core_on_job_delay$0),
                                epoll_max_ready_events$0),
                              file_descr_watcher$0),
                            max_inter_cycle_timeout$0),
                          max_num_open_file_descrs$0),
                        max_num_threads$0),
                      max_num_jobs_per_priority_per_$0),
                    min_inter_cycle_timeout$0),
                  print_debug_messages_for$0),
                record_backtraces$0),
              report_thread_pool_stuck_for$0),
            thread_pool_cpu_affinity$0),
          timing_wheel_config$0);
      function _bN_(param)
       {var description=param[3],default$0=param[2],name=param[1];
        return caml_call2
                (concat,
                 0,
                 [0,
                  cst$2,
                  [0,
                   name,
                   [0,
                    cst_default$1,
                    [0,
                     caml_call1(Core_Sexp[83],default$0),
                     [0,cst$1,description]]]]])}
      function _bO_(param,_bU_)
       {var name2=_bU_[1],name1=param[1];
        return caml_call2(Core_String[127],name1,name2)}
      var
       _bP_=caml_call2(Core_List[58],fields,_bO_),
       _bR_=
        [0,
         cst_Here_is_an_explanation_of_,
         [0,caml_call2(concat,0,caml_call2(Core_List[72],_bP_,_bN_)),_bQ_]],
       _bS_=sexp_of_t$10(example),
       _bT_=
        caml_call2
         (concat,
          0,
          [0,
           cst_The,
           [0,
            environment_variable,
            [0,
             cst_environment_variable_affec,
             [0,caml_call2(Core_Sexp[81],0,_bS_),_bR_]]]]);
      caml_call2(Core[231],_bb_,_bT_);
      return caml_call1(Core[83],1)}
    function _bc_(param){return runtime.caml_sys_getenv(environment_variable)}
    var match=caml_call1(Core_Option[51],_bc_);
    if(match)
     {var _bd_=match[1];
      if(caml_string_notequal(_bd_,cst$3))
       {var
         _be_=
          function(param)
           {var sexp_054=caml_call1(Core_Sexp[73],_bd_);
            if(0 === sexp_054[0])
             return caml_call2
                     (Sexplib0_Sexp_conv_error[16],error_source_112,sexp_054);
            var
             field_sexps_055=sexp_054[1],
             abort_after_thread_pool_stuck_=[0,0],
             check_invariants_058=[0,0],
             detect_invalid_access_from_thr=[0,0],
             dump_core_on_job_delay_062=[0,0],
             epoll_max_ready_events_064=[0,0],
             file_descr_watcher_066=[0,0],
             max_inter_cycle_timeout_068=[0,0],
             max_num_open_file_descrs_070=[0,0],
             max_num_threads_072=[0,0],
             max_num_jobs_per_priority_per_=[0,0],
             min_inter_cycle_timeout_076=[0,0],
             print_debug_messages_for_078=[0,0],
             record_backtraces_080=[0,0],
             report_thread_pool_stuck_for_0=[0,0],
             thread_pool_cpu_affinity_084=[0,0],
             timing_wheel_config_086=[0,0],
             duplicates_088=[0,0],
             extra_089=[0,0];
            function iter_109(param)
             {var param$0=param;
              for(;;)
               {if(! param$0)return 0;
                var _br_=param$0[1];
                if(1 === _br_[0])
                 {var _bs_=_br_[1];
                  if(_bs_)
                   {var _bt_=_bs_[1];
                    if(0 === _bt_[0])
                     {var _bu_=_bs_[2],_bv_=_bt_[1],switch$1=0;
                      if(! _bu_ || ! _bu_[2])switch$1 = 1;
                      if(switch$1)
                       {var
                         tail_110=param$0[2],
                         field_sexp_091$16=
                          function(_bw_)
                           {function field_sexp_091(param)
                             {if(! _bw_)
                               return caml_call2
                                       (Sexplib0_Sexp_conv_error[10],error_source_112,sexp_054);
                              if(_bw_[2])throw [0,Assert_failure,_aj_];
                              var x_111=_bw_[1];
                              return x_111}
                            return field_sexp_091},
                         field_sexp_091=field_sexp_091$16(_bu_),
                         switch$0=
                          caml_string_compare(_bv_,cst_max_num_open_file_descrs$0),
                         switch$2=0;
                        if(0 <= switch$0)
                         if(0 < switch$0)
                          if(caml_string_notequal(_bv_,cst_max_num_threads$0))
                           if(caml_string_notequal(_bv_,cst_min_inter_cycle_timeout$0))
                            if
                             (caml_string_notequal(_bv_,cst_print_debug_messages_for$0))
                             if(caml_string_notequal(_bv_,cst_record_backtraces$0))
                              if
                               (caml_string_notequal(_bv_,cst_report_thread_pool_stuck_f$0))
                               if
                                (caml_string_notequal(_bv_,cst_thread_pool_cpu_affinity$0))
                                if(caml_string_notequal(_bv_,cst_timing_wheel_config$0))
                                 switch$2 = 1;
                                else
                                 if(timing_wheel_config_086[1])
                                  duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                                 else
                                  {var
                                    field_sexp_091$0=field_sexp_091(0),
                                    fvalue_093=caml_call1(Timing_wheel[8][1],field_sexp_091$0);
                                   timing_wheel_config_086[1] = [0,fvalue_093]}
                               else
                                if(thread_pool_cpu_affinity_084[1])
                                 duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                                else
                                 {var
                                   field_sexp_091$1=field_sexp_091(0),
                                   fvalue_094=
                                    caml_call1(Thread_pool_cpu_affinity[2],field_sexp_091$1);
                                  thread_pool_cpu_affinity_084[1] = [0,fvalue_094]}
                              else
                               if(report_thread_pool_stuck_for_0[1])
                                duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                               else
                                {var
                                  field_sexp_091$2=field_sexp_091(0),
                                  fvalue_095=caml_call1(Core_Time_ns[1][9],field_sexp_091$2);
                                 report_thread_pool_stuck_for_0[1] = [0,fvalue_095]}
                             else
                              if(record_backtraces_080[1])
                               duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                              else
                               {var
                                 field_sexp_091$3=field_sexp_091(0),
                                 fvalue_096=caml_call1(Core[306],field_sexp_091$3);
                                record_backtraces_080[1] = [0,fvalue_096]}
                            else
                             if(print_debug_messages_for_078[1])
                              duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                             else
                              {var
                                field_sexp_091$4=field_sexp_091(0),
                                fvalue_097=
                                 caml_call2(Core[422],t_of_sexp$7,field_sexp_091$4);
                               print_debug_messages_for_078[1] = [0,fvalue_097]}
                           else
                            if(min_inter_cycle_timeout_076[1])
                             duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                            else
                             {var
                               field_sexp_091$5=field_sexp_091(0),
                               fvalue_098=
                                caml_call1(Min_inter_cycle_timeout[1],field_sexp_091$5);
                              min_inter_cycle_timeout_076[1] = [0,fvalue_098]}
                          else
                           if(max_num_threads_072[1])
                            duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                           else
                            {var
                              field_sexp_091$6=field_sexp_091(0),
                              fvalue_100=caml_call1(Max_num_threads[1],field_sexp_091$6);
                             max_num_threads_072[1] = [0,fvalue_100]}
                         else
                          if(max_num_open_file_descrs_070[1])
                           duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                          else
                           {var
                             field_sexp_091$7=field_sexp_091(0),
                             fvalue_101=caml_call1(_a_,field_sexp_091$7);
                            max_num_open_file_descrs_070[1] = [0,fvalue_101]}
                        else
                         if
                          (caml_string_notequal(_bv_,cst_abort_after_thread_pool_st$0))
                          if(caml_string_notequal(_bv_,cst_check_invariants$0))
                           if
                            (caml_string_notequal(_bv_,cst_detect_invalid_access_from$0))
                            if(caml_string_notequal(_bv_,cst_dump_core_on_job_delay$0))
                             if(caml_string_notequal(_bv_,cst_epoll_max_ready_events$0))
                              if(caml_string_notequal(_bv_,cst_file_descr_watcher$2))
                               if(caml_string_notequal(_bv_,cst_max_inter_cycle_timeout$0))
                                if
                                 (caml_string_notequal(_bv_,cst_max_num_jobs_per_priority_$0))
                                 switch$2 = 1;
                                else
                                 if(max_num_jobs_per_priority_per_[1])
                                  duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                                 else
                                  {var
                                    field_sexp_091$8=field_sexp_091(0),
                                    fvalue_099=
                                     caml_call1
                                      (Max_num_jobs_per_priority_per_[1],field_sexp_091$8);
                                   max_num_jobs_per_priority_per_[1] = [0,fvalue_099]}
                               else
                                if(max_inter_cycle_timeout_068[1])
                                 duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                                else
                                 {var
                                   field_sexp_091$9=field_sexp_091(0),
                                   fvalue_102=
                                    caml_call1(Max_inter_cycle_timeout[1],field_sexp_091$9);
                                  max_inter_cycle_timeout_068[1] = [0,fvalue_102]}
                              else
                               if(file_descr_watcher_066[1])
                                duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                               else
                                {var
                                  field_sexp_091$10=field_sexp_091(0),
                                  fvalue_103=caml_call1(t_of_sexp$9,field_sexp_091$10);
                                 file_descr_watcher_066[1] = [0,fvalue_103]}
                             else
                              if(epoll_max_ready_events_064[1])
                               duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                              else
                               {var
                                 field_sexp_091$11=field_sexp_091(0),
                                 fvalue_104=
                                  caml_call1(Epoll_max_ready_events[1],field_sexp_091$11);
                                epoll_max_ready_events_064[1] = [0,fvalue_104]}
                            else
                             if(dump_core_on_job_delay_062[1])
                              duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                             else
                              {var
                                field_sexp_091$12=field_sexp_091(0),
                                fvalue_105=t_of_sexp$6(field_sexp_091$12);
                               dump_core_on_job_delay_062[1] = [0,fvalue_105]}
                           else
                            if(detect_invalid_access_from_thr[1])
                             duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                            else
                             {var
                               field_sexp_091$13=field_sexp_091(0),
                               fvalue_106=caml_call1(Core[306],field_sexp_091$13);
                              detect_invalid_access_from_thr[1] = [0,fvalue_106]}
                          else
                           if(check_invariants_058[1])
                            duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                           else
                            {var
                              field_sexp_091$14=field_sexp_091(0),
                              fvalue_107=caml_call1(Core[306],field_sexp_091$14);
                             check_invariants_058[1] = [0,fvalue_107]}
                         else
                          if(abort_after_thread_pool_stuck_[1])
                           duplicates_088[1] = [0,_bv_,duplicates_088[1]];
                          else
                           {var
                             field_sexp_091$15=field_sexp_091(0),
                             fvalue_108=caml_call1(Core_Time_ns[1][9],field_sexp_091$15);
                            abort_after_thread_pool_stuck_[1] = [0,fvalue_108]}
                        if(switch$2 && Sexplib0_Sexp_conv[26][1])
                         extra_089[1] = [0,_bv_,extra_089[1]];
                        var param$0=tail_110;
                        continue}}}}
                return caml_call2
                        (Sexplib0_Sexp_conv_error[10],error_source_112,_br_)}}
            iter_109(field_sexps_055);
            if(duplicates_088[1])
             return caml_call3
                     (Sexplib0_Sexp_conv_error[12],
                      error_source_112,
                      duplicates_088[1],
                      sexp_054);
            if(extra_089[1])
             return caml_call3
                     (Sexplib0_Sexp_conv_error[13],
                      error_source_112,
                      extra_089[1],
                      sexp_054);
            var
             abort_after_thread_pool_stuck_$0=
              abort_after_thread_pool_stuck_[1],
             check_invariants_059=check_invariants_058[1],
             detect_invalid_access_from_thr$0=
              detect_invalid_access_from_thr[1],
             dump_core_on_job_delay_063=dump_core_on_job_delay_062[1],
             epoll_max_ready_events_065=epoll_max_ready_events_064[1],
             file_descr_watcher_067=file_descr_watcher_066[1],
             max_inter_cycle_timeout_069=max_inter_cycle_timeout_068[1],
             max_num_open_file_descrs_071=max_num_open_file_descrs_070[1],
             max_num_threads_073=max_num_threads_072[1],
             max_num_jobs_per_priority_per_$0=
              max_num_jobs_per_priority_per_[1],
             min_inter_cycle_timeout_077=min_inter_cycle_timeout_076[1],
             print_debug_messages_for_079=print_debug_messages_for_078[1],
             record_backtraces_081=record_backtraces_080[1],
             report_thread_pool_stuck_for_0$0=
              report_thread_pool_stuck_for_0[1],
             thread_pool_cpu_affinity_085=thread_pool_cpu_affinity_084[1],
             match=timing_wheel_config_086[1];
            return [0,
                    abort_after_thread_pool_stuck_$0,
                    check_invariants_059,
                    detect_invalid_access_from_thr$0,
                    dump_core_on_job_delay_063,
                    epoll_max_ready_events_065,
                    file_descr_watcher_067,
                    max_inter_cycle_timeout_069,
                    max_num_open_file_descrs_071,
                    max_num_threads_073,
                    max_num_jobs_per_priority_per_$0,
                    min_inter_cycle_timeout_077,
                    print_debug_messages_for_079,
                    record_backtraces_081,
                    report_thread_pool_stuck_for_0$0,
                    thread_pool_cpu_affinity_085,
                    match]},
         match$0=caml_call1(Core_Result[47],_be_);
        if(0 === match$0[0])
         var t=match$0[1],t$0=t;
        else
         {var
           exn=match$0[1],
           _bg_=Core[537],
           _bi_=caml_call2(Core[257],_bh_,environment_variable),
           _bj_=caml_call5(Core_Error[17],0,0,_bi_,exn,_bg_),
           _bk_=caml_call1(Core_Error[6],_bj_),
           _bl_=caml_call2(Core_Sexp[81],0,_bk_);
          caml_call2(Core[231],_bm_,_bl_);
          var t$0=usage(0)}
        var t$1=t$0}
      else
       var t$1=usage(0);
      var t$2=t$1}
    else
     var t$2=empty;
    function print_debug_messages_for$1(tag)
     {var _bq_=t$2[12];
      if(! _bq_)return 0;
      var l=_bq_[1];
      return caml_call3(Core_List[6],l,tag,equal$0)}
    var all=print_debug_messages_for$1(0);
    function debug(tag){return all?all:print_debug_messages_for$1(tag)}
    var
     clock=debug(1),
     fd=debug(2),
     file_descr_watcher$1=debug(3),
     finalizers=debug(4),
     interruptor=debug(5),
     monitor=debug(6),
     monitor_send_exn=debug(7),
     parallel=debug(8),
     reader=debug(9),
     scheduler=debug(10),
     shutdown=debug(11),
     thread_pool=debug(12),
     thread_safe=debug(13),
     writer=debug(14);
    function symbol(field)
     {var
       _bn_=caml_call2(Base_Field[3],field,default$1),
       _bo_=caml_call4(Core_Option[35],0,0,0,_bn_),
       _bp_=caml_call2(Base_Field[3],field,t$2);
      return caml_call2(Core_Option[34],_bp_,_bo_)}
    var
     abort_after_thread_pool_stuck_$1=symbol(abort_after_thread_pool_stuck_$0),
     check_invariants$1=symbol(check_invariants$0),
     detect_invalid_access_from_thr$1=symbol(detect_invalid_access_from_thr$0),
     epoll_max_ready_events$1=symbol(epoll_max_ready_events$0),
     thread_pool_cpu_affinity$1=symbol(thread_pool_cpu_affinity$0),
     file_descr_watcher$2=symbol(file_descr_watcher$0),
     max_inter_cycle_timeout$1=symbol(max_inter_cycle_timeout$0),
     max_num_open_file_descrs$1=symbol(max_num_open_file_descrs$0),
     max_num_threads$1=symbol(max_num_threads$0),
     max_num_jobs_per_priority_per_$1=symbol(max_num_jobs_per_priority_per_$0),
     min_inter_cycle_timeout$1=symbol(min_inter_cycle_timeout$0),
     record_backtraces$1=symbol(record_backtraces$0),
     report_thread_pool_stuck_for$1=symbol(report_thread_pool_stuck_for$0),
     timing_wheel_config$1=symbol(timing_wheel_config$0),
     dump_core_on_job_delay$1=symbol(dump_core_on_job_delay$0),
     t$3=
      [0,
       [0,abort_after_thread_pool_stuck_$1],
       [0,check_invariants$1],
       [0,detect_invalid_access_from_thr$1],
       [0,dump_core_on_job_delay$1],
       [0,epoll_max_ready_events$1],
       [0,file_descr_watcher$2],
       [0,max_inter_cycle_timeout$1],
       [0,max_num_open_file_descrs$1],
       [0,max_num_threads$1],
       [0,max_num_jobs_per_priority_per_$1],
       [0,min_inter_cycle_timeout$1],
       t$2[12],
       [0,record_backtraces$1],
       [0,report_thread_pool_stuck_for$1],
       [0,thread_pool_cpu_affinity$1],
       [0,timing_wheel_config$1]],
     task_id=[0,function(param){return _bf_}];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel_config$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_config$0);
    var
     Async_kernel_config=
      [0,
       Epoll_max_ready_events,
       Max_inter_cycle_timeout,
       Min_inter_cycle_timeout,
       Max_num_threads,
       Max_num_jobs_per_priority_per_,
       [0,_a_,_b_,_c_,_d_,_e_,equal,default$0],
       [0,How_to_dump,sexp_of_watch,watch_of_sexp,t_of_sexp$6,sexp_of_t$6],
       [0,sexp_of_t$7],
       [0,sexp_of_t$9],
       sexp_of_t$10,
       create,
       t$3,
       environment_variable,
       [0,
        clock,
        fd,
        file_descr_watcher$1,
        finalizers,
        interruptor,
        monitor,
        monitor_send_exn,
        parallel,
        reader,
        scheduler,
        shutdown,
        thread_pool,
        thread_safe,
        writer],
       abort_after_thread_pool_stuck_$1,
       check_invariants$1,
       detect_invalid_access_from_thr$1,
       dump_core_on_job_delay$1,
       thread_pool_cpu_affinity$1,
       epoll_max_ready_events$1,
       file_descr_watcher$2,
       max_inter_cycle_timeout$1,
       max_num_jobs_per_priority_per_$1,
       max_num_open_file_descrs$1,
       max_num_threads$1,
       min_inter_cycle_timeout$1,
       record_backtraces$1,
       report_thread_pool_stuck_for$1,
       timing_wheel_config$1,
       default_timing_wheel_config_fo,
       task_id];
    runtime.caml_register_global
     (266,Async_kernel_config,"Async_kernel_config");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
