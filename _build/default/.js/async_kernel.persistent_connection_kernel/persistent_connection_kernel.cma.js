// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Persistent_connection_kern=
      caml_string_of_jsbytes
       ("Persistent_connection_kernel__Persistent_connection_kernel_intf"),
     cst_persistent_connection_kern=
      caml_string_of_jsbytes("persistent_connection_kernel"),
     cst_persistent_connection_kern$0=
      caml_string_of_jsbytes
       ("persistent_connection_kernel/src/persistent_connection_kernel_intf.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_persistent_connection_kern$1=
      caml_string_of_jsbytes("persistent_connection_kernel"),
     cst_persistent_connection_kern$2=
      caml_string_of_jsbytes("persistent_connection_kernel"),
     cst_Persistent_connection_kern$0=
      caml_string_of_jsbytes
       ("Persistent_connection_kernel__Persistent_connection_kernel_intf"),
     cst_Persistent_connection_clos=
      caml_string_of_jsbytes("Persistent connection closed"),
     cst_Persistent_connection_kern$1=
      caml_string_of_jsbytes("Persistent_connection_kernel"),
     cst_persistent_connection_kern$3=
      caml_string_of_jsbytes("persistent_connection_kernel"),
     cst_persistent_connection_kern$4=
      caml_string_of_jsbytes
       ("persistent_connection_kernel/src/persistent_connection_kernel.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_persistent_connection_kern$5=
      caml_string_of_jsbytes("persistent_connection_kernel"),
     cst_persistent_connection_kern$6=
      caml_string_of_jsbytes("persistent_connection_kernel"),
     cst_Persistent_connection_kern$2=
      caml_string_of_jsbytes("Persistent_connection_kernel"),
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Async_kernel_Ivar=global_data.Async_kernel__Ivar,
     Async_kernel=global_data.Async_kernel,
     Async_kernel_Deferred=global_data.Async_kernel__Deferred,
     Async_kernel_Time_source=global_data.Async_kernel__Time_source,
     Core_Time_ns=global_data.Core__Time_ns,
     Base_Random=global_data.Base__Random,
     Core=global_data.Core,
     Core_Fn=global_data.Core__Fn,
     Core_Option=global_data.Core__Option,
     Core_Error=global_data.Core__Error,
     Async_kernel_Monitor=global_data.Async_kernel__Monitor,
     Base_Exn=global_data.Base__Exn,
     Core_Sexp=global_data.Core__Sexp,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Core_Or_error=global_data.Core__Or_error;
    global_data.Base__Field;
    var Persistent_connection_kernel=[0];
    caml_register_global
     (56,Persistent_connection_kernel,"Persistent_connection_kernel__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Persistent_connection_kern);
    caml_call1
     (Ppx_bench_lib_Benchmark_accumu[1][1],cst_persistent_connection_kern);
    caml_call1(Expect_test_collector[5][1],cst_persistent_connection_kern$0);
    caml_call2
     (Ppx_inline_test_lib_Runtime[2],cst_persistent_connection_kern$1,cst);
    caml_call1
     (Ppx_inline_test_lib_Runtime[3],cst_persistent_connection_kern$2);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Persistent_connection_kern$0);
    var Persistent_connection_kernel_P=[0];
    caml_register_global
     (61,
      Persistent_connection_kernel_P,
      "Persistent_connection_kernel__Persistent_connection_kernel_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Persistent_connection_kern$1);
    caml_call1
     (Ppx_bench_lib_Benchmark_accumu[1][1],cst_persistent_connection_kern$3);
    caml_call1(Expect_test_collector[5][1],cst_persistent_connection_kern$4);
    caml_call2
     (Ppx_inline_test_lib_Runtime[2],cst_persistent_connection_kern$5,cst$0);
    caml_call1
     (Ppx_inline_test_lib_Runtime[3],cst_persistent_connection_kern$6);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Persistent_connection_kern$2);
    var
     _x_=[0,-289386606,0],
     _y_=[0,-289386606,0],
     _z_=[0,990972795,0],
     _v_=[0,-289386606,0],
     _w_=[0,-289386606,0],
     _p_=[0,caml_string_of_jsbytes("Close_started")],
     _q_=[0,caml_string_of_jsbytes("Ok")],
     _i_=[0,caml_string_of_jsbytes("sexp_of_address")],
     _j_=[0,caml_string_of_jsbytes("address_equal")],
     _k_=[0,caml_string_of_jsbytes("don't_reconnect")],
     _l_=[0,caml_string_of_jsbytes("close_finished")],
     _m_=[0,caml_string_of_jsbytes("close_started")],
     _n_=[0,caml_string_of_jsbytes("event_handler")],
     _o_=[0,caml_string_of_jsbytes("next_connect_result")],
     _r_=[0,caml_string_of_jsbytes("conn")],
     _s_=[0,caml_string_of_jsbytes("retry_delay")],
     _t_=[0,caml_string_of_jsbytes("connect")],
     _u_=[0,caml_string_of_jsbytes("get_address")],
     _g_=[0,caml_string_of_jsbytes("on_event")],
     _h_=[0,caml_string_of_jsbytes("server_name")],
     _b_=[0,caml_string_of_jsbytes("Attempting_to_connect")],
     _c_=[0,caml_string_of_jsbytes("Disconnected")],
     _d_=[0,caml_string_of_jsbytes("Obtained_address")],
     _e_=[0,caml_string_of_jsbytes("Failed_to_connect")],
     _f_=[0,caml_string_of_jsbytes("Connected")],
     _a_=[0,caml_string_of_jsbytes("<Conn.t>")],
     Persistent_connection_kernel$0=
      [0,
       function(Conn)
        {var close=Conn[1],is_closed=Conn[2],close_finished=Conn[3];
         function sexp_of_t(param){return _a_}
         function sexp_of_t$0(of_address_001,param)
          {if(typeof param === "number")return 0 === param?_b_:_c_;
           switch(param[0])
            {case 0:
              var
               arg0_002=param[1],
               res0_003=caml_call1(of_address_001,arg0_002);
              return [1,[0,_d_,[0,res0_003,0]]];
             case 1:
              var
               arg0_004=param[1],
               res0_005=caml_call1(Core_Error[6],arg0_004);
              return [1,[0,_e_,[0,res0_005,0]]];
             default:
              var
               arg0_006=param[1],
               res0_007=caml_call1(Sexplib0_Sexp_conv[23],arg0_006);
              return [1,[0,_f_,[0,res0_007,0]]]}}
         function log_level(param)
          {if(typeof param !== "number" && 1 === param[0])return 106380200;
           return 815031438}
         function handle_event(t$0,t)
          {var on_event=t$0[6][2];return caml_call1(on_event,t)}
         function abort_reconnecting_with_no_act(t)
          {caml_call2(Async_kernel_Ivar[14],t[7],0);
           caml_call2(Async_kernel_Ivar[14],t[8],0);
           return caml_call2(Async_kernel_Ivar[14],t[4],-400989606)}
         function current_connection(t)
          {var
            _aT_=caml_call1(Async_kernel_Ivar[18],t[4]),
            match=caml_call1(Async_kernel_Deferred[5],_aT_);
           if(match)
            {var _aU_=match[1];
             if(typeof _aU_ !== "number"){var conn=_aU_[2];return [0,conn]}}
           return 0}
         function close_finished$0(t)
          {return caml_call1(Async_kernel_Ivar[18],t[8])}
         function is_closed$0(t)
          {return caml_call1(Async_kernel_Ivar[17],t[7])}
         var
          _A_=caml_call1(Sexplib0_Sexp_conv[7],cst_Persistent_connection_clos),
          connected_or_failed_to_connect=caml_call1(Core_Or_error[40],_A_);
         function sexp_of_t$1(param)
          {var
            conn_023=param[4],
            next_connect_result_026=param[5],
            don_t_reconnect_034=param[9],
            close_finished_032=param[8],
            close_started_030=param[7],
            event_handler_028=param[6],
            bnds_016=0;
           function _aG_(_aS_){return 0}
           var
            arg_039=caml_call1(Sexplib0_Sexp_conv[24],_aG_),
            bnds_016$0=[0,[1,[0,_i_,[0,arg_039,0]]],bnds_016];
           function _aH_(_aR_){return 0}
           var
            arg_037=caml_call1(Sexplib0_Sexp_conv[24],_aH_),
            bnds_016$1=[0,[1,[0,_j_,[0,arg_037,0]]],bnds_016$0],
            arg_035=
             caml_call2(Async_kernel_Ivar[9],Core[518],don_t_reconnect_034),
            bnds_016$2=[0,[1,[0,_k_,[0,arg_035,0]]],bnds_016$1],
            arg_033=
             caml_call2(Async_kernel_Ivar[9],Core[518],close_finished_032),
            bnds_016$3=[0,[1,[0,_l_,[0,arg_033,0]]],bnds_016$2],
            arg_031=
             caml_call2(Async_kernel_Ivar[9],Core[518],close_started_030),
            bnds_016$4=[0,[1,[0,_m_,[0,arg_031,0]]],bnds_016$3],
            server_name_011=event_handler_028[1],
            bnds_010=0;
           function _aF_(_aQ_){return 0}
           var
            arg_014=caml_call1(Sexplib0_Sexp_conv[24],_aF_),
            bnds_010$0=[0,[1,[0,_g_,[0,arg_014,0]]],bnds_010],
            arg_012=caml_call1(Core[471],server_name_011),
            bnds_010$1=[0,[1,[0,_h_,[0,arg_012,0]]],bnds_010$0],
            arg_029=[1,bnds_010$1],
            bnds_016$5=[0,[1,[0,_n_,[0,arg_029,0]]],bnds_016$4],
            _aI_=caml_call1(Core_Or_error[13],sexp_of_t),
            arg_027=
             caml_call2(Async_kernel_Ivar[9],_aI_,next_connect_result_026),
            bnds_016$6=[0,[1,[0,_o_,[0,arg_027,0]]],bnds_016$5];
           function _aJ_(param)
            {if(typeof param === "number")return _p_;
             var v_025=param[2];
             return [1,[0,_q_,[0,sexp_of_t(v_025),0]]]}
           var
            arg_024=caml_call2(Async_kernel_Ivar[9],_aJ_,conn_023),
            bnds_016$7=[0,[1,[0,_r_,[0,arg_024,0]]],bnds_016$6];
           function _aK_(_aP_){return 0}
           var
            arg_022=caml_call1(Sexplib0_Sexp_conv[24],_aK_),
            bnds_016$8=[0,[1,[0,_s_,[0,arg_022,0]]],bnds_016$7];
           function _aL_(_aO_){return 0}
           var
            arg_020=caml_call1(Sexplib0_Sexp_conv[24],_aL_),
            bnds_016$9=[0,[1,[0,_t_,[0,arg_020,0]]],bnds_016$8];
           function _aM_(_aN_){return 0}
           var
            arg_018=caml_call1(Sexplib0_Sexp_conv[24],_aM_),
            bnds_016$10=[0,[1,[0,_u_,[0,arg_018,0]]],bnds_016$9];
           return [1,bnds_016$10]}
         function close_when_current_connection_(t)
          {return caml_call2(Async_kernel_Ivar[15],t[9],0)}
         function close_finished$1(param){return close_finished$0(param)}
         function is_closed$1(param){return is_closed$0(param)}
         function close$0(t)
          {if(caml_call1(Async_kernel_Ivar[17],t[7]))
            return close_finished$0(t);
           caml_call2(Async_kernel_Ivar[14],t[7],0);
           function _aB_(conn_opt)
            {function _aD_(param)
              {return caml_call2(Async_kernel_Ivar[14],t[8],0)}
             if(typeof conn_opt === "number")
              var _aE_=Async_kernel_Deferred[18];
             else
              var conn=conn_opt[2],_aE_=caml_call1(close,conn);
             return caml_call2(Async_kernel[21],_aE_,_aD_)}
           var _aC_=caml_call1(Async_kernel_Ivar[18],t[4]);
           return caml_call2(Async_kernel[20],_aC_,_aB_)}
         function server_name(t){return t[6][1]}
         function current_connection$0(param)
          {return current_connection(param)}
         function connected_or_failed_to_connect$0(t)
          {if(is_closed$0(t))
            return caml_call1(Async_kernel[19],connected_or_failed_to_connect);
           var match=current_connection(t);
           if(match)
            {var x=match[1];
             if(! caml_call1(is_closed,x))
              return caml_call1(Async_kernel[19],[0,x])}
           var _at_=0;
           function _au_(_aA_){return _aA_}
           var
            _av_=caml_call1(Async_kernel_Ivar[18],t[5]),
            _aw_=[0,caml_call2(Async_kernel[4],_av_,_au_),_at_];
           function _ax_(param){return connected_or_failed_to_connect}
           var
            _ay_=caml_call1(Async_kernel_Ivar[18],t[7]),
            _az_=[0,caml_call2(Async_kernel[4],_ay_,_ax_),_aw_];
           return caml_call1(Async_kernel_Deferred[29],_az_)}
         function connected(t)
          {function loop(param)
            {var
              d=caml_call1(Async_kernel_Ivar[18],t[4]),
              match=caml_call1(Async_kernel_Deferred[5],d);
             if(! match)
              {var
                _as_=
                 function(param)
                  {if(typeof param === "number")
                    return caml_call1(Async_kernel_Deferred[19],0);
                   var conn=param[2];
                   return caml_call1(Async_kernel[19],conn)};
               return caml_call2(Async_kernel[20],d,_as_)}
             var _aq_=match[1];
             if(typeof _aq_ === "number")
              return caml_call1(Async_kernel_Deferred[19],0);
             var conn=_aq_[2];
             if(! caml_call1(is_closed,conn))
              return caml_call1(Async_kernel[19],conn);
             var _ar_=caml_call1(close_finished,conn);
             return caml_call2(Async_kernel[20],_ar_,loop)}
           return loop(0)}
         function create
          (server_name,
           opt,
           retry_delay$0,
           random_state$1,
           time_source$0,
           connect,
           Address,
           get_address)
          {if(opt)
            var sth=opt[1],on_event=sth;
           else
            var on_event=function(param){return Async_kernel_Deferred[18]};
           if(random_state$1)
            var sth$0=random_state$1[1],random_state=sth$0;
           else
            var random_state=[0,389604849,Base_Random[18][1]];
           if(time_source$0)
            var sth$1=time_source$0[1],time_source=sth$1;
           else
            var time_source=caml_call1(Async_kernel_Time_source[10],0);
           var
            event_handler=[0,server_name,on_event],
            _B_=Core[541]?0.1:10.,
            _C_=caml_call1(Core_Time_ns[1][81],_B_),
            default_retry_delay=caml_call1(Core_Fn[1],_C_),
            non_randomized_delay=
             caml_call2(Core_Option[34],retry_delay$0,default_retry_delay);
           if(typeof random_state === "number")
            var retry_delay_span=non_randomized_delay;
           else
            var
             random_state$0=random_state[2],
             retry_delay_span=
              function(param)
               {var
                 span=caml_call1(non_randomized_delay,0),
                 span$0=caml_call1(Core_Time_ns[1][91],span),
                 distance=
                  caml_call2(Base_Random[18][10],random_state$0,span$0 * 0.3),
                 wait=
                  caml_call1(Base_Random[18][16],random_state$0)
                   ?span$0 + distance
                   :span$0 - distance;
                return caml_call1(Core_Time_ns[1][81],wait)};
           function retry_delay(param)
            {var _ap_=caml_call1(retry_delay_span,0);
             return caml_call2(Async_kernel_Time_source[29],time_source,_ap_)}
           var
            _D_=Address[2],
            _E_=Address[1],
            _F_=caml_call1(Async_kernel_Ivar[12],0),
            _G_=caml_call1(Async_kernel_Ivar[12],0),
            _H_=caml_call1(Async_kernel_Ivar[12],0),
            _I_=caml_call1(Async_kernel_Ivar[12],0),
            t=
             [0,
              get_address,
              connect,
              retry_delay,
              caml_call1(Async_kernel_Ivar[12],0),
              _I_,
              event_handler,
              _H_,
              _G_,
              _F_,
              _E_,
              _D_];
           function _J_(param)
            {function _L_(param)
              {var previous_address=[0,0],previous_error=[0,0];
               function _O_(param)
                {if(typeof param === "number")
                  return -400989606 <= param
                          ?(caml_call2(Async_kernel_Ivar[14],t[4],-400989606),
                            caml_call1(Async_kernel[19],_v_))
                          :(abort_reconnecting_with_no_act(t),
                            caml_call1(Async_kernel[19],_w_));
                 var
                  match=param[2],
                  ready_to_retry_connecting=match[2],
                  conn=match[1];
                 caml_call2(Async_kernel_Ivar[14],t[4],[0,17724,conn]);
                 function _af_(param)
                  {function _ah_(param)
                    {t[4] = caml_call1(Async_kernel_Ivar[12],0);
                     function _aj_(param)
                      {function _al_(param)
                        {return caml_call1(Async_kernel_Ivar[17],t[7])
                                 ?(caml_call2(Async_kernel_Ivar[14],t[4],-400989606),_x_)
                                 :caml_call1(Async_kernel_Ivar[17],t[9])
                                   ?(abort_reconnecting_with_no_act(t),_y_)
                                   :_z_}
                       var
                        _am_=[0,caml_call1(Async_kernel_Ivar[18],t[9]),0],
                        _an_=
                         [0,
                          ready_to_retry_connecting,
                          [0,caml_call1(Async_kernel_Ivar[18],t[7]),_am_]],
                        _ao_=caml_call1(Async_kernel_Deferred[23],_an_);
                       return caml_call2(Async_kernel[22][3],_ao_,_al_)}
                     var _ak_=handle_event(t,1);
                     return caml_call2(Async_kernel[20],_ak_,_aj_)}
                   var _ai_=caml_call1(close_finished,conn);
                   return caml_call2(Async_kernel[20],_ai_,_ah_)}
                 var _ag_=handle_event(t,[2,conn]);
                 return caml_call2(Async_kernel[20],_ag_,_af_)}
               function loop(param)
                {if(caml_call1(Async_kernel_Ivar[17],t[7]))
                  return caml_call1(Async_kernel[19],-400989606);
                 if(caml_call1(Async_kernel_Ivar[17],t[9]))
                  return caml_call1(Async_kernel[19],-818917400);
                 var ready_to_retry_connecting=caml_call1(t[3],0);
                 function _S_(connect_result)
                  {caml_call2(Async_kernel_Ivar[14],t[5],connect_result);
                   t[5] = caml_call1(Async_kernel_Ivar[12],0);
                   if(0 === connect_result[0])
                    {var conn=connect_result[1];
                     return caml_call1
                             (Async_kernel[19],
                              [0,17724,[0,conn,ready_to_retry_connecting]])}
                   var err=connect_result[1],_Y_=previous_error[1];
                   if(_Y_)
                    var
                     previous_err=_Y_[1],
                     to_sexp=
                      function(e)
                       {var
                         _ad_=caml_call1(Core_Error[26],e),
                         _ae_=caml_call1(Async_kernel_Monitor[13],_ad_);
                        return caml_call1(Base_Exn[1],_ae_)},
                     _W_=to_sexp(previous_err),
                     _X_=to_sexp(err),
                     same_as_previous_error=caml_call2(Core_Sexp[36],_X_,_W_);
                   else
                    var same_as_previous_error=0;
                   previous_error[1] = [0,err];
                   function _Z_(param)
                    {function _$_(param){return loop(0)}
                     var
                      _aa_=[0,caml_call1(Async_kernel_Ivar[18],t[9]),0],
                      _ab_=
                       [0,
                        ready_to_retry_connecting,
                        [0,caml_call1(Async_kernel_Ivar[18],t[7]),_aa_]],
                      _ac_=caml_call1(Async_kernel_Deferred[23],_ab_);
                     return caml_call2(Async_kernel[20],_ac_,_$_)}
                   var
                    ___=
                     same_as_previous_error
                      ?Async_kernel_Deferred[18]
                      :handle_event(t,[1,err]);
                   return caml_call2(Async_kernel[20],___,_Z_)}
                 function _P_(param)
                  {if(0 !== param[0])
                    {var e=param[1];return caml_call1(Async_kernel[19],[1,e])}
                   var addr=param[1],_T_=previous_address[1];
                   if(_T_)
                    var
                     previous_address$0=_T_[1],
                     same_as_previous_address=
                      caml_call2(t[10],addr,previous_address$0);
                   else
                    var same_as_previous_address=0;
                   previous_address[1] = [0,addr];
                   function _U_(param){return caml_call1(t[2],addr)}
                   var
                    _V_=
                     same_as_previous_address
                      ?Async_kernel_Deferred[18]
                      :handle_event(t,[0,addr]);
                   return caml_call2(Async_kernel[20],_V_,_U_)}
                 var
                  _Q_=caml_call1(t[1],0),
                  _R_=caml_call2(Async_kernel[20],_Q_,_P_);
                 return caml_call2(Async_kernel[22][2],_R_,_S_)}
               var _N_=loop(0);
               return caml_call2(Async_kernel[20],_N_,_O_)}
             var _M_=handle_event(t,0);
             return caml_call2(Async_kernel[20],_M_,_L_)}
           var _K_=caml_call2(Async_kernel_Deferred[31],0,_J_);
           caml_call1(Async_kernel[6],_K_);
           return t}
         return [0,
                 sexp_of_t$1,
                 [0,sexp_of_t$0,log_level],
                 create,
                 connected,
                 connected_or_failed_to_connect$0,
                 current_connection$0,
                 server_name,
                 close$0,
                 is_closed$1,
                 close_finished$1,
                 close_when_current_connection_]}];
    caml_register_global
     (78,Persistent_connection_kernel$0,"Persistent_connection_kernel");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
