// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_int_compare=runtime.caml_int_compare,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call28
     (f,
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27)
     {return f.length == 28
              ?f
                (a0,
                 a1,
                 a2,
                 a3,
                 a4,
                 a5,
                 a6,
                 a7,
                 a8,
                 a9,
                 a10,
                 a11,
                 a12,
                 a13,
                 a14,
                 a15,
                 a16,
                 a17,
                 a18,
                 a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24,
                 a25,
                 a26,
                 a27)
              :runtime.caml_call_gen
                (f,
                 [a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                  a10,
                  a11,
                  a12,
                  a13,
                  a14,
                  a15,
                  a16,
                  a17,
                  a18,
                  a19,
                  a20,
                  a21,
                  a22,
                  a23,
                  a24,
                  a25,
                  a26,
                  a27])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Async_kernel_Time_ns=caml_string_of_jsbytes("Async_kernel__Time_ns"),
     cst_async_kernel=caml_string_of_jsbytes("async_kernel"),
     cst_src_time_ns_ml=caml_string_of_jsbytes("src/time_ns.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_async_kernel$0=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$1=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Time_ns$0=
      caml_string_of_jsbytes("Async_kernel__Time_ns"),
     cst_Async_kernel_Debug=caml_string_of_jsbytes("Async_kernel__Debug"),
     cst_async_kernel$2=caml_string_of_jsbytes("async_kernel"),
     cst_src_debug_ml=caml_string_of_jsbytes("src/debug.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_async_kernel$3=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$4=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Debug$0=caml_string_of_jsbytes("Async_kernel__Debug"),
     cst_Async_kernel_Import=caml_string_of_jsbytes("Async_kernel__Import"),
     cst_async_kernel$5=caml_string_of_jsbytes("async_kernel"),
     cst_src_import_ml=caml_string_of_jsbytes("src/import.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_async_kernel$6=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$7=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Import$0=caml_string_of_jsbytes("Async_kernel__Import"),
     cst_Async_kernel_Priority=
      caml_string_of_jsbytes("Async_kernel__Priority"),
     cst_async_kernel$8=caml_string_of_jsbytes("async_kernel"),
     cst_src_priority_ml=caml_string_of_jsbytes("src/priority.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_async_kernel$9=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$10=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Priority$0=
      caml_string_of_jsbytes("Async_kernel__Priority"),
     cst_Async_kernel_Types=caml_string_of_jsbytes("Async_kernel__Types"),
     cst_async_kernel$11=caml_string_of_jsbytes("async_kernel"),
     cst_src_types_ml=caml_string_of_jsbytes("src/types.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_async_kernel$12=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$13=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Types$0=caml_string_of_jsbytes("Async_kernel__Types"),
     cst_id$0=caml_string_of_jsbytes("id"),
     cst_created_monitor=caml_string_of_jsbytes("created monitor"),
     cst_Async_kernel_Monitor0=
      caml_string_of_jsbytes("Async_kernel__Monitor0"),
     cst_async_kernel$14=caml_string_of_jsbytes("async_kernel"),
     cst_src_monitor0_ml=caml_string_of_jsbytes("src/monitor0.ml"),
     cst$4=caml_string_of_jsbytes(""),
     cst_async_kernel$15=caml_string_of_jsbytes("async_kernel"),
     names=
      [0,
       caml_string_of_jsbytes("name"),
       [0,
        caml_string_of_jsbytes("here"),
        [0,
         caml_string_of_jsbytes("id"),
         [0,
          caml_string_of_jsbytes("next_error"),
          [0,
           caml_string_of_jsbytes("handlers_for_all_errors"),
           [0,
            caml_string_of_jsbytes("tails_for_all_errors"),
            [0,
             caml_string_of_jsbytes("has_seen_error"),
             [0,caml_string_of_jsbytes("forwarding"),0]]]]]]]],
     cst_forwarding=caml_string_of_jsbytes("forwarding"),
     cst_has_seen_error=caml_string_of_jsbytes("has_seen_error"),
     cst_tails_for_all_errors=caml_string_of_jsbytes("tails_for_all_errors"),
     cst_handlers_for_all_errors=
      caml_string_of_jsbytes("handlers_for_all_errors"),
     cst_next_error=caml_string_of_jsbytes("next_error"),
     cst_id=caml_string_of_jsbytes("id"),
     cst_here=caml_string_of_jsbytes("here"),
     cst_name=caml_string_of_jsbytes("name"),
     cst_async_kernel$16=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Monitor0$0=
      caml_string_of_jsbytes("Async_kernel__Monitor0"),
     cst_Async_kernel_Execution_con=
      caml_string_of_jsbytes("Async_kernel__Execution_context"),
     cst_async_kernel$17=caml_string_of_jsbytes("async_kernel"),
     cst_src_execution_context_ml=
      caml_string_of_jsbytes("src/execution_context.ml"),
     cst$5=caml_string_of_jsbytes(""),
     cst_async_kernel$18=caml_string_of_jsbytes("async_kernel"),
     names$0=
      [0,
       caml_string_of_jsbytes("monitor"),
       [0,
        caml_string_of_jsbytes("priority"),
        [0,
         caml_string_of_jsbytes("local_storage"),
         [0,caml_string_of_jsbytes("backtrace_history"),0]]]],
     cst_backtrace_history=caml_string_of_jsbytes("backtrace_history"),
     cst_local_storage=caml_string_of_jsbytes("local_storage"),
     cst_priority=caml_string_of_jsbytes("priority"),
     cst_monitor=caml_string_of_jsbytes("monitor"),
     cst_async_kernel$19=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Execution_con$0=
      caml_string_of_jsbytes("Async_kernel__Execution_context"),
     cst_Async_kernel_External_job=
      caml_string_of_jsbytes("Async_kernel__External_job"),
     cst_async_kernel$20=caml_string_of_jsbytes("async_kernel"),
     cst_src_external_job_ml=caml_string_of_jsbytes("src/external_job.ml"),
     cst$6=caml_string_of_jsbytes(""),
     cst_async_kernel$21=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$22=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_External_job$0=
      caml_string_of_jsbytes("Async_kernel__External_job"),
     cst_Async_kernel_Job_pool=
      caml_string_of_jsbytes("Async_kernel__Job_pool"),
     cst_async_kernel$23=caml_string_of_jsbytes("async_kernel"),
     cst_src_job_pool_ml=caml_string_of_jsbytes("src/job_pool.ml"),
     cst$7=caml_string_of_jsbytes(""),
     cst_async_kernel$24=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$25=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Job_pool$0=
      caml_string_of_jsbytes("Async_kernel__Job_pool"),
     cst_Async_kernel_Job=caml_string_of_jsbytes("Async_kernel__Job"),
     cst_async_kernel$26=caml_string_of_jsbytes("async_kernel"),
     cst_src_job_ml=caml_string_of_jsbytes("src/job.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_async_kernel$27=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$28=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Job$0=caml_string_of_jsbytes("Async_kernel__Job"),
     cst_Async_kernel_Job_or_event=
      caml_string_of_jsbytes("Async_kernel__Job_or_event"),
     cst_async_kernel$29=caml_string_of_jsbytes("async_kernel"),
     cst_src_job_or_event_ml=caml_string_of_jsbytes("src/job_or_event.ml"),
     cst$9=caml_string_of_jsbytes(""),
     cst_async_kernel$30=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$31=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Job_or_event$0=
      caml_string_of_jsbytes("Async_kernel__Job_or_event"),
     cst_Async_kernel_Job_or_event_=
      caml_string_of_jsbytes("Async_kernel__Job_or_event_intf"),
     cst_async_kernel$32=caml_string_of_jsbytes("async_kernel"),
     cst_src_job_or_event_intf_ml=
      caml_string_of_jsbytes("src/job_or_event_intf.ml"),
     cst$10=caml_string_of_jsbytes(""),
     cst_async_kernel$33=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$34=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Job_or_event_$0=
      caml_string_of_jsbytes("Async_kernel__Job_or_event_intf"),
     cst_Async_kernel_Scheduler0=
      caml_string_of_jsbytes("Async_kernel__Scheduler0"),
     cst_async_kernel$35=caml_string_of_jsbytes("async_kernel"),
     cst_src_scheduler0_ml=caml_string_of_jsbytes("src/scheduler0.ml"),
     cst$11=caml_string_of_jsbytes(""),
     cst_async_kernel$36=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$37=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Scheduler0$0=
      caml_string_of_jsbytes("Async_kernel__Scheduler0"),
     cst_Jobs_set_jobs_left_this_cy=
      caml_string_of_jsbytes
       ("Jobs.set_jobs_left_this_cycle got negative number"),
     cst_Async_kernel_Job_queue=
      caml_string_of_jsbytes("Async_kernel__Job_queue"),
     cst_async_kernel$38=caml_string_of_jsbytes("async_kernel"),
     cst_src_job_queue_ml=caml_string_of_jsbytes("src/job_queue.ml"),
     cst$12=caml_string_of_jsbytes(""),
     cst_async_kernel$39=caml_string_of_jsbytes("async_kernel"),
     cst_length=caml_string_of_jsbytes("length"),
     cst_front=caml_string_of_jsbytes("front"),
     cst_mask=caml_string_of_jsbytes("mask"),
     cst_jobs=caml_string_of_jsbytes("jobs"),
     cst_jobs_left_this_cycle=caml_string_of_jsbytes("jobs_left_this_cycle"),
     cst_num_jobs_run=caml_string_of_jsbytes("num_jobs_run"),
     cst_async_kernel$40=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Job_queue$0=
      caml_string_of_jsbytes("Async_kernel__Job_queue"),
     cst_cannot_call_advance_by_ala=
      caml_string_of_jsbytes
       ("cannot call [advance_by_alarms] or [advance_directly] from callback"),
     cst_cannot_schedule_an_event_w=
      caml_string_of_jsbytes("cannot schedule an event with status"),
     cst_Synchronous_time_source_ab=
      caml_string_of_jsbytes
       ("[Synchronous_time_source.abort_exn] cannot abort event"),
     cst_interval_span_smaller_than=
      caml_string_of_jsbytes("interval span smaller than alarm precision"),
     pos$3=caml_string_of_jsbytes("src/synchronous_time_source0.ml:341:32"),
     pos$2=caml_string_of_jsbytes("src/synchronous_time_source0.ml:340:32"),
     cst_wall_clock=caml_string_of_jsbytes("wall_clock"),
     cst_Job_t=caml_string_of_jsbytes("<Job.t>"),
     cst_bug_set_status_transition_=
      caml_string_of_jsbytes("bug -- set_status transition not allowed"),
     cst_src_synchronous_time_sourc$0=
      caml_string_of_jsbytes("src/synchronous_time_source0.ml:226:12"),
     pos$1=caml_string_of_jsbytes("src/synchronous_time_source0.ml:187:30"),
     pos$0=caml_string_of_jsbytes("src/synchronous_time_source0.ml:205:32"),
     pos=caml_string_of_jsbytes("src/synchronous_time_source0.ml:215:32"),
     cst_Synchronous_time_source_Ev=
      caml_string_of_jsbytes
       ("[Synchronous_time_source.Event.Option.value_exn None]"),
     cst_Y_m_dT_H_M_S_z=caml_string_of_jsbytes("%Y-%m-%dT%H:%M:%S%z"),
     cst_Async_kernel_Synchronous_t=
      caml_string_of_jsbytes("Async_kernel__Synchronous_time_source0"),
     cst_async_kernel$41=caml_string_of_jsbytes("async_kernel"),
     cst_src_synchronous_time_sourc=
      caml_string_of_jsbytes("src/synchronous_time_source0.ml"),
     cst$13=caml_string_of_jsbytes(""),
     cst_async_kernel$42=caml_string_of_jsbytes("async_kernel"),
     names$1=
      [0,
       caml_string_of_jsbytes("alarm"),
       [0,
        caml_string_of_jsbytes("at"),
        [0,
         caml_string_of_jsbytes("callback"),
         [0,
          caml_string_of_jsbytes("execution_context"),
          [0,
           caml_string_of_jsbytes("interval"),
           [0,
            caml_string_of_jsbytes("next_fired"),
            [0,
             caml_string_of_jsbytes("prev_fired"),
             [0,caml_string_of_jsbytes("status"),0]]]]]]]],
     cst_status=caml_string_of_jsbytes("status"),
     cst_prev_fired=caml_string_of_jsbytes("prev_fired"),
     cst_next_fired=caml_string_of_jsbytes("next_fired"),
     cst_interval=caml_string_of_jsbytes("interval"),
     cst_execution_context=caml_string_of_jsbytes("execution_context"),
     cst_callback=caml_string_of_jsbytes("callback"),
     cst_at=caml_string_of_jsbytes("at"),
     cst_alarm=caml_string_of_jsbytes("alarm"),
     names$2=
      [0,
       caml_string_of_jsbytes("id"),
       [0,
        caml_string_of_jsbytes("advance_errors"),
        [0,
         caml_string_of_jsbytes("am_advancing"),
         [0,
          caml_string_of_jsbytes("events"),
          [0,
           caml_string_of_jsbytes("fired_events"),
           [0,
            caml_string_of_jsbytes("most_recently_fired"),
            [0,
             caml_string_of_jsbytes("handle_fired"),
             [0,
              caml_string_of_jsbytes("is_wall_clock"),
              [0,caml_string_of_jsbytes("scheduler"),0]]]]]]]]],
     cst_scheduler=caml_string_of_jsbytes("scheduler"),
     cst_is_wall_clock=caml_string_of_jsbytes("is_wall_clock"),
     cst_handle_fired=caml_string_of_jsbytes("handle_fired"),
     cst_most_recently_fired=caml_string_of_jsbytes("most_recently_fired"),
     cst_fired_events=caml_string_of_jsbytes("fired_events"),
     cst_events=caml_string_of_jsbytes("events"),
     cst_am_advancing=caml_string_of_jsbytes("am_advancing"),
     cst_advance_errors=caml_string_of_jsbytes("advance_errors"),
     cst_id$1=caml_string_of_jsbytes("id"),
     cst_async_kernel$43=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Synchronous_t$0=
      caml_string_of_jsbytes("Async_kernel__Synchronous_time_source0"),
     cst_got_uncaught_exn=caml_string_of_jsbytes("got_uncaught_exn"),
     cst_Scheduler_invariant_failed=
      caml_string_of_jsbytes("Scheduler.invariant failed"),
     cst_unhandled_exception=caml_string_of_jsbytes("unhandled exception"),
     cst_Async_kernel_Scheduler1=
      caml_string_of_jsbytes("Async_kernel__Scheduler1"),
     cst_async_kernel$44=caml_string_of_jsbytes("async_kernel"),
     cst_src_scheduler1_ml=caml_string_of_jsbytes("src/scheduler1.ml"),
     cst$14=caml_string_of_jsbytes(""),
     cst_async_kernel$45=caml_string_of_jsbytes("async_kernel"),
     names$3=
      [0,
       caml_string_of_jsbytes("execution_context"),
       [0,caml_string_of_jsbytes("exec"),0]],
     cst_exec=caml_string_of_jsbytes("exec"),
     cst_execution_context$0=caml_string_of_jsbytes("execution_context"),
     names$4=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("check_access"),
         caml_string_of_jsbytes("job_pool"),
         caml_string_of_jsbytes("normal_priority_jobs"),
         caml_string_of_jsbytes("low_priority_jobs"),
         caml_string_of_jsbytes("very_low_priority_workers"),
         caml_string_of_jsbytes("main_execution_context"),
         caml_string_of_jsbytes("current_execution_context"),
         caml_string_of_jsbytes("uncaught_exn"),
         caml_string_of_jsbytes("cycle_count"),
         caml_string_of_jsbytes("cycle_start"),
         caml_string_of_jsbytes("in_cycle"),
         caml_string_of_jsbytes("run_every_cycle_start"),
         caml_string_of_jsbytes("run_every_cycle_start_state"),
         caml_string_of_jsbytes("run_every_cycle_end"),
         caml_string_of_jsbytes("run_every_cycle_end_state"),
         caml_string_of_jsbytes("last_cycle_time"),
         caml_string_of_jsbytes("last_cycle_num_jobs"),
         caml_string_of_jsbytes("total_cycle_time"),
         caml_string_of_jsbytes("time_source"),
         caml_string_of_jsbytes("external_jobs"),
         caml_string_of_jsbytes("thread_safe_external_job_hook"),
         caml_string_of_jsbytes("job_queued_hook"),
         caml_string_of_jsbytes("event_added_hook"),
         caml_string_of_jsbytes("yield"),
         caml_string_of_jsbytes("yield_until_no_jobs_remain"),
         caml_string_of_jsbytes("check_invariants"),
         caml_string_of_jsbytes("max_num_jobs_per_priority_per_cycle"),
         caml_string_of_jsbytes("record_backtraces")]),
     cst_record_backtraces=caml_string_of_jsbytes("record_backtraces"),
     cst_max_num_jobs_per_priority_=
      caml_string_of_jsbytes("max_num_jobs_per_priority_per_cycle"),
     cst_check_invariants=caml_string_of_jsbytes("check_invariants"),
     cst_yield_until_no_jobs_remain=
      caml_string_of_jsbytes("yield_until_no_jobs_remain"),
     cst_yield=caml_string_of_jsbytes("yield"),
     cst_event_added_hook=caml_string_of_jsbytes("event_added_hook"),
     cst_job_queued_hook=caml_string_of_jsbytes("job_queued_hook"),
     cst_thread_safe_external_job_h=
      caml_string_of_jsbytes("thread_safe_external_job_hook"),
     cst_external_jobs=caml_string_of_jsbytes("external_jobs"),
     cst_time_source=caml_string_of_jsbytes("time_source"),
     cst_total_cycle_time=caml_string_of_jsbytes("total_cycle_time"),
     cst_last_cycle_num_jobs=caml_string_of_jsbytes("last_cycle_num_jobs"),
     cst_last_cycle_time=caml_string_of_jsbytes("last_cycle_time"),
     cst_run_every_cycle_end_state=
      caml_string_of_jsbytes("run_every_cycle_end_state"),
     cst_run_every_cycle_end=caml_string_of_jsbytes("run_every_cycle_end"),
     cst_run_every_cycle_start_stat=
      caml_string_of_jsbytes("run_every_cycle_start_state"),
     cst_run_every_cycle_start=caml_string_of_jsbytes("run_every_cycle_start"),
     cst_in_cycle=caml_string_of_jsbytes("in_cycle"),
     cst_cycle_start=caml_string_of_jsbytes("cycle_start"),
     cst_cycle_count=caml_string_of_jsbytes("cycle_count"),
     cst_uncaught_exn=caml_string_of_jsbytes("uncaught_exn"),
     cst_current_execution_context=
      caml_string_of_jsbytes("current_execution_context"),
     cst_main_execution_context=
      caml_string_of_jsbytes("main_execution_context"),
     cst_very_low_priority_workers=
      caml_string_of_jsbytes("very_low_priority_workers"),
     cst_low_priority_jobs=caml_string_of_jsbytes("low_priority_jobs"),
     cst_normal_priority_jobs=caml_string_of_jsbytes("normal_priority_jobs"),
     cst_job_pool=caml_string_of_jsbytes("job_pool"),
     cst_check_access=caml_string_of_jsbytes("check_access"),
     cst_Async_cannot_create_its_ra=
      caml_string_of_jsbytes("Async cannot create its raw scheduler"),
     cst_async_kernel$46=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Scheduler1$0=
      caml_string_of_jsbytes("Async_kernel__Scheduler1"),
     cst_Ivar_fill_of_full_ivar=
      caml_string_of_jsbytes("Ivar.fill of full ivar"),
     cst_Ivar_value_exn_called_on_e=
      caml_string_of_jsbytes("Ivar.value_exn called on empty ivar"),
     cst_Async_kernel_Ivar0=caml_string_of_jsbytes("Async_kernel__Ivar0"),
     cst_async_kernel$47=caml_string_of_jsbytes("async_kernel"),
     cst_src_ivar0_ml=caml_string_of_jsbytes("src/ivar0.ml"),
     cst$15=caml_string_of_jsbytes(""),
     cst_async_kernel$48=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$49=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Ivar0$0=caml_string_of_jsbytes("Async_kernel__Ivar0"),
     cst_Deferred_value_exn_called_=
      caml_string_of_jsbytes
       ("Deferred.value_exn called on undetermined deferred"),
     cst_Async_kernel_Deferred0=
      caml_string_of_jsbytes("Async_kernel__Deferred0"),
     cst_async_kernel$50=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred0_ml=caml_string_of_jsbytes("src/deferred0.ml"),
     cst$16=caml_string_of_jsbytes(""),
     cst_async_kernel$51=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$52=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred0$0=
      caml_string_of_jsbytes("Async_kernel__Deferred0"),
     cst_Async_kernel_Ivar=caml_string_of_jsbytes("Async_kernel__Ivar"),
     cst_async_kernel$53=caml_string_of_jsbytes("async_kernel"),
     cst_src_ivar_ml=caml_string_of_jsbytes("src/ivar.ml"),
     cst$17=caml_string_of_jsbytes(""),
     cst_async_kernel$54=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$55=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Ivar$0=caml_string_of_jsbytes("Async_kernel__Ivar"),
     cst_Async_kernel_Monad_sequenc=
      caml_string_of_jsbytes("Async_kernel__Monad_sequence"),
     cst_async_kernel$56=caml_string_of_jsbytes("async_kernel"),
     cst_src_monad_sequence_ml=caml_string_of_jsbytes("src/monad_sequence.ml"),
     cst$18=caml_string_of_jsbytes(""),
     cst_async_kernel$57=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$58=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Monad_sequenc$0=
      caml_string_of_jsbytes("Async_kernel__Monad_sequence"),
     cst_Async_kernel_Deferred1=
      caml_string_of_jsbytes("Async_kernel__Deferred1"),
     cst_async_kernel$59=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred1_ml=caml_string_of_jsbytes("src/deferred1.ml"),
     cst$19=caml_string_of_jsbytes(""),
     cst_async_kernel$60=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$61=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred1$0=
      caml_string_of_jsbytes("Async_kernel__Deferred1"),
     cst_Async_kernel_Deferred_std=
      caml_string_of_jsbytes("Async_kernel__Deferred_std"),
     cst_async_kernel$62=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_std_ml=caml_string_of_jsbytes("src/deferred_std.ml"),
     cst$20=caml_string_of_jsbytes(""),
     cst_async_kernel$63=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$64=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_std$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_std"),
     cst_attempt_to_fill_full_ivar=
      caml_string_of_jsbytes("attempt to fill full ivar"),
     cst_Async_kernel_Ivar_filler=
      caml_string_of_jsbytes("Async_kernel__Ivar_filler"),
     cst_async_kernel$65=caml_string_of_jsbytes("async_kernel"),
     cst_src_ivar_filler_ml=caml_string_of_jsbytes("src/ivar_filler.ml"),
     cst$21=caml_string_of_jsbytes(""),
     cst_async_kernel$66=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$67=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Ivar_filler$0=
      caml_string_of_jsbytes("Async_kernel__Ivar_filler"),
     cst_stream_is_closed=caml_string_of_jsbytes("stream is closed"),
     cst_open_tail=caml_string_of_jsbytes("<open tail>"),
     cst_closed_tail=caml_string_of_jsbytes("<closed tail>"),
     cst_Async_kernel_Tail=caml_string_of_jsbytes("Async_kernel__Tail"),
     cst_async_kernel$68=caml_string_of_jsbytes("async_kernel"),
     cst_src_tail_ml=caml_string_of_jsbytes("src/tail.ml"),
     cst$22=caml_string_of_jsbytes(""),
     cst_async_kernel$69=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$70=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Tail$0=caml_string_of_jsbytes("Async_kernel__Tail"),
     cst_Monitor_catch_got_unexpect=
      caml_string_of_jsbytes("Monitor.catch got unexpected empty stream"),
     cst_Async_finally=caml_string_of_jsbytes("Async finally"),
     cst_Monitor_protect=caml_string_of_jsbytes("Monitor.protect"),
     cst_try_with_join_or_error=
      caml_string_of_jsbytes("try_with_join_or_error"),
     cst_try_with_or_error=caml_string_of_jsbytes("try_with_or_error"),
     cst$25=caml_string_of_jsbytes(""),
     cst_failed_to_set_Monitor_Expe=
      caml_string_of_jsbytes
       ("failed to set [Monitor.Expert.try_with_log_exn]"),
     cst_Monitor_send_exn_found_lis=
      caml_string_of_jsbytes("Monitor.send_exn found listening monitor"),
     cst_Monitor_send_exn=caml_string_of_jsbytes("Monitor.send_exn"),
     cst_monitor_ml_Error=caml_string_of_jsbytes("monitor.ml.Error"),
     cst$24=caml_string_of_jsbytes(""),
     cst_Async_kernel_Monitor=caml_string_of_jsbytes("Async_kernel__Monitor"),
     cst_async_kernel$71=caml_string_of_jsbytes("async_kernel"),
     cst_src_monitor_ml=caml_string_of_jsbytes("src/monitor.ml"),
     cst$23=caml_string_of_jsbytes(""),
     cst_async_kernel$72=caml_string_of_jsbytes("async_kernel"),
     job_queue=caml_string_of_jsbytes('Called from file "job_queue.ml"'),
     deferred0=caml_string_of_jsbytes('Called from file "deferred0.ml"'),
     deferred1=caml_string_of_jsbytes('Called from file "deferred1.ml"'),
     monitor$1=caml_string_of_jsbytes('Called from file "monitor.ml"'),
     import0=caml_string_of_jsbytes('Raised at file "import0.ml"'),
     error=caml_string_of_jsbytes('Called from file "error.ml"'),
     cst_Async_kernel_Monitor_Monit=
      caml_string_of_jsbytes("Async_kernel__Monitor.Monitor_exn"),
     cst_async_kernel$73=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Monitor$0=
      caml_string_of_jsbytes("Async_kernel__Monitor"),
     cst_Stream_first_of_empty_stre=
      caml_string_of_jsbytes("Stream.first of empty stream"),
     cst_Async_kernel_Async_stream=
      caml_string_of_jsbytes("Async_kernel__Async_stream"),
     cst_async_kernel$74=caml_string_of_jsbytes("async_kernel"),
     cst_src_async_stream_ml=caml_string_of_jsbytes("src/async_stream.ml"),
     cst$26=caml_string_of_jsbytes(""),
     cst_async_kernel$75=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$76=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Async_stream$0=
      caml_string_of_jsbytes("Async_kernel__Async_stream"),
     cst_Async_kernel_Time_source_i=
      caml_string_of_jsbytes("Async_kernel__Time_source_intf"),
     cst_async_kernel$77=caml_string_of_jsbytes("async_kernel"),
     cst_src_time_source_intf_ml=
      caml_string_of_jsbytes("src/time_source_intf.ml"),
     cst$27=caml_string_of_jsbytes(""),
     cst_async_kernel$78=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$79=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Time_source_i$0=
      caml_string_of_jsbytes("Async_kernel__Time_source_intf"),
     cst_Async_kernel_Bvar=caml_string_of_jsbytes("Async_kernel__Bvar"),
     cst_async_kernel$80=caml_string_of_jsbytes("async_kernel"),
     cst_src_bvar_ml=caml_string_of_jsbytes("src/bvar.ml"),
     cst$28=caml_string_of_jsbytes(""),
     cst_async_kernel$81=caml_string_of_jsbytes("async_kernel"),
     cst_ivar=caml_string_of_jsbytes("ivar"),
     cst_has_any_waiters=caml_string_of_jsbytes("has_any_waiters"),
     cst_async_kernel$82=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Bvar$0=caml_string_of_jsbytes("Async_kernel__Bvar"),
     cst_Time_source_with_timeout_b$0=
      caml_string_of_jsbytes
       ("Time_source.with_timeout bug: should only abort once"),
     cst_Time_source_with_timeout_b=
      caml_string_of_jsbytes
       ("Time_source.with_timeout bug: both completed and timed out"),
     cst_Time_source_every_got_nonp=
      caml_string_of_jsbytes("Time_source.every got nonpositive span"),
     cst_Time_source_Event_run_at=
      caml_string_of_jsbytes("Time_source.Event.run_at"),
     cst_Time_source_Event_reschedu=
      caml_string_of_jsbytes("Time_source.Event.reschedule_at"),
     cst_Clock_Event_abort_exn_fail=
      caml_string_of_jsbytes
       ("Clock.Event.abort_exn failed to abort event that previously aborted"),
     cst_Clock_Event_abort_exn_fail$0=
      caml_string_of_jsbytes
       ("Clock.Event.abort_exn failed to abort event that previously happened"),
     cst_Time_source_Event_abort=
      caml_string_of_jsbytes("Time_source.Event.abort"),
     pos$4=caml_string_of_jsbytes("src/time_source.ml:294:30"),
     cst_wall_clock$0=caml_string_of_jsbytes("<wall_clock>"),
     cst_Async_kernel_Time_source=
      caml_string_of_jsbytes("Async_kernel__Time_source"),
     cst_async_kernel$83=caml_string_of_jsbytes("async_kernel"),
     cst_src_time_source_ml=caml_string_of_jsbytes("src/time_source.ml"),
     cst$29=caml_string_of_jsbytes(""),
     cst_async_kernel$84=caml_string_of_jsbytes("async_kernel"),
     cst_scheduled_at=caml_string_of_jsbytes("scheduled_at"),
     cst_num_fires_to_skip=caml_string_of_jsbytes("num_fires_to_skip"),
     cst_fired=caml_string_of_jsbytes("fired"),
     cst_alarm$0=caml_string_of_jsbytes("alarm"),
     cst_async_kernel$85=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Time_source$0=
      caml_string_of_jsbytes("Async_kernel__Time_source"),
     cst_Stack_or_counter_pop_exn_o=
      caml_string_of_jsbytes("[Stack_or_counter.pop_exn] of empty stack"),
     cst_Stack_or_counter_create_co=
      caml_string_of_jsbytes
       ("[Stack_or_counter.create_counter] got negative length"),
     cst_Async_kernel_Stack_or_coun=
      caml_string_of_jsbytes("Async_kernel__Stack_or_counter"),
     cst_async_kernel$86=caml_string_of_jsbytes("async_kernel"),
     cst_src_stack_or_counter_ml=
      caml_string_of_jsbytes("src/stack_or_counter.ml"),
     cst$30=caml_string_of_jsbytes(""),
     cst_async_kernel$87=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$88=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Stack_or_coun$0=
      caml_string_of_jsbytes("Async_kernel__Stack_or_counter"),
     cst_enqueue_exclusive_was_call=
      caml_string_of_jsbytes
       ("[enqueue_exclusive] was called with a very large value of [max_concurrent_jobs]. This doesn't work."),
     cst_throttle_aborted_job=caml_string_of_jsbytes("throttle aborted job"),
     cst_Throttle_create_requires_p=
      caml_string_of_jsbytes
       ("Throttle.create requires positive max_concurrent_jobs, but got"),
     cst_Throttle_invariant_failed=
      caml_string_of_jsbytes("Throttle.invariant failed"),
     cst_Async_kernel_Throttle=
      caml_string_of_jsbytes("Async_kernel__Throttle"),
     cst_async_kernel$89=caml_string_of_jsbytes("async_kernel"),
     cst_src_throttle_ml=caml_string_of_jsbytes("src/throttle.ml"),
     cst$31=caml_string_of_jsbytes(""),
     cst_async_kernel$90=caml_string_of_jsbytes("async_kernel"),
     cst_cleaned=caml_string_of_jsbytes("cleaned"),
     cst_num_resources_not_cleaned=
      caml_string_of_jsbytes("num_resources_not_cleaned"),
     cst_cleans=caml_string_of_jsbytes("cleans"),
     cst_is_dead=caml_string_of_jsbytes("is_dead"),
     cst_capacity_available=caml_string_of_jsbytes("capacity_available"),
     cst_num_jobs_running=caml_string_of_jsbytes("num_jobs_running"),
     cst_jobs_waiting_to_start=caml_string_of_jsbytes("jobs_waiting_to_start"),
     cst_job_resources_not_in_use=
      caml_string_of_jsbytes("job_resources_not_in_use"),
     cst_max_concurrent_jobs=caml_string_of_jsbytes("max_concurrent_jobs"),
     cst_continue_on_error=caml_string_of_jsbytes("continue_on_error"),
     cst_async_kernel$91=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Throttle$0=
      caml_string_of_jsbytes("Async_kernel__Throttle"),
     cst_Async_kernel_Synchronous_t$1=
      caml_string_of_jsbytes("Async_kernel__Synchronous_time_source"),
     cst_async_kernel$92=caml_string_of_jsbytes("async_kernel"),
     cst_src_synchronous_time_sourc$1=
      caml_string_of_jsbytes("src/synchronous_time_source.ml"),
     cst$32=caml_string_of_jsbytes(""),
     cst_async_kernel$93=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$94=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Synchronous_t$2=
      caml_string_of_jsbytes("Async_kernel__Synchronous_time_source"),
     cst_Scheduler_yield_every_got_=
      caml_string_of_jsbytes("Scheduler.yield_every got nonpositive count"),
     cst_reset_in_forked_process=
      caml_string_of_jsbytes("reset_in_forked_process"),
     cst_Async_scheduler_is_unusabl=
      caml_string_of_jsbytes
       ("Async scheduler is unusable due to [make_async_unusable]"),
     cst_run_cycles_until_no_jobs_r=
      caml_string_of_jsbytes("run_cycles_until_no_jobs_remain starting"),
     cst_run_cycles_until_no_jobs_r$0=
      caml_string_of_jsbytes
       ("run_cycles_until_no_jobs_remain cannot proceed -- scheduler is dead"),
     cst_run_cycles_until_no_jobs_r$1=
      caml_string_of_jsbytes("run_cycles_until_no_jobs_remain finished"),
     cst_run_cycle_starting=caml_string_of_jsbytes("run_cycle starting"),
     cst_run_cycle_finished=caml_string_of_jsbytes("run_cycle finished"),
     cst_enqueueing_finalizer_using=
      caml_string_of_jsbytes("enqueueing finalizer (using 'last' semantic)"),
     cst_adding_finalizer_using_las=
      caml_string_of_jsbytes("adding finalizer (using 'last' semantic)"),
     cst_enqueueing_finalizer=caml_string_of_jsbytes("enqueueing finalizer"),
     cst_adding_finalizer=caml_string_of_jsbytes("adding finalizer"),
     cst_Attempted_to_remove_a_cycl$0=
      caml_string_of_jsbytes
       ("Attempted to remove a cycle end hook which has already been removed."),
     cst_Attempted_to_remove_a_cycl=
      caml_string_of_jsbytes
       ("Attempted to remove a cycle start hook which has already been removed."),
     cst_Scheduler_remove_single_cy=
      caml_string_of_jsbytes
       ("Scheduler.remove_single_cycle_hook called with a hook that isn't registered"),
     cst_Async_kernel_Scheduler=
      caml_string_of_jsbytes("Async_kernel__Scheduler"),
     cst_async_kernel$95=caml_string_of_jsbytes("async_kernel"),
     cst_src_scheduler_ml=caml_string_of_jsbytes("src/scheduler.ml"),
     cst$33=caml_string_of_jsbytes(""),
     cst_async_kernel$96=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$97=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Scheduler$0=
      caml_string_of_jsbytes("Async_kernel__Scheduler"),
     cst_Async_kernel_Cycle_hook=
      caml_string_of_jsbytes("Async_kernel__Cycle_hook"),
     cst_async_kernel$98=caml_string_of_jsbytes("async_kernel"),
     cst_src_cycle_hook_ml=caml_string_of_jsbytes("src/cycle_hook.ml"),
     cst$34=caml_string_of_jsbytes(""),
     cst_async_kernel$99=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$100=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Cycle_hook$0=
      caml_string_of_jsbytes("Async_kernel__Cycle_hook"),
     cst_Async_kernel_Async_kernel_=
      caml_string_of_jsbytes("Async_kernel__Async_kernel_scheduler"),
     cst_async_kernel$101=caml_string_of_jsbytes("async_kernel"),
     cst_src_async_kernel_scheduler=
      caml_string_of_jsbytes("src/async_kernel_scheduler.ml"),
     cst$35=caml_string_of_jsbytes(""),
     cst_async_kernel$102=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$103=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Async_kernel_$0=
      caml_string_of_jsbytes("Async_kernel__Async_kernel_scheduler"),
     cst_Async_kernel_Clock_intf=
      caml_string_of_jsbytes("Async_kernel__Clock_intf"),
     cst_async_kernel$104=caml_string_of_jsbytes("async_kernel"),
     cst_src_clock_intf_ml=caml_string_of_jsbytes("src/clock_intf.ml"),
     cst$36=caml_string_of_jsbytes(""),
     cst_async_kernel$105=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$106=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Clock_intf$0=
      caml_string_of_jsbytes("Async_kernel__Clock_intf"),
     cst_Async_kernel_Clock_ns=
      caml_string_of_jsbytes("Async_kernel__Clock_ns"),
     cst_async_kernel$107=caml_string_of_jsbytes("async_kernel"),
     cst_src_clock_ns_ml=caml_string_of_jsbytes("src/clock_ns.ml"),
     cst$37=caml_string_of_jsbytes(""),
     cst_async_kernel$108=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$109=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Clock_ns$0=
      caml_string_of_jsbytes("Async_kernel__Clock_ns"),
     cst_Async_kernel_Deferred_arra=
      caml_string_of_jsbytes("Async_kernel__Deferred_array"),
     cst_async_kernel$110=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_array_ml=caml_string_of_jsbytes("src/deferred_array.ml"),
     cst$38=caml_string_of_jsbytes(""),
     cst_async_kernel$111=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$112=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_arra$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_array"),
     cst_Async_kernel_Deferred_list=
      caml_string_of_jsbytes("Async_kernel__Deferred_list"),
     cst_async_kernel$113=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_list_ml=caml_string_of_jsbytes("src/deferred_list.ml"),
     cst$39=caml_string_of_jsbytes(""),
     cst_async_kernel$114=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$115=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_list$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_list"),
     cst_Async_kernel_Deferred_map=
      caml_string_of_jsbytes("Async_kernel__Deferred_map"),
     cst_async_kernel$116=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_map_ml=caml_string_of_jsbytes("src/deferred_map.ml"),
     cst$40=caml_string_of_jsbytes(""),
     cst_async_kernel$117=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$118=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_map$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_map"),
     cst_caught_exception_in_memoiz=
      caml_string_of_jsbytes("caught exception in memoized function"),
     cst_Async_kernel_Deferred_memo=
      caml_string_of_jsbytes("Async_kernel__Deferred_memo"),
     cst_async_kernel$119=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_memo_ml=caml_string_of_jsbytes("src/deferred_memo.ml"),
     cst$41=caml_string_of_jsbytes(""),
     cst_async_kernel$120=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$121=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_memo$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_memo"),
     cst_Async_kernel_Deferred_opti=
      caml_string_of_jsbytes("Async_kernel__Deferred_option"),
     cst_async_kernel$122=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_option_ml=
      caml_string_of_jsbytes("src/deferred_option.ml"),
     cst$42=caml_string_of_jsbytes(""),
     cst_async_kernel$123=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$124=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_opti$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_option"),
     cst_Async_kernel_Deferred_resu=
      caml_string_of_jsbytes("Async_kernel__Deferred_result"),
     cst_async_kernel$125=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_result_ml=
      caml_string_of_jsbytes("src/deferred_result.ml"),
     cst$43=caml_string_of_jsbytes(""),
     cst_async_kernel$126=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$127=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_resu$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_result"),
     cst_Async_kernel_Deferred_or_e=
      caml_string_of_jsbytes("Async_kernel__Deferred_or_error"),
     cst_async_kernel$128=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_or_error_ml=
      caml_string_of_jsbytes("src/deferred_or_error.ml"),
     cst$44=caml_string_of_jsbytes(""),
     cst_async_kernel$129=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$130=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_or_e$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_or_error"),
     cst_Async_kernel_Deferred_queu=
      caml_string_of_jsbytes("Async_kernel__Deferred_queue"),
     cst_async_kernel$131=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_queue_ml=caml_string_of_jsbytes("src/deferred_queue.ml"),
     cst$45=caml_string_of_jsbytes(""),
     cst_async_kernel$132=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$133=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_queu$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_queue"),
     cst_Async_kernel_Deferred_sequ=
      caml_string_of_jsbytes("Async_kernel__Deferred_sequence"),
     cst_async_kernel$134=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_sequence_ml=
      caml_string_of_jsbytes("src/deferred_sequence.ml"),
     cst$46=caml_string_of_jsbytes(""),
     cst_async_kernel$135=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$136=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred_sequ$0=
      caml_string_of_jsbytes("Async_kernel__Deferred_sequence"),
     cst_Async_kernel_Deferred=
      caml_string_of_jsbytes("Async_kernel__Deferred"),
     cst_async_kernel$137=caml_string_of_jsbytes("async_kernel"),
     cst_src_deferred_ml=caml_string_of_jsbytes("src/deferred.ml"),
     cst$47=caml_string_of_jsbytes(""),
     cst_async_kernel$138=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$139=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Deferred$0=
      caml_string_of_jsbytes("Async_kernel__Deferred"),
     cst_Async_kernel_Require_expli=
      caml_string_of_jsbytes("Async_kernel__Require_explicit_time_source"),
     cst_async_kernel$140=caml_string_of_jsbytes("async_kernel"),
     cst_src_require_explicit_time_=
      caml_string_of_jsbytes("src/require_explicit_time_source.ml"),
     cst$48=caml_string_of_jsbytes(""),
     cst_async_kernel$141=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$142=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Require_expli$0=
      caml_string_of_jsbytes("Async_kernel__Require_explicit_time_source"),
     cst_Pipe_interleave=caml_string_of_jsbytes("Pipe.interleave"),
     cst_iter_without_pushback_got_=
      caml_string_of_jsbytes
       ("iter_without_pushback got non-positive max_iterations_per_job"),
     cst_read_exactly=caml_string_of_jsbytes("read_exactly"),
     cst_Pipe_read_exactly_got_num_=
      caml_string_of_jsbytes("Pipe.read_exactly got num_values <= 0"),
     cst_Pipe_read_choice_single_co=
      caml_string_of_jsbytes
       ("Pipe.read_choice_single_consumer_exn: choice was enabled but pipe is empty; this is likely due to a race condition with one or more other consumers"),
     cst_values_available=caml_string_of_jsbytes("values_available"),
     cst_Pipe_read_exn_received_EOF=
      caml_string_of_jsbytes("Pipe.read_exn: received EOF"),
     cst_read$0=caml_string_of_jsbytes("read"),
     cst_read=caml_string_of_jsbytes("read'"),
     cst_max_queue_length_0=caml_string_of_jsbytes("max_queue_length <= 0"),
     cst_read_now=caml_string_of_jsbytes("read_now"),
     cst_Attempt_to_use_consumer_wi=
      caml_string_of_jsbytes("Attempt to use consumer with wrong pipe"),
     cst_write=caml_string_of_jsbytes("write"),
     cst_write_to_closed_pipe=caml_string_of_jsbytes("write to closed pipe"),
     cst_close_read=caml_string_of_jsbytes("close_read"),
     cst_close=caml_string_of_jsbytes("close"),
     cst_negative_size_budget=caml_string_of_jsbytes("negative size_budget"),
     cst_Pipe_invariant_failed=caml_string_of_jsbytes("Pipe.invariant failed"),
     cst_Pipe_Blocked_read_invarian=
      caml_string_of_jsbytes("Pipe.Blocked_read.invariant failed"),
     cst_Pipe_Consumer_invariant_fa=
      caml_string_of_jsbytes("Pipe.Consumer.invariant failed"),
     cst_Async_kernel_Pipe=caml_string_of_jsbytes("Async_kernel__Pipe"),
     cst_async_kernel$143=caml_string_of_jsbytes("async_kernel"),
     cst_src_pipe_ml=caml_string_of_jsbytes("src/pipe.ml"),
     cst$49=caml_string_of_jsbytes(""),
     cst_async_kernel$144=caml_string_of_jsbytes("async_kernel"),
     cst_downstream_flushed=caml_string_of_jsbytes("downstream_flushed"),
     cst_values_read=caml_string_of_jsbytes("values_read"),
     cst_pipe_id=caml_string_of_jsbytes("pipe_id"),
     cst_consumer=caml_string_of_jsbytes("consumer"),
     cst_wants=caml_string_of_jsbytes("wants"),
     cst_upstream_flusheds=caml_string_of_jsbytes("upstream_flusheds"),
     cst_consumers=caml_string_of_jsbytes("consumers"),
     cst_read_closed=caml_string_of_jsbytes("read_closed"),
     cst_closed=caml_string_of_jsbytes("closed"),
     cst_blocked_reads=caml_string_of_jsbytes("blocked_reads"),
     cst_blocked_flushes=caml_string_of_jsbytes("blocked_flushes"),
     cst_num_values_read=caml_string_of_jsbytes("num_values_read"),
     cst_pushback=caml_string_of_jsbytes("pushback"),
     cst_size_budget=caml_string_of_jsbytes("size_budget"),
     cst_buffer=caml_string_of_jsbytes("buffer"),
     cst_info=caml_string_of_jsbytes("info"),
     cst_id$2=caml_string_of_jsbytes("id"),
     cst_async_kernel$145=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Pipe$0=caml_string_of_jsbytes("Async_kernel__Pipe"),
     cst_Mvar_take_exn_called_on_em=
      caml_string_of_jsbytes("Mvar.take_exn called on empty mvar"),
     cst_Mvar_peek_exn_called_on_em=
      caml_string_of_jsbytes("Mvar.peek_exn called on empty mvar"),
     pos$5=caml_string_of_jsbytes("src/mvar.ml:23:26"),
     cst_Async_kernel_Mvar=caml_string_of_jsbytes("Async_kernel__Mvar"),
     cst_async_kernel$146=caml_string_of_jsbytes("async_kernel"),
     cst_src_mvar_ml=caml_string_of_jsbytes("src/mvar.ml"),
     cst$50=caml_string_of_jsbytes(""),
     cst_async_kernel$147=caml_string_of_jsbytes("async_kernel"),
     cst_value_available=caml_string_of_jsbytes("value_available"),
     cst_taken=caml_string_of_jsbytes("taken"),
     cst_current_value=caml_string_of_jsbytes("current_value"),
     cst_async_kernel$148=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Mvar$0=caml_string_of_jsbytes("Async_kernel__Mvar"),
     cst_Async_kernel_Lazy_deferred=
      caml_string_of_jsbytes("Async_kernel__Lazy_deferred"),
     cst_async_kernel$149=caml_string_of_jsbytes("async_kernel"),
     cst_src_lazy_deferred_ml=caml_string_of_jsbytes("src/lazy_deferred.ml"),
     cst$51=caml_string_of_jsbytes(""),
     cst_async_kernel$150=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$151=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Lazy_deferred$0=
      caml_string_of_jsbytes("Async_kernel__Lazy_deferred"),
     cst_Async_kernel_Async_conditi=
      caml_string_of_jsbytes("Async_kernel__Async_condition"),
     cst_async_kernel$152=caml_string_of_jsbytes("async_kernel"),
     cst_src_async_condition_ml=
      caml_string_of_jsbytes("src/async_condition.ml"),
     cst$52=caml_string_of_jsbytes(""),
     cst_async_kernel$153=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$154=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Async_conditi$0=
      caml_string_of_jsbytes("Async_kernel__Async_condition"),
     cst_Async_kernel_Async_gc=
      caml_string_of_jsbytes("Async_kernel__Async_gc"),
     cst_async_kernel$155=caml_string_of_jsbytes("async_kernel"),
     cst_src_async_gc_ml=caml_string_of_jsbytes("src/async_gc.ml"),
     cst$53=caml_string_of_jsbytes(""),
     cst_async_kernel$156=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$157=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Async_gc$0=
      caml_string_of_jsbytes("Async_kernel__Async_gc"),
     cst_Async_kernel_Async_invaria=
      caml_string_of_jsbytes("Async_kernel__Async_invariant_intf"),
     cst_async_kernel$158=caml_string_of_jsbytes("async_kernel"),
     cst_src_async_invariant_intf_m=
      caml_string_of_jsbytes("src/async_invariant_intf.ml"),
     cst$54=caml_string_of_jsbytes(""),
     cst_async_kernel$159=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$160=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Async_invaria$0=
      caml_string_of_jsbytes("Async_kernel__Async_invariant_intf"),
     cst_problem_with_field=caml_string_of_jsbytes("problem with field"),
     cst_invariant_failed=caml_string_of_jsbytes("invariant failed"),
     cst_Async_kernel_Async_invaria$1=
      caml_string_of_jsbytes("Async_kernel__Async_invariant"),
     cst_async_kernel$161=caml_string_of_jsbytes("async_kernel"),
     cst_src_async_invariant_ml=
      caml_string_of_jsbytes("src/async_invariant.ml"),
     cst$55=caml_string_of_jsbytes(""),
     cst_async_kernel$162=caml_string_of_jsbytes("async_kernel"),
     cst_async_kernel$163=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel_Async_invaria$2=
      caml_string_of_jsbytes("Async_kernel__Async_invariant"),
     pos$6=caml_string_of_jsbytes("src/async_kernel.ml:94:17"),
     cst_Async_kernel=caml_string_of_jsbytes("Async_kernel"),
     cst_async_kernel$164=caml_string_of_jsbytes("async_kernel"),
     cst_src_async_kernel_ml=caml_string_of_jsbytes("src/async_kernel.ml"),
     cst$56=caml_string_of_jsbytes(""),
     cst_async_kernel$165=caml_string_of_jsbytes("async_kernel"),
     cst_src_async_kernel_ml$0=caml_string_of_jsbytes("src/async_kernel.ml"),
     cst_return_does_not_allocate=
      caml_string_of_jsbytes("[return ()] does not allocate"),
     cst_async_kernel$166=caml_string_of_jsbytes("async_kernel"),
     cst_Async_kernel$0=caml_string_of_jsbytes("Async_kernel"),
     Core_Time_ns=global_data.Core__Time_ns,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     include=global_data.Core__Time_ns_alternate_sexp,
     Core=global_data.Core,
     Core_Sexp=global_data.Core__Sexp,
     Async_kernel_config=global_data.Async_kernel_config,
     Core_Int=global_data.Core__Int,
     Core_String=global_data.Core__String,
     Core_Debug=global_data.Core__Debug,
     CamlinternalMod=global_data.CamlinternalMod,
     Core_Unique_id=global_data.Core__Unique_id,
     Sexp_hidden_in_test=global_data.Sexp_hidden_in_test,
     Core_Info=global_data.Core__Info,
     Core_Bag=global_data.Core__Bag,
     Core_List=global_data.Core__List,
     Core_Source_code_position=global_data.Core__Source_code_position,
     Base_Field=global_data.Base__Field,
     Base_Backtrace=global_data.Base__Backtrace,
     Core_Univ_map=global_data.Core__Univ_map,
     Core_Option=global_data.Core__Option,
     Tuple_pool=global_data.Tuple_pool,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Stdlib_Obj=global_data.Stdlib__Obj,
     Core_Uniform_array=global_data.Core__Uniform_array,
     Thread_safe_queue=global_data.Thread_safe_queue,
     Assert_failure=global_data.Assert_failure,
     include$5=global_data.Base__Invariant,
     Timing_wheel=global_data.Timing_wheel,
     Core_Error=global_data.Core__Error,
     Core_Or_error=global_data.Core__Or_error,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Base_Exn=global_data.Base__Exn,
     Core_Hashtbl=global_data.Core__Hashtbl,
     Core_Deque=global_data.Core__Deque,
     Core_Result=global_data.Core__Result,
     Core_Binable=global_data.Core__Binable,
     Base_Monad=global_data.Base__Monad,
     Sexplib_Conv=global_data.Sexplib__Conv,
     Base_Stack=global_data.Base__Stack,
     Base=global_data.Base,
     Core_Queue=global_data.Core__Queue,
     Core_Heap_block=global_data.Core__Heap_block,
     Stdlib_Gc=global_data.Stdlib__Gc,
     Stdlib=global_data.Stdlib,
     include$19=global_data.Core__Gc,
     Base_Staged=global_data.Base__Staged,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     Core_Array=global_data.Core__Array,
     Core_Map=global_data.Core__Map,
     Base_List=global_data.Base__List,
     Base_Map=global_data.Base__Map,
     Core_Sequence=global_data.Core__Sequence,
     Core_Memo=global_data.Core__Memo,
     Core_Printf=global_data.Core__Printf,
     Base_Applicative=global_data.Base__Applicative,
     Core_Date=global_data.Core__Date,
     Core_Time_float=global_data.Core__Time_float,
     Pairing_heap=global_data.Pairing_heap,
     Core_Bool=global_data.Core__Bool,
     Moption=global_data.Moption,
     Core_Unit=global_data.Core__Unit,
     Inline_test_config=global_data.Inline_test_config,
     Async_kernel=[0];
    caml_register_global(1073,Async_kernel,"Async_kernel__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Time_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel);
    caml_call1(Expect_test_collector[5][1],cst_src_time_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$0,cst);
    var
     _a_=include[1],
     _b_=include[2],
     _c_=include[3],
     _d_=include[4],
     _e_=include[5],
     _f_=include[6],
     _g_=include[7],
     _h_=include[8],
     _i_=include[9],
     _j_=include[10],
     _k_=include[11],
     _l_=include[12],
     _m_=include[13],
     _n_=include[14],
     _o_=include[15],
     _p_=include[16],
     _q_=include[17],
     _r_=include[18],
     _s_=include[19],
     _t_=include[20],
     _u_=include[21],
     _v_=include[22],
     _w_=include[23],
     _x_=include[24],
     _y_=include[25],
     _z_=include[26],
     _A_=include[27],
     _B_=include[28],
     _C_=include[29],
     _D_=include[30],
     _E_=include[31],
     _F_=include[32],
     _G_=include[33],
     _H_=include[34],
     _I_=include[35],
     _J_=include[36],
     _K_=include[37],
     _L_=include[38],
     _M_=include[39],
     _N_=include[40],
     _O_=include[41],
     _P_=include[42],
     _Q_=include[43],
     _R_=include[44],
     _S_=include[45],
     _T_=include[46],
     _U_=include[47],
     _V_=include[48],
     _W_=include[49],
     _X_=include[50],
     _Y_=include[51],
     _Z_=include[52],
     ___=include[53],
     _$_=include[54],
     _aa_=include[55],
     _ab_=include[56],
     _ac_=include[57],
     _ad_=include[58],
     _ae_=include[59],
     _af_=include[60],
     _ag_=include[61],
     _ah_=include[62],
     _ai_=include[63],
     _aj_=include[64],
     _ak_=include[65],
     _al_=include[66],
     _am_=include[67],
     _an_=include[68],
     _ao_=include[69],
     _ap_=include[70],
     _aq_=include[71],
     _ar_=include[72],
     _as_=include[73],
     _at_=include[74],
     _au_=include[75],
     _av_=include[76],
     _aw_=include[77],
     _ax_=include[78],
     _ay_=include[79],
     _az_=include[80],
     _aA_=include[81],
     _aB_=include[82],
     _aC_=include[83],
     _aD_=include[84],
     _aE_=include[85],
     _aF_=include[86],
     _aG_=include[87],
     _aH_=include[88],
     _aI_=include[89],
     _aJ_=include[90],
     _aK_=include[91],
     _aL_=include[92],
     _aM_=include[93],
     _aN_=include[94],
     _aO_=include[95],
     _aP_=include[96],
     _aQ_=include[97],
     _aR_=include[98],
     _aS_=include[99],
     _aT_=include[100],
     _aU_=include[101],
     _aV_=include[102],
     _aW_=include[103],
     _aX_=include[104],
     _aY_=include[105],
     _aZ_=include[106],
     _a0_=include[107],
     _a1_=include[108],
     _a2_=include[109],
     _a3_=include[110],
     _a4_=include[111],
     _a5_=include[112],
     _bj_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _bk_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _bl_=[0,caml_string_of_jsbytes("Low")],
     _bm_=[0,caml_string_of_jsbytes("Normal")],
     _bn_=[0,[0]],
     _bo_=[0,caml_string_of_jsbytes("src/types.ml"),37,2],
     _bp_=[0,[0]],
     _bq_=[0,caml_string_of_jsbytes("src/types.ml"),42,2],
     _br_=[0,[0,[0,[0]]]],
     _bs_=[0,caml_string_of_jsbytes("src/types.ml"),51,2],
     _bt_=[0,[0]],
     _bu_=[0,caml_string_of_jsbytes("src/types.ml"),56,2],
     _bv_=[0,[0]],
     _bw_=[0,caml_string_of_jsbytes("src/types.ml"),66,2],
     _bx_=[0,[0]],
     _by_=[0,caml_string_of_jsbytes("src/types.ml"),74,2],
     _bz_=[0,[0]],
     _bA_=[0,caml_string_of_jsbytes("src/types.ml"),88,2],
     _bB_=[0,[0]],
     _bC_=[0,caml_string_of_jsbytes("src/types.ml"),93,2],
     _bD_=[0,[0]],
     _bE_=[0,caml_string_of_jsbytes("src/types.ml"),102,2],
     _bF_=[0,[0]],
     _bG_=[0,[0]],
     _bH_=[0,[0,[0,[0]]]],
     _bI_=[0,[0]],
     _bJ_=[0,[0]],
     _bK_=[0,[0]],
     _bL_=[0,[0]],
     _bM_=[0,[0]],
     _bN_=[0,[0]],
     _bO_=[0,[0,[0,[0]],[0,[0]]]],
     _bP_=[0,caml_string_of_jsbytes("src/types.ml"),155,2],
     _bQ_=[0,[0]],
     _bR_=[0,caml_string_of_jsbytes("src/types.ml"),160,2],
     _bS_=[0,[0]],
     _bT_=[0,caml_string_of_jsbytes("src/types.ml"),166,2],
     _bU_=[0,[0]],
     _bV_=[0,caml_string_of_jsbytes("src/types.ml"),171,2],
     _bW_=[0,[0]],
     _bX_=[0,caml_string_of_jsbytes("src/types.ml"),176,2],
     _bY_=[0,[0]],
     _bZ_=[0,caml_string_of_jsbytes("src/types.ml"),188,2],
     _b0_=[0,[0]],
     _b1_=[0,caml_string_of_jsbytes("src/types.ml"),198,2],
     _b2_=[0,[0]],
     _b3_=[0,caml_string_of_jsbytes("src/types.ml"),233,2],
     _b4_=[0,[0]],
     _b5_=[0,caml_string_of_jsbytes("src/types.ml"),238,2],
     _b6_=[0,[0]],
     _b7_=[0,caml_string_of_jsbytes("src/types.ml"),256,2],
     _b8_=[0,[0,[0,[0]]]],
     _b9_=[0,caml_string_of_jsbytes("src/types.ml"),270,2],
     _b__=[0,[0,[0,[0]],[0,[0]]]],
     _b$_=[0,[0]],
     _ca_=[0,[0]],
     _cb_=[0,[0]],
     _cc_=[0,[0]],
     _cd_=[0,[0]],
     _ce_=[0,[0]],
     _cf_=[0,[0]],
     _cg_=[0,[0]],
     _ch_=[0,[0]],
     _ci_=[0,[0,[0,[0]]]],
     _cz_=[0,caml_string_of_jsbytes("main")],
     _cI_=[0,caml_string_of_jsbytes("backtrace_history")],
     _cJ_=[0,caml_string_of_jsbytes("local_storage")],
     _cK_=[0,caml_string_of_jsbytes("priority")],
     _cL_=[0,caml_string_of_jsbytes("monitor")],
     _cM_=[0,caml_string_of_jsbytes("<job>")],
     _de_=[0,0],
     _dc_=[0,caml_string_of_jsbytes("t")],
     _dd_=[0,caml_string_of_jsbytes("n")],
     _da_=[0,caml_string_of_jsbytes("src/job_queue.ml"),39,48],
     _c$_=[0,caml_string_of_jsbytes("src/job_queue.ml"),41,44],
     _c__=[0,caml_string_of_jsbytes("src/job_queue.ml"),51,11],
     _c9_=[0,caml_string_of_jsbytes("src/job_queue.ml"),52,11],
     _c8_=[0,caml_string_of_jsbytes("src/job_queue.ml"),55,11],
     _c7_=[0,caml_string_of_jsbytes("src/job_queue.ml"),56,11],
     _c6_=[0,caml_string_of_jsbytes("src/job_queue.ml"),59,11],
     _c5_=[0,caml_string_of_jsbytes("src/job_queue.ml"),60,11],
     _db_=[0,caml_string_of_jsbytes("src/job_queue.ml"),36,1334,1356],
     _cZ_=[0,caml_string_of_jsbytes("length")],
     _c0_=[0,caml_string_of_jsbytes("front")],
     _c1_=[0,caml_string_of_jsbytes("mask")],
     _c2_=[0,caml_string_of_jsbytes("jobs")],
     _c3_=[0,caml_string_of_jsbytes("jobs_left_this_cycle")],
     _c4_=[0,caml_string_of_jsbytes("num_jobs_run")],
     _ej_=[0,0],
     _ei_=[0,caml_string_of_jsbytes("src/synchronous_time_source0.ml"),633,48],
     _eh_=[0,0],
     _eg_=[0,caml_string_of_jsbytes("reason")],
     _ed_=[0,caml_string_of_jsbytes("Ok")],
     _ee_=[0,caml_string_of_jsbytes("Currently_happening")],
     _ef_=[0,caml_string_of_jsbytes("Previously_unscheduled")],
     _eb_=[0,caml_string_of_jsbytes("alarm_precision")],
     _ec_=[0,caml_string_of_jsbytes("span")],
     _d$_=[0,caml_string_of_jsbytes("_")],
     _d__=[0,caml_string_of_jsbytes("src/synchronous_time_source0.ml"),339,17],
     _d9_=[0,caml_string_of_jsbytes("src/synchronous_time_source0.ml"),346,15],
     _d8_=[0,caml_string_of_jsbytes("src/synchronous_time_source0.ml"),350,17],
     _d7_=[0,caml_string_of_jsbytes("src/synchronous_time_source0.ml"),362,29],
     _ea_=
      [0,
       caml_string_of_jsbytes("src/synchronous_time_source0.ml"),
       323,
       11243,
       11267],
     _d4_=[0,caml_string_of_jsbytes("now")],
     _d5_=[0,caml_string_of_jsbytes("events")],
     _d6_=[0,caml_string_of_jsbytes("now")],
     _dJ_=[0,caml_string_of_jsbytes("event")],
     _dK_=[0,caml_string_of_jsbytes("to_")],
     _dL_=[0,caml_string_of_jsbytes("from")],
     _dH_=[0,caml_string_of_jsbytes("src/synchronous_time_source0.ml"),206,17],
     _dG_=[0,caml_string_of_jsbytes("src/synchronous_time_source0.ml"),216,17],
     _dI_=
      [0,
       caml_string_of_jsbytes("src/synchronous_time_source0.ml"),
       182,
       5945,
       5971],
     _dp_=[1,0],
     _dm_=[0,caml_string_of_jsbytes("interval")],
     _dn_=[0,caml_string_of_jsbytes("at")],
     _do_=[0,caml_string_of_jsbytes("status")],
     _di_=[0,caml_string_of_jsbytes("Fired")],
     _dj_=[0,caml_string_of_jsbytes("Happening")],
     _dk_=[0,caml_string_of_jsbytes("Scheduled")],
     _dl_=[0,caml_string_of_jsbytes("Unscheduled")],
     _dg_=[0,13,[0,6,[0,6,[0,5,0]]]],
     _fV_=[0,0],
     _fW_=[0,0],
     _fT_=[0,caml_string_of_jsbytes("src/scheduler1.ml"),170,40],
     _fS_=[0,caml_string_of_jsbytes("src/scheduler1.ml"),171,46],
     _fR_=[0,caml_string_of_jsbytes("src/scheduler1.ml"),187,43],
     _fQ_=[0,caml_string_of_jsbytes("src/scheduler1.ml"),191,14],
     _fO_=[0,caml_string_of_jsbytes("t")],
     _fP_=[0,caml_string_of_jsbytes("exn")],
     _fN_=[0,caml_string_of_jsbytes("src/scheduler1.ml"),153,2],
     _fl_=[0,caml_string_of_jsbytes("record_backtraces")],
     _fm_=[0,caml_string_of_jsbytes("max_num_jobs_per_priority_per_cycle")],
     _fn_=[0,caml_string_of_jsbytes("check_invariants")],
     _fo_=[0,caml_string_of_jsbytes("yield_until_no_jobs_remain")],
     _fp_=[0,caml_string_of_jsbytes("yield")],
     _fq_=[0,caml_string_of_jsbytes("event_added_hook")],
     _fr_=[0,caml_string_of_jsbytes("job_queued_hook")],
     _fs_=[0,caml_string_of_jsbytes("thread_safe_external_job_hook")],
     _ft_=[0,caml_string_of_jsbytes("external_jobs")],
     _fu_=[0,caml_string_of_jsbytes("time_source")],
     _fv_=[0,caml_string_of_jsbytes("total_cycle_time")],
     _fw_=[0,caml_string_of_jsbytes("last_cycle_num_jobs")],
     _fx_=[0,caml_string_of_jsbytes("last_cycle_time")],
     _fy_=[0,caml_string_of_jsbytes("run_every_cycle_end_state")],
     _fz_=[0,caml_string_of_jsbytes("run_every_cycle_end")],
     _fA_=[0,caml_string_of_jsbytes("run_every_cycle_start_state")],
     _fB_=[0,caml_string_of_jsbytes("run_every_cycle_start")],
     _fC_=[0,caml_string_of_jsbytes("in_cycle")],
     _fD_=[0,caml_string_of_jsbytes("cycle_start")],
     _fE_=[0,caml_string_of_jsbytes("cycle_count")],
     _fF_=[0,caml_string_of_jsbytes("uncaught_exn")],
     _fG_=[0,caml_string_of_jsbytes("current_execution_context")],
     _fH_=[0,caml_string_of_jsbytes("main_execution_context")],
     _fI_=[0,caml_string_of_jsbytes("very_low_priority_workers")],
     _fJ_=[0,caml_string_of_jsbytes("low_priority_jobs")],
     _fK_=[0,caml_string_of_jsbytes("normal_priority_jobs")],
     _fL_=[0,caml_string_of_jsbytes("job_pool")],
     _fM_=[0,caml_string_of_jsbytes("check_access")],
     _es_=[0,caml_string_of_jsbytes("src/scheduler1.ml"),51,1645,1669],
     _eq_=[0,caml_string_of_jsbytes("exec")],
     _er_=[0,caml_string_of_jsbytes("execution_context")],
     _ek_=[0,caml_string_of_jsbytes("Not_finished")],
     _el_=[0,caml_string_of_jsbytes("Finished")],
     _gb_=[0,caml_string_of_jsbytes("src/ivar0.ml"),450,21],
     _gc_=[0,caml_string_of_jsbytes("src/ivar0.ml"),446,35],
     _ga_=[0,caml_string_of_jsbytes("src/ivar0.ml"),383,15],
     _f$_=[0,caml_string_of_jsbytes("src/ivar0.ml"),362,15],
     _f__=[0,caml_string_of_jsbytes("src/ivar0.ml"),340,15],
     _f9_=[0,caml_string_of_jsbytes("src/ivar0.ml"),321,15],
     _f6_=[0,caml_string_of_jsbytes("_")],
     _f7_=[0,caml_string_of_jsbytes("t")],
     _f8_=[0,caml_string_of_jsbytes("src/ivar0.ml"),306,15],
     _f5_=[0,caml_string_of_jsbytes("src/ivar0.ml"),296,15],
     _f4_=[0,caml_string_of_jsbytes("src/ivar0.ml"),285,15],
     _f3_=[0,caml_string_of_jsbytes("src/ivar0.ml"),277,15],
     _f1_=[0,caml_string_of_jsbytes("Full")],
     _f2_=[0,caml_string_of_jsbytes("src/ivar0.ml"),269,15],
     _f0_=[0,caml_string_of_jsbytes("Empty")],
     _fZ_=[0,caml_string_of_jsbytes("src/ivar0.ml"),258,15],
     _fY_=[0,caml_string_of_jsbytes("execution_context")],
     _fX_=[0,caml_string_of_jsbytes("src/ivar0.ml"),118,6],
     _gm_=[0,caml_string_of_jsbytes("Parallel")],
     _gn_=[0,caml_string_of_jsbytes("Sequential")],
     _go_=[0,caml_string_of_jsbytes("Max_concurrent_jobs")],
     _gr_=[0,caml_string_of_jsbytes("src/deferred1.ml"),120,10],
     _gB_=[0,caml_string_of_jsbytes("_")],
     _gA_=[0,caml_string_of_jsbytes("src/ivar_filler.ml"),15,20],
     _gC_=[0,caml_string_of_jsbytes("src/ivar_filler.ml"),12,154,176],
     _gy_=[0,caml_string_of_jsbytes("Empty")],
     _gz_=[0,caml_string_of_jsbytes("Full")],
     _gD_=[0,caml_string_of_jsbytes("...")],
     _gU_=[0,caml_string_of_jsbytes("finally_exn")],
     _gV_=[0,caml_string_of_jsbytes("exn")],
     _gW_=[0,523273847],
     _gX_=[0,0],
     _gY_=[0,caml_string_of_jsbytes("finally")],
     _gT_=[0,3903734],
     _gS_=[0,caml_string_of_jsbytes("src/monitor.ml"),422,17],
     _gR_=[0,caml_string_of_jsbytes("exn")],
     _gP_=[0,3553398],
     _gQ_=[1,0],
     _gO_=[0,caml_string_of_jsbytes("src/monitor.ml"),199,6],
     _gH_=
      [0,
       [11,
        caml_string_of_jsbytes("file "),
        [3,0,[11,caml_string_of_jsbytes(", line LINE, characters C1-C2"),0]]],
       caml_string_of_jsbytes("file %S, line LINE, characters C1-C2")],
     _gM_=
      [0,
       [11,
        caml_string_of_jsbytes("file "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(", line "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,0]]]]]]]],
       caml_string_of_jsbytes("file %S, line %d, characters %d-%d")],
     _gI_=
      [0,
       [11,
        caml_string_of_jsbytes("Caught by monitor "),
        [2,0,[11,caml_string_of_jsbytes(" at "),[2,0,0]]]],
       caml_string_of_jsbytes("Caught by monitor %s at %s")],
     _gK_=
      [0,
       [11,caml_string_of_jsbytes("Caught by monitor at "),[2,0,0]],
       caml_string_of_jsbytes("Caught by monitor at %s")],
     _gL_=
      [0,
       [11,caml_string_of_jsbytes("Caught by monitor "),[2,0,0]],
       caml_string_of_jsbytes("Caught by monitor %s")],
     _gJ_=[0,caml_string_of_jsbytes("backtrace_history")],
     _gG_=[0,caml_string_of_jsbytes("src/monitor.ml"),46,23],
     _gE_=[0,caml_string_of_jsbytes("src/monitor.ml"),20,44],
     _gF_=[0,caml_string_of_jsbytes("src/monitor.ml"),13,226,248],
     _g2_=[0,-146189108],
     _g3_=[0,523273847],
     _g1_=[0,caml_string_of_jsbytes("src/async_stream.ml"),179,18],
     _hc_=[0,caml_string_of_jsbytes("has_any_waiters")],
     _ha_=[0,caml_string_of_jsbytes("_")],
     _g$_=[0,caml_string_of_jsbytes("src/bvar.ml"),19,47],
     _g__=[0,caml_string_of_jsbytes("src/bvar.ml"),23,11],
     _hb_=[0,caml_string_of_jsbytes("src/bvar.ml"),14,287,309],
     _g8_=[0,caml_string_of_jsbytes("ivar")],
     _g9_=[0,caml_string_of_jsbytes("has_any_waiters")],
     _hU_=[0,1],
     _hT_=[0,caml_string_of_jsbytes("span")],
     _hR_=[0,-146189108],
     _hS_=[0,3903734],
     _hQ_=[0,caml_string_of_jsbytes("_")],
     _hP_=[0,caml_string_of_jsbytes("_")],
     _hM_=[0,caml_string_of_jsbytes("Ok")],
     _hN_=[0,caml_string_of_jsbytes("Previously_aborted")],
     _hO_=[0,caml_string_of_jsbytes("Previously_happened")],
     _hL_=[0,caml_string_of_jsbytes("_")],
     _hK_=[0,caml_string_of_jsbytes("_")],
     _hH_=[0,caml_string_of_jsbytes("Ok")],
     _hI_=[0,caml_string_of_jsbytes("Previously_aborted")],
     _hJ_=[0,caml_string_of_jsbytes("Previously_happened")],
     _hE_=[0,caml_string_of_jsbytes("Aborted")],
     _hF_=[0,caml_string_of_jsbytes("Happened")],
     _hG_=[0,caml_string_of_jsbytes("Scheduled_at")],
     _hC_=[0,caml_string_of_jsbytes("_")],
     _hB_=[0,caml_string_of_jsbytes("_")],
     _hz_=[0,caml_string_of_jsbytes("src/time_source.ml"),278,18],
     _hA_=[0,caml_string_of_jsbytes("src/time_source.ml"),280,18],
     _hy_=[0,caml_string_of_jsbytes("src/time_source.ml"),289,43],
     _hD_=[0,caml_string_of_jsbytes("src/time_source.ml"),271,9504,9528],
     _hs_=[0,caml_string_of_jsbytes("time_source")],
     _ht_=[0,caml_string_of_jsbytes("scheduled_at")],
     _hu_=[0,caml_string_of_jsbytes("num_fires_to_skip")],
     _hv_=[0,caml_string_of_jsbytes("fired")],
     _hw_=[0,caml_string_of_jsbytes("fire")],
     _hx_=[0,caml_string_of_jsbytes("alarm")],
     _hi_=[0,caml_string_of_jsbytes("Aborted")],
     _hj_=[0,caml_string_of_jsbytes("Happened")],
     _hh_=[0,caml_string_of_jsbytes("src/time_source.ml"),228,5],
     _he_=[0,caml_string_of_jsbytes("_")],
     _hf_=[0,caml_string_of_jsbytes("events")],
     _hg_=[0,caml_string_of_jsbytes("is_wall_clock")],
     _hY_=[0,caml_string_of_jsbytes("length")],
     _hV_=[0,caml_string_of_jsbytes("Stack")],
     _hW_=[0,caml_string_of_jsbytes("length")],
     _hX_=[0,caml_string_of_jsbytes("Counter")],
     _iS_=[0,caml_string_of_jsbytes("src/throttle.ml"),173,2],
     _iU_=[0,caml_string_of_jsbytes("src/throttle.ml"),174,2],
     _iT_=[0,caml_string_of_jsbytes("src/throttle.ml"),175,2],
     _iW_=[0,caml_string_of_jsbytes("src/throttle.ml"),279,2],
     _iV_=[0,caml_string_of_jsbytes("max_concurrent_jobs")],
     _iE_=[0,caml_string_of_jsbytes("_")],
     _iR_=[0,caml_string_of_jsbytes("src/throttle.ml"),104,43],
     _iQ_=[0,caml_string_of_jsbytes("src/throttle.ml"),108,11],
     _iP_=[0,caml_string_of_jsbytes("src/throttle.ml"),113,29],
     _iO_=[0,caml_string_of_jsbytes("src/throttle.ml"),116,11],
     _iN_=[0,caml_string_of_jsbytes("src/throttle.ml"),117,11],
     _iM_=[0,caml_string_of_jsbytes("src/throttle.ml"),119,16],
     _iL_=[0,caml_string_of_jsbytes("src/throttle.ml"),123,26],
     _iK_=[0,caml_string_of_jsbytes("src/throttle.ml"),128,11],
     _iJ_=[0,caml_string_of_jsbytes("src/throttle.ml"),129,11],
     _iI_=[0,caml_string_of_jsbytes("src/throttle.ml"),130,69],
     _iH_=[0,caml_string_of_jsbytes("src/throttle.ml"),133,40],
     _iF_=[0,caml_string_of_jsbytes("t")],
     _iG_=[0,caml_string_of_jsbytes("exn")],
     _iu_=[0,caml_string_of_jsbytes("cleaned")],
     _iv_=[0,caml_string_of_jsbytes("num_resources_not_cleaned")],
     _iw_=[0,caml_string_of_jsbytes("cleans")],
     _ix_=[0,caml_string_of_jsbytes("is_dead")],
     _iy_=[0,caml_string_of_jsbytes("capacity_available")],
     _iz_=[0,caml_string_of_jsbytes("num_jobs_running")],
     _iA_=[0,caml_string_of_jsbytes("jobs_waiting_to_start")],
     _iB_=[0,caml_string_of_jsbytes("job_resources_not_in_use")],
     _iC_=[0,caml_string_of_jsbytes("max_concurrent_jobs")],
     _iD_=[0,caml_string_of_jsbytes("continue_on_error")],
     _h$_=[0,caml_string_of_jsbytes("src/throttle.ml"),58,18],
     _h9_=[0,3804260],
     _h__=[0,523273847],
     _h6_=[0,caml_string_of_jsbytes("Abort")],
     _h7_=[0,caml_string_of_jsbytes("Start")],
     _h3_=[0,caml_string_of_jsbytes("Ok")],
     _h4_=[0,caml_string_of_jsbytes("Raised")],
     _h2_=[0,caml_string_of_jsbytes("Aborted")],
     _h5_=[0,caml_string_of_jsbytes("outcome")],
     _h8_=[0,caml_string_of_jsbytes("start")],
     _hZ_=[0,caml_string_of_jsbytes("Aborted")],
     _h0_=[0,caml_string_of_jsbytes("Ok")],
     _h1_=[0,caml_string_of_jsbytes("Raised")],
     _i8_=[0,caml_string_of_jsbytes("src/scheduler.ml"),324,4],
     _i9_=[0,1],
     _i7_=[0,caml_string_of_jsbytes("n")],
     _i6_=[0,caml_string_of_jsbytes("scheduler")],
     _i__=[0,caml_string_of_jsbytes("Timeout")],
     _i$_=[0,caml_string_of_jsbytes("Result")],
     _jf_=[0,0],
     _je_=[0,0],
     _jh_=[0,0],
     _jg_=[0,0],
     _ji_=[0,-542431297],
     _jl_=[0,3804260],
     _jm_=[0,3903734],
     _jj_=[0,3804260],
     _jk_=[0,3903734],
     _jF_=[0,0],
     _jE_=[0,0],
     _jH_=[0,0],
     _jG_=[0,0],
     _lK_=[0,caml_string_of_jsbytes("Mapped")],
     _lJ_=[0,caml_string_of_jsbytes("src/pipe.ml"),949,4],
     _lI_=[0,caml_string_of_jsbytes("max_iterations_per_job")],
     _lG_=[0,3804260],
     _lH_=[0,523273847],
     _lD_=[0,caml_string_of_jsbytes("When_value_read")],
     _lE_=[0,caml_string_of_jsbytes("When_value_processed")],
     _lF_=[0,caml_string_of_jsbytes("Consumer")],
     _lC_=[0,caml_string_of_jsbytes("src/pipe.ml"),674,6],
     _lB_=[0,caml_string_of_jsbytes("num_values")],
     _lA_=[0,caml_string_of_jsbytes("here")],
     _lz_=[0,caml_string_of_jsbytes("src/pipe.ml"),623,4],
     _ly_=[0,caml_string_of_jsbytes("max_queue_length")],
     _lx_=[0,caml_string_of_jsbytes("src/pipe.ml"),574,4],
     _lw_=[0,caml_string_of_jsbytes("_")],
     _lv_=[0,caml_string_of_jsbytes("_")],
     _ls_=[0,caml_string_of_jsbytes("_")],
     _lt_=[0,caml_string_of_jsbytes("pipe")],
     _lu_=[0,caml_string_of_jsbytes("consumer")],
     _lq_=[0,caml_string_of_jsbytes("_")],
     _lp_=[0,caml_string_of_jsbytes("_")],
     _lo_=[0,caml_string_of_jsbytes("_")],
     _ln_=[0,caml_string_of_jsbytes("_")],
     _lr_=[0,caml_string_of_jsbytes("pipe")],
     _lm_=[0,caml_string_of_jsbytes("src/pipe.ml"),465,2],
     _ll_=[0,caml_string_of_jsbytes("src/pipe.ml"),456,2],
     _lj_=[0,3804260],
     _lk_=[0,523273847],
     _lh_=[0,3804260],
     _li_=[0,523273847],
     _lg_=[0,caml_string_of_jsbytes("_")],
     _lf_=[0,caml_string_of_jsbytes("_")],
     _le_=[0,caml_string_of_jsbytes("_")],
     _ld_=[0,caml_string_of_jsbytes("_")],
     _lc_=[0,caml_string_of_jsbytes("size_budget")],
     _lb_=[0,caml_string_of_jsbytes("src/pipe.ml"),307,2],
     _la_=[0,caml_string_of_jsbytes("src/pipe.ml"),300,2],
     _k0_=[0,caml_string_of_jsbytes("_")],
     _kZ_=[0,caml_string_of_jsbytes("_")],
     _k$_=[0,caml_string_of_jsbytes("src/pipe.ml"),258,46],
     _k__=[0,caml_string_of_jsbytes("src/pipe.ml"),261,11],
     _k7_=[0,caml_string_of_jsbytes("src/pipe.ml"),269,13],
     _k9_=[0,caml_string_of_jsbytes("src/pipe.ml"),270,11],
     _k8_=[0,caml_string_of_jsbytes("src/pipe.ml"),276,30],
     _k4_=[0,caml_string_of_jsbytes("src/pipe.ml"),284,13],
     _k6_=[0,caml_string_of_jsbytes("src/pipe.ml"),281,36],
     _k5_=[0,caml_string_of_jsbytes("src/pipe.ml"),286,31],
     _k3_=[0,caml_string_of_jsbytes("src/pipe.ml"),293,13],
     _k1_=[0,caml_string_of_jsbytes("pipe")],
     _k2_=[0,caml_string_of_jsbytes("exn")],
     _kN_=[0,caml_string_of_jsbytes("upstream_flusheds")],
     _kO_=[0,caml_string_of_jsbytes("consumers")],
     _kP_=[0,caml_string_of_jsbytes("read_closed")],
     _kQ_=[0,caml_string_of_jsbytes("closed")],
     _kR_=[0,caml_string_of_jsbytes("blocked_reads")],
     _kS_=[0,caml_string_of_jsbytes("blocked_flushes")],
     _kT_=[0,caml_string_of_jsbytes("num_values_read")],
     _kU_=[0,caml_string_of_jsbytes("pushback")],
     _kV_=[0,caml_string_of_jsbytes("size_budget")],
     _kW_=[0,caml_string_of_jsbytes("buffer")],
     _kX_=[0,caml_string_of_jsbytes("info")],
     _kY_=[0,caml_string_of_jsbytes("id")],
     _kl_=[0,caml_string_of_jsbytes("Ok")],
     _km_=[0,caml_string_of_jsbytes("Reader_closed")],
     _kn_=[0,caml_string_of_jsbytes("ready")],
     _ko_=[0,caml_string_of_jsbytes("fill_when_num_values_read")],
     _kh_=[0,caml_string_of_jsbytes("_")],
     _kk_=[0,caml_string_of_jsbytes("src/pipe.ml"),140,33],
     _ki_=[0,caml_string_of_jsbytes("pipe")],
     _kj_=[0,caml_string_of_jsbytes("exn")],
     _kf_=[0,caml_string_of_jsbytes("consumer")],
     _kg_=[0,caml_string_of_jsbytes("wants")],
     _j__=[0,caml_string_of_jsbytes("Eof")],
     _j$_=[0,caml_string_of_jsbytes("Ok")],
     _j7_=[0,caml_string_of_jsbytes("Eof")],
     _j8_=[0,caml_string_of_jsbytes("Ok")],
     _j4_=[0,caml_string_of_jsbytes("Eof")],
     _j5_=[0,caml_string_of_jsbytes("Ok")],
     _j6_=[0,caml_string_of_jsbytes("Zero")],
     _j9_=[0,caml_string_of_jsbytes("One")],
     _ka_=[0,caml_string_of_jsbytes("At_most")],
     _j3_=[0,caml_string_of_jsbytes("src/pipe.ml"),79,54],
     _j1_=[0,caml_string_of_jsbytes("pipe")],
     _j2_=[0,caml_string_of_jsbytes("exn")],
     _jW_=[0,caml_string_of_jsbytes("downstream_flushed")],
     _jX_=[0,caml_string_of_jsbytes("Have_been_sent_downstream")],
     _j0_=[0,caml_string_of_jsbytes("Have_not_been_sent_downstream")],
     _jY_=[0,caml_string_of_jsbytes("values_read")],
     _jZ_=[0,caml_string_of_jsbytes("pipe_id")],
     _jO_=[0,caml_string_of_jsbytes("Ok")],
     _jP_=[0,caml_string_of_jsbytes("Reader_closed")],
     _lW_=[0,caml_string_of_jsbytes("src/mvar.ml"),60,2],
     _lU_=[0,caml_string_of_jsbytes("_")],
     _lV_=[0,caml_string_of_jsbytes("src/mvar.ml"),16,357,379],
     _lR_=[0,caml_string_of_jsbytes("value_available")],
     _lS_=[0,caml_string_of_jsbytes("taken")],
     _lT_=[0,caml_string_of_jsbytes("current_value")],
     _lY_=[0,3804260],
     _lX_=[0,3804260],
     _l__=[0,caml_string_of_jsbytes("waits")],
     _mf_=[0,caml_string_of_jsbytes("exn")],
     _mg_=[0,caml_string_of_jsbytes("field")],
     _mh_=[0,3804260],
     _mi_=[0,523273847],
     _mj_=[0,1],
     _mb_=[0,caml_string_of_jsbytes("exn")],
     _mc_=[0,3804260],
     _md_=[0,523273847],
     _me_=[0,1];
    function after(t,span)
     {var result=caml_call2(_Y_,t,span);
      if
       (caml_call2(Core_Time_ns[1][18],span,Core_Time_ns[1][75])
        &&
        caml_call2(_aR_,result,t))
       return _U_;
      return result}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Time_ns$0);
    var
     include$0=
      [0,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       after];
    caml_register_global(1080,include$0,"Async_kernel__Time_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Debug);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$2);
    caml_call1(Expect_test_collector[5][1],cst_src_debug_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$3,cst$0);
    var
     _a6_=Async_kernel_config[14],
     _a7_=_a6_[1],
     _a__=_a6_[4],
     _ba_=_a6_[6],
     _bb_=_a6_[7],
     _be_=_a6_[10],
     _a8_=_a6_[2],
     _a9_=_a6_[3],
     _a$_=_a6_[5],
     _bc_=_a6_[8],
     _bd_=_a6_[9],
     _bf_=_a6_[11],
     _bg_=_a6_[12],
     _bh_=_a6_[13],
     _bi_=_a6_[14];
    function log(arg2_003,arg3_004,sexp_of_a)
     {var
       arg1_002=caml_call1(_X_,0),
       arg0_001=caml_call1(Async_kernel_config[31][1],0),
       res0_005=caml_call1(Core_Sexp[90],arg0_001),
       res1_006=caml_call1(_aL_,arg1_002),
       res2_007=caml_call1(Core[471],arg2_003),
       res3_008=caml_call1(sexp_of_a,arg3_004),
       _Lr_=
        caml_call2
         (Core_Sexp[81],
          0,
          [1,[0,res0_005,[0,res1_006,[0,res2_007,[0,res3_008,0]]]]]);
      return caml_call2(Core[231],_bj_,_Lr_)}
    function log_string(message){return log(message,0,Core[518])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Debug$0);
    var
     Async_kernel_Debug=
      [0,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       log,
       log_string];
    caml_register_global(1084,Async_kernel_Debug,"Async_kernel__Debug");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$5);
    caml_call1(Expect_test_collector[5][1],cst_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$6,cst$1);
    var
     include$1=Core_Int[99],
     symbol=include$1[1],
     symbol$0=include$1[2],
     symbol$1=include$1[3],
     symbol$2=include$1[4],
     symbol$3=include$1[5],
     symbol$4=include$1[6],
     equal=include$1[7],
     compare=include$1[8],
     min=include$1[9],
     max=include$1[10],
     concat=Core_String[32],
     eprint=Core_Debug[1],
     eprint_s=Core_Debug[3],
     eprints=Core_Debug[2];
    function print_s(sexp)
     {var _Lq_=caml_call2(Core_Sexp[81],0,sexp);
      return caml_call2(Core[250],_bk_,_Lq_)}
    var sec=Core_Time_ns[1][81],Thread=[0],Unix=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Import$0);
    var
     Async_kernel_Import=
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       concat,
       eprint,
       eprint_s,
       eprints,
       print_s,
       sec,
       Thread,
       Unix];
    caml_register_global(1088,Async_kernel_Import,"Async_kernel__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Priority);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$8);
    caml_call1(Expect_test_collector[5][1],cst_src_priority_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$9,cst$2);
    function sexp_of_t(param){return param?_bl_:_bm_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Priority$0);
    var Async_kernel_Priority=[0,sexp_of_t,0,1];
    caml_register_global(1089,Async_kernel_Priority,"Async_kernel__Priority");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Types);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$11);
    caml_call1(Expect_test_collector[5][1],cst_src_types_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$12,cst$3);
    var
     Cell=caml_call2(CamlinternalMod[1],_bo_,_bn_),
     Handler=caml_call2(CamlinternalMod[1],_bq_,_bp_),
     Ivar=caml_call2(CamlinternalMod[1],_bs_,_br_),
     Deferred=caml_call2(CamlinternalMod[1],_bu_,_bt_),
     Execution_context=caml_call2(CamlinternalMod[1],_bw_,_bv_),
     Forwarding=caml_call2(CamlinternalMod[1],_by_,_bx_),
     Monitor=caml_call2(CamlinternalMod[1],_bA_,_bz_),
     Tail=caml_call2(CamlinternalMod[1],_bC_,_bB_),
     Stream=caml_call2(CamlinternalMod[1],_bE_,_bD_);
    caml_call3(CamlinternalMod[2],_bF_,Cell,Cell);
    caml_call3(CamlinternalMod[2],_bG_,Handler,Handler);
    caml_call3(CamlinternalMod[2],_bH_,Ivar,Ivar);
    caml_call3(CamlinternalMod[2],_bI_,Deferred,Deferred);
    caml_call3(CamlinternalMod[2],_bJ_,Execution_context,Execution_context);
    caml_call3(CamlinternalMod[2],_bK_,Forwarding,Forwarding);
    caml_call3(CamlinternalMod[2],_bL_,Monitor,Monitor);
    caml_call3(CamlinternalMod[2],_bM_,Tail,Tail);
    caml_call3(CamlinternalMod[2],_bN_,Stream,Stream);
    var normal=0;
    function to_repr(t){return t}
    function of_repr(t){return t}
    var
     Bvar=[0,of_repr,to_repr],
     Event=caml_call2(CamlinternalMod[1],_bP_,_bO_),
     External_job=caml_call2(CamlinternalMod[1],_bR_,_bQ_),
     Job=caml_call2(CamlinternalMod[1],_bT_,_bS_),
     Job_or_event=caml_call2(CamlinternalMod[1],_bV_,_bU_),
     Job_pool=caml_call2(CamlinternalMod[1],_bX_,_bW_),
     Job_queue=caml_call2(CamlinternalMod[1],_bZ_,_bY_),
     Jobs=caml_call2(CamlinternalMod[1],_b1_,_b0_),
     Scheduler=caml_call2(CamlinternalMod[1],_b3_,_b2_),
     Cycle_hook=caml_call2(CamlinternalMod[1],_b5_,_b4_),
     Time_source=caml_call2(CamlinternalMod[1],_b7_,_b6_),
     Very_low_priority_worker=caml_call2(CamlinternalMod[1],_b9_,_b8_),
     Cycle_hook_handle=caml_call1(Core_Unique_id[2],[0]),
     Time_source_id=caml_call1(Core_Unique_id[2],[0]);
    caml_call3(CamlinternalMod[2],_b__,Event,Event);
    caml_call3(CamlinternalMod[2],_b$_,External_job,External_job);
    caml_call3(CamlinternalMod[2],_ca_,Job,Job);
    caml_call3(CamlinternalMod[2],_cb_,Job_or_event,Job_or_event);
    caml_call3(CamlinternalMod[2],_cc_,Job_pool,Job_pool);
    caml_call3(CamlinternalMod[2],_cd_,Job_queue,Job_queue);
    caml_call3(CamlinternalMod[2],_ce_,Jobs,Jobs);
    caml_call3(CamlinternalMod[2],_cf_,Scheduler,Scheduler);
    caml_call3(CamlinternalMod[2],_cg_,Cycle_hook,Cycle_hook);
    caml_call3(CamlinternalMod[2],_ch_,Time_source,Time_source);
    caml_call3
     (CamlinternalMod[2],
      _ci_,
      Very_low_priority_worker,
      Very_low_priority_worker);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Types$0);
    var
     Async_kernel_Types=
      [0,
       Cell,
       Handler,
       Ivar,
       Deferred,
       Execution_context,
       Forwarding,
       Monitor,
       Tail,
       Stream,
       Bvar,
       Event,
       External_job,
       Job,
       Job_or_event,
       Job_pool,
       Job_queue,
       Jobs,
       Scheduler,
       Cycle_hook,
       Cycle_hook_handle,
       Time_source_id,
       Time_source,
       Very_low_priority_worker];
    caml_register_global(1092,Async_kernel_Types,"Async_kernel__Types");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Monitor0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$14);
    caml_call1(Expect_test_collector[5][1],cst_src_monitor0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$15,cst$4);
    function forwarding(r){return r[8]}
    function set_forwarding(r,v){r[8] = v;return 0}
    function has_seen_error(r){return r[7]}
    function set_has_seen_error(r,v){r[7] = v;return 0}
    function tails_for_all_errors(r){return r[6]}
    function set_tails_for_all_errors(r,v){r[6] = v;return 0}
    function handlers_for_all_errors(r){return r[5]}
    function set_handlers_for_all_errors(r,v){r[5] = v;return 0}
    function next_error(r){return r[4]}
    function set_next_error(r,v){r[4] = v;return 0}
    function id(r){return r[3]}
    function here(r){return r[2]}
    function name(r){return r[1]}
    function _cj_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v]}
    var
     _ck_=[0,set_forwarding],
     forwarding$0=
      [0,function(param){return 0},cst_forwarding,_ck_,forwarding,_cj_];
    function _cl_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8]]}
    var
     _cm_=[0,set_has_seen_error],
     has_seen_error$0=
      [0,
       function(param){return 0},
       cst_has_seen_error,
       _cm_,
       has_seen_error,
       _cl_];
    function _cn_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8]]}
    var
     _co_=[0,set_tails_for_all_errors],
     tails_for_all_errors$0=
      [0,
       function(param){return 0},
       cst_tails_for_all_errors,
       _co_,
       tails_for_all_errors,
       _cn_];
    function _cp_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8]]}
    var
     _cq_=[0,set_handlers_for_all_errors],
     handlers_for_all_errors$0=
      [0,
       function(param){return 0},
       cst_handlers_for_all_errors,
       _cq_,
       handlers_for_all_errors,
       _cp_];
    function _cr_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8]]}
    var
     _cs_=[0,set_next_error],
     next_error$0=
      [0,function(param){return 0},cst_next_error,_cs_,next_error,_cr_];
    function _ct_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8]]}
    var _cu_=0,id$0=[0,function(param){return 0},cst_id,_cu_,id,_ct_];
    function _cv_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8]]}
    var _cw_=0,here$0=[0,function(param){return 0},cst_here,_cw_,here,_cv_];
    function _cx_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8]]}
    var _cy_=0,name$0=[0,function(param){return 0},cst_name,_cy_,name,_cx_];
    function make_creator
     (name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun,
      compile_acc)
     {var
       match=caml_call2(name_fun,name$0,compile_acc),
       compile_acc$0=match[2],
       name_gen=match[1],
       match$0=caml_call2(here_fun,here$0,compile_acc$0),
       compile_acc$1=match$0[2],
       here_gen=match$0[1],
       match$1=caml_call2(id_fun,id$0,compile_acc$1),
       compile_acc$2=match$1[2],
       id_gen=match$1[1],
       match$2=caml_call2(next_error_fun,next_error$0,compile_acc$2),
       compile_acc$3=match$2[2],
       next_error_gen=match$2[1],
       match$3=
        caml_call2
         (handlers_for_all_errors_fun,handlers_for_all_errors$0,compile_acc$3),
       compile_acc$4=match$3[2],
       handlers_for_all_errors_gen=match$3[1],
       match$4=
        caml_call2
         (tails_for_all_errors_fun,tails_for_all_errors$0,compile_acc$4),
       compile_acc$5=match$4[2],
       tails_for_all_errors_gen=match$4[1],
       match$5=caml_call2(has_seen_error_fun,has_seen_error$0,compile_acc$5),
       compile_acc$6=match$5[2],
       has_seen_error_gen=match$5[1],
       match$6=caml_call2(forwarding_fun,forwarding$0,compile_acc$6),
       compile_acc$7=match$6[2],
       forwarding_gen=match$6[1];
      return [0,
              function(acc)
               {var
                 name=caml_call1(name_gen,acc),
                 here=caml_call1(here_gen,acc),
                 id=caml_call1(id_gen,acc),
                 next_error=caml_call1(next_error_gen,acc),
                 handlers_for_all_errors=
                  caml_call1(handlers_for_all_errors_gen,acc),
                 tails_for_all_errors=caml_call1(tails_for_all_errors_gen,acc),
                 has_seen_error=caml_call1(has_seen_error_gen,acc),
                 forwarding=caml_call1(forwarding_gen,acc);
                return [0,
                        name,
                        here,
                        id,
                        next_error,
                        handlers_for_all_errors,
                        tails_for_all_errors,
                        has_seen_error,
                        forwarding]},
              compile_acc$7]}
    function create
     (name,
      here,
      id,
      next_error,
      handlers_for_all_errors,
      tails_for_all_errors,
      has_seen_error,
      forwarding)
     {return [0,
              name,
              here,
              id,
              next_error,
              handlers_for_all_errors,
              tails_for_all_errors,
              has_seen_error,
              forwarding]}
    function map
     (name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _Lj_=caml_call1(forwarding_fun,forwarding$0),
       _Lk_=caml_call1(has_seen_error_fun,has_seen_error$0),
       _Ll_=caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0),
       _Lm_=caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0),
       _Ln_=caml_call1(next_error_fun,next_error$0),
       _Lo_=caml_call1(id_fun,id$0),
       _Lp_=caml_call1(here_fun,here$0);
      return [0,
              caml_call1(name_fun,name$0),
              _Lp_,
              _Lo_,
              _Ln_,
              _Lm_,
              _Ll_,
              _Lk_,
              _Lj_]}
    function iter
     (name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {caml_call1(name_fun,name$0);
      caml_call1(here_fun,here$0);
      caml_call1(id_fun,id$0);
      caml_call1(next_error_fun,next_error$0);
      caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0);
      caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0);
      caml_call1(has_seen_error_fun,has_seen_error$0);
      return caml_call1(forwarding_fun,forwarding$0)}
    function fold
     (init,
      name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {return caml_call2
              (forwarding_fun,
               caml_call2
                (has_seen_error_fun,
                 caml_call2
                  (tails_for_all_errors_fun,
                   caml_call2
                    (handlers_for_all_errors_fun,
                     caml_call2
                      (next_error_fun,
                       caml_call2
                        (id_fun,
                         caml_call2(here_fun,caml_call2(name_fun,init,name$0),here$0),
                         id$0),
                       next_error$0),
                     handlers_for_all_errors$0),
                   tails_for_all_errors$0),
                 has_seen_error$0),
               forwarding$0)}
    function map_poly(record)
     {var
       _Lc_=[0,caml_call1(record[1],forwarding$0),0],
       _Ld_=[0,caml_call1(record[1],has_seen_error$0),_Lc_],
       _Le_=[0,caml_call1(record[1],tails_for_all_errors$0),_Ld_],
       _Lf_=[0,caml_call1(record[1],handlers_for_all_errors$0),_Le_],
       _Lg_=[0,caml_call1(record[1],next_error$0),_Lf_],
       _Lh_=[0,caml_call1(record[1],id$0),_Lg_],
       _Li_=[0,caml_call1(record[1],here$0),_Lh_];
      return [0,caml_call1(record[1],name$0),_Li_]}
    function for_all
     (name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _K7_=caml_call1(name_fun,name$0),
       _K8_=_K7_?caml_call1(here_fun,here$0):_K7_,
       _K9_=_K8_?caml_call1(id_fun,id$0):_K8_,
       _K__=_K9_?caml_call1(next_error_fun,next_error$0):_K9_,
       _K$_=
        _K__
         ?caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0)
         :_K__,
       _La_=
        _K$_?caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0):_K$_,
       _Lb_=_La_?caml_call1(has_seen_error_fun,has_seen_error$0):_La_;
      return _Lb_?caml_call1(forwarding_fun,forwarding$0):_Lb_}
    function exists
     (name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _K6_=caml_call1(name_fun,name$0),
       _K0_=_K6_ || caml_call1(here_fun,here$0),
       _K1_=_K0_ || caml_call1(id_fun,id$0),
       _K2_=_K1_ || caml_call1(next_error_fun,next_error$0),
       _K3_=
        _K2_
        ||
        caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0),
       _K4_=
        _K3_
        ||
        caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0),
       _K5_=_K4_ || caml_call1(has_seen_error_fun,has_seen_error$0);
      return _K5_?_K5_:caml_call1(forwarding_fun,forwarding$0)}
    function to_list
     (name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _KT_=[0,caml_call1(forwarding_fun,forwarding$0),0],
       _KU_=[0,caml_call1(has_seen_error_fun,has_seen_error$0),_KT_],
       _KV_=
        [0,caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0),_KU_],
       _KW_=
        [0,
         caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0),
         _KV_],
       _KX_=[0,caml_call1(next_error_fun,next_error$0),_KW_],
       _KY_=[0,caml_call1(id_fun,id$0),_KX_],
       _KZ_=[0,caml_call1(here_fun,here$0),_KY_];
      return [0,caml_call1(name_fun,name$0),_KZ_]}
    function iter$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {caml_call3(name_fun,name$0,record,record[1]);
      caml_call3(here_fun,here$0,record,record[2]);
      caml_call3(id_fun,id$0,record,record[3]);
      caml_call3(next_error_fun,next_error$0,record,record[4]);
      caml_call3
       (handlers_for_all_errors_fun,
        handlers_for_all_errors$0,
        record,
        record[5]);
      caml_call3
       (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[6]);
      caml_call3(has_seen_error_fun,has_seen_error$0,record,record[7]);
      return caml_call3(forwarding_fun,forwarding$0,record,record[8])}
    function fold$0
     (record,
      init,
      name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _KM_=record[8],
       _KN_=record[7],
       _KO_=record[6],
       _KP_=record[5],
       _KQ_=record[4],
       _KR_=record[3],
       _KS_=record[2];
      return caml_call4
              (forwarding_fun,
               caml_call4
                (has_seen_error_fun,
                 caml_call4
                  (tails_for_all_errors_fun,
                   caml_call4
                    (handlers_for_all_errors_fun,
                     caml_call4
                      (next_error_fun,
                       caml_call4
                        (id_fun,
                         caml_call4
                          (here_fun,
                           caml_call4(name_fun,init,name$0,record,record[1]),
                           here$0,
                           record,
                           _KS_),
                         id$0,
                         record,
                         _KR_),
                       next_error$0,
                       record,
                       _KQ_),
                     handlers_for_all_errors$0,
                     record,
                     _KP_),
                   tails_for_all_errors$0,
                   record,
                   _KO_),
                 has_seen_error$0,
                 record,
                 _KN_),
               forwarding$0,
               record,
               _KM_)}
    function for_all$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _KF_=caml_call3(name_fun,name$0,record,record[1]),
       _KG_=_KF_?caml_call3(here_fun,here$0,record,record[2]):_KF_,
       _KH_=_KG_?caml_call3(id_fun,id$0,record,record[3]):_KG_,
       _KI_=_KH_?caml_call3(next_error_fun,next_error$0,record,record[4]):_KH_,
       _KJ_=
        _KI_
         ?caml_call3
           (handlers_for_all_errors_fun,
            handlers_for_all_errors$0,
            record,
            record[5])
         :_KI_,
       _KK_=
        _KJ_
         ?caml_call3
           (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[6])
         :_KJ_,
       _KL_=
        _KK_
         ?caml_call3(has_seen_error_fun,has_seen_error$0,record,record[7])
         :_KK_;
      return _KL_
              ?caml_call3(forwarding_fun,forwarding$0,record,record[8])
              :_KL_}
    function exists$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _KE_=caml_call3(name_fun,name$0,record,record[1]),
       _Ky_=_KE_ || caml_call3(here_fun,here$0,record,record[2]),
       _Kz_=_Ky_ || caml_call3(id_fun,id$0,record,record[3]),
       _KA_=_Kz_ || caml_call3(next_error_fun,next_error$0,record,record[4]),
       _KB_=
        _KA_
        ||
        caml_call3
         (handlers_for_all_errors_fun,
          handlers_for_all_errors$0,
          record,
          record[5]),
       _KC_=
        _KB_
        ||
        caml_call3
         (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[6]),
       _KD_=
        _KC_
        ||
        caml_call3(has_seen_error_fun,has_seen_error$0,record,record[7]);
      return _KD_
              ?_KD_
              :caml_call3(forwarding_fun,forwarding$0,record,record[8])}
    function to_list$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _Kr_=[0,caml_call3(forwarding_fun,forwarding$0,record,record[8]),0],
       _Ks_=
        [0,
         caml_call3(has_seen_error_fun,has_seen_error$0,record,record[7]),
         _Kr_],
       _Kt_=
        [0,
         caml_call3
          (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[6]),
         _Ks_],
       _Ku_=
        [0,
         caml_call3
          (handlers_for_all_errors_fun,
           handlers_for_all_errors$0,
           record,
           record[5]),
         _Kt_],
       _Kv_=[0,caml_call3(next_error_fun,next_error$0,record,record[4]),_Ku_],
       _Kw_=[0,caml_call3(id_fun,id$0,record,record[3]),_Kv_],
       _Kx_=[0,caml_call3(here_fun,here$0,record,record[2]),_Kw_];
      return [0,caml_call3(name_fun,name$0,record,record[1]),_Kx_]}
    function map$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      forwarding_fun)
     {var
       _Kk_=caml_call3(forwarding_fun,forwarding$0,record,record[8]),
       _Kl_=caml_call3(has_seen_error_fun,has_seen_error$0,record,record[7]),
       _Km_=
        caml_call3
         (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[6]),
       _Kn_=
        caml_call3
         (handlers_for_all_errors_fun,
          handlers_for_all_errors$0,
          record,
          record[5]),
       _Ko_=caml_call3(next_error_fun,next_error$0,record,record[4]),
       _Kp_=caml_call3(id_fun,id$0,record,record[3]),
       _Kq_=caml_call3(here_fun,here$0,record,record[2]);
      return [0,
              caml_call3(name_fun,name$0,record,record[1]),
              _Kq_,
              _Kp_,
              _Ko_,
              _Kn_,
              _Km_,
              _Kl_,
              _Kk_]}
    function set_all_mutable_fields
     (record,
      next_error,
      handlers_for_all_errors,
      tails_for_all_errors,
      has_seen_error,
      forwarding)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[4] = next_error;
      record$0[5] = handlers_for_all_errors;
      record$0[6] = tails_for_all_errors;
      record$0[7] = has_seen_error;
      record$0[8] = forwarding;
      return 0}
    var
     Direct=
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields],
     Fields=
      [0,
       names,
       forwarding$0,
       has_seen_error$0,
       tails_for_all_errors$0,
       handlers_for_all_errors$0,
       next_error$0,
       id$0,
       here$0,
       name$0,
       make_creator,
       create,
       map,
       iter,
       fold,
       map_poly,
       for_all,
       exists,
       to_list,
       Direct];
    function description(t)
     {var _Ki_=t[2];
      if(! _Ki_)return caml_call1(Core_Info[6],t[1]);
      var
       here=_Ki_[1],
       _Kj_=[0,caml_call1(Core_Source_code_position[1],here),0];
      return [1,[0,caml_call1(Core_Info[6],t[1]),_Kj_]]}
    function descriptions(t$1)
     {var t=t$1,ac=0;
      for(;;)
       {var ac$0=[0,description(t),ac],_Kh_=t[8];
        if(typeof _Kh_ === "number")return caml_call1(Core_List[34],ac$0);
        var t$0=_Kh_[1],t=t$0,ac=ac$0}}
    function sexp_of_t$0(t)
     {var x_001=descriptions(t);
      return caml_call2(Core[421],Core_Sexp[90],x_001)}
    var r=[0,0];
    function next_id(param){r[1]++;return r[1]}
    function create_with_parent(here,info,name,parent)
     {var id=next_id(0);
      if(info)
       {var _Kd_=info[1];
        if(name)
         var s=name[1],_Ke_=caml_call2(Core_Info[20],_Kd_,s);
        else
         var _Ke_=_Kd_;
        var name$0=_Ke_}
      else
       if(name)
        var s$0=name[1],name$0=caml_call1(Core_Info[12],s$0);
       else
        var
         _Kg_=
          function(x_002)
           {return caml_call2(Sexp_hidden_in_test[10],Core[356],x_002)},
         name$0=caml_call5(Core_Info[17],0,0,cst_id$0,id,_Kg_);
      if(parent)var parent$0=parent[1],_Kf_=[0,parent$0];else var _Kf_=1;
      var t=[0,name$0,here,id,[0,0],caml_call1(Core_Bag[22],0),0,0,_Kf_];
      if(_ba_)log(cst_created_monitor,t,sexp_of_t$0);
      return t}
    var main=create_with_parent(0,0,_cz_,0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$16);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Monitor0$0);
    var
     include$2=
      [0,
       _ba_,
       forwarding,
       set_forwarding,
       has_seen_error,
       set_has_seen_error,
       tails_for_all_errors,
       set_tails_for_all_errors,
       handlers_for_all_errors,
       set_handlers_for_all_errors,
       next_error,
       set_next_error,
       id,
       here,
       name,
       Fields,
       description,
       descriptions,
       sexp_of_t$0,
       next_id,
       create_with_parent,
       main];
    caml_register_global(1099,include$2,"Async_kernel__Monitor0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Execution_con);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$17);
    caml_call1(Expect_test_collector[5][1],cst_src_execution_context_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$18,cst$5);
    function backtrace_history(r){return r[4]}
    function local_storage(r){return r[3]}
    function priority(r){return r[2]}
    function monitor(r){return r[1]}
    function _cA_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _cB_=0,
     backtrace_history$0=
      [0,
       function(param){return 0},
       cst_backtrace_history,
       _cB_,
       backtrace_history,
       _cA_];
    function _cC_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _cD_=0,
     local_storage$0=
      [0,function(param){return 0},cst_local_storage,_cD_,local_storage,_cC_];
    function _cE_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _cF_=0,
     priority$0=[0,function(param){return 0},cst_priority,_cF_,priority,_cE_];
    function _cG_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _cH_=0,
     monitor$0=[0,function(param){return 0},cst_monitor,_cH_,monitor,_cG_];
    function make_creator$0
     (monitor_fun,
      priority_fun,
      local_storage_fun,
      backtrace_history_fun,
      compile_acc)
     {var
       match=caml_call2(monitor_fun,monitor$0,compile_acc),
       compile_acc$0=match[2],
       monitor_gen=match[1],
       match$0=caml_call2(priority_fun,priority$0,compile_acc$0),
       compile_acc$1=match$0[2],
       priority_gen=match$0[1],
       match$1=caml_call2(local_storage_fun,local_storage$0,compile_acc$1),
       compile_acc$2=match$1[2],
       local_storage_gen=match$1[1],
       match$2=
        caml_call2(backtrace_history_fun,backtrace_history$0,compile_acc$2),
       compile_acc$3=match$2[2],
       backtrace_history_gen=match$2[1];
      return [0,
              function(acc)
               {var
                 monitor=caml_call1(monitor_gen,acc),
                 priority=caml_call1(priority_gen,acc),
                 local_storage=caml_call1(local_storage_gen,acc),
                 backtrace_history=caml_call1(backtrace_history_gen,acc);
                return [0,monitor,priority,local_storage,backtrace_history]},
              compile_acc$3]}
    function create$0(monitor,priority,local_storage,backtrace_history)
     {return [0,monitor,priority,local_storage,backtrace_history]}
    function map$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _Ka_=caml_call1(backtrace_history_fun,backtrace_history$0),
       _Kb_=caml_call1(local_storage_fun,local_storage$0),
       _Kc_=caml_call1(priority_fun,priority$0);
      return [0,caml_call1(monitor_fun,monitor$0),_Kc_,_Kb_,_Ka_]}
    function iter$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {caml_call1(monitor_fun,monitor$0);
      caml_call1(priority_fun,priority$0);
      caml_call1(local_storage_fun,local_storage$0);
      return caml_call1(backtrace_history_fun,backtrace_history$0)}
    function fold$1
     (init,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {return caml_call2
              (backtrace_history_fun,
               caml_call2
                (local_storage_fun,
                 caml_call2
                  (priority_fun,
                   caml_call2(monitor_fun,init,monitor$0),
                   priority$0),
                 local_storage$0),
               backtrace_history$0)}
    function map_poly$0(record)
     {var
       _J9_=[0,caml_call1(record[1],backtrace_history$0),0],
       _J__=[0,caml_call1(record[1],local_storage$0),_J9_],
       _J$_=[0,caml_call1(record[1],priority$0),_J__];
      return [0,caml_call1(record[1],monitor$0),_J$_]}
    function for_all$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _J6_=caml_call1(monitor_fun,monitor$0),
       _J7_=_J6_?caml_call1(priority_fun,priority$0):_J6_,
       _J8_=_J7_?caml_call1(local_storage_fun,local_storage$0):_J7_;
      return _J8_?caml_call1(backtrace_history_fun,backtrace_history$0):_J8_}
    function exists$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _J5_=caml_call1(monitor_fun,monitor$0),
       _J3_=_J5_ || caml_call1(priority_fun,priority$0),
       _J4_=_J3_ || caml_call1(local_storage_fun,local_storage$0);
      return _J4_?_J4_:caml_call1(backtrace_history_fun,backtrace_history$0)}
    function to_list$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _J0_=[0,caml_call1(backtrace_history_fun,backtrace_history$0),0],
       _J1_=[0,caml_call1(local_storage_fun,local_storage$0),_J0_],
       _J2_=[0,caml_call1(priority_fun,priority$0),_J1_];
      return [0,caml_call1(monitor_fun,monitor$0),_J2_]}
    function iter$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {caml_call3(monitor_fun,monitor$0,record,record[1]);
      caml_call3(priority_fun,priority$0,record,record[2]);
      caml_call3(local_storage_fun,local_storage$0,record,record[3]);
      return caml_call3
              (backtrace_history_fun,backtrace_history$0,record,record[4])}
    function fold$2
     (record,
      init,
      monitor_fun,
      priority_fun,
      local_storage_fun,
      backtrace_history_fun)
     {var _JX_=record[4],_JY_=record[3],_JZ_=record[2];
      return caml_call4
              (backtrace_history_fun,
               caml_call4
                (local_storage_fun,
                 caml_call4
                  (priority_fun,
                   caml_call4(monitor_fun,init,monitor$0,record,record[1]),
                   priority$0,
                   record,
                   _JZ_),
                 local_storage$0,
                 record,
                 _JY_),
               backtrace_history$0,
               record,
               _JX_)}
    function for_all$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _JU_=caml_call3(monitor_fun,monitor$0,record,record[1]),
       _JV_=_JU_?caml_call3(priority_fun,priority$0,record,record[2]):_JU_,
       _JW_=
        _JV_
         ?caml_call3(local_storage_fun,local_storage$0,record,record[3])
         :_JV_;
      return _JW_
              ?caml_call3
                (backtrace_history_fun,backtrace_history$0,record,record[4])
              :_JW_}
    function exists$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _JT_=caml_call3(monitor_fun,monitor$0,record,record[1]),
       _JR_=_JT_ || caml_call3(priority_fun,priority$0,record,record[2]),
       _JS_=
        _JR_
        ||
        caml_call3(local_storage_fun,local_storage$0,record,record[3]);
      return _JS_
              ?_JS_
              :caml_call3
                (backtrace_history_fun,backtrace_history$0,record,record[4])}
    function to_list$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _JO_=
        [0,
         caml_call3
          (backtrace_history_fun,backtrace_history$0,record,record[4]),
         0],
       _JP_=
        [0,
         caml_call3(local_storage_fun,local_storage$0,record,record[3]),
         _JO_],
       _JQ_=[0,caml_call3(priority_fun,priority$0,record,record[2]),_JP_];
      return [0,caml_call3(monitor_fun,monitor$0,record,record[1]),_JQ_]}
    function map$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _JL_=
        caml_call3(backtrace_history_fun,backtrace_history$0,record,record[4]),
       _JM_=caml_call3(local_storage_fun,local_storage$0,record,record[3]),
       _JN_=caml_call3(priority_fun,priority$0,record,record[2]);
      return [0,
              caml_call3(monitor_fun,monitor$0,record,record[1]),
              _JN_,
              _JM_,
              _JL_]}
    function set_all_mutable_fields$0(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$0=
      [0,
       iter$2,
       fold$2,
       for_all$2,
       exists$2,
       to_list$2,
       map$2,
       set_all_mutable_fields$0];
    function sexp_of_t$1(param)
     {var
       backtrace_history_008=param[4],
       local_storage_006=param[3],
       priority_004=param[2],
       monitor_002=param[1],
       arg_009=caml_call2(Core[421],Base_Backtrace[1],backtrace_history_008),
       bnds_001=[0,[1,[0,_cI_,[0,arg_009,0]]],0],
       arg_007=caml_call1(Core_Univ_map[2],local_storage_006),
       bnds_001$0=[0,[1,[0,_cJ_,[0,arg_007,0]]],bnds_001],
       arg_005=sexp_of_t(priority_004),
       bnds_001$1=[0,[1,[0,_cK_,[0,arg_005,0]]],bnds_001$0],
       arg_003=sexp_of_t$0(monitor_002),
       bnds_001$2=[0,[1,[0,_cL_,[0,arg_003,0]]],bnds_001$1];
      return [1,bnds_001$2]}
    function f(param){return 0}
    var dummy_e=[0,main,normal,Core_Univ_map[4],0];
    function create_like(monitor,priority,local_storage,t)
     {var
       monitor$0=caml_call2(Core_Option[34],monitor,t[1]),
       _JJ_=t[4],
       _JK_=caml_call2(Core_Option[34],local_storage,t[3]);
      return [0,monitor$0,caml_call2(Core_Option[34],priority,t[2]),_JK_,_JJ_]}
    function find_local(t,key){return caml_call2(Core_Univ_map[10],t[3],key)}
    function with_local(init,key,data)
     {var _JG_=init[4];
      function _JH_(param){return data}
      var _JI_=caml_call3(Core_Univ_map[14],init[3],key,_JH_);
      return [0,init[1],init[2],_JI_,_JG_]}
    function record_backtrace(init)
     {var _JE_=init[4],_JF_=[0,caml_call2(Base_Backtrace[2],0,0),_JE_];
      return [0,init[1],init[2],init[3],_JF_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$19);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Execution_con$0);
    var
     Async_kernel_Execution_context=
      [0,
       backtrace_history,
       local_storage,
       priority,
       monitor,
       [0,
        names$0,
        backtrace_history$0,
        local_storage$0,
        priority$0,
        monitor$0,
        fold$1,
        make_creator$0,
        create$0,
        map$1,
        iter$1,
        for_all$1,
        exists$1,
        to_list$1,
        map_poly$0,
        Direct$0],
       sexp_of_t$1,
       f,
       dummy_e,
       create_like,
       find_local,
       with_local,
       record_backtrace];
    caml_register_global
     (1103,Async_kernel_Execution_context,"Async_kernel__Execution_context");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_External_job);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$20);
    caml_call1(Expect_test_collector[5][1],cst_src_external_job_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$21,cst$6);
    function sexp_of_t$2(param){return _cM_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$22);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_External_job$0);
    var Async_kernel_External_job=[0,sexp_of_t$2];
    caml_register_global
     (1104,Async_kernel_External_job,"Async_kernel__External_job");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Job_pool);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$23);
    caml_call1(Expect_test_collector[5][1],cst_src_job_pool_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$24,cst$7);
    function dummy_f(_JD_){return 0}
    var dummy_a=0;
    function sexp_of_slots(x_001)
     {var _Jz_=Sexplib0_Sexp_conv[23];
      function _JA_(param)
       {function _JB_(_JC_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_JB_)}
      return caml_call4(Tuple_pool[1][5],sexp_of_t$1,_JA_,_Jz_,x_001)}
    function sexp_of_t$3(x_002)
     {return caml_call2(Tuple_pool[4],sexp_of_slots,x_002)}
    function invariant(t)
     {function _Jx_(_Jy_){return 0}return caml_call2(Tuple_pool[5],_Jx_,t)}
    function create$1(param)
     {return caml_call3
              (Tuple_pool[9],Tuple_pool[1][19],1,[0,dummy_e,dummy_f,dummy_a])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$25);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Job_pool$0);
    var
     Async_kernel_Job_pool=
      [0,sexp_of_slots,sexp_of_t$3,invariant,create$1];
    caml_register_global(1107,Async_kernel_Job_pool,"Async_kernel__Job_pool");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Job);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$26);
    caml_call1(Expect_test_collector[5][1],cst_src_job_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$27,cst$8);
    function sexp_of_t$4(x_001)
     {return caml_call2(Tuple_pool[3][1],sexp_of_slots,x_001)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$28);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Job$0);
    var Async_kernel_Job=[0,sexp_of_t$4];
    caml_register_global(1108,Async_kernel_Job,"Async_kernel__Job");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Job_or_event);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$29);
    caml_call1(Expect_test_collector[5][1],cst_src_job_or_event_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$30,cst$9);
    function of_event(event){return event}
    function of_job(job){return job}
    function is_event(t){return caml_call1(Stdlib_Obj[1],t)}
    function is_job(t){return typeof t === "number"?1:0}
    function kind(t){return is_event(t)?0:1}
    function project(param,job_or_event){return job_or_event}
    var Match=[0,kind,project];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$31);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Job_or_event$0);
    var include$3=[0,of_event,of_job,is_event,is_job,Match];
    caml_register_global(1110,include$3,"Async_kernel__Job_or_event");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Job_or_event_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$32);
    caml_call1(Expect_test_collector[5][1],cst_src_job_or_event_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$33,cst$10);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$34);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Job_or_event_$0);
    var Async_kernel_Job_or_event_intf=[0];
    caml_register_global
     (1111,Async_kernel_Job_or_event_intf,"Async_kernel__Job_or_event_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Scheduler0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$35);
    caml_call1(Expect_test_collector[5][1],cst_src_scheduler0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$36,cst$11);
    function events(t){return t[19][4]}
    function set_execution_context(t,execution_context)
     {var
       _Jv_=1 - caml_call2(Core[246],t[7],execution_context),
       _Jw_=_Jv_?(t[7] = execution_context,0):_Jv_;
      return _Jw_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$37);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Scheduler0$0);
    var include$4=[0,events,set_execution_context];
    caml_register_global(1112,include$4,"Async_kernel__Scheduler0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Job_queue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$38);
    caml_call1(Expect_test_collector[5][1],cst_src_job_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$39,cst$12);
    function dummy_f$0(_Ju_){return 0}
    var dummy_a$0=0;
    function length(r){return r[6]}
    function set_length(r,v){r[6] = v;return 0}
    function front(r){return r[5]}
    function set_front(r,v){r[5] = v;return 0}
    function mask(r){return r[4]}
    function set_mask(r,v){r[4] = v;return 0}
    function jobs(r){return r[3]}
    function set_jobs(r,v){r[3] = v;return 0}
    function jobs_left_this_cycle(r){return r[2]}
    function set_jobs_left_this_cycle(r,v){r[2] = v;return 0}
    function num_jobs_run(r){return r[1]}
    function set_num_jobs_run(r,v){r[1] = v;return 0}
    function _cN_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v]}
    var
     _cO_=[0,set_length],
     length$0=[0,function(param){return 0},cst_length,_cO_,length,_cN_];
    function _cP_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6]]}
    var
     _cQ_=[0,set_front],
     front$0=[0,function(param){return 0},cst_front,_cQ_,front,_cP_];
    function _cR_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6]]}
    var
     _cS_=[0,set_mask],
     mask$0=[0,function(param){return 0},cst_mask,_cS_,mask,_cR_];
    function _cT_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6]]}
    var
     _cU_=[0,set_jobs],
     jobs$0=[0,function(param){return 0},cst_jobs,_cU_,jobs,_cT_];
    function _cV_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6]]}
    var
     _cW_=[0,set_jobs_left_this_cycle],
     jobs_left_this_cycle$0=
      [0,
       function(param){return 0},
       cst_jobs_left_this_cycle,
       _cW_,
       jobs_left_this_cycle,
       _cV_];
    function _cX_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6]]}
    var
     _cY_=[0,set_num_jobs_run],
     num_jobs_run$0=
      [0,function(param){return 0},cst_num_jobs_run,_cY_,num_jobs_run,_cX_];
    function sexp_of_t$5(param)
     {var
       num_jobs_run_002=param[1],
       jobs_left_this_cycle_004=param[2],
       jobs_006=param[3],
       mask_008=param[4],
       front_010=param[5],
       length_012=param[6],
       arg_013=caml_call1(Core[356],length_012),
       bnds_001=[0,[1,[0,_cZ_,[0,arg_013,0]]],0],
       arg_011=caml_call1(Core[356],front_010),
       bnds_001$0=[0,[1,[0,_c0_,[0,arg_011,0]]],bnds_001],
       arg_009=caml_call1(Core[356],mask_008),
       bnds_001$1=[0,[1,[0,_c1_,[0,arg_009,0]]],bnds_001$0],
       arg_007=caml_call1(Sexplib0_Sexp_conv[23],jobs_006),
       bnds_001$2=[0,[1,[0,_c2_,[0,arg_007,0]]],bnds_001$1],
       arg_005=caml_call1(Core[356],jobs_left_this_cycle_004),
       bnds_001$3=[0,[1,[0,_c3_,[0,arg_005,0]]],bnds_001$2],
       arg_003=caml_call1(Core[356],num_jobs_run_002),
       bnds_001$4=[0,[1,[0,_c4_,[0,arg_003,0]]],bnds_001$3];
      return [1,bnds_001$4]}
    function offset(t,i){return ((t[5] + i | 0) & t[4]) * 3 | 0}
    function capacity(t){return t[4] + 1 | 0}
    function invariant$0(t)
     {function _Jp_(param)
       {function check(f){return caml_call2(include$5[2],t,f)}
        var
         length_fun=
          check
           (function(length)
             {if(! caml_call2(symbol,length,0))throw [0,Assert_failure,_c6_];
              if(caml_call2(symbol$0,length,capacity(t)))return 0;
              throw [0,Assert_failure,_c5_]}),
         front_fun=
          check
           (function(front)
             {if(! caml_call2(symbol,front,0))throw [0,Assert_failure,_c8_];
              if(caml_call2(symbol$3,front,capacity(t)))return 0;
              throw [0,Assert_failure,_c7_]}),
         mask_fun=
          check
           (function(mask)
             {var capacity=mask + 1 | 0;
              if(! caml_call1(Core_Int[48],capacity))
               throw [0,Assert_failure,_c__];
              if
               (caml_call2
                 (symbol$1,
                  capacity * 3 | 0,
                  caml_call1(Core_Uniform_array[18],t[3])))
               return 0;
              throw [0,Assert_failure,_c9_]}),
         jobs_fun=
          check
           (function(jobs)
             {var _Jr_=t[6] - 1 | 0,_Jq_=0;
              if(_Jr_ >= 0)
               {var i=_Jq_;
                for(;;)
                 {var _Js_=offset(t,i);
                  caml_call2(Core_Uniform_array[19],jobs,_Js_);
                  var _Jt_=i + 1 | 0;
                  if(_Jr_ !== i){var i=_Jt_;continue}
                  break}}
              return 0}),
         jobs_left_this_cycle_fun=
          check
           (function(jobs_left_this_cycle)
             {if(caml_call2(symbol,jobs_left_this_cycle,0))return 0;
              throw [0,Assert_failure,_c$_]}),
         num_jobs_run_fun=
          check
           (function(num_jobs_run)
             {if(caml_call2(symbol,num_jobs_run,0))return 0;
              throw [0,Assert_failure,_da_]});
        caml_call1(num_jobs_run_fun,num_jobs_run$0);
        caml_call1(jobs_left_this_cycle_fun,jobs_left_this_cycle$0);
        caml_call1(jobs_fun,jobs$0);
        caml_call1(mask_fun,mask$0);
        caml_call1(front_fun,front$0);
        return caml_call1(length_fun,length$0)}
      return caml_call4(include$5[1],_db_,t,sexp_of_t$5,_Jp_)}
    function create_array(capacity)
     {return caml_call1(Core_Uniform_array[43],capacity * 3 | 0)}
    function create$2(param){return [0,0,0,create_array(1),0,0,0]}
    function clear(t){t[5] = 0;t[6] = 0;t[2] = 0;return 0}
    function set(t,i,execution_context,f,a)
     {var offset$0=offset(t,i);
      caml_call3(Core_Uniform_array[22],t[3],offset$0,execution_context);
      caml_call3(Core_Uniform_array[22],t[3],offset$0 + 1 | 0,f);
      return caml_call3(Core_Uniform_array[22],t[3],offset$0 + 2 | 0,a)}
    function enqueue(t,execution_context,f,a)
     {var _Jo_=capacity(t);
      if(caml_call2(symbol$1,t[6],_Jo_))
       {var
         old_capacity=capacity(t),
         new_capacity=old_capacity * 2 | 0,
         old_jobs=t[3],
         old_front=t[5],
         len1=
          caml_call2(Core_Int[92],t[6],old_capacity - old_front | 0)
          *
          3
          |
          0,
         len2=(t[6] * 3 | 0) - len1 | 0,
         new_jobs=create_array(new_capacity);
        caml_call5
         (Core_Uniform_array[36],old_jobs,old_front * 3 | 0,new_jobs,0,len1);
        caml_call5(Core_Uniform_array[36],old_jobs,0,new_jobs,len1,len2);
        t[4] = new_capacity - 1 | 0;
        t[3] = new_jobs;
        t[5] = 0}
      set(t,t[6],execution_context,f,a);
      t[6] = t[6] + 1 | 0;
      return 0}
    function set_jobs_left_this_cycle$0(t,n)
     {if(caml_call2(symbol$3,n,0))
       {var
         _Jl_=[0,[1,[0,_dc_,[0,sexp_of_t$5(t),0]]],0],
         _Jm_=[0,[1,[0,_dd_,[0,caml_call1(Core[356],n),0]]],_Jl_],
         _Jn_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Jobs_set_jobs_left_this_cy),
            _Jm_]];
        caml_call1(Core[253],_Jn_)}
      t[2] = n;
      return 0}
    function can_run_a_job(t)
     {var _Jk_=caml_call2(symbol$2,t[6],0);
      return _Jk_?caml_call2(symbol$2,t[2],0):_Jk_}
    function run_job(t,scheduler,execution_context,f,a)
     {t[1] = t[1] + 1 | 0;
      set_execution_context(scheduler,execution_context);
      return caml_call1(f,a)}
    function run_external_jobs(t,scheduler)
     {var external_jobs=scheduler[20];
      for(;;)
       {if
         (!
          caml_call2
           (symbol$2,caml_call1(Thread_safe_queue[4],external_jobs),0))
         return 0;
        var
         match=caml_call1(Thread_safe_queue[6],external_jobs),
         a=match[3],
         f=match[2],
         execution_context=match[1];
        run_job(t,scheduler,execution_context,f,a)}}
    function run_jobs(t,scheduler)
     {try
       {run_external_jobs(t,scheduler);
        for(;;)
         {if(! can_run_a_job(t))return _de_;
          var
           this_job=offset(t,0),
           execution_context=caml_call2(Core_Uniform_array[20],t[3],this_job),
           f=caml_call2(Core_Uniform_array[20],t[3],this_job + 1 | 0),
           a=caml_call2(Core_Uniform_array[20],t[3],this_job + 2 | 0);
          set(t,0,dummy_e,dummy_f$0,dummy_a$0);
          t[5] = (t[5] + 1 | 0) & t[4];
          t[6] = t[6] - 1 | 0;
          t[2] = t[2] - 1 | 0;
          run_job(t,scheduler,execution_context,f,a);
          run_external_jobs(t,scheduler)}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var backtrace=caml_call1(Base_Backtrace[6][4],0);
        return [1,[0,exn,backtrace]]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$40);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Job_queue$0);
    var
     Async_kernel_Job_queue=
      [0,
       sexp_of_t$5,
       invariant$0,
       create$2,
       enqueue,
       clear,
       set_jobs_left_this_cycle$0,
       can_run_a_job,
       length,
       run_jobs,
       num_jobs_run];
    caml_register_global
     (1117,Async_kernel_Job_queue,"Async_kernel__Job_queue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Synchronous_t);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$41);
    caml_call1(Expect_test_collector[5][1],cst_src_synchronous_time_sourc);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$42,cst$13);
    function sexp_of_t$6(t)
     {var
       _Ji_=caml_call1(_ae_,t),
       _Jj_=
        runtime.core_time_ns_format
         (caml_call1(Core_Time_ns[1][91],_Ji_),cst_Y_m_dT_H_M_S_z);
      return caml_call1(Core[471],_Jj_)}
    var
     Time_ns=
      [0,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       after,
       sexp_of_t$6],
     include$6=Timing_wheel[5],
     sexp_of_t$7=include$6[1],
     null$0=include$6[2],
     at=include$6[3],
     interval_num=include$6[4],
     value=include$6[5];
    function is_null(t)
     {var _Jh_=caml_call1(null$0,0);return caml_call2(Core[246],t,_Jh_)}
    var
     Alarm=[0,sexp_of_t$7,null$0,at,interval_num,value,is_null],
     _df_=caml_call2(Timing_wheel[1][13],Timing_wheel[1][10],3),
     _dh_=[0,caml_call2(Timing_wheel[7][5],0,_dg_)],
     default_timing_wheel_config=caml_call4(Timing_wheel[8][4],0,_dh_,_df_,0),
     compare$0=caml_int_compare;
    function equal$0(_Jg_,_Jf_){return _Jg_ === _Jf_?1:0}
    function sexp_of_t$8(param)
     {switch(param)
       {case 0:return _di_;
        case 1:return _dj_;
        case 2:return _dk_;
        default:return _dl_}}
    function transition_is_allowed(from,to)
     {var switch$0=0;
      switch(from)
       {case 0:if(1 === to || 3 <= to)switch$0 = 1;break;
        case 1:if(2 <= to)switch$0 = 1;break;
        case 2:if(1 < to - 1 >>> 0)switch$0 = 1;break;
        default:if(1 !== to && 3 > to)switch$0 = 1}
      return switch$0?1:0}
    var Status=[0,compare$0,equal$0,sexp_of_t$8,transition_is_allowed];
    function sexp_of_event(param)
     {var at=param[2],interval=param[5],status=param[8],match=0;
      if(interval)
       var
        v=interval[1],
        _Jd_=[0,[1,[0,_dm_,[0,caml_call1(Core_Time_ns[1][10],v),0]]],match];
      else
       var _Jd_=match;
      var _Je_=[0,[1,[0,_dn_,[0,caml_call1(Time_ns[113],at),0]]],_Jd_];
      return [1,[0,[1,[0,_do_,[0,caml_call1(Status[3],status),0]]],_Je_]]}
    var Event_is_block=[0],none=0;
    function some(_Jc_){return _Jc_}
    function is_none(t){return caml_call2(Core[246],t,none)}
    function is_some(t){return 1 - is_none(t)}
    function first_some(t1,t2){return is_some(t1)?t1:t2}
    function unsafe_value(_Jb_){return _Jb_}
    var
     Optional_syntax=[0,is_none,unsafe_value],
     Optional_syntax$0=[0,Optional_syntax];
    function sexp_of_t$9(ppx_optional_e_0)
     {var match=caml_call1(Optional_syntax$0[1][1],ppx_optional_e_0);
      if(match)return _dp_;
      var event=caml_call1(Optional_syntax$0[1][2],ppx_optional_e_0);
      return sexp_of_event(event)}
    function value$0(ppx_optional_e_0,default$0)
     {var match=caml_call1(Optional_syntax$0[1][1],ppx_optional_e_0);
      if(match)return default$0;
      var event=caml_call1(Optional_syntax$0[1][2],ppx_optional_e_0);
      return event}
    function value_exn(ppx_optional_e_0)
     {var match=caml_call1(Optional_syntax$0[1][1],ppx_optional_e_0);
      if(match)
       {var
         _Ja_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Synchronous_time_source_Ev);
        return caml_call1(Core[253],_Ja_)}
      var event=caml_call1(Optional_syntax$0[1][2],ppx_optional_e_0);
      return event}
    function to_option(ppx_optional_e_0)
     {var match=caml_call1(Optional_syntax$0[1][1],ppx_optional_e_0);
      if(match)return 0;
      var event=caml_call1(Optional_syntax$0[1][2],ppx_optional_e_0);
      return [0,event]}
    function of_option(param)
     {if(! param)return none;var event=param[1];return event}
    var
     Option=
      [0,
       Event_is_block,
       none,
       some,
       is_none,
       is_some,
       first_some,
       Optional_syntax$0,
       sexp_of_t$9,
       value$0,
       value_exn,
       to_option,
       of_option];
    function status(r){return r[8]}
    function set_status(r,v){r[8] = v;return 0}
    function prev_fired(r){return r[7]}
    function set_prev_fired(r,v){r[7] = v;return 0}
    function next_fired(r){return r[6]}
    function set_next_fired(r,v){r[6] = v;return 0}
    function interval(r){return r[5]}
    function set_interval(r,v){r[5] = v;return 0}
    function execution_context(r){return r[4]}
    function callback(r){return r[3]}
    function at$0(r){return r[2]}
    function set_at(r,v){r[2] = v;return 0}
    function alarm(r){return r[1]}
    function set_alarm(r,v){r[1] = v;return 0}
    function _dq_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v]}
    var
     _dr_=[0,set_status],
     status$0=[0,function(param){return 0},cst_status,_dr_,status,_dq_];
    function _ds_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8]]}
    var
     _dt_=[0,set_prev_fired],
     prev_fired$0=
      [0,function(param){return 0},cst_prev_fired,_dt_,prev_fired,_ds_];
    function _du_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8]]}
    var
     _dv_=[0,set_next_fired],
     next_fired$0=
      [0,function(param){return 0},cst_next_fired,_dv_,next_fired,_du_];
    function _dw_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8]]}
    var
     _dx_=[0,set_interval],
     interval$0=[0,function(param){return 0},cst_interval,_dx_,interval,_dw_];
    function _dy_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8]]}
    var
     _dz_=0,
     execution_context$0=
      [0,
       function(param){return 0},
       cst_execution_context,
       _dz_,
       execution_context,
       _dy_];
    function _dA_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8]]}
    var
     _dB_=0,
     callback$0=[0,function(param){return 0},cst_callback,_dB_,callback,_dA_];
    function _dC_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8]]}
    var
     _dD_=[0,set_at],
     at$1=[0,function(param){return 0},cst_at,_dD_,at$0,_dC_];
    function _dE_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8]]}
    var
     _dF_=[0,set_alarm],
     alarm$0=[0,function(param){return 0},cst_alarm,_dF_,alarm,_dE_];
    function make_creator$1
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun,
      compile_acc)
     {var
       match=caml_call2(alarm_fun,alarm$0,compile_acc),
       compile_acc$0=match[2],
       alarm_gen=match[1],
       match$0=caml_call2(at_fun,at$1,compile_acc$0),
       compile_acc$1=match$0[2],
       at_gen=match$0[1],
       match$1=caml_call2(callback_fun,callback$0,compile_acc$1),
       compile_acc$2=match$1[2],
       callback_gen=match$1[1],
       match$2=
        caml_call2(execution_context_fun,execution_context$0,compile_acc$2),
       compile_acc$3=match$2[2],
       execution_context_gen=match$2[1],
       match$3=caml_call2(interval_fun,interval$0,compile_acc$3),
       compile_acc$4=match$3[2],
       interval_gen=match$3[1],
       match$4=caml_call2(next_fired_fun,next_fired$0,compile_acc$4),
       compile_acc$5=match$4[2],
       next_fired_gen=match$4[1],
       match$5=caml_call2(prev_fired_fun,prev_fired$0,compile_acc$5),
       compile_acc$6=match$5[2],
       prev_fired_gen=match$5[1],
       match$6=caml_call2(status_fun,status$0,compile_acc$6),
       compile_acc$7=match$6[2],
       status_gen=match$6[1];
      return [0,
              function(acc)
               {var
                 alarm=caml_call1(alarm_gen,acc),
                 at=caml_call1(at_gen,acc),
                 callback=caml_call1(callback_gen,acc),
                 execution_context=caml_call1(execution_context_gen,acc),
                 interval=caml_call1(interval_gen,acc),
                 next_fired=caml_call1(next_fired_gen,acc),
                 prev_fired=caml_call1(prev_fired_gen,acc),
                 status=caml_call1(status_gen,acc);
                return [0,
                        alarm,
                        at,
                        callback,
                        execution_context,
                        interval,
                        next_fired,
                        prev_fired,
                        status]},
              compile_acc$7]}
    function create$3
     (alarm,
      at,
      callback,
      execution_context,
      interval,
      next_fired,
      prev_fired,
      status)
     {return [0,
              alarm,
              at,
              callback,
              execution_context,
              interval,
              next_fired,
              prev_fired,
              status]}
    function map$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _I5_=caml_call1(status_fun,status$0),
       _I6_=caml_call1(prev_fired_fun,prev_fired$0),
       _I7_=caml_call1(next_fired_fun,next_fired$0),
       _I8_=caml_call1(interval_fun,interval$0),
       _I9_=caml_call1(execution_context_fun,execution_context$0),
       _I__=caml_call1(callback_fun,callback$0),
       _I$_=caml_call1(at_fun,at$1);
      return [0,
              caml_call1(alarm_fun,alarm$0),
              _I$_,
              _I__,
              _I9_,
              _I8_,
              _I7_,
              _I6_,
              _I5_]}
    function iter$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {caml_call1(alarm_fun,alarm$0);
      caml_call1(at_fun,at$1);
      caml_call1(callback_fun,callback$0);
      caml_call1(execution_context_fun,execution_context$0);
      caml_call1(interval_fun,interval$0);
      caml_call1(next_fired_fun,next_fired$0);
      caml_call1(prev_fired_fun,prev_fired$0);
      return caml_call1(status_fun,status$0)}
    function fold$3
     (init,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {return caml_call2
              (status_fun,
               caml_call2
                (prev_fired_fun,
                 caml_call2
                  (next_fired_fun,
                   caml_call2
                    (interval_fun,
                     caml_call2
                      (execution_context_fun,
                       caml_call2
                        (callback_fun,
                         caml_call2(at_fun,caml_call2(alarm_fun,init,alarm$0),at$1),
                         callback$0),
                       execution_context$0),
                     interval$0),
                   next_fired$0),
                 prev_fired$0),
               status$0)}
    function map_poly$1(record)
     {var
       _IY_=[0,caml_call1(record[1],status$0),0],
       _IZ_=[0,caml_call1(record[1],prev_fired$0),_IY_],
       _I0_=[0,caml_call1(record[1],next_fired$0),_IZ_],
       _I1_=[0,caml_call1(record[1],interval$0),_I0_],
       _I2_=[0,caml_call1(record[1],execution_context$0),_I1_],
       _I3_=[0,caml_call1(record[1],callback$0),_I2_],
       _I4_=[0,caml_call1(record[1],at$1),_I3_];
      return [0,caml_call1(record[1],alarm$0),_I4_]}
    function for_all$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _IR_=caml_call1(alarm_fun,alarm$0),
       _IS_=_IR_?caml_call1(at_fun,at$1):_IR_,
       _IT_=_IS_?caml_call1(callback_fun,callback$0):_IS_,
       _IU_=_IT_?caml_call1(execution_context_fun,execution_context$0):_IT_,
       _IV_=_IU_?caml_call1(interval_fun,interval$0):_IU_,
       _IW_=_IV_?caml_call1(next_fired_fun,next_fired$0):_IV_,
       _IX_=_IW_?caml_call1(prev_fired_fun,prev_fired$0):_IW_;
      return _IX_?caml_call1(status_fun,status$0):_IX_}
    function exists$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _IQ_=caml_call1(alarm_fun,alarm$0),
       _IK_=_IQ_ || caml_call1(at_fun,at$1),
       _IL_=_IK_ || caml_call1(callback_fun,callback$0),
       _IM_=_IL_ || caml_call1(execution_context_fun,execution_context$0),
       _IN_=_IM_ || caml_call1(interval_fun,interval$0),
       _IO_=_IN_ || caml_call1(next_fired_fun,next_fired$0),
       _IP_=_IO_ || caml_call1(prev_fired_fun,prev_fired$0);
      return _IP_?_IP_:caml_call1(status_fun,status$0)}
    function to_list$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _ID_=[0,caml_call1(status_fun,status$0),0],
       _IE_=[0,caml_call1(prev_fired_fun,prev_fired$0),_ID_],
       _IF_=[0,caml_call1(next_fired_fun,next_fired$0),_IE_],
       _IG_=[0,caml_call1(interval_fun,interval$0),_IF_],
       _IH_=[0,caml_call1(execution_context_fun,execution_context$0),_IG_],
       _II_=[0,caml_call1(callback_fun,callback$0),_IH_],
       _IJ_=[0,caml_call1(at_fun,at$1),_II_];
      return [0,caml_call1(alarm_fun,alarm$0),_IJ_]}
    function iter$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {caml_call3(alarm_fun,alarm$0,record,record[1]);
      caml_call3(at_fun,at$1,record,record[2]);
      caml_call3(callback_fun,callback$0,record,record[3]);
      caml_call3(execution_context_fun,execution_context$0,record,record[4]);
      caml_call3(interval_fun,interval$0,record,record[5]);
      caml_call3(next_fired_fun,next_fired$0,record,record[6]);
      caml_call3(prev_fired_fun,prev_fired$0,record,record[7]);
      return caml_call3(status_fun,status$0,record,record[8])}
    function fold$4
     (record,
      init,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _Iw_=record[8],
       _Ix_=record[7],
       _Iy_=record[6],
       _Iz_=record[5],
       _IA_=record[4],
       _IB_=record[3],
       _IC_=record[2];
      return caml_call4
              (status_fun,
               caml_call4
                (prev_fired_fun,
                 caml_call4
                  (next_fired_fun,
                   caml_call4
                    (interval_fun,
                     caml_call4
                      (execution_context_fun,
                       caml_call4
                        (callback_fun,
                         caml_call4
                          (at_fun,
                           caml_call4(alarm_fun,init,alarm$0,record,record[1]),
                           at$1,
                           record,
                           _IC_),
                         callback$0,
                         record,
                         _IB_),
                       execution_context$0,
                       record,
                       _IA_),
                     interval$0,
                     record,
                     _Iz_),
                   next_fired$0,
                   record,
                   _Iy_),
                 prev_fired$0,
                 record,
                 _Ix_),
               status$0,
               record,
               _Iw_)}
    function for_all$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _Ip_=caml_call3(alarm_fun,alarm$0,record,record[1]),
       _Iq_=_Ip_?caml_call3(at_fun,at$1,record,record[2]):_Ip_,
       _Ir_=_Iq_?caml_call3(callback_fun,callback$0,record,record[3]):_Iq_,
       _Is_=
        _Ir_
         ?caml_call3
           (execution_context_fun,execution_context$0,record,record[4])
         :_Ir_,
       _It_=_Is_?caml_call3(interval_fun,interval$0,record,record[5]):_Is_,
       _Iu_=_It_?caml_call3(next_fired_fun,next_fired$0,record,record[6]):_It_,
       _Iv_=_Iu_?caml_call3(prev_fired_fun,prev_fired$0,record,record[7]):_Iu_;
      return _Iv_?caml_call3(status_fun,status$0,record,record[8]):_Iv_}
    function exists$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _Io_=caml_call3(alarm_fun,alarm$0,record,record[1]),
       _Ii_=_Io_ || caml_call3(at_fun,at$1,record,record[2]),
       _Ij_=_Ii_ || caml_call3(callback_fun,callback$0,record,record[3]),
       _Ik_=
        _Ij_
        ||
        caml_call3(execution_context_fun,execution_context$0,record,record[4]),
       _Il_=_Ik_ || caml_call3(interval_fun,interval$0,record,record[5]),
       _Im_=_Il_ || caml_call3(next_fired_fun,next_fired$0,record,record[6]),
       _In_=_Im_ || caml_call3(prev_fired_fun,prev_fired$0,record,record[7]);
      return _In_?_In_:caml_call3(status_fun,status$0,record,record[8])}
    function to_list$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _Ib_=[0,caml_call3(status_fun,status$0,record,record[8]),0],
       _Ic_=[0,caml_call3(prev_fired_fun,prev_fired$0,record,record[7]),_Ib_],
       _Id_=[0,caml_call3(next_fired_fun,next_fired$0,record,record[6]),_Ic_],
       _Ie_=[0,caml_call3(interval_fun,interval$0,record,record[5]),_Id_],
       _If_=
        [0,
         caml_call3
          (execution_context_fun,execution_context$0,record,record[4]),
         _Ie_],
       _Ig_=[0,caml_call3(callback_fun,callback$0,record,record[3]),_If_],
       _Ih_=[0,caml_call3(at_fun,at$1,record,record[2]),_Ig_];
      return [0,caml_call3(alarm_fun,alarm$0,record,record[1]),_Ih_]}
    function map$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      prev_fired_fun,
      status_fun)
     {var
       _H6_=caml_call3(status_fun,status$0,record,record[8]),
       _H7_=caml_call3(prev_fired_fun,prev_fired$0,record,record[7]),
       _H8_=caml_call3(next_fired_fun,next_fired$0,record,record[6]),
       _H9_=caml_call3(interval_fun,interval$0,record,record[5]),
       _H__=
        caml_call3(execution_context_fun,execution_context$0,record,record[4]),
       _H$_=caml_call3(callback_fun,callback$0,record,record[3]),
       _Ia_=caml_call3(at_fun,at$1,record,record[2]);
      return [0,
              caml_call3(alarm_fun,alarm$0,record,record[1]),
              _Ia_,
              _H$_,
              _H__,
              _H9_,
              _H8_,
              _H7_,
              _H6_]}
    function set_all_mutable_fields$1
     (record,alarm,at,interval,next_fired,prev_fired,status)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[1] = alarm;
      record$0[2] = at;
      record$0[5] = interval;
      record$0[6] = next_fired;
      record$0[7] = prev_fired;
      record$0[8] = status;
      return 0}
    var
     Direct$1=
      [0,
       iter$4,
       fold$4,
       for_all$4,
       exists$4,
       to_list$4,
       map$4,
       set_all_mutable_fields$1],
     Fields$0=
      [0,
       names$1,
       status$0,
       prev_fired$0,
       next_fired$0,
       interval$0,
       execution_context$0,
       callback$0,
       at$1,
       alarm$0,
       make_creator$1,
       create$3,
       map$3,
       iter$3,
       fold$3,
       map_poly$1,
       for_all$3,
       exists$3,
       to_list$3,
       Direct$1];
    function invariant$1(t)
     {function _HL_(param)
       {function check(f){return caml_call2(include$5[2],t,f)}
        function _HM_(_H5_){return 0}
        var
         _HN_=
          check
           (function(ppx_optional_e_0)
             {var match=caml_call1(Option[7][1][1],ppx_optional_e_0);
              if(match)return 0;
              var
               prev_fired=caml_call1(Option[7][1][2],ppx_optional_e_0),
               sexpifier=Status[3],
               _H2_=t[8],
               expect=0,
               equal=0,
               message=0,
               here=0;
              function comparator(a_013,b_014)
               {return caml_call2(Status[1],a_013,b_014)}
              caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos,
                sexpifier,
                comparator,
                here,
                message,
                equal,
                expect,
                _H2_);
              var _H3_=prev_fired[6],_H4_=caml_call1(Option[3],t);
              if(caml_call2(Core[246],_H4_,_H3_))return 0;
              throw [0,Assert_failure,_dG_]}),
         _HO_=
          check
           (function(ppx_optional_e_0)
             {var match=caml_call1(Option[7][1][1],ppx_optional_e_0);
              if(match)return 0;
              var
               next_fired=caml_call1(Option[7][1][2],ppx_optional_e_0),
               sexpifier=Status[3],
               _HZ_=t[8],
               expect=0,
               equal=0,
               message=0,
               here=0;
              function comparator(a_009,b_010)
               {return caml_call2(Status[1],a_009,b_010)}
              caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos$0,
                sexpifier,
                comparator,
                here,
                message,
                equal,
                expect,
                _HZ_);
              var _H0_=next_fired[7],_H1_=caml_call1(Option[3],t);
              if(caml_call2(Core[246],_H1_,_H0_))return 0;
              throw [0,Assert_failure,_dH_]});
        function _HP_(_HY_){return 0}
        function _HQ_(_HX_){return 0}
        function _HR_(_HW_){return 0}
        function _HS_(_HV_){return 0}
        var
         _HT_=
          check
           (function(alarm)
             {var
               got=caml_call1(Alarm[6],alarm),
               _HU_=2 === t[8]?0:1,
               sexpifier=Core[305],
               equal=0,
               message=0,
               here=0;
              function comparator(a_005,b_006)
               {return caml_call2(Core[301],a_005,b_006)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$1,
                       sexpifier,
                       comparator,
                       here,
                       message,
                       equal,
                       _HU_,
                       got)});
        return caml_call8
                (Fields$0[13],_HT_,_HS_,_HR_,_HQ_,_HP_,_HO_,_HN_,_HM_)}
      return caml_call4(include$5[1],_dI_,t,sexp_of_event,_HL_)}
    function set_status$0(t,to)
     {var from=t[8];
      if(1 - caml_call2(Status[4],from,to))
       {var
         _HG_=[0,[1,[0,_dJ_,[0,sexp_of_event(t),0]]],0],
         _HH_=[0,[1,[0,_dK_,[0,caml_call1(Status[3],to),0]]],_HG_],
         _HI_=[0,[1,[0,_dL_,[0,caml_call1(Status[3],from),0]]],_HH_],
         _HJ_=
          [0,
           caml_call1(Sexplib0_Sexp_conv[7],cst_bug_set_status_transition_),
           _HI_],
         _HK_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_src_synchronous_time_sourc$0),
            _HJ_]];
        caml_call1(Core[253],_HK_)}
      t[8] = to;
      return 0}
    function set_status_if(is,t,to)
     {var _HF_=caml_call2(Status[2],is,t[8]);
      return _HF_?set_status$0(t,to):_HF_}
    var
     Event$0=
      [0,
       Status,
       sexp_of_event,
       Option,
       status,
       prev_fired,
       set_prev_fired,
       next_fired,
       set_next_fired,
       interval,
       set_interval,
       execution_context,
       callback,
       at$0,
       set_at,
       alarm,
       set_alarm,
       Fields$0,
       sexp_of_event,
       invariant$1,
       set_status$0,
       set_status_if,
       at$0];
    function sexp_of_t$10(t)
     {var k=caml_call1(Match[1],t),match=caml_call2(Match[2],k,t);
      return k
              ?caml_call1(Sexplib0_Sexp_conv[7],cst_Job_t)
              :caml_call1(Event$0[18],match)}
    var Job_or_event$0=[0,of_event,of_job,is_event,is_job,Match,sexp_of_t$10];
    function scheduler(r){return r[9]}
    function is_wall_clock(r){return r[8]}
    function handle_fired(r){return r[7]}
    function most_recently_fired(r){return r[6]}
    function set_most_recently_fired(r,v){r[6] = v;return 0}
    function fired_events(r){return r[5]}
    function set_fired_events(r,v){r[5] = v;return 0}
    function events$0(r){return r[4]}
    function am_advancing(r){return r[3]}
    function set_am_advancing(r,v){r[3] = v;return 0}
    function advance_errors(r){return r[2]}
    function set_advance_errors(r,v){r[2] = v;return 0}
    function id$1(r){return r[1]}
    function _dM_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v]}
    var
     _dN_=0,
     scheduler$0=
      [0,function(param){return 0},cst_scheduler,_dN_,scheduler,_dM_];
    function _dO_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9]]}
    var
     _dP_=0,
     is_wall_clock$0=
      [0,function(param){return 0},cst_is_wall_clock,_dP_,is_wall_clock,_dO_];
    function _dQ_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9]]}
    var
     _dR_=0,
     handle_fired$0=
      [0,function(param){return 0},cst_handle_fired,_dR_,handle_fired,_dQ_];
    function _dS_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9]]}
    var
     _dT_=[0,set_most_recently_fired],
     most_recently_fired$0=
      [0,
       function(param){return 0},
       cst_most_recently_fired,
       _dT_,
       most_recently_fired,
       _dS_];
    function _dU_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9]]}
    var
     _dV_=[0,set_fired_events],
     fired_events$0=
      [0,function(param){return 0},cst_fired_events,_dV_,fired_events,_dU_];
    function _dW_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9]]}
    var
     _dX_=0,
     events$1=[0,function(param){return 0},cst_events,_dX_,events$0,_dW_];
    function _dY_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9]]}
    var
     _dZ_=[0,set_am_advancing],
     am_advancing$0=
      [0,function(param){return 0},cst_am_advancing,_dZ_,am_advancing,_dY_];
    function _d0_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9]]}
    var
     _d1_=[0,set_advance_errors],
     advance_errors$0=
      [0,
       function(param){return 0},
       cst_advance_errors,
       _d1_,
       advance_errors,
       _d0_];
    function _d2_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9]]}
    var _d3_=0,id$2=[0,function(param){return 0},cst_id$1,_d3_,id$1,_d2_];
    function make_creator$2
     (id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun,
      compile_acc)
     {var
       match=caml_call2(id_fun,id$2,compile_acc),
       compile_acc$0=match[2],
       id_gen=match[1],
       match$0=caml_call2(advance_errors_fun,advance_errors$0,compile_acc$0),
       compile_acc$1=match$0[2],
       advance_errors_gen=match$0[1],
       match$1=caml_call2(am_advancing_fun,am_advancing$0,compile_acc$1),
       compile_acc$2=match$1[2],
       am_advancing_gen=match$1[1],
       match$2=caml_call2(events_fun,events$1,compile_acc$2),
       compile_acc$3=match$2[2],
       events_gen=match$2[1],
       match$3=caml_call2(fired_events_fun,fired_events$0,compile_acc$3),
       compile_acc$4=match$3[2],
       fired_events_gen=match$3[1],
       match$4=
        caml_call2
         (most_recently_fired_fun,most_recently_fired$0,compile_acc$4),
       compile_acc$5=match$4[2],
       most_recently_fired_gen=match$4[1],
       match$5=caml_call2(handle_fired_fun,handle_fired$0,compile_acc$5),
       compile_acc$6=match$5[2],
       handle_fired_gen=match$5[1],
       match$6=caml_call2(is_wall_clock_fun,is_wall_clock$0,compile_acc$6),
       compile_acc$7=match$6[2],
       is_wall_clock_gen=match$6[1],
       match$7=caml_call2(scheduler_fun,scheduler$0,compile_acc$7),
       compile_acc$8=match$7[2],
       scheduler_gen=match$7[1];
      return [0,
              function(acc)
               {var
                 id=caml_call1(id_gen,acc),
                 advance_errors=caml_call1(advance_errors_gen,acc),
                 am_advancing=caml_call1(am_advancing_gen,acc),
                 events=caml_call1(events_gen,acc),
                 fired_events=caml_call1(fired_events_gen,acc),
                 most_recently_fired=caml_call1(most_recently_fired_gen,acc),
                 handle_fired=caml_call1(handle_fired_gen,acc),
                 is_wall_clock=caml_call1(is_wall_clock_gen,acc),
                 scheduler=caml_call1(scheduler_gen,acc);
                return [0,
                        id,
                        advance_errors,
                        am_advancing,
                        events,
                        fired_events,
                        most_recently_fired,
                        handle_fired,
                        is_wall_clock,
                        scheduler]},
              compile_acc$8]}
    function create$4
     (id,
      advance_errors,
      am_advancing,
      events,
      fired_events,
      most_recently_fired,
      handle_fired,
      is_wall_clock,
      scheduler)
     {return [0,
              id,
              advance_errors,
              am_advancing,
              events,
              fired_events,
              most_recently_fired,
              handle_fired,
              is_wall_clock,
              scheduler]}
    function map$5
     (id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _Hx_=caml_call1(scheduler_fun,scheduler$0),
       _Hy_=caml_call1(is_wall_clock_fun,is_wall_clock$0),
       _Hz_=caml_call1(handle_fired_fun,handle_fired$0),
       _HA_=caml_call1(most_recently_fired_fun,most_recently_fired$0),
       _HB_=caml_call1(fired_events_fun,fired_events$0),
       _HC_=caml_call1(events_fun,events$1),
       _HD_=caml_call1(am_advancing_fun,am_advancing$0),
       _HE_=caml_call1(advance_errors_fun,advance_errors$0);
      return [0,
              caml_call1(id_fun,id$2),
              _HE_,
              _HD_,
              _HC_,
              _HB_,
              _HA_,
              _Hz_,
              _Hy_,
              _Hx_]}
    function iter$5
     (id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {caml_call1(id_fun,id$2);
      caml_call1(advance_errors_fun,advance_errors$0);
      caml_call1(am_advancing_fun,am_advancing$0);
      caml_call1(events_fun,events$1);
      caml_call1(fired_events_fun,fired_events$0);
      caml_call1(most_recently_fired_fun,most_recently_fired$0);
      caml_call1(handle_fired_fun,handle_fired$0);
      caml_call1(is_wall_clock_fun,is_wall_clock$0);
      return caml_call1(scheduler_fun,scheduler$0)}
    function fold$5
     (init,
      id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {return caml_call2
              (scheduler_fun,
               caml_call2
                (is_wall_clock_fun,
                 caml_call2
                  (handle_fired_fun,
                   caml_call2
                    (most_recently_fired_fun,
                     caml_call2
                      (fired_events_fun,
                       caml_call2
                        (events_fun,
                         caml_call2
                          (am_advancing_fun,
                           caml_call2
                            (advance_errors_fun,
                             caml_call2(id_fun,init,id$2),
                             advance_errors$0),
                           am_advancing$0),
                         events$1),
                       fired_events$0),
                     most_recently_fired$0),
                   handle_fired$0),
                 is_wall_clock$0),
               scheduler$0)}
    function map_poly$2(record)
     {var
       _Hp_=[0,caml_call1(record[1],scheduler$0),0],
       _Hq_=[0,caml_call1(record[1],is_wall_clock$0),_Hp_],
       _Hr_=[0,caml_call1(record[1],handle_fired$0),_Hq_],
       _Hs_=[0,caml_call1(record[1],most_recently_fired$0),_Hr_],
       _Ht_=[0,caml_call1(record[1],fired_events$0),_Hs_],
       _Hu_=[0,caml_call1(record[1],events$1),_Ht_],
       _Hv_=[0,caml_call1(record[1],am_advancing$0),_Hu_],
       _Hw_=[0,caml_call1(record[1],advance_errors$0),_Hv_];
      return [0,caml_call1(record[1],id$2),_Hw_]}
    function for_all$5
     (id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _Hh_=caml_call1(id_fun,id$2),
       _Hi_=_Hh_?caml_call1(advance_errors_fun,advance_errors$0):_Hh_,
       _Hj_=_Hi_?caml_call1(am_advancing_fun,am_advancing$0):_Hi_,
       _Hk_=_Hj_?caml_call1(events_fun,events$1):_Hj_,
       _Hl_=_Hk_?caml_call1(fired_events_fun,fired_events$0):_Hk_,
       _Hm_=
        _Hl_?caml_call1(most_recently_fired_fun,most_recently_fired$0):_Hl_,
       _Hn_=_Hm_?caml_call1(handle_fired_fun,handle_fired$0):_Hm_,
       _Ho_=_Hn_?caml_call1(is_wall_clock_fun,is_wall_clock$0):_Hn_;
      return _Ho_?caml_call1(scheduler_fun,scheduler$0):_Ho_}
    function exists$5
     (id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _Hg_=caml_call1(id_fun,id$2),
       _G$_=_Hg_ || caml_call1(advance_errors_fun,advance_errors$0),
       _Ha_=_G$_ || caml_call1(am_advancing_fun,am_advancing$0),
       _Hb_=_Ha_ || caml_call1(events_fun,events$1),
       _Hc_=_Hb_ || caml_call1(fired_events_fun,fired_events$0),
       _Hd_=_Hc_ || caml_call1(most_recently_fired_fun,most_recently_fired$0),
       _He_=_Hd_ || caml_call1(handle_fired_fun,handle_fired$0),
       _Hf_=_He_ || caml_call1(is_wall_clock_fun,is_wall_clock$0);
      return _Hf_?_Hf_:caml_call1(scheduler_fun,scheduler$0)}
    function to_list$5
     (id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _G3_=[0,caml_call1(scheduler_fun,scheduler$0),0],
       _G4_=[0,caml_call1(is_wall_clock_fun,is_wall_clock$0),_G3_],
       _G5_=[0,caml_call1(handle_fired_fun,handle_fired$0),_G4_],
       _G6_=[0,caml_call1(most_recently_fired_fun,most_recently_fired$0),_G5_],
       _G7_=[0,caml_call1(fired_events_fun,fired_events$0),_G6_],
       _G8_=[0,caml_call1(events_fun,events$1),_G7_],
       _G9_=[0,caml_call1(am_advancing_fun,am_advancing$0),_G8_],
       _G__=[0,caml_call1(advance_errors_fun,advance_errors$0),_G9_];
      return [0,caml_call1(id_fun,id$2),_G__]}
    function iter$6
     (record,
      id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {caml_call3(id_fun,id$2,record,record[1]);
      caml_call3(advance_errors_fun,advance_errors$0,record,record[2]);
      caml_call3(am_advancing_fun,am_advancing$0,record,record[3]);
      caml_call3(events_fun,events$1,record,record[4]);
      caml_call3(fired_events_fun,fired_events$0,record,record[5]);
      caml_call3
       (most_recently_fired_fun,most_recently_fired$0,record,record[6]);
      caml_call3(handle_fired_fun,handle_fired$0,record,record[7]);
      caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[8]);
      return caml_call3(scheduler_fun,scheduler$0,record,record[9])}
    function fold$6
     (record,
      init,
      id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _GV_=record[9],
       _GW_=record[8],
       _GX_=record[7],
       _GY_=record[6],
       _GZ_=record[5],
       _G0_=record[4],
       _G1_=record[3],
       _G2_=record[2];
      return caml_call4
              (scheduler_fun,
               caml_call4
                (is_wall_clock_fun,
                 caml_call4
                  (handle_fired_fun,
                   caml_call4
                    (most_recently_fired_fun,
                     caml_call4
                      (fired_events_fun,
                       caml_call4
                        (events_fun,
                         caml_call4
                          (am_advancing_fun,
                           caml_call4
                            (advance_errors_fun,
                             caml_call4(id_fun,init,id$2,record,record[1]),
                             advance_errors$0,
                             record,
                             _G2_),
                           am_advancing$0,
                           record,
                           _G1_),
                         events$1,
                         record,
                         _G0_),
                       fired_events$0,
                       record,
                       _GZ_),
                     most_recently_fired$0,
                     record,
                     _GY_),
                   handle_fired$0,
                   record,
                   _GX_),
                 is_wall_clock$0,
                 record,
                 _GW_),
               scheduler$0,
               record,
               _GV_)}
    function for_all$6
     (record,
      id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _GN_=caml_call3(id_fun,id$2,record,record[1]),
       _GO_=
        _GN_
         ?caml_call3(advance_errors_fun,advance_errors$0,record,record[2])
         :_GN_,
       _GP_=
        _GO_?caml_call3(am_advancing_fun,am_advancing$0,record,record[3]):_GO_,
       _GQ_=_GP_?caml_call3(events_fun,events$1,record,record[4]):_GP_,
       _GR_=
        _GQ_?caml_call3(fired_events_fun,fired_events$0,record,record[5]):_GQ_,
       _GS_=
        _GR_
         ?caml_call3
           (most_recently_fired_fun,most_recently_fired$0,record,record[6])
         :_GR_,
       _GT_=
        _GS_?caml_call3(handle_fired_fun,handle_fired$0,record,record[7]):_GS_,
       _GU_=
        _GT_
         ?caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[8])
         :_GT_;
      return _GU_?caml_call3(scheduler_fun,scheduler$0,record,record[9]):_GU_}
    function exists$6
     (record,
      id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _GM_=caml_call3(id_fun,id$2,record,record[1]),
       _GF_=
        _GM_
        ||
        caml_call3(advance_errors_fun,advance_errors$0,record,record[2]),
       _GG_=
        _GF_
        ||
        caml_call3(am_advancing_fun,am_advancing$0,record,record[3]),
       _GH_=_GG_ || caml_call3(events_fun,events$1,record,record[4]),
       _GI_=
        _GH_
        ||
        caml_call3(fired_events_fun,fired_events$0,record,record[5]),
       _GJ_=
        _GI_
        ||
        caml_call3
         (most_recently_fired_fun,most_recently_fired$0,record,record[6]),
       _GK_=
        _GJ_
        ||
        caml_call3(handle_fired_fun,handle_fired$0,record,record[7]),
       _GL_=
        _GK_
        ||
        caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[8]);
      return _GL_?_GL_:caml_call3(scheduler_fun,scheduler$0,record,record[9])}
    function to_list$6
     (record,
      id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _Gx_=[0,caml_call3(scheduler_fun,scheduler$0,record,record[9]),0],
       _Gy_=
        [0,
         caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[8]),
         _Gx_],
       _Gz_=
        [0,caml_call3(handle_fired_fun,handle_fired$0,record,record[7]),_Gy_],
       _GA_=
        [0,
         caml_call3
          (most_recently_fired_fun,most_recently_fired$0,record,record[6]),
         _Gz_],
       _GB_=
        [0,caml_call3(fired_events_fun,fired_events$0,record,record[5]),_GA_],
       _GC_=[0,caml_call3(events_fun,events$1,record,record[4]),_GB_],
       _GD_=
        [0,caml_call3(am_advancing_fun,am_advancing$0,record,record[3]),_GC_],
       _GE_=
        [0,
         caml_call3(advance_errors_fun,advance_errors$0,record,record[2]),
         _GD_];
      return [0,caml_call3(id_fun,id$2,record,record[1]),_GE_]}
    function map$6
     (record,
      id_fun,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      most_recently_fired_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _Gp_=caml_call3(scheduler_fun,scheduler$0,record,record[9]),
       _Gq_=caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[8]),
       _Gr_=caml_call3(handle_fired_fun,handle_fired$0,record,record[7]),
       _Gs_=
        caml_call3
         (most_recently_fired_fun,most_recently_fired$0,record,record[6]),
       _Gt_=caml_call3(fired_events_fun,fired_events$0,record,record[5]),
       _Gu_=caml_call3(events_fun,events$1,record,record[4]),
       _Gv_=caml_call3(am_advancing_fun,am_advancing$0,record,record[3]),
       _Gw_=caml_call3(advance_errors_fun,advance_errors$0,record,record[2]);
      return [0,
              caml_call3(id_fun,id$2,record,record[1]),
              _Gw_,
              _Gv_,
              _Gu_,
              _Gt_,
              _Gs_,
              _Gr_,
              _Gq_,
              _Gp_]}
    function set_all_mutable_fields$2
     (record,advance_errors,am_advancing,fired_events,most_recently_fired)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[2] = advance_errors;
      record$0[3] = am_advancing;
      record$0[5] = fired_events;
      record$0[6] = most_recently_fired;
      return 0}
    var
     Direct$2=
      [0,
       iter$6,
       fold$6,
       for_all$6,
       exists$6,
       to_list$6,
       map$6,
       set_all_mutable_fields$2],
     Fields$1=
      [0,
       names$2,
       scheduler$0,
       is_wall_clock$0,
       handle_fired$0,
       most_recently_fired$0,
       fired_events$0,
       events$1,
       am_advancing$0,
       advance_errors$0,
       id$2,
       make_creator$2,
       create$4,
       map$5,
       iter$5,
       fold$5,
       map_poly$2,
       for_all$5,
       exists$5,
       to_list$5,
       Direct$2];
    function sexp_of_t$11(param,_Ge_)
     {var
       events=_Ge_[4],
       is_wall_clock=_Ge_[8],
       now=caml_call1(Timing_wheel[11],events);
      if(is_wall_clock)
       {var _Gf_=[0,[1,[0,_d4_,[0,caml_call1(Time_ns[113],now),0]]],0];
        return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_wall_clock),_Gf_]]}
      var all_events=[0,0];
      function _Gg_(alarm)
       {var _Gn_=all_events[1],_Go_=caml_call2(Alarm[5],events,alarm);
        all_events[1] = [0,[0,caml_call2(Alarm[3],events,alarm),_Go_],_Gn_];
        return 0}
      caml_call2(Timing_wheel[15],events,_Gg_);
      function _Gh_(_Gm_){return _Gm_[2]}
      function _Gi_(param,_Gl_)
       {var at2=_Gl_[1],at1=param[1];return caml_call2(Time_ns[100],at1,at2)}
      var
       _Gj_=caml_call2(Core_List[58],all_events[1],_Gi_),
       x_015=caml_call2(Core_List[72],_Gj_,_Gh_),
       _Gk_=
        [0,[1,[0,_d5_,[0,caml_call2(Core[421],Job_or_event$0[6],x_015),0]]],0];
      return [1,[0,[1,[0,_d6_,[0,caml_call1(Time_ns[113],now),0]]],_Gk_]]}
    function timing_wheel_now(t){return caml_call1(Timing_wheel[11],t[4])}
    function is_in_fired_events(t,target_event)
     {var current=t[5];
      for(;;)
       {var match=caml_call1(Event$0[3][7][1][1],current);
        if(match)return 0;
        var
         current$0=caml_call1(Event$0[3][7][1][2],current),
         _Gd_=caml_call2(Core[246],current$0,target_event);
        if(_Gd_)return _Gd_;
        var current$1=current$0[6],current=current$1}}
    function invariant_with_jobs(job_invariant,t)
     {function _FS_(param)
       {function check(f){return caml_call2(include$5[2],t,f)}
        function _FU_(_Gc_){return 0}
        function _FV_(_Gb_){return 0}
        function _FW_(_Ga_){return 0}
        var
         _FX_=
          check
           (function(ppx_optional_e_0)
             {var match=caml_call1(Event$0[3][7][1][1],ppx_optional_e_0);
              if(match)return 0;
              var event=caml_call1(Event$0[3][7][1][2],ppx_optional_e_0);
              if(is_in_fired_events(t,event))return 0;
              throw [0,Assert_failure,_d7_]}),
         _FY_=
          check
           (function(ppx_optional_e_0)
             {var match$0=caml_call1(Event$0[3][7][1][1],ppx_optional_e_0);
              if(match$0)return 0;
              var
               current$0=caml_call1(Event$0[3][7][1][2],ppx_optional_e_0),
               current=current$0;
              for(;;)
               {var _F$_=timing_wheel_now(t);
                if(! caml_call2(Time_ns[94],current[2],_F$_))
                 throw [0,Assert_failure,_d9_];
                var
                 ppx_optional_e_0$0=current[6],
                 match=caml_call1(Event$0[3][7][1][1],ppx_optional_e_0$0);
                if(match)return 0;
                var next=caml_call1(Event$0[3][7][1][2],ppx_optional_e_0$0);
                if(! caml_call2(Time_ns[94],current[2],next[2]))
                 throw [0,Assert_failure,_d8_];
                var current=next}}),
         _FZ_=
          check
           (function(events)
             {function _F6_(_F__){return 0}
              caml_call2(Timing_wheel[6],_F6_,events);
              function _F7_(alarm)
               {var
                 job_or_event=caml_call2(Alarm[5],events,alarm),
                 k=caml_call1(Job_or_event$0[5][1],job_or_event),
                 event=caml_call2(Job_or_event$0[5][2],k,job_or_event);
                if(k)return caml_call1(job_invariant,event);
                if(! caml_call2(Core[246],alarm,event[1]))
                 throw [0,Assert_failure,_d__];
                var
                 _F8_=event[2],
                 expect=caml_call2(Alarm[3],events,alarm),
                 sexpifier=Time_ns[113],
                 equal=0,
                 message=0,
                 here=0;
                function comparator(a_017,b_018)
                 {return caml_call2(Time_ns[100],a_017,b_018)}
                caml_call8
                 (Ppx_assert_lib_Runtime[3],
                  pos$2,
                  sexpifier,
                  comparator,
                  here,
                  message,
                  equal,
                  expect,
                  _F8_);
                var
                 sexpifier$0=Event$0[1][3],
                 _F9_=event[8],
                 expect$0=2,
                 equal$0=0,
                 message$0=0,
                 here$0=0;
                function comparator$0(a_019,b_020)
                 {return caml_call2(Event$0[1][1],a_019,b_020)}
                caml_call8
                 (Ppx_assert_lib_Runtime[3],
                  pos$3,
                  sexpifier$0,
                  comparator$0,
                  here$0,
                  message$0,
                  equal$0,
                  expect$0,
                  _F9_);
                return caml_call1(Event$0[19],event)}
              return caml_call2(Timing_wheel[15],events,_F7_)});
        function _F0_(_F5_){return 0}
        function _F1_(_F4_){return 0}
        function _F2_(_F3_){return 0}
        return caml_call9
                (Fields$1[14],_F2_,_F1_,_F0_,_FZ_,_FY_,_FX_,_FW_,_FV_,_FU_)}
      function _FT_(x_016)
       {return sexp_of_t$11(function(param){return _d$_},x_016)}
      return caml_call4(include$5[1],_ea_,t,_FT_,_FS_)}
    function invariant$2(t)
     {return invariant_with_jobs(function(param){return 0},t)}
    var
     T1=
      [0,
       Event$0,
       Job_or_event$0,
       scheduler,
       is_wall_clock,
       handle_fired,
       most_recently_fired,
       set_most_recently_fired,
       fired_events,
       set_fired_events,
       events$0,
       am_advancing,
       set_am_advancing,
       advance_errors,
       set_advance_errors,
       id$1,
       Fields$1,
       sexp_of_t$11,
       timing_wheel_now,
       is_in_fired_events,
       invariant_with_jobs,
       invariant$2];
    function sexp_of_t$12(x_021){return caml_call2(T1[17],Core[171],x_021)}
    var invariant$3=T1[21],invariant_with_jobs$0=T1[20];
    function sexp_of_t$13(x_022){return caml_call2(T1[17],Core[202],x_022)}
    var Read_write=[0,sexp_of_t$13,invariant$3,invariant_with_jobs$0];
    function id$3(t){return t[1]}
    function is_wall_clock$1(t){return t[8]}
    function length$1(t){return caml_call1(Timing_wheel[14],t[4])}
    function max_allowed_alarm_time(t)
     {return caml_call1(Timing_wheel[22],t[4])}
    function read_only(t){return t}
    function fire(t,event)
     {caml_call2(T1[1][20],event,0);
      event[1] = caml_call1(Alarm[2],0);
      var
       ppx_optional_e_0=t[6],
       match$2=caml_call1(T1[1][3][7][1][1],ppx_optional_e_0),
       switch$0=0;
      if(! match$2)
       {var
         most_recently_fired=
          caml_call1(T1[1][3][7][1][2],ppx_optional_e_0);
        if(caml_call2(Time_ns[94],most_recently_fired[2],event[2]))
         {var
           most_recently_fired$0=
            caml_call1(T1[1][3][7][1][2],ppx_optional_e_0);
          event[7] = caml_call1(T1[1][3][3],most_recently_fired$0);
          event[6] = most_recently_fired$0[6];
          switch$0 = 1}}
      if(! switch$0){event[7] = T1[1][3][2];event[6] = t[5]}
      t[6] = caml_call1(T1[1][3][3],event);
      for(;;)
       {var
         ppx_optional_e_0$0=event[6],
         match$1=caml_call1(T1[1][3][7][1][1],ppx_optional_e_0$0);
        if(match$1)
         var _FR_=0;
        else
         {var
           next$0=caml_call1(T1[1][3][7][1][2],ppx_optional_e_0$0),
           continue$0=caml_call2(Time_ns[94],next$0[2],event[2]);
          if(continue$0){event[7] = event[6];event[6] = next$0[6]}
          var _FR_=continue$0}
        if(_FR_)continue;
        var
         ppx_optional_e_0$1=event[6],
         match$0=caml_call1(T1[1][3][7][1][1],ppx_optional_e_0$1);
        if(! match$0)
         {var next=caml_call1(T1[1][3][7][1][2],ppx_optional_e_0$1);
          next[7] = caml_call1(T1[1][3][3],event)}
        var
         ppx_optional_e_0$2=event[7],
         match=caml_call1(T1[1][3][7][1][1],ppx_optional_e_0$2);
        if(match){t[5] = caml_call1(T1[1][3][3],event);return 0}
        var prev=caml_call1(T1[1][3][7][1][2],ppx_optional_e_0$2);
        prev[6] = caml_call1(T1[1][3][3],event);
        return 0}}
    function alarm_precision(t){return caml_call1(Timing_wheel[10],t[4])}
    function next_alarm_fires_at(t){return caml_call1(Timing_wheel[38],t[4])}
    function next_alarm_runs_at(t)
     {return caml_call1(T1[1][3][5],t[5])
              ?[0,caml_call1(T1[18],t)]
              :caml_call1(Timing_wheel[38],t[4])}
    function now(t)
     {return t[8]?caml_call1(Time_ns[50],0):caml_call1(T1[18],t)}
    var timing_wheel_now$0=T1[18];
    function schedule(t,event)
     {caml_call2(T1[1][20],event,2);
      var _FQ_=caml_call1(T1[2][1],event);
      event[1] = caml_call3(Timing_wheel[25],t[4],event[2],_FQ_);
      return 0}
    function remove_from_fired(t,event,new_status)
     {var
       ppx_optional_e_0=t[6],
       match$1=caml_call1(T1[1][3][7][1][1],ppx_optional_e_0);
      if(! match$1)
       {var
         most_recently_fired=
          caml_call1(T1[1][3][7][1][2],ppx_optional_e_0);
        if(caml_call2(Core[246],event,most_recently_fired))
         t[6] = caml_call2(T1[1][3][6],event[6],event[7])}
      var
       ppx_optional_e_0$0=event[7],
       match$0=caml_call1(T1[1][3][7][1][1],ppx_optional_e_0$0);
      if(match$0)
       t[5] = event[6];
      else
       {var prev=caml_call1(T1[1][3][7][1][2],ppx_optional_e_0$0);
        prev[6] = event[6]}
      var
       ppx_optional_e_0$1=event[6],
       match=caml_call1(T1[1][3][7][1][1],ppx_optional_e_0$1);
      if(! match)
       {var next=caml_call1(T1[1][3][7][1][2],ppx_optional_e_0$1);
        next[7] = event[7]}
      event[6] = T1[1][3][2];
      event[7] = T1[1][3][2];
      return caml_call2(T1[1][20],event,new_status)}
    var
     include$7=T1[1],
     Status$0=include$7[1],
     sexp_of_event$0=include$7[2],
     Option$0=include$7[3],
     status$1=include$7[4],
     prev_fired$1=include$7[5],
     set_prev_fired$0=include$7[6],
     next_fired$1=include$7[7],
     set_next_fired$0=include$7[8],
     interval$1=include$7[9],
     set_interval$0=include$7[10],
     execution_context$1=include$7[11],
     callback$1=include$7[12],
     set_at$0=include$7[14],
     alarm$1=include$7[15],
     set_alarm$0=include$7[16],
     Fields$2=include$7[17],
     sexp_of_t$14=include$7[18],
     invariant$4=include$7[19],
     set_status$1=include$7[20],
     set_status_if$0=include$7[21],
     scheduled_at=include$7[22];
    function create_internal(t,at,interval,callback)
     {var _FN_=T1[1][3][2],_FO_=T1[1][3][2],_FP_=t[9][7];
      return [0,caml_call1(Alarm[2],0),at,callback,_FP_,interval,_FO_,_FN_,3]}
    function add(t,event)
     {var _FM_=caml_call1(timing_wheel_now$0,t);
      return caml_call2(Time_ns[94],event[2],_FM_)
              ?fire(t,event)
              :schedule(t,event)}
    function create_and_add(t,at,interval,callback)
     {var event=create_internal(t,at,interval,callback);
      add(t,event);
      return event}
    function at$2(t,at,callback){return create_and_add(t,at,0,callback)}
    function after$0(t,span,callback)
     {var _FL_=now(t);
      return create_and_add(t,caml_call2(Time_ns[112],_FL_,span),0,callback)}
    function require_span_at_least_alarm_pr(t,span)
     {var
       alarm_precision$0=alarm_precision(t),
       _FH_=caml_call2(Core_Time_ns[1][19],span,alarm_precision$0);
      if(! _FH_)return _FH_;
      var
       _FI_=
        [0,
         [1,[0,_eb_,[0,caml_call1(Core_Time_ns[1][10],alarm_precision$0),0]]],
         0],
       _FJ_=[0,[1,[0,_ec_,[0,caml_call1(Core_Time_ns[1][10],span),0]]],_FI_],
       _FK_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_interval_span_smaller_than),
          _FJ_]];
      return caml_call1(Core[253],_FK_)}
    function at_intervals(t,span,callback)
     {require_span_at_least_alarm_pr(t,span);
      return create_and_add(t,now(t),[0,span],callback)}
    function sexp_of_t$15(param)
     {switch(param){case 0:return _ed_;case 1:return _ee_;default:return _ef_}}
    var Abort_result=[0,sexp_of_t$15];
    function abort(t,event)
     {switch(event[8])
       {case 0:remove_from_fired(t,event,3);return 0;
        case 1:return event[5]?(event[5] = 0,0):1;
        case 2:
         caml_call2(T1[1][20],event,3);
         caml_call2(Timing_wheel[28],t[4],event[1]);
         event[1] = caml_call1(Alarm[2],0);
         return 0;
        default:return 2}}
    function abort_if_possible(t,event){abort(t,event);return 0}
    function abort_exn(t,event)
     {var reason=abort(t,event);
      if(! reason)return 0;
      var
       _FF_=[0,[1,[0,_eg_,[0,caml_call1(Abort_result[1],reason),0]]],0],
       _FG_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_Synchronous_time_source_ab),
          _FF_]];
      return caml_call1(Core[253],_FG_)}
    function create$5(t,callback)
     {return create_internal(t,Time_ns[43],0,callback)}
    function schedule_at_internal(t,event,at,interval)
     {var _FC_=event[8];
      if(3 <= _FC_)
       {event[2] = at;event[5] = interval;add(t,event);return _eh_}
      var
       _FD_=[0,caml_call1(T1[1][1][3],_FC_),0],
       _FE_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_cannot_schedule_an_event_w),
          _FD_]];
      return caml_call1(Core_Or_error[40],_FE_)}
    function schedule_at(t,event,at)
     {return schedule_at_internal(t,event,at,0)}
    function schedule_after(t,event,span)
     {var _FB_=now(t);
      return schedule_at(t,event,caml_call2(Time_ns[112],_FB_,span))}
    function schedule_at_intervals(t,event,span)
     {require_span_at_least_alarm_pr(t,span);
      return schedule_at_internal(t,event,now(t),[0,span])}
    function reschedule_at(t,event,at)
     {switch(event[8])
       {case 0:remove_from_fired(t,event,3);event[2] = at;return add(t,event);
        case 1:event[2] = at;return add(t,event);
        case 2:
         event[2] = at;
         var _FA_=caml_call1(timing_wheel_now$0,t);
         return caml_call2(Time_ns[96],at,_FA_)
                 ?caml_call3(Timing_wheel[29],t[4],event[1],at)
                 :(caml_call2(Timing_wheel[28],t[4],event[1]),fire(t,event));
        default:event[2] = at;event[5] = 0;return add(t,event)}}
    function reschedule_after(t,event,span)
     {var _Fz_=now(t);
      return reschedule_at(t,event,caml_call2(Time_ns[112],_Fz_,span))}
    var
     Event$1=
      [0,
       Status$0,
       sexp_of_event$0,
       Option$0,
       status$1,
       prev_fired$1,
       set_prev_fired$0,
       next_fired$1,
       set_next_fired$0,
       interval$1,
       set_interval$0,
       execution_context$1,
       callback$1,
       set_at$0,
       alarm$1,
       set_alarm$0,
       Fields$2,
       sexp_of_t$14,
       invariant$4,
       set_status$1,
       set_status_if$0,
       scheduled_at,
       create_internal,
       add,
       create_and_add,
       at$2,
       after$0,
       require_span_at_least_alarm_pr,
       at_intervals,
       Abort_result,
       abort,
       abort_if_possible,
       abort_exn,
       create$5,
       schedule_at_internal,
       schedule_at,
       schedule_after,
       schedule_at_intervals,
       reschedule_at,
       reschedule_after];
    function run_after(t,span,callback)
     {caml_call3(Event$1[26],t,span,callback);return 0}
    function run_at(t,at,callback)
     {caml_call3(Event$1[25],t,at,callback);return 0}
    function run_at_intervals(t,span,callback)
     {caml_call3(Event$1[28],t,span,callback);return 0}
    function run_fired_events(t,send_exn)
     {var current_execution_context=t[9][7];
      for(;;)
       {var
         ppx_optional_e_0=t[5],
         match=caml_call1(Event$1[3][7][1][1],ppx_optional_e_0);
        if(match)
         var _Fv_=0;
        else
         {var event=caml_call1(Event$1[3][7][1][2],ppx_optional_e_0);
          if(event[8])throw [0,Assert_failure,_ei_];
          remove_from_fired(t,event,1);
          set_execution_context(t[9],event[4]);
          try
           {var switch$0=0;caml_call1(event[3],0);switch$0 = 1}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(send_exn)
             {var
               send_exn$0=send_exn[1],
               backtrace=caml_call1(Base_Backtrace[6][4],0);
              caml_call3
               (send_exn$0,event[4][1],[0,[0,936718974,backtrace]],exn)}
            else
             {var _Fw_=t[2];t[2] = [0,caml_call2(Core_Error[25],0,exn),_Fw_]}
            caml_call3(Event$1[20],1,event,3)}
          if(switch$0)
           {var _Fx_=event[5];
            if(_Fx_)
             {var interval=_Fx_[1];
              if(caml_call2(Event$1[1][2],1,event[8]))
               {var _Fy_=caml_call1(timing_wheel_now$0,t);
                event[2] = caml_call5(Time_ns[65],0,event[2],_Fy_,interval,0);
                schedule(t,event)}}
            else
             caml_call3(Event$1[20],1,event,3)}
          var _Fv_=1}
        if(_Fv_)continue;
        return set_execution_context(t[9],current_execution_context)}}
    function advance_clock(t,to,send_exn)
     {caml_call3(Timing_wheel[20],t[4],to,t[7]);
      return run_fired_events(t,send_exn)}
    function fire_past_alarms(t,send_exn)
     {caml_call2(Timing_wheel[21],t[4],t[7]);
      return run_fired_events(t,send_exn)}
    function advance_internal(t,to,send_exn)
     {advance_clock(t,to,send_exn);return fire_past_alarms(t,send_exn)}
    function prepare_to_advance(t,send_exn)
     {if(t[3])
       {var
         _Fu_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_cannot_call_advance_by_ala);
        caml_call1(Core[253],_Fu_)}
      t[3] = 1;
      if(t[2])t[2] = 0;
      return run_fired_events(t,send_exn)}
    function finish_advancing(t)
     {t[3] = 0;
      var _Ft_=t[2];
      return _Ft_?(t[2] = 0,[1,caml_call2(Core_Error[24],0,_Ft_)]):_ej_}
    function advance_by_alarms(t,to)
     {prepare_to_advance(t,0);
      var continue$0=[0,1],send_exn=0;
      for(;;)
       {if(! continue$0[1])
         {advance_internal(t,to,send_exn);return finish_advancing(t)}
        if(caml_call1(Timing_wheel[13],t[4])){continue$0[1] = 0;continue}
        var min_alarm_time=caml_call1(Timing_wheel[37],t[4]);
        if(caml_call2(Time_ns[93],min_alarm_time,to))
         continue$0[1] = 0;
        else
         advance_internal(t,min_alarm_time,send_exn)}}
    function advance_by_max_alarms_in_each_(t,to)
     {prepare_to_advance(t,0);
      var continue$0=[0,1],send_exn=0;
      for(;;)
       {if(! continue$0[1])
         {advance_internal(t,to,send_exn);return finish_advancing(t)}
        if(caml_call1(Timing_wheel[13],t[4])){continue$0[1] = 0;continue}
        var next_alarm_fires_at=caml_call1(Timing_wheel[39],t[4]);
        if(caml_call2(Time_ns[93],next_alarm_fires_at,to))
         continue$0[1] = 0;
        else
         advance_internal(t,caml_call1(Timing_wheel[36],t[4]),send_exn)}}
    function advance_directly(t,to)
     {prepare_to_advance(t,0);
      advance_internal(t,to,0);
      return finish_advancing(t)}
    function duration_of(t,f)
     {var
       start=now(t),
       result=caml_call1(f,0),
       _Fs_=now(t),
       duration=caml_call2(Time_ns[57],_Fs_,start);
      return [0,result,duration]}
    function max_alarm_time_in_min_timing_w(t)
     {return caml_call1(Timing_wheel[34],t[4])}
    function has_events_to_run(t){return caml_call1(Event$1[3][5],t[5])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$43);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Synchronous_t$0);
    var
     include$8=
      [0,
       Time_ns,
       Alarm,
       default_timing_wheel_config,
       T1,
       sexp_of_t$12,
       invariant$3,
       invariant_with_jobs$0,
       Read_write,
       id$3,
       is_wall_clock$1,
       length$1,
       max_allowed_alarm_time,
       read_only,
       fire,
       alarm_precision,
       next_alarm_fires_at,
       next_alarm_runs_at,
       now,
       timing_wheel_now$0,
       schedule,
       remove_from_fired,
       Event$1,
       run_after,
       run_at,
       run_at_intervals,
       run_fired_events,
       advance_clock,
       fire_past_alarms,
       advance_internal,
       prepare_to_advance,
       finish_advancing,
       advance_by_alarms,
       advance_by_max_alarms_in_each_,
       advance_directly,
       duration_of,
       max_alarm_time_in_min_timing_w,
       has_events_to_run];
    caml_register_global
     (1122,include$8,"Async_kernel__Synchronous_time_source0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Scheduler1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$44);
    caml_call1(Expect_test_collector[5][1],cst_src_scheduler1_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$45,cst$14);
    function create_with_cell(cell){return [0,cell]}
    function create$6(param){return [0,0]}
    function create_full(a){return [0,[2,a]]}
    var Ivar$0=[0,create_with_cell,create$6,create_full];
    function create$7(param)
     {var _Fr_=[0,0,caml_call1(Ivar$0[2],0)];return caml_call1(Bvar[1],_Fr_)}
    var Bvar$0=[0,create$7];
    function sexp_of_t$16(param){return param?_ek_:_el_}
    var Exec_result=[0,sexp_of_t$16];
    function exec(r){return r[2]}
    function execution_context$2(r){return r[1]}
    function _em_(r,v){return [0,r[1],v]}
    var _en_=0,exec$0=[0,function(param){return 0},cst_exec,_en_,exec,_em_];
    function _eo_(r,v){return [0,v,r[2]]}
    var
     _ep_=0,
     execution_context$3=
      [0,
       function(param){return 0},
       cst_execution_context$0,
       _ep_,
       execution_context$2,
       _eo_];
    function make_creator$3(execution_context_fun,exec_fun,compile_acc)
     {var
       match=caml_call2(execution_context_fun,execution_context$3,compile_acc),
       compile_acc$0=match[2],
       execution_context_gen=match[1],
       match$0=caml_call2(exec_fun,exec$0,compile_acc$0),
       compile_acc$1=match$0[2],
       exec_gen=match$0[1];
      return [0,
              function(acc)
               {var
                 execution_context=caml_call1(execution_context_gen,acc),
                 exec=caml_call1(exec_gen,acc);
                return [0,execution_context,exec]},
              compile_acc$1]}
    function create$8(execution_context,exec)
     {return [0,execution_context,exec]}
    function map$7(execution_context_fun,exec_fun)
     {var _Fq_=caml_call1(exec_fun,exec$0);
      return [0,caml_call1(execution_context_fun,execution_context$3),_Fq_]}
    function iter$7(execution_context_fun,exec_fun)
     {caml_call1(execution_context_fun,execution_context$3);
      return caml_call1(exec_fun,exec$0)}
    function fold$7(init,execution_context_fun,exec_fun)
     {return caml_call2
              (exec_fun,
               caml_call2(execution_context_fun,init,execution_context$3),
               exec$0)}
    function map_poly$3(record)
     {var _Fp_=[0,caml_call1(record[1],exec$0),0];
      return [0,caml_call1(record[1],execution_context$3),_Fp_]}
    function for_all$7(execution_context_fun,exec_fun)
     {var _Fo_=caml_call1(execution_context_fun,execution_context$3);
      return _Fo_?caml_call1(exec_fun,exec$0):_Fo_}
    function exists$7(execution_context_fun,exec_fun)
     {var _Fn_=caml_call1(execution_context_fun,execution_context$3);
      return _Fn_?_Fn_:caml_call1(exec_fun,exec$0)}
    function to_list$7(execution_context_fun,exec_fun)
     {var _Fm_=[0,caml_call1(exec_fun,exec$0),0];
      return [0,caml_call1(execution_context_fun,execution_context$3),_Fm_]}
    function iter$8(record,execution_context_fun,exec_fun)
     {caml_call3(execution_context_fun,execution_context$3,record,record[1]);
      return caml_call3(exec_fun,exec$0,record,record[2])}
    function fold$8(record,init,execution_context_fun,exec_fun)
     {var _Fl_=record[2];
      return caml_call4
              (exec_fun,
               caml_call4
                (execution_context_fun,
                 init,
                 execution_context$3,
                 record,
                 record[1]),
               exec$0,
               record,
               _Fl_)}
    function for_all$8(record,execution_context_fun,exec_fun)
     {var
       _Fk_=
        caml_call3(execution_context_fun,execution_context$3,record,record[1]);
      return _Fk_?caml_call3(exec_fun,exec$0,record,record[2]):_Fk_}
    function exists$8(record,execution_context_fun,exec_fun)
     {var
       _Fj_=
        caml_call3(execution_context_fun,execution_context$3,record,record[1]);
      return _Fj_?_Fj_:caml_call3(exec_fun,exec$0,record,record[2])}
    function to_list$8(record,execution_context_fun,exec_fun)
     {var _Fi_=[0,caml_call3(exec_fun,exec$0,record,record[2]),0];
      return [0,
              caml_call3
               (execution_context_fun,execution_context$3,record,record[1]),
              _Fi_]}
    function map$8(record,execution_context_fun,exec_fun)
     {var _Fh_=caml_call3(exec_fun,exec$0,record,record[2]);
      return [0,
              caml_call3
               (execution_context_fun,execution_context$3,record,record[1]),
              _Fh_]}
    function set_all_mutable_fields$3(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$3=
      [0,
       iter$8,
       fold$8,
       for_all$8,
       exists$8,
       to_list$8,
       map$8,
       set_all_mutable_fields$3],
     Fields$3=
      [0,
       names$3,
       exec$0,
       execution_context$3,
       make_creator$3,
       create$8,
       map$7,
       iter$7,
       fold$7,
       map_poly$3,
       for_all$7,
       exists$7,
       to_list$7,
       Direct$3];
    function sexp_of_t$17(param)
     {var execution_context_002=param[1],bnds_001=0;
      function _Ff_(_Fg_){return 0}
      var
       arg_005=caml_call1(Sexplib0_Sexp_conv[24],_Ff_),
       bnds_001$0=[0,[1,[0,_eq_,[0,arg_005,0]]],bnds_001],
       arg_003=sexp_of_t$1(execution_context_002),
       bnds_001$1=[0,[1,[0,_er_,[0,arg_003,0]]],bnds_001$0];
      return [1,bnds_001$1]}
    function invariant$5(t)
     {function _Fb_(param)
       {function _Fd_(_Fe_){return 0}
        var _Fc_=caml_call2(include$5[2],t,f);
        return caml_call2(Fields$3[7],_Fc_,_Fd_)}
      return caml_call4(include$5[1],_es_,t,sexp_of_t$17,_Fb_)}
    var
     Very_low_priority_worker$0=
      [0,
       Exec_result,
       exec,
       execution_context$2,
       Fields$3,
       sexp_of_t$17,
       invariant$5];
    function record_backtraces(r){return r[28]}
    function set_record_backtraces(r,v){r[28] = v;return 0}
    function max_num_jobs_per_priority_per_(r){return r[27]}
    function set_max_num_jobs_per_priority_(r,v){r[27] = v;return 0}
    function check_invariants(r){return r[26]}
    function set_check_invariants(r,v){r[26] = v;return 0}
    function yield_until_no_jobs_remain(r){return r[25]}
    function set_yield_until_no_jobs_remain(r,v){r[25] = v;return 0}
    function yield$0(r){return r[24]}
    function set_yield(r,v){r[24] = v;return 0}
    function event_added_hook(r){return r[23]}
    function set_event_added_hook(r,v){r[23] = v;return 0}
    function job_queued_hook(r){return r[22]}
    function set_job_queued_hook(r,v){r[22] = v;return 0}
    function thread_safe_external_job_hook(r){return r[21]}
    function set_thread_safe_external_job_h(r,v){r[21] = v;return 0}
    function external_jobs(r){return r[20]}
    function time_source(r){return r[19]}
    function set_time_source(r,v){r[19] = v;return 0}
    function total_cycle_time(r){return r[18]}
    function set_total_cycle_time(r,v){r[18] = v;return 0}
    function last_cycle_num_jobs(r){return r[17]}
    function set_last_cycle_num_jobs(r,v){r[17] = v;return 0}
    function last_cycle_time(r){return r[16]}
    function set_last_cycle_time(r,v){r[16] = v;return 0}
    function run_every_cycle_end_state(r){return r[15]}
    function run_every_cycle_end(r){return r[14]}
    function set_run_every_cycle_end(r,v){r[14] = v;return 0}
    function run_every_cycle_start_state(r){return r[13]}
    function run_every_cycle_start(r){return r[12]}
    function set_run_every_cycle_start(r,v){r[12] = v;return 0}
    function in_cycle(r){return r[11]}
    function set_in_cycle(r,v){r[11] = v;return 0}
    function cycle_start(r){return r[10]}
    function set_cycle_start(r,v){r[10] = v;return 0}
    function cycle_count(r){return r[9]}
    function set_cycle_count(r,v){r[9] = v;return 0}
    function uncaught_exn_unwrapped(r){return r[8]}
    function set_uncaught_exn(r,v){r[8] = v;return 0}
    function current_execution_context(r){return r[7]}
    function set_current_execution_context(r,v){r[7] = v;return 0}
    function main_execution_context(r){return r[6]}
    function set_main_execution_context(r,v){r[6] = v;return 0}
    function very_low_priority_workers(r){return r[5]}
    function low_priority_jobs(r){return r[4]}
    function normal_priority_jobs(r){return r[3]}
    function job_pool(r){return r[2]}
    function set_job_pool(r,v){r[2] = v;return 0}
    function check_access(r){return r[1]}
    function set_check_access(r,v){r[1] = v;return 0}
    function _et_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              v]}
    var
     _eu_=[0,set_record_backtraces],
     record_backtraces$0=
      [0,
       function(param){return 0},
       cst_record_backtraces,
       _eu_,
       record_backtraces,
       _et_];
    function _ev_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              v,
              r[28]]}
    var
     _ew_=[0,set_max_num_jobs_per_priority_],
     max_num_jobs_per_priority_per_$0=
      [0,
       function(param){return 0},
       cst_max_num_jobs_per_priority_,
       _ew_,
       max_num_jobs_per_priority_per_,
       _ev_];
    function _ex_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              v,
              r[27],
              r[28]]}
    var
     _ey_=[0,set_check_invariants],
     check_invariants$0=
      [0,
       function(param){return 0},
       cst_check_invariants,
       _ey_,
       check_invariants,
       _ex_];
    function _ez_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              v,
              r[26],
              r[27],
              r[28]]}
    var
     _eA_=[0,set_yield_until_no_jobs_remain],
     yield_until_no_jobs_remain$0=
      [0,
       function(param){return 0},
       cst_yield_until_no_jobs_remain,
       _eA_,
       yield_until_no_jobs_remain,
       _ez_];
    function _eB_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              v,
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eC_=[0,set_yield],
     yield$1=[0,function(param){return 0},cst_yield,_eC_,yield$0,_eB_];
    function _eD_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              v,
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eE_=[0,set_event_added_hook],
     event_added_hook$0=
      [0,
       function(param){return 0},
       cst_event_added_hook,
       _eE_,
       event_added_hook,
       _eD_];
    function _eF_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              v,
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eG_=[0,set_job_queued_hook],
     job_queued_hook$0=
      [0,
       function(param){return 0},
       cst_job_queued_hook,
       _eG_,
       job_queued_hook,
       _eF_];
    function _eH_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              v,
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eI_=[0,set_thread_safe_external_job_h],
     thread_safe_external_job_hook$0=
      [0,
       function(param){return 0},
       cst_thread_safe_external_job_h,
       _eI_,
       thread_safe_external_job_hook,
       _eH_];
    function _eJ_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              v,
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eK_=0,
     external_jobs$0=
      [0,function(param){return 0},cst_external_jobs,_eK_,external_jobs,_eJ_];
    function _eL_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              v,
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eM_=[0,set_time_source],
     time_source$0=
      [0,function(param){return 0},cst_time_source,_eM_,time_source,_eL_];
    function _eN_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              v,
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eO_=[0,set_total_cycle_time],
     total_cycle_time$0=
      [0,
       function(param){return 0},
       cst_total_cycle_time,
       _eO_,
       total_cycle_time,
       _eN_];
    function _eP_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              v,
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eQ_=[0,set_last_cycle_num_jobs],
     last_cycle_num_jobs$0=
      [0,
       function(param){return 0},
       cst_last_cycle_num_jobs,
       _eQ_,
       last_cycle_num_jobs,
       _eP_];
    function _eR_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v,
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eS_=[0,set_last_cycle_time],
     last_cycle_time$0=
      [0,
       function(param){return 0},
       cst_last_cycle_time,
       _eS_,
       last_cycle_time,
       _eR_];
    function _eT_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eU_=0,
     run_every_cycle_end_state$0=
      [0,
       function(param){return 0},
       cst_run_every_cycle_end_state,
       _eU_,
       run_every_cycle_end_state,
       _eT_];
    function _eV_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eW_=[0,set_run_every_cycle_end],
     run_every_cycle_end$0=
      [0,
       function(param){return 0},
       cst_run_every_cycle_end,
       _eW_,
       run_every_cycle_end,
       _eV_];
    function _eX_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _eY_=0,
     run_every_cycle_start_state$0=
      [0,
       function(param){return 0},
       cst_run_every_cycle_start_stat,
       _eY_,
       run_every_cycle_start_state,
       _eX_];
    function _eZ_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _e0_=[0,set_run_every_cycle_start],
     run_every_cycle_start$0=
      [0,
       function(param){return 0},
       cst_run_every_cycle_start,
       _e0_,
       run_every_cycle_start,
       _eZ_];
    function _e1_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _e2_=[0,set_in_cycle],
     in_cycle$0=[0,function(param){return 0},cst_in_cycle,_e2_,in_cycle,_e1_];
    function _e3_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _e4_=[0,set_cycle_start],
     cycle_start$0=
      [0,function(param){return 0},cst_cycle_start,_e4_,cycle_start,_e3_];
    function _e5_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _e6_=[0,set_cycle_count],
     cycle_count$0=
      [0,function(param){return 0},cst_cycle_count,_e6_,cycle_count,_e5_];
    function _e7_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _e8_=[0,set_uncaught_exn],
     uncaught_exn=
      [0,
       function(param){return 0},
       cst_uncaught_exn,
       _e8_,
       uncaught_exn_unwrapped,
       _e7_];
    function _e9_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _e__=[0,set_current_execution_context],
     current_execution_context$0=
      [0,
       function(param){return 0},
       cst_current_execution_context,
       _e__,
       current_execution_context,
       _e9_];
    function _e$_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _fa_=[0,set_main_execution_context],
     main_execution_context$0=
      [0,
       function(param){return 0},
       cst_main_execution_context,
       _fa_,
       main_execution_context,
       _e$_];
    function _fb_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _fc_=0,
     very_low_priority_workers$0=
      [0,
       function(param){return 0},
       cst_very_low_priority_workers,
       _fc_,
       very_low_priority_workers,
       _fb_];
    function _fd_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _fe_=0,
     low_priority_jobs$0=
      [0,
       function(param){return 0},
       cst_low_priority_jobs,
       _fe_,
       low_priority_jobs,
       _fd_];
    function _ff_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _fg_=0,
     normal_priority_jobs$0=
      [0,
       function(param){return 0},
       cst_normal_priority_jobs,
       _fg_,
       normal_priority_jobs,
       _ff_];
    function _fh_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _fi_=[0,set_job_pool],
     job_pool$0=[0,function(param){return 0},cst_job_pool,_fi_,job_pool,_fh_];
    function _fj_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _fk_=[0,set_check_access],
     check_access$0=
      [0,function(param){return 0},cst_check_access,_fk_,check_access,_fj_];
    function make_creator$4
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun,
      compile_acc)
     {var
       match=caml_call2(check_access_fun,check_access$0,compile_acc),
       compile_acc$0=match[2],
       check_access_gen=match[1],
       match$0=caml_call2(job_pool_fun,job_pool$0,compile_acc$0),
       compile_acc$1=match$0[2],
       job_pool_gen=match$0[1],
       match$1=
        caml_call2
         (normal_priority_jobs_fun,normal_priority_jobs$0,compile_acc$1),
       compile_acc$2=match$1[2],
       normal_priority_jobs_gen=match$1[1],
       match$2=
        caml_call2(low_priority_jobs_fun,low_priority_jobs$0,compile_acc$2),
       compile_acc$3=match$2[2],
       low_priority_jobs_gen=match$2[1],
       match$3=
        caml_call2
         (very_low_priority_workers_fun,
          very_low_priority_workers$0,
          compile_acc$3),
       compile_acc$4=match$3[2],
       very_low_priority_workers_gen=match$3[1],
       match$4=
        caml_call2
         (main_execution_context_fun,main_execution_context$0,compile_acc$4),
       compile_acc$5=match$4[2],
       main_execution_context_gen=match$4[1],
       match$5=
        caml_call2
         (current_execution_context_fun,
          current_execution_context$0,
          compile_acc$5),
       compile_acc$6=match$5[2],
       current_execution_context_gen=match$5[1],
       match$6=caml_call2(uncaught_exn_fun,uncaught_exn,compile_acc$6),
       compile_acc$7=match$6[2],
       uncaught_exn_gen=match$6[1],
       match$7=caml_call2(cycle_count_fun,cycle_count$0,compile_acc$7),
       compile_acc$8=match$7[2],
       cycle_count_gen=match$7[1],
       match$8=caml_call2(cycle_start_fun,cycle_start$0,compile_acc$8),
       compile_acc$9=match$8[2],
       cycle_start_gen=match$8[1],
       match$9=caml_call2(in_cycle_fun,in_cycle$0,compile_acc$9),
       compile_acc$10=match$9[2],
       in_cycle_gen=match$9[1],
       match$10=
        caml_call2
         (run_every_cycle_start_fun,run_every_cycle_start$0,compile_acc$10),
       compile_acc$11=match$10[2],
       run_every_cycle_start_gen=match$10[1],
       match$11=
        caml_call2
         (run_every_cycle_start_state_fu,
          run_every_cycle_start_state$0,
          compile_acc$11),
       compile_acc$12=match$11[2],
       run_every_cycle_start_state_ge=match$11[1],
       match$12=
        caml_call2
         (run_every_cycle_end_fun,run_every_cycle_end$0,compile_acc$12),
       compile_acc$13=match$12[2],
       run_every_cycle_end_gen=match$12[1],
       match$13=
        caml_call2
         (run_every_cycle_end_state_fun,
          run_every_cycle_end_state$0,
          compile_acc$13),
       compile_acc$14=match$13[2],
       run_every_cycle_end_state_gen=match$13[1],
       match$14=
        caml_call2(last_cycle_time_fun,last_cycle_time$0,compile_acc$14),
       compile_acc$15=match$14[2],
       last_cycle_time_gen=match$14[1],
       match$15=
        caml_call2
         (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,compile_acc$15),
       compile_acc$16=match$15[2],
       last_cycle_num_jobs_gen=match$15[1],
       match$16=
        caml_call2(total_cycle_time_fun,total_cycle_time$0,compile_acc$16),
       compile_acc$17=match$16[2],
       total_cycle_time_gen=match$16[1],
       match$17=caml_call2(time_source_fun,time_source$0,compile_acc$17),
       compile_acc$18=match$17[2],
       time_source_gen=match$17[1],
       match$18=caml_call2(external_jobs_fun,external_jobs$0,compile_acc$18),
       compile_acc$19=match$18[2],
       external_jobs_gen=match$18[1],
       match$19=
        caml_call2
         (thread_safe_external_job_hook_,
          thread_safe_external_job_hook$0,
          compile_acc$19),
       compile_acc$20=match$19[2],
       thread_safe_external_job_hook_$0=match$19[1],
       match$20=
        caml_call2(job_queued_hook_fun,job_queued_hook$0,compile_acc$20),
       compile_acc$21=match$20[2],
       job_queued_hook_gen=match$20[1],
       match$21=
        caml_call2(event_added_hook_fun,event_added_hook$0,compile_acc$21),
       compile_acc$22=match$21[2],
       event_added_hook_gen=match$21[1],
       match$22=caml_call2(yield_fun,yield$1,compile_acc$22),
       compile_acc$23=match$22[2],
       yield_gen=match$22[1],
       match$23=
        caml_call2
         (yield_until_no_jobs_remain_fun,
          yield_until_no_jobs_remain$0,
          compile_acc$23),
       compile_acc$24=match$23[2],
       yield_until_no_jobs_remain_gen=match$23[1],
       match$24=
        caml_call2(check_invariants_fun,check_invariants$0,compile_acc$24),
       compile_acc$25=match$24[2],
       check_invariants_gen=match$24[1],
       match$25=
        caml_call2
         (max_num_jobs_per_priority_per_,
          max_num_jobs_per_priority_per_$0,
          compile_acc$25),
       compile_acc$26=match$25[2],
       max_num_jobs_per_priority_per_$1=match$25[1],
       match$26=
        caml_call2(record_backtraces_fun,record_backtraces$0,compile_acc$26),
       compile_acc$27=match$26[2],
       record_backtraces_gen=match$26[1];
      return [0,
              function(acc)
               {var
                 check_access=caml_call1(check_access_gen,acc),
                 job_pool=caml_call1(job_pool_gen,acc),
                 normal_priority_jobs=caml_call1(normal_priority_jobs_gen,acc),
                 low_priority_jobs=caml_call1(low_priority_jobs_gen,acc),
                 very_low_priority_workers=
                  caml_call1(very_low_priority_workers_gen,acc),
                 main_execution_context=
                  caml_call1(main_execution_context_gen,acc),
                 current_execution_context=
                  caml_call1(current_execution_context_gen,acc),
                 uncaught_exn=caml_call1(uncaught_exn_gen,acc),
                 cycle_count=caml_call1(cycle_count_gen,acc),
                 cycle_start=caml_call1(cycle_start_gen,acc),
                 in_cycle=caml_call1(in_cycle_gen,acc),
                 run_every_cycle_start=
                  caml_call1(run_every_cycle_start_gen,acc),
                 run_every_cycle_start_state=
                  caml_call1(run_every_cycle_start_state_ge,acc),
                 run_every_cycle_end=caml_call1(run_every_cycle_end_gen,acc),
                 run_every_cycle_end_state=
                  caml_call1(run_every_cycle_end_state_gen,acc),
                 last_cycle_time=caml_call1(last_cycle_time_gen,acc),
                 last_cycle_num_jobs=caml_call1(last_cycle_num_jobs_gen,acc),
                 total_cycle_time=caml_call1(total_cycle_time_gen,acc),
                 time_source=caml_call1(time_source_gen,acc),
                 external_jobs=caml_call1(external_jobs_gen,acc),
                 thread_safe_external_job_hook=
                  caml_call1(thread_safe_external_job_hook_$0,acc),
                 job_queued_hook=caml_call1(job_queued_hook_gen,acc),
                 event_added_hook=caml_call1(event_added_hook_gen,acc),
                 yield$0=caml_call1(yield_gen,acc),
                 yield_until_no_jobs_remain=
                  caml_call1(yield_until_no_jobs_remain_gen,acc),
                 check_invariants=caml_call1(check_invariants_gen,acc),
                 max_num_jobs_per_priority_per_=
                  caml_call1(max_num_jobs_per_priority_per_$1,acc),
                 record_backtraces=caml_call1(record_backtraces_gen,acc);
                return [0,
                        check_access,
                        job_pool,
                        normal_priority_jobs,
                        low_priority_jobs,
                        very_low_priority_workers,
                        main_execution_context,
                        current_execution_context,
                        uncaught_exn,
                        cycle_count,
                        cycle_start,
                        in_cycle,
                        run_every_cycle_start,
                        run_every_cycle_start_state,
                        run_every_cycle_end,
                        run_every_cycle_end_state,
                        last_cycle_time,
                        last_cycle_num_jobs,
                        total_cycle_time,
                        time_source,
                        external_jobs,
                        thread_safe_external_job_hook,
                        job_queued_hook,
                        event_added_hook,
                        yield$0,
                        yield_until_no_jobs_remain,
                        check_invariants,
                        max_num_jobs_per_priority_per_,
                        record_backtraces]},
              compile_acc$27]}
    function create$9
     (check_access,
      job_pool,
      normal_priority_jobs,
      low_priority_jobs,
      very_low_priority_workers,
      main_execution_context,
      current_execution_context,
      uncaught_exn,
      cycle_count,
      cycle_start,
      in_cycle,
      run_every_cycle_start,
      run_every_cycle_start_state,
      run_every_cycle_end,
      run_every_cycle_end_state,
      last_cycle_time,
      last_cycle_num_jobs,
      total_cycle_time,
      time_source,
      external_jobs,
      thread_safe_external_job_hook,
      job_queued_hook,
      event_added_hook,
      yield$0,
      yield_until_no_jobs_remain,
      check_invariants,
      max_num_jobs_per_priority_per_,
      record_backtraces)
     {return [0,
              check_access,
              job_pool,
              normal_priority_jobs,
              low_priority_jobs,
              very_low_priority_workers,
              main_execution_context,
              current_execution_context,
              uncaught_exn,
              cycle_count,
              cycle_start,
              in_cycle,
              run_every_cycle_start,
              run_every_cycle_start_state,
              run_every_cycle_end,
              run_every_cycle_end_state,
              last_cycle_time,
              last_cycle_num_jobs,
              total_cycle_time,
              time_source,
              external_jobs,
              thread_safe_external_job_hook,
              job_queued_hook,
              event_added_hook,
              yield$0,
              yield_until_no_jobs_remain,
              check_invariants,
              max_num_jobs_per_priority_per_,
              record_backtraces]}
    function map$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _EM_=caml_call1(record_backtraces_fun,record_backtraces$0),
       _EN_=
        caml_call1
         (max_num_jobs_per_priority_per_,max_num_jobs_per_priority_per_$0),
       _EO_=caml_call1(check_invariants_fun,check_invariants$0),
       _EP_=
        caml_call1
         (yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0),
       _EQ_=caml_call1(yield_fun,yield$1),
       _ER_=caml_call1(event_added_hook_fun,event_added_hook$0),
       _ES_=caml_call1(job_queued_hook_fun,job_queued_hook$0),
       _ET_=
        caml_call1
         (thread_safe_external_job_hook_,thread_safe_external_job_hook$0),
       _EU_=caml_call1(external_jobs_fun,external_jobs$0),
       _EV_=caml_call1(time_source_fun,time_source$0),
       _EW_=caml_call1(total_cycle_time_fun,total_cycle_time$0),
       _EX_=caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0),
       _EY_=caml_call1(last_cycle_time_fun,last_cycle_time$0),
       _EZ_=
        caml_call1(run_every_cycle_end_state_fun,run_every_cycle_end_state$0),
       _E0_=caml_call1(run_every_cycle_end_fun,run_every_cycle_end$0),
       _E1_=
        caml_call1
         (run_every_cycle_start_state_fu,run_every_cycle_start_state$0),
       _E2_=caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0),
       _E3_=caml_call1(in_cycle_fun,in_cycle$0),
       _E4_=caml_call1(cycle_start_fun,cycle_start$0),
       _E5_=caml_call1(cycle_count_fun,cycle_count$0),
       _E6_=caml_call1(uncaught_exn_fun,uncaught_exn),
       _E7_=
        caml_call1(current_execution_context_fun,current_execution_context$0),
       _E8_=caml_call1(main_execution_context_fun,main_execution_context$0),
       _E9_=
        caml_call1(very_low_priority_workers_fun,very_low_priority_workers$0),
       _E__=caml_call1(low_priority_jobs_fun,low_priority_jobs$0),
       _E$_=caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0),
       _Fa_=caml_call1(job_pool_fun,job_pool$0);
      return [0,
              caml_call1(check_access_fun,check_access$0),
              _Fa_,
              _E$_,
              _E__,
              _E9_,
              _E8_,
              _E7_,
              _E6_,
              _E5_,
              _E4_,
              _E3_,
              _E2_,
              _E1_,
              _E0_,
              _EZ_,
              _EY_,
              _EX_,
              _EW_,
              _EV_,
              _EU_,
              _ET_,
              _ES_,
              _ER_,
              _EQ_,
              _EP_,
              _EO_,
              _EN_,
              _EM_]}
    function iter$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {caml_call1(check_access_fun,check_access$0);
      caml_call1(job_pool_fun,job_pool$0);
      caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0);
      caml_call1(low_priority_jobs_fun,low_priority_jobs$0);
      caml_call1(very_low_priority_workers_fun,very_low_priority_workers$0);
      caml_call1(main_execution_context_fun,main_execution_context$0);
      caml_call1(current_execution_context_fun,current_execution_context$0);
      caml_call1(uncaught_exn_fun,uncaught_exn);
      caml_call1(cycle_count_fun,cycle_count$0);
      caml_call1(cycle_start_fun,cycle_start$0);
      caml_call1(in_cycle_fun,in_cycle$0);
      caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0);
      caml_call1(run_every_cycle_start_state_fu,run_every_cycle_start_state$0);
      caml_call1(run_every_cycle_end_fun,run_every_cycle_end$0);
      caml_call1(run_every_cycle_end_state_fun,run_every_cycle_end_state$0);
      caml_call1(last_cycle_time_fun,last_cycle_time$0);
      caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0);
      caml_call1(total_cycle_time_fun,total_cycle_time$0);
      caml_call1(time_source_fun,time_source$0);
      caml_call1(external_jobs_fun,external_jobs$0);
      caml_call1
       (thread_safe_external_job_hook_,thread_safe_external_job_hook$0);
      caml_call1(job_queued_hook_fun,job_queued_hook$0);
      caml_call1(event_added_hook_fun,event_added_hook$0);
      caml_call1(yield_fun,yield$1);
      caml_call1(yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0);
      caml_call1(check_invariants_fun,check_invariants$0);
      caml_call1
       (max_num_jobs_per_priority_per_,max_num_jobs_per_priority_per_$0);
      return caml_call1(record_backtraces_fun,record_backtraces$0)}
    function fold$9
     (init,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {return caml_call2
              (record_backtraces_fun,
               caml_call2
                (max_num_jobs_per_priority_per_,
                 caml_call2
                  (check_invariants_fun,
                   caml_call2
                    (yield_until_no_jobs_remain_fun,
                     caml_call2
                      (yield_fun,
                       caml_call2
                        (event_added_hook_fun,
                         caml_call2
                          (job_queued_hook_fun,
                           caml_call2
                            (thread_safe_external_job_hook_,
                             caml_call2
                              (external_jobs_fun,
                               caml_call2
                                (time_source_fun,
                                 caml_call2
                                  (total_cycle_time_fun,
                                   caml_call2
                                    (last_cycle_num_jobs_fun,
                                     caml_call2
                                      (last_cycle_time_fun,
                                       caml_call2
                                        (run_every_cycle_end_state_fun,
                                         caml_call2
                                          (run_every_cycle_end_fun,
                                           caml_call2
                                            (run_every_cycle_start_state_fu,
                                             caml_call2
                                              (run_every_cycle_start_fun,
                                               caml_call2
                                                (in_cycle_fun,
                                                 caml_call2
                                                  (cycle_start_fun,
                                                   caml_call2
                                                    (cycle_count_fun,
                                                     caml_call2
                                                      (uncaught_exn_fun,
                                                       caml_call2
                                                        (current_execution_context_fun,
                                                         caml_call2
                                                          (main_execution_context_fun,
                                                           caml_call2
                                                            (very_low_priority_workers_fun,
                                                             caml_call2
                                                              (low_priority_jobs_fun,
                                                               caml_call2
                                                                (normal_priority_jobs_fun,
                                                                 caml_call2
                                                                  (job_pool_fun,
                                                                   caml_call2(check_access_fun,init,check_access$0),
                                                                   job_pool$0),
                                                                 normal_priority_jobs$0),
                                                               low_priority_jobs$0),
                                                             very_low_priority_workers$0),
                                                           main_execution_context$0),
                                                         current_execution_context$0),
                                                       uncaught_exn),
                                                     cycle_count$0),
                                                   cycle_start$0),
                                                 in_cycle$0),
                                               run_every_cycle_start$0),
                                             run_every_cycle_start_state$0),
                                           run_every_cycle_end$0),
                                         run_every_cycle_end_state$0),
                                       last_cycle_time$0),
                                     last_cycle_num_jobs$0),
                                   total_cycle_time$0),
                                 time_source$0),
                               external_jobs$0),
                             thread_safe_external_job_hook$0),
                           job_queued_hook$0),
                         event_added_hook$0),
                       yield$1),
                     yield_until_no_jobs_remain$0),
                   check_invariants$0),
                 max_num_jobs_per_priority_per_$0),
               record_backtraces$0)}
    function map_poly$4(record)
     {var
       _El_=[0,caml_call1(record[1],record_backtraces$0),0],
       _Em_=[0,caml_call1(record[1],max_num_jobs_per_priority_per_$0),_El_],
       _En_=[0,caml_call1(record[1],check_invariants$0),_Em_],
       _Eo_=[0,caml_call1(record[1],yield_until_no_jobs_remain$0),_En_],
       _Ep_=[0,caml_call1(record[1],yield$1),_Eo_],
       _Eq_=[0,caml_call1(record[1],event_added_hook$0),_Ep_],
       _Er_=[0,caml_call1(record[1],job_queued_hook$0),_Eq_],
       _Es_=[0,caml_call1(record[1],thread_safe_external_job_hook$0),_Er_],
       _Et_=[0,caml_call1(record[1],external_jobs$0),_Es_],
       _Eu_=[0,caml_call1(record[1],time_source$0),_Et_],
       _Ev_=[0,caml_call1(record[1],total_cycle_time$0),_Eu_],
       _Ew_=[0,caml_call1(record[1],last_cycle_num_jobs$0),_Ev_],
       _Ex_=[0,caml_call1(record[1],last_cycle_time$0),_Ew_],
       _Ey_=[0,caml_call1(record[1],run_every_cycle_end_state$0),_Ex_],
       _Ez_=[0,caml_call1(record[1],run_every_cycle_end$0),_Ey_],
       _EA_=[0,caml_call1(record[1],run_every_cycle_start_state$0),_Ez_],
       _EB_=[0,caml_call1(record[1],run_every_cycle_start$0),_EA_],
       _EC_=[0,caml_call1(record[1],in_cycle$0),_EB_],
       _ED_=[0,caml_call1(record[1],cycle_start$0),_EC_],
       _EE_=[0,caml_call1(record[1],cycle_count$0),_ED_],
       _EF_=[0,caml_call1(record[1],uncaught_exn),_EE_],
       _EG_=[0,caml_call1(record[1],current_execution_context$0),_EF_],
       _EH_=[0,caml_call1(record[1],main_execution_context$0),_EG_],
       _EI_=[0,caml_call1(record[1],very_low_priority_workers$0),_EH_],
       _EJ_=[0,caml_call1(record[1],low_priority_jobs$0),_EI_],
       _EK_=[0,caml_call1(record[1],normal_priority_jobs$0),_EJ_],
       _EL_=[0,caml_call1(record[1],job_pool$0),_EK_];
      return [0,caml_call1(record[1],check_access$0),_EL_]}
    function for_all$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _DW_=caml_call1(check_access_fun,check_access$0),
       _DX_=_DW_?caml_call1(job_pool_fun,job_pool$0):_DW_,
       _DY_=
        _DX_?caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0):_DX_,
       _DZ_=_DY_?caml_call1(low_priority_jobs_fun,low_priority_jobs$0):_DY_,
       _D0_=
        _DZ_
         ?caml_call1
           (very_low_priority_workers_fun,very_low_priority_workers$0)
         :_DZ_,
       _D1_=
        _D0_
         ?caml_call1(main_execution_context_fun,main_execution_context$0)
         :_D0_,
       _D2_=
        _D1_
         ?caml_call1
           (current_execution_context_fun,current_execution_context$0)
         :_D1_,
       _D3_=_D2_?caml_call1(uncaught_exn_fun,uncaught_exn):_D2_,
       _D4_=_D3_?caml_call1(cycle_count_fun,cycle_count$0):_D3_,
       _D5_=_D4_?caml_call1(cycle_start_fun,cycle_start$0):_D4_,
       _D6_=_D5_?caml_call1(in_cycle_fun,in_cycle$0):_D5_,
       _D7_=
        _D6_
         ?caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0)
         :_D6_,
       _D8_=
        _D7_
         ?caml_call1
           (run_every_cycle_start_state_fu,run_every_cycle_start_state$0)
         :_D7_,
       _D9_=
        _D8_?caml_call1(run_every_cycle_end_fun,run_every_cycle_end$0):_D8_,
       _D__=
        _D9_
         ?caml_call1
           (run_every_cycle_end_state_fun,run_every_cycle_end_state$0)
         :_D9_,
       _D$_=_D__?caml_call1(last_cycle_time_fun,last_cycle_time$0):_D__,
       _Ea_=
        _D$_?caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0):_D$_,
       _Eb_=_Ea_?caml_call1(total_cycle_time_fun,total_cycle_time$0):_Ea_,
       _Ec_=_Eb_?caml_call1(time_source_fun,time_source$0):_Eb_,
       _Ed_=_Ec_?caml_call1(external_jobs_fun,external_jobs$0):_Ec_,
       _Ee_=
        _Ed_
         ?caml_call1
           (thread_safe_external_job_hook_,thread_safe_external_job_hook$0)
         :_Ed_,
       _Ef_=_Ee_?caml_call1(job_queued_hook_fun,job_queued_hook$0):_Ee_,
       _Eg_=_Ef_?caml_call1(event_added_hook_fun,event_added_hook$0):_Ef_,
       _Eh_=_Eg_?caml_call1(yield_fun,yield$1):_Eg_,
       _Ei_=
        _Eh_
         ?caml_call1
           (yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0)
         :_Eh_,
       _Ej_=_Ei_?caml_call1(check_invariants_fun,check_invariants$0):_Ei_,
       _Ek_=
        _Ej_
         ?caml_call1
           (max_num_jobs_per_priority_per_,max_num_jobs_per_priority_per_$0)
         :_Ej_;
      return _Ek_?caml_call1(record_backtraces_fun,record_backtraces$0):_Ek_}
    function exists$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _DV_=caml_call1(check_access_fun,check_access$0),
       _Dv_=_DV_ || caml_call1(job_pool_fun,job_pool$0),
       _Dw_=
        _Dv_
        ||
        caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0),
       _Dx_=_Dw_ || caml_call1(low_priority_jobs_fun,low_priority_jobs$0),
       _Dy_=
        _Dx_
        ||
        caml_call1(very_low_priority_workers_fun,very_low_priority_workers$0),
       _Dz_=
        _Dy_
        ||
        caml_call1(main_execution_context_fun,main_execution_context$0),
       _DA_=
        _Dz_
        ||
        caml_call1(current_execution_context_fun,current_execution_context$0),
       _DB_=_DA_ || caml_call1(uncaught_exn_fun,uncaught_exn),
       _DC_=_DB_ || caml_call1(cycle_count_fun,cycle_count$0),
       _DD_=_DC_ || caml_call1(cycle_start_fun,cycle_start$0),
       _DE_=_DD_ || caml_call1(in_cycle_fun,in_cycle$0),
       _DF_=
        _DE_
        ||
        caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0),
       _DG_=
        _DF_
        ||
        caml_call1
         (run_every_cycle_start_state_fu,run_every_cycle_start_state$0),
       _DH_=_DG_ || caml_call1(run_every_cycle_end_fun,run_every_cycle_end$0),
       _DI_=
        _DH_
        ||
        caml_call1(run_every_cycle_end_state_fun,run_every_cycle_end_state$0),
       _DJ_=_DI_ || caml_call1(last_cycle_time_fun,last_cycle_time$0),
       _DK_=_DJ_ || caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0),
       _DL_=_DK_ || caml_call1(total_cycle_time_fun,total_cycle_time$0),
       _DM_=_DL_ || caml_call1(time_source_fun,time_source$0),
       _DN_=_DM_ || caml_call1(external_jobs_fun,external_jobs$0),
       _DO_=
        _DN_
        ||
        caml_call1
         (thread_safe_external_job_hook_,thread_safe_external_job_hook$0),
       _DP_=_DO_ || caml_call1(job_queued_hook_fun,job_queued_hook$0),
       _DQ_=_DP_ || caml_call1(event_added_hook_fun,event_added_hook$0),
       _DR_=_DQ_ || caml_call1(yield_fun,yield$1),
       _DS_=
        _DR_
        ||
        caml_call1
         (yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0),
       _DT_=_DS_ || caml_call1(check_invariants_fun,check_invariants$0),
       _DU_=
        _DT_
        ||
        caml_call1
         (max_num_jobs_per_priority_per_,max_num_jobs_per_priority_per_$0);
      return _DU_?_DU_:caml_call1(record_backtraces_fun,record_backtraces$0)}
    function to_list$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _C6_=[0,caml_call1(record_backtraces_fun,record_backtraces$0),0],
       _C7_=
        [0,
         caml_call1
          (max_num_jobs_per_priority_per_,max_num_jobs_per_priority_per_$0),
         _C6_],
       _C8_=[0,caml_call1(check_invariants_fun,check_invariants$0),_C7_],
       _C9_=
        [0,
         caml_call1
          (yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0),
         _C8_],
       _C__=[0,caml_call1(yield_fun,yield$1),_C9_],
       _C$_=[0,caml_call1(event_added_hook_fun,event_added_hook$0),_C__],
       _Da_=[0,caml_call1(job_queued_hook_fun,job_queued_hook$0),_C$_],
       _Db_=
        [0,
         caml_call1
          (thread_safe_external_job_hook_,thread_safe_external_job_hook$0),
         _Da_],
       _Dc_=[0,caml_call1(external_jobs_fun,external_jobs$0),_Db_],
       _Dd_=[0,caml_call1(time_source_fun,time_source$0),_Dc_],
       _De_=[0,caml_call1(total_cycle_time_fun,total_cycle_time$0),_Dd_],
       _Df_=[0,caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0),_De_],
       _Dg_=[0,caml_call1(last_cycle_time_fun,last_cycle_time$0),_Df_],
       _Dh_=
        [0,
         caml_call1(run_every_cycle_end_state_fun,run_every_cycle_end_state$0),
         _Dg_],
       _Di_=[0,caml_call1(run_every_cycle_end_fun,run_every_cycle_end$0),_Dh_],
       _Dj_=
        [0,
         caml_call1
          (run_every_cycle_start_state_fu,run_every_cycle_start_state$0),
         _Di_],
       _Dk_=
        [0,caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0),_Dj_],
       _Dl_=[0,caml_call1(in_cycle_fun,in_cycle$0),_Dk_],
       _Dm_=[0,caml_call1(cycle_start_fun,cycle_start$0),_Dl_],
       _Dn_=[0,caml_call1(cycle_count_fun,cycle_count$0),_Dm_],
       _Do_=[0,caml_call1(uncaught_exn_fun,uncaught_exn),_Dn_],
       _Dp_=
        [0,
         caml_call1(current_execution_context_fun,current_execution_context$0),
         _Do_],
       _Dq_=
        [0,
         caml_call1(main_execution_context_fun,main_execution_context$0),
         _Dp_],
       _Dr_=
        [0,
         caml_call1(very_low_priority_workers_fun,very_low_priority_workers$0),
         _Dq_],
       _Ds_=[0,caml_call1(low_priority_jobs_fun,low_priority_jobs$0),_Dr_],
       _Dt_=
        [0,caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0),_Ds_],
       _Du_=[0,caml_call1(job_pool_fun,job_pool$0),_Dt_];
      return [0,caml_call1(check_access_fun,check_access$0),_Du_]}
    function iter$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {caml_call3(check_access_fun,check_access$0,record,record[1]);
      caml_call3(job_pool_fun,job_pool$0,record,record[2]);
      caml_call3
       (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3]);
      caml_call3(low_priority_jobs_fun,low_priority_jobs$0,record,record[4]);
      caml_call3
       (very_low_priority_workers_fun,
        very_low_priority_workers$0,
        record,
        record[5]);
      caml_call3
       (main_execution_context_fun,main_execution_context$0,record,record[6]);
      caml_call3
       (current_execution_context_fun,
        current_execution_context$0,
        record,
        record[7]);
      caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]);
      caml_call3(cycle_count_fun,cycle_count$0,record,record[9]);
      caml_call3(cycle_start_fun,cycle_start$0,record,record[10]);
      caml_call3(in_cycle_fun,in_cycle$0,record,record[11]);
      caml_call3
       (run_every_cycle_start_fun,run_every_cycle_start$0,record,record[12]);
      caml_call3
       (run_every_cycle_start_state_fu,
        run_every_cycle_start_state$0,
        record,
        record[13]);
      caml_call3
       (run_every_cycle_end_fun,run_every_cycle_end$0,record,record[14]);
      caml_call3
       (run_every_cycle_end_state_fun,
        run_every_cycle_end_state$0,
        record,
        record[15]);
      caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[16]);
      caml_call3
       (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[17]);
      caml_call3(total_cycle_time_fun,total_cycle_time$0,record,record[18]);
      caml_call3(time_source_fun,time_source$0,record,record[19]);
      caml_call3(external_jobs_fun,external_jobs$0,record,record[20]);
      caml_call3
       (thread_safe_external_job_hook_,
        thread_safe_external_job_hook$0,
        record,
        record[21]);
      caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[22]);
      caml_call3(event_added_hook_fun,event_added_hook$0,record,record[23]);
      caml_call3(yield_fun,yield$1,record,record[24]);
      caml_call3
       (yield_until_no_jobs_remain_fun,
        yield_until_no_jobs_remain$0,
        record,
        record[25]);
      caml_call3(check_invariants_fun,check_invariants$0,record,record[26]);
      caml_call3
       (max_num_jobs_per_priority_per_,
        max_num_jobs_per_priority_per_$0,
        record,
        record[27]);
      return caml_call3
              (record_backtraces_fun,record_backtraces$0,record,record[28])}
    function fold$10
     (record,
      init,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _CF_=record[28],
       _CG_=record[27],
       _CH_=record[26],
       _CI_=record[25],
       _CJ_=record[24],
       _CK_=record[23],
       _CL_=record[22],
       _CM_=record[21],
       _CN_=record[20],
       _CO_=record[19],
       _CP_=record[18],
       _CQ_=record[17],
       _CR_=record[16],
       _CS_=record[15],
       _CT_=record[14],
       _CU_=record[13],
       _CV_=record[12],
       _CW_=record[11],
       _CX_=record[10],
       _CY_=record[9],
       _CZ_=record[8],
       _C0_=record[7],
       _C1_=record[6],
       _C2_=record[5],
       _C3_=record[4],
       _C4_=record[3],
       _C5_=record[2];
      return caml_call4
              (record_backtraces_fun,
               caml_call4
                (max_num_jobs_per_priority_per_,
                 caml_call4
                  (check_invariants_fun,
                   caml_call4
                    (yield_until_no_jobs_remain_fun,
                     caml_call4
                      (yield_fun,
                       caml_call4
                        (event_added_hook_fun,
                         caml_call4
                          (job_queued_hook_fun,
                           caml_call4
                            (thread_safe_external_job_hook_,
                             caml_call4
                              (external_jobs_fun,
                               caml_call4
                                (time_source_fun,
                                 caml_call4
                                  (total_cycle_time_fun,
                                   caml_call4
                                    (last_cycle_num_jobs_fun,
                                     caml_call4
                                      (last_cycle_time_fun,
                                       caml_call4
                                        (run_every_cycle_end_state_fun,
                                         caml_call4
                                          (run_every_cycle_end_fun,
                                           caml_call4
                                            (run_every_cycle_start_state_fu,
                                             caml_call4
                                              (run_every_cycle_start_fun,
                                               caml_call4
                                                (in_cycle_fun,
                                                 caml_call4
                                                  (cycle_start_fun,
                                                   caml_call4
                                                    (cycle_count_fun,
                                                     caml_call4
                                                      (uncaught_exn_fun,
                                                       caml_call4
                                                        (current_execution_context_fun,
                                                         caml_call4
                                                          (main_execution_context_fun,
                                                           caml_call4
                                                            (very_low_priority_workers_fun,
                                                             caml_call4
                                                              (low_priority_jobs_fun,
                                                               caml_call4
                                                                (normal_priority_jobs_fun,
                                                                 caml_call4
                                                                  (job_pool_fun,
                                                                   caml_call4
                                                                    (check_access_fun,init,check_access$0,record,record[1]),
                                                                   job_pool$0,
                                                                   record,
                                                                   _C5_),
                                                                 normal_priority_jobs$0,
                                                                 record,
                                                                 _C4_),
                                                               low_priority_jobs$0,
                                                               record,
                                                               _C3_),
                                                             very_low_priority_workers$0,
                                                             record,
                                                             _C2_),
                                                           main_execution_context$0,
                                                           record,
                                                           _C1_),
                                                         current_execution_context$0,
                                                         record,
                                                         _C0_),
                                                       uncaught_exn,
                                                       record,
                                                       _CZ_),
                                                     cycle_count$0,
                                                     record,
                                                     _CY_),
                                                   cycle_start$0,
                                                   record,
                                                   _CX_),
                                                 in_cycle$0,
                                                 record,
                                                 _CW_),
                                               run_every_cycle_start$0,
                                               record,
                                               _CV_),
                                             run_every_cycle_start_state$0,
                                             record,
                                             _CU_),
                                           run_every_cycle_end$0,
                                           record,
                                           _CT_),
                                         run_every_cycle_end_state$0,
                                         record,
                                         _CS_),
                                       last_cycle_time$0,
                                       record,
                                       _CR_),
                                     last_cycle_num_jobs$0,
                                     record,
                                     _CQ_),
                                   total_cycle_time$0,
                                   record,
                                   _CP_),
                                 time_source$0,
                                 record,
                                 _CO_),
                               external_jobs$0,
                               record,
                               _CN_),
                             thread_safe_external_job_hook$0,
                             record,
                             _CM_),
                           job_queued_hook$0,
                           record,
                           _CL_),
                         event_added_hook$0,
                         record,
                         _CK_),
                       yield$1,
                       record,
                       _CJ_),
                     yield_until_no_jobs_remain$0,
                     record,
                     _CI_),
                   check_invariants$0,
                   record,
                   _CH_),
                 max_num_jobs_per_priority_per_$0,
                 record,
                 _CG_),
               record_backtraces$0,
               record,
               _CF_)}
    function for_all$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _Ce_=caml_call3(check_access_fun,check_access$0,record,record[1]),
       _Cf_=_Ce_?caml_call3(job_pool_fun,job_pool$0,record,record[2]):_Ce_,
       _Cg_=
        _Cf_
         ?caml_call3
           (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3])
         :_Cf_,
       _Ch_=
        _Cg_
         ?caml_call3
           (low_priority_jobs_fun,low_priority_jobs$0,record,record[4])
         :_Cg_,
       _Ci_=
        _Ch_
         ?caml_call3
           (very_low_priority_workers_fun,
            very_low_priority_workers$0,
            record,
            record[5])
         :_Ch_,
       _Cj_=
        _Ci_
         ?caml_call3
           (main_execution_context_fun,
            main_execution_context$0,
            record,
            record[6])
         :_Ci_,
       _Ck_=
        _Cj_
         ?caml_call3
           (current_execution_context_fun,
            current_execution_context$0,
            record,
            record[7])
         :_Cj_,
       _Cl_=
        _Ck_?caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]):_Ck_,
       _Cm_=
        _Cl_?caml_call3(cycle_count_fun,cycle_count$0,record,record[9]):_Cl_,
       _Cn_=
        _Cm_?caml_call3(cycle_start_fun,cycle_start$0,record,record[10]):_Cm_,
       _Co_=_Cn_?caml_call3(in_cycle_fun,in_cycle$0,record,record[11]):_Cn_,
       _Cp_=
        _Co_
         ?caml_call3
           (run_every_cycle_start_fun,
            run_every_cycle_start$0,
            record,
            record[12])
         :_Co_,
       _Cq_=
        _Cp_
         ?caml_call3
           (run_every_cycle_start_state_fu,
            run_every_cycle_start_state$0,
            record,
            record[13])
         :_Cp_,
       _Cr_=
        _Cq_
         ?caml_call3
           (run_every_cycle_end_fun,run_every_cycle_end$0,record,record[14])
         :_Cq_,
       _Cs_=
        _Cr_
         ?caml_call3
           (run_every_cycle_end_state_fun,
            run_every_cycle_end_state$0,
            record,
            record[15])
         :_Cr_,
       _Ct_=
        _Cs_
         ?caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[16])
         :_Cs_,
       _Cu_=
        _Ct_
         ?caml_call3
           (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[17])
         :_Ct_,
       _Cv_=
        _Cu_
         ?caml_call3
           (total_cycle_time_fun,total_cycle_time$0,record,record[18])
         :_Cu_,
       _Cw_=
        _Cv_?caml_call3(time_source_fun,time_source$0,record,record[19]):_Cv_,
       _Cx_=
        _Cw_
         ?caml_call3(external_jobs_fun,external_jobs$0,record,record[20])
         :_Cw_,
       _Cy_=
        _Cx_
         ?caml_call3
           (thread_safe_external_job_hook_,
            thread_safe_external_job_hook$0,
            record,
            record[21])
         :_Cx_,
       _Cz_=
        _Cy_
         ?caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[22])
         :_Cy_,
       _CA_=
        _Cz_
         ?caml_call3
           (event_added_hook_fun,event_added_hook$0,record,record[23])
         :_Cz_,
       _CB_=_CA_?caml_call3(yield_fun,yield$1,record,record[24]):_CA_,
       _CC_=
        _CB_
         ?caml_call3
           (yield_until_no_jobs_remain_fun,
            yield_until_no_jobs_remain$0,
            record,
            record[25])
         :_CB_,
       _CD_=
        _CC_
         ?caml_call3
           (check_invariants_fun,check_invariants$0,record,record[26])
         :_CC_,
       _CE_=
        _CD_
         ?caml_call3
           (max_num_jobs_per_priority_per_,
            max_num_jobs_per_priority_per_$0,
            record,
            record[27])
         :_CD_;
      return _CE_
              ?caml_call3
                (record_backtraces_fun,record_backtraces$0,record,record[28])
              :_CE_}
    function exists$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _Cd_=caml_call3(check_access_fun,check_access$0,record,record[1]),
       _BP_=_Cd_ || caml_call3(job_pool_fun,job_pool$0,record,record[2]),
       _BQ_=
        _BP_
        ||
        caml_call3
         (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3]),
       _BR_=
        _BQ_
        ||
        caml_call3(low_priority_jobs_fun,low_priority_jobs$0,record,record[4]),
       _BS_=
        _BR_
        ||
        caml_call3
         (very_low_priority_workers_fun,
          very_low_priority_workers$0,
          record,
          record[5]),
       _BT_=
        _BS_
        ||
        caml_call3
         (main_execution_context_fun,
          main_execution_context$0,
          record,
          record[6]),
       _BU_=
        _BT_
        ||
        caml_call3
         (current_execution_context_fun,
          current_execution_context$0,
          record,
          record[7]),
       _BV_=_BU_ || caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]),
       _BW_=_BV_ || caml_call3(cycle_count_fun,cycle_count$0,record,record[9]),
       _BX_=
        _BW_
        ||
        caml_call3(cycle_start_fun,cycle_start$0,record,record[10]),
       _BY_=_BX_ || caml_call3(in_cycle_fun,in_cycle$0,record,record[11]),
       _BZ_=
        _BY_
        ||
        caml_call3
         (run_every_cycle_start_fun,run_every_cycle_start$0,record,record[12]),
       _B0_=
        _BZ_
        ||
        caml_call3
         (run_every_cycle_start_state_fu,
          run_every_cycle_start_state$0,
          record,
          record[13]),
       _B1_=
        _B0_
        ||
        caml_call3
         (run_every_cycle_end_fun,run_every_cycle_end$0,record,record[14]),
       _B2_=
        _B1_
        ||
        caml_call3
         (run_every_cycle_end_state_fun,
          run_every_cycle_end_state$0,
          record,
          record[15]),
       _B3_=
        _B2_
        ||
        caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[16]),
       _B4_=
        _B3_
        ||
        caml_call3
         (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[17]),
       _B5_=
        _B4_
        ||
        caml_call3(total_cycle_time_fun,total_cycle_time$0,record,record[18]),
       _B6_=
        _B5_
        ||
        caml_call3(time_source_fun,time_source$0,record,record[19]),
       _B7_=
        _B6_
        ||
        caml_call3(external_jobs_fun,external_jobs$0,record,record[20]),
       _B8_=
        _B7_
        ||
        caml_call3
         (thread_safe_external_job_hook_,
          thread_safe_external_job_hook$0,
          record,
          record[21]),
       _B9_=
        _B8_
        ||
        caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[22]),
       _B__=
        _B9_
        ||
        caml_call3(event_added_hook_fun,event_added_hook$0,record,record[23]),
       _B$_=_B__ || caml_call3(yield_fun,yield$1,record,record[24]),
       _Ca_=
        _B$_
        ||
        caml_call3
         (yield_until_no_jobs_remain_fun,
          yield_until_no_jobs_remain$0,
          record,
          record[25]),
       _Cb_=
        _Ca_
        ||
        caml_call3(check_invariants_fun,check_invariants$0,record,record[26]),
       _Cc_=
        _Cb_
        ||
        caml_call3
         (max_num_jobs_per_priority_per_,
          max_num_jobs_per_priority_per_$0,
          record,
          record[27]);
      return _Cc_
              ?_Cc_
              :caml_call3
                (record_backtraces_fun,record_backtraces$0,record,record[28])}
    function to_list$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _Bo_=
        [0,
         caml_call3
          (record_backtraces_fun,record_backtraces$0,record,record[28]),
         0],
       _Bp_=
        [0,
         caml_call3
          (max_num_jobs_per_priority_per_,
           max_num_jobs_per_priority_per_$0,
           record,
           record[27]),
         _Bo_],
       _Bq_=
        [0,
         caml_call3(check_invariants_fun,check_invariants$0,record,record[26]),
         _Bp_],
       _Br_=
        [0,
         caml_call3
          (yield_until_no_jobs_remain_fun,
           yield_until_no_jobs_remain$0,
           record,
           record[25]),
         _Bq_],
       _Bs_=[0,caml_call3(yield_fun,yield$1,record,record[24]),_Br_],
       _Bt_=
        [0,
         caml_call3(event_added_hook_fun,event_added_hook$0,record,record[23]),
         _Bs_],
       _Bu_=
        [0,
         caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[22]),
         _Bt_],
       _Bv_=
        [0,
         caml_call3
          (thread_safe_external_job_hook_,
           thread_safe_external_job_hook$0,
           record,
           record[21]),
         _Bu_],
       _Bw_=
        [0,
         caml_call3(external_jobs_fun,external_jobs$0,record,record[20]),
         _Bv_],
       _Bx_=
        [0,caml_call3(time_source_fun,time_source$0,record,record[19]),_Bw_],
       _By_=
        [0,
         caml_call3(total_cycle_time_fun,total_cycle_time$0,record,record[18]),
         _Bx_],
       _Bz_=
        [0,
         caml_call3
          (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[17]),
         _By_],
       _BA_=
        [0,
         caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[16]),
         _Bz_],
       _BB_=
        [0,
         caml_call3
          (run_every_cycle_end_state_fun,
           run_every_cycle_end_state$0,
           record,
           record[15]),
         _BA_],
       _BC_=
        [0,
         caml_call3
          (run_every_cycle_end_fun,run_every_cycle_end$0,record,record[14]),
         _BB_],
       _BD_=
        [0,
         caml_call3
          (run_every_cycle_start_state_fu,
           run_every_cycle_start_state$0,
           record,
           record[13]),
         _BC_],
       _BE_=
        [0,
         caml_call3
          (run_every_cycle_start_fun,
           run_every_cycle_start$0,
           record,
           record[12]),
         _BD_],
       _BF_=[0,caml_call3(in_cycle_fun,in_cycle$0,record,record[11]),_BE_],
       _BG_=
        [0,caml_call3(cycle_start_fun,cycle_start$0,record,record[10]),_BF_],
       _BH_=
        [0,caml_call3(cycle_count_fun,cycle_count$0,record,record[9]),_BG_],
       _BI_=
        [0,caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]),_BH_],
       _BJ_=
        [0,
         caml_call3
          (current_execution_context_fun,
           current_execution_context$0,
           record,
           record[7]),
         _BI_],
       _BK_=
        [0,
         caml_call3
          (main_execution_context_fun,
           main_execution_context$0,
           record,
           record[6]),
         _BJ_],
       _BL_=
        [0,
         caml_call3
          (very_low_priority_workers_fun,
           very_low_priority_workers$0,
           record,
           record[5]),
         _BK_],
       _BM_=
        [0,
         caml_call3
          (low_priority_jobs_fun,low_priority_jobs$0,record,record[4]),
         _BL_],
       _BN_=
        [0,
         caml_call3
          (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3]),
         _BM_],
       _BO_=[0,caml_call3(job_pool_fun,job_pool$0,record,record[2]),_BN_];
      return [0,
              caml_call3(check_access_fun,check_access$0,record,record[1]),
              _BO_]}
    function map$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      in_cycle_fun,
      run_every_cycle_start_fun,
      run_every_cycle_start_state_fu,
      run_every_cycle_end_fun,
      run_every_cycle_end_state_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      total_cycle_time_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_,
      record_backtraces_fun)
     {var
       _AZ_=
        caml_call3
         (record_backtraces_fun,record_backtraces$0,record,record[28]),
       _A0_=
        caml_call3
         (max_num_jobs_per_priority_per_,
          max_num_jobs_per_priority_per_$0,
          record,
          record[27]),
       _A1_=
        caml_call3(check_invariants_fun,check_invariants$0,record,record[26]),
       _A2_=
        caml_call3
         (yield_until_no_jobs_remain_fun,
          yield_until_no_jobs_remain$0,
          record,
          record[25]),
       _A3_=caml_call3(yield_fun,yield$1,record,record[24]),
       _A4_=
        caml_call3(event_added_hook_fun,event_added_hook$0,record,record[23]),
       _A5_=
        caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[22]),
       _A6_=
        caml_call3
         (thread_safe_external_job_hook_,
          thread_safe_external_job_hook$0,
          record,
          record[21]),
       _A7_=caml_call3(external_jobs_fun,external_jobs$0,record,record[20]),
       _A8_=caml_call3(time_source_fun,time_source$0,record,record[19]),
       _A9_=
        caml_call3(total_cycle_time_fun,total_cycle_time$0,record,record[18]),
       _A__=
        caml_call3
         (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[17]),
       _A$_=
        caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[16]),
       _Ba_=
        caml_call3
         (run_every_cycle_end_state_fun,
          run_every_cycle_end_state$0,
          record,
          record[15]),
       _Bb_=
        caml_call3
         (run_every_cycle_end_fun,run_every_cycle_end$0,record,record[14]),
       _Bc_=
        caml_call3
         (run_every_cycle_start_state_fu,
          run_every_cycle_start_state$0,
          record,
          record[13]),
       _Bd_=
        caml_call3
         (run_every_cycle_start_fun,run_every_cycle_start$0,record,record[12]),
       _Be_=caml_call3(in_cycle_fun,in_cycle$0,record,record[11]),
       _Bf_=caml_call3(cycle_start_fun,cycle_start$0,record,record[10]),
       _Bg_=caml_call3(cycle_count_fun,cycle_count$0,record,record[9]),
       _Bh_=caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]),
       _Bi_=
        caml_call3
         (current_execution_context_fun,
          current_execution_context$0,
          record,
          record[7]),
       _Bj_=
        caml_call3
         (main_execution_context_fun,
          main_execution_context$0,
          record,
          record[6]),
       _Bk_=
        caml_call3
         (very_low_priority_workers_fun,
          very_low_priority_workers$0,
          record,
          record[5]),
       _Bl_=
        caml_call3(low_priority_jobs_fun,low_priority_jobs$0,record,record[4]),
       _Bm_=
        caml_call3
         (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3]),
       _Bn_=caml_call3(job_pool_fun,job_pool$0,record,record[2]);
      return [0,
              caml_call3(check_access_fun,check_access$0,record,record[1]),
              _Bn_,
              _Bm_,
              _Bl_,
              _Bk_,
              _Bj_,
              _Bi_,
              _Bh_,
              _Bg_,
              _Bf_,
              _Be_,
              _Bd_,
              _Bc_,
              _Bb_,
              _Ba_,
              _A$_,
              _A__,
              _A9_,
              _A8_,
              _A7_,
              _A6_,
              _A5_,
              _A4_,
              _A3_,
              _A2_,
              _A1_,
              _A0_,
              _AZ_]}
    function set_all_mutable_fields$4
     (record,
      check_access,
      job_pool,
      main_execution_context,
      current_execution_context,
      uncaught_exn,
      cycle_count,
      cycle_start,
      in_cycle,
      run_every_cycle_start,
      run_every_cycle_end,
      last_cycle_time,
      last_cycle_num_jobs,
      total_cycle_time,
      time_source,
      thread_safe_external_job_hook,
      job_queued_hook,
      event_added_hook,
      yield$0,
      yield_until_no_jobs_remain,
      check_invariants,
      max_num_jobs_per_priority_per_,
      record_backtraces)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[1] = check_access;
      record$0[2] = job_pool;
      record$0[6] = main_execution_context;
      record$0[7] = current_execution_context;
      record$0[8] = uncaught_exn;
      record$0[9] = cycle_count;
      record$0[10] = cycle_start;
      record$0[11] = in_cycle;
      record$0[12] = run_every_cycle_start;
      record$0[14] = run_every_cycle_end;
      record$0[16] = last_cycle_time;
      record$0[17] = last_cycle_num_jobs;
      record$0[18] = total_cycle_time;
      record$0[19] = time_source;
      record$0[21] = thread_safe_external_job_hook;
      record$0[22] = job_queued_hook;
      record$0[23] = event_added_hook;
      record$0[24] = yield$0;
      record$0[25] = yield_until_no_jobs_remain;
      record$0[26] = check_invariants;
      record$0[27] = max_num_jobs_per_priority_per_;
      record$0[28] = record_backtraces;
      return 0}
    var
     Direct$4=
      [0,
       iter$10,
       fold$10,
       for_all$10,
       exists$10,
       to_list$10,
       map$10,
       set_all_mutable_fields$4],
     Fields$4=
      [0,
       names$4,
       record_backtraces$0,
       max_num_jobs_per_priority_per_$0,
       check_invariants$0,
       yield_until_no_jobs_remain$0,
       yield$1,
       event_added_hook$0,
       job_queued_hook$0,
       thread_safe_external_job_hook$0,
       external_jobs$0,
       time_source$0,
       total_cycle_time$0,
       last_cycle_num_jobs$0,
       last_cycle_time$0,
       run_every_cycle_end_state$0,
       run_every_cycle_end$0,
       run_every_cycle_start_state$0,
       run_every_cycle_start$0,
       in_cycle$0,
       cycle_start$0,
       cycle_count$0,
       uncaught_exn,
       current_execution_context$0,
       main_execution_context$0,
       very_low_priority_workers$0,
       low_priority_jobs$0,
       normal_priority_jobs$0,
       job_pool$0,
       check_access$0,
       make_creator$4,
       create$9,
       map$9,
       iter$9,
       fold$9,
       map_poly$4,
       for_all$9,
       exists$9,
       to_list$9,
       Direct$4];
    function sexp_of_t$18(param)
     {var
       check_access_007=param[1],
       job_pool_009=param[2],
       very_low_priority_workers_015=param[5],
       low_priority_jobs_013=param[4],
       normal_priority_jobs_011=param[3],
       main_execution_context_017=param[6],
       current_execution_context_019=param[7],
       uncaught_exn_021=param[8],
       cycle_count_027=param[9],
       cycle_start_029=param[10],
       in_cycle_031=param[11],
       run_every_cycle_start_033=param[12],
       run_every_cycle_start_state_03=param[13],
       run_every_cycle_end_037=param[14],
       run_every_cycle_end_state_039=param[15],
       last_cycle_time_041=param[16],
       last_cycle_num_jobs_043=param[17],
       total_cycle_time_045=param[18],
       time_source_047=param[19],
       external_jobs_049=param[20],
       job_queued_hook_053=param[22],
       event_added_hook_055=param[23],
       yield_057=param[24],
       yield_until_no_jobs_remain_059=param[25],
       check_invariants_061=param[26],
       max_num_jobs_per_priority_per_=param[27],
       record_backtraces_065=param[28],
       arg_066=caml_call1(Core[305],record_backtraces_065),
       bnds_006=[0,[1,[0,_fl_,[0,arg_066,0]]],0],
       arg_064=
        caml_call1(Async_kernel_config[5][2],max_num_jobs_per_priority_per_),
       bnds_006$0=[0,[1,[0,_fm_,[0,arg_064,0]]],bnds_006],
       arg_062=caml_call1(Core[305],check_invariants_061),
       bnds_006$1=[0,[1,[0,_fn_,[0,arg_062,0]]],bnds_006$0],
       arg_060=
        caml_call1(Sexplib0_Sexp_conv[23],yield_until_no_jobs_remain_059),
       bnds_006$2=[0,[1,[0,_fo_,[0,arg_060,0]]],bnds_006$1],
       arg_058=caml_call1(Sexplib0_Sexp_conv[23],yield_057),
       bnds_006$3=[0,[1,[0,_fp_,[0,arg_058,0]]],bnds_006$2];
      function _AN_(param)
       {function _AX_(_AY_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_AX_)}
      var
       arg_056=caml_call2(Core[454],_AN_,event_added_hook_055),
       bnds_006$4=[0,[1,[0,_fq_,[0,arg_056,0]]],bnds_006$3];
      function _AO_(param)
       {function _AV_(_AW_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_AV_)}
      var
       arg_054=caml_call2(Core[454],_AO_,job_queued_hook_053),
       bnds_006$5=[0,[1,[0,_fr_,[0,arg_054,0]]],bnds_006$4];
      function _AP_(_AU_){return 0}
      var
       arg_052=caml_call1(Sexplib0_Sexp_conv[24],_AP_),
       bnds_006$6=[0,[1,[0,_fs_,[0,arg_052,0]]],bnds_006$5],
       arg_050=caml_call2(Thread_safe_queue[1],sexp_of_t$2,external_jobs_049),
       bnds_006$7=[0,[1,[0,_ft_,[0,arg_050,0]]],bnds_006$6],
       arg_048=caml_call2(T1[17],Core[202],time_source_047),
       bnds_006$8=[0,[1,[0,_fu_,[0,arg_048,0]]],bnds_006$7],
       arg_046=caml_call1(Core_Time_ns[1][10],total_cycle_time_045),
       bnds_006$9=[0,[1,[0,_fv_,[0,arg_046,0]]],bnds_006$8],
       arg_044=caml_call1(Core[356],last_cycle_num_jobs_043),
       bnds_006$10=[0,[1,[0,_fw_,[0,arg_044,0]]],bnds_006$9],
       arg_042=caml_call1(Core_Time_ns[1][10],last_cycle_time_041),
       bnds_006$11=[0,[1,[0,_fx_,[0,arg_042,0]]],bnds_006$10],
       arg_040=
        caml_call3
         (Core_Hashtbl[3],
          Cycle_hook_handle[10],
          Sexplib0_Sexp_conv[23],
          run_every_cycle_end_state_039),
       bnds_006$12=[0,[1,[0,_fy_,[0,arg_040,0]]],bnds_006$11],
       arg_038=
        caml_call2(Core[421],Sexplib0_Sexp_conv[23],run_every_cycle_end_037),
       bnds_006$13=[0,[1,[0,_fz_,[0,arg_038,0]]],bnds_006$12],
       arg_036=
        caml_call3
         (Core_Hashtbl[3],
          Cycle_hook_handle[10],
          Sexplib0_Sexp_conv[23],
          run_every_cycle_start_state_03),
       bnds_006$14=[0,[1,[0,_fA_,[0,arg_036,0]]],bnds_006$13],
       arg_034=
        caml_call2(Core[421],Sexplib0_Sexp_conv[23],run_every_cycle_start_033),
       bnds_006$15=[0,[1,[0,_fB_,[0,arg_034,0]]],bnds_006$14],
       arg_032=caml_call1(Core[305],in_cycle_031),
       bnds_006$16=[0,[1,[0,_fC_,[0,arg_032,0]]],bnds_006$15],
       arg_030=caml_call1(_aL_,cycle_start_029),
       bnds_006$17=[0,[1,[0,_fD_,[0,arg_030,0]]],bnds_006$16],
       arg_028=caml_call1(Core[356],cycle_count_027),
       bnds_006$18=[0,[1,[0,_fE_,[0,arg_028,0]]],bnds_006$17];
      function _AQ_(param)
       {var
         arg1_024=param[2],
         arg0_023=param[1],
         res0_025=caml_call1(Base_Exn[1],arg0_023),
         res1_026=caml_call1(Core_Sexp[90],arg1_024);
        return [1,[0,res0_025,[0,res1_026,0]]]}
      var
       arg_022=caml_call2(Core[454],_AQ_,uncaught_exn_021),
       bnds_006$19=[0,[1,[0,_fF_,[0,arg_022,0]]],bnds_006$18],
       arg_020=sexp_of_t$1(current_execution_context_019),
       bnds_006$20=[0,[1,[0,_fG_,[0,arg_020,0]]],bnds_006$19],
       arg_018=sexp_of_t$1(main_execution_context_017),
       bnds_006$21=[0,[1,[0,_fH_,[0,arg_018,0]]],bnds_006$20],
       arg_016=
        caml_call2
         (Core_Deque[10],
          Very_low_priority_worker$0[5],
          very_low_priority_workers_015),
       bnds_006$22=[0,[1,[0,_fI_,[0,arg_016,0]]],bnds_006$21],
       arg_014=sexp_of_t$5(low_priority_jobs_013),
       bnds_006$23=[0,[1,[0,_fJ_,[0,arg_014,0]]],bnds_006$22],
       arg_012=sexp_of_t$5(normal_priority_jobs_011),
       bnds_006$24=[0,[1,[0,_fK_,[0,arg_012,0]]],bnds_006$23],
       arg_010=sexp_of_t$3(job_pool_009),
       bnds_006$25=[0,[1,[0,_fL_,[0,arg_010,0]]],bnds_006$24];
      function _AR_(param)
       {function _AS_(_AT_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_AS_)}
      var
       arg_008=caml_call2(Core[454],_AR_,check_access_007),
       bnds_006$26=[0,[1,[0,_fM_,[0,arg_008,0]]],bnds_006$25];
      return [1,bnds_006$26]}
    function uncaught_exn$0(t)
     {var _AL_=t[8];
      if(! _AL_)return 0;
      var match=_AL_[1],sexp=match[2],exn=match[1];
      function _AM_(param)
       {var
         arg1_068=param[2],
         arg0_067=param[1],
         res0_069=caml_call1(Base_Exn[1],arg0_067),
         res1_070=caml_call1(Core_Sexp[90],arg1_068);
        return [1,[0,res0_069,[0,res1_070,0]]]}
      return [0,
              caml_call5
               (Core_Error[17],0,0,cst_unhandled_exception,[0,exn,sexp],_AM_)]}
    function num_pending_jobs(t){return t[3][6] + t[4][6] | 0}
    function num_jobs_run$1(t){return t[3][1] + t[4][1] | 0}
    function last_cycle_num_jobs$1(t){return t[17]}
    function unordered_is_sublist(equal,small,large)
     {function _AE_(acc,x)
       {function _AG_(l)
         {function _AH_(y){return 1 - caml_call2(equal,y,x)}
          var
           _AI_=caml_call2(Core_List[130],l,_AH_),
           _AJ_=_AI_[2],
           _AK_=_AI_[1];
          if(! _AJ_)return 0;
          var r=_AJ_[2];
          return [0,caml_call2(Core[157],_AK_,r)]}
        return caml_call2(Core_Option[27],acc,_AG_)}
      var _AF_=caml_call3(Core_List[10],small,[0,large],_AE_);
      return caml_call1(Core_Option[57],_AF_)}
    function check_hook_table_invariant(table,list)
     {var _AD_=caml_call1(Core_Hashtbl[65],table);
      if(unordered_is_sublist(Core[246],_AD_,list))return 0;
      throw [0,Assert_failure,_fN_]}
    function invariant$6(t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _zB_=function(_AC_){return 0},
         _zC_=function(_AB_){return 0},
         _zD_=function(_AA_){return 0},
         _zE_=function(_Az_){return 0},
         _zF_=function(_Ay_){return 0},
         _zG_=function(_Ax_){return 0},
         _zH_=function(_Aw_){return 0},
         _zI_=function(_Av_){return 0},
         _zJ_=function(_Au_){return 0},
         _zK_=
          function(job)
           {if(caml_call2(Tuple_pool[6],t[2],job))return 0;
            throw [0,Assert_failure,_fQ_]},
         _zL_=caml_call1(Read_write[3],_zK_),
         _zM_=function(_At_){return check(_zL_,_At_)},
         _zN_=function(_As_){return 0},
         _zO_=
          function(last_cycle_num_jobs)
           {if(caml_call2(symbol,last_cycle_num_jobs,0))return 0;
            throw [0,Assert_failure,_fR_]},
         _zP_=function(_Ar_){return check(_zO_,_Ar_)},
         _zQ_=function(_Aq_){return 0},
         _zR_=
          function(run_every_cycle_end_state)
           {return check_hook_table_invariant(run_every_cycle_end_state,t[14])},
         _zS_=function(_Ap_){return check(_zR_,_Ap_)},
         _zT_=function(_Ao_){return 0},
         _zU_=
          function(run_every_cycle_start_state)
           {return check_hook_table_invariant
                    (run_every_cycle_start_state,t[12])},
         _zV_=function(_An_){return check(_zU_,_An_)},
         _zW_=function(_Am_){return 0},
         _zX_=function(_Al_){return 0},
         _zY_=function(_Ak_){return 0},
         _zZ_=
          function(cycle_count)
           {if(caml_call2(symbol,cycle_count,0))return 0;
            throw [0,Assert_failure,_fS_]},
         _z0_=function(_Aj_){return check(_zZ_,_Aj_)},
         _z1_=
          function(uncaught_exn)
           {var _Ai_=caml_call1(Core[243],uncaught_exn);
            if(! _Ai_)return _Ai_;
            if(caml_call2(symbol$1,num_pending_jobs(t),0))return 0;
            throw [0,Assert_failure,_fT_]},
         _z2_=function(_Ah_){return check(_z1_,_Ah_)},
         _z3_=function(_Ag_){return check(f,_Ag_)},
         _z4_=function(_Af_){return check(f,_Af_)},
         _z5_=
          function(q)
           {return caml_call2(Core_Deque[17],q,Very_low_priority_worker$0[6])},
         _z6_=function(_Ae_){return check(_z5_,_Ae_)},
         _z7_=function(_Ad_){return check(invariant$0,_Ad_)},
         _z8_=function(_Ac_){return check(invariant$0,_Ac_)},
         _z9_=function(_Ab_){return check(invariant,_Ab_)},
         _z__=function(_Aa_){return 0},
         _z$_=
          caml_call28
           (Fields$4[33],
            _z__,
            _z9_,
            _z8_,
            _z7_,
            _z6_,
            _z4_,
            _z3_,
            _z2_,
            _z0_,
            _zY_,
            _zX_,
            _zW_,
            _zV_,
            _zT_,
            _zS_,
            _zQ_,
            _zP_,
            _zN_,
            _zM_,
            _zJ_,
            _zI_,
            _zH_,
            _zG_,
            _zF_,
            _zE_,
            _zD_,
            _zC_,
            _zB_);
        return _z$_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _zy_=[0,[1,[0,_fO_,[0,sexp_of_t$18(t),0]]],0],
         _zz_=[0,[1,[0,_fP_,[0,caml_call1(Core[537],exn),0]]],_zy_],
         _zA_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Scheduler_invariant_failed),
            _zz_]];
        return caml_call1(Core[253],_zA_)}}
    function free_job(t,job){return caml_call2(Tuple_pool[15],t[2],job)}
    function enqueue$0(t,execution_context,f,a)
     {var _zv_=caml_call1(Core[242],t[8]);
      if(_zv_)
       {var priority=execution_context[2],job_queue=priority?t[4]:t[3];
        enqueue(job_queue,execution_context,f,a);
        var _zw_=t[22];
        if(_zw_){var f$0=_zw_[1];return caml_call1(f$0,priority)}
        var _zx_=0}
      else
       var _zx_=_zv_;
      return _zx_}
    function enqueue_job(t,job,free_job)
     {var
       job_pool=t[2],
       _zt_=caml_call3(Tuple_pool[32],job_pool,job,Tuple_pool[2][5]),
       _zu_=caml_call3(Tuple_pool[32],job_pool,job,Tuple_pool[2][4]);
      enqueue$0
       (t,caml_call3(Tuple_pool[32],job_pool,job,Tuple_pool[2][3]),_zu_,_zt_);
      return free_job?caml_call2(Tuple_pool[15],t[2],job):free_job}
    function handle_fired$1(time_source,job_or_event)
     {var
       k=caml_call1(T1[2][5][1],job_or_event),
       match=caml_call2(T1[2][5][2],k,job_or_event);
      return k?enqueue_job(time_source[9],match,1):fire(time_source,match)}
    function create$10(param)
     {var
       now=caml_call1(_X_,0),
       t=[],
       time_source=[],
       events=caml_call2(Timing_wheel[9],Async_kernel_config[29],now),
       _y__=Async_kernel_config[27],
       _y$_=Async_kernel_config[23],
       _za_=Async_kernel_config[16],
       _zb_=caml_call1(Bvar$0[1],0),
       _zc_=caml_call1(Bvar$0[1],0),
       _zd_=0,
       _ze_=0;
      function _zf_(_zs_){return 0}
      var
       _zg_=caml_call1(Thread_safe_queue[3],0),
       _zh_=caml_call1(sec,0.),
       _zi_=caml_call1(sec,0.),
       _zj_=
        caml_call3
         (Core_Hashtbl[4],
          0,
          0,
          [0,
           Cycle_hook_handle[20],
           Cycle_hook_handle[10],
           Cycle_hook_handle[36]]),
       _zk_=
        caml_call3
         (Core_Hashtbl[4],
          0,
          0,
          [0,
           Cycle_hook_handle[20],
           Cycle_hook_handle[10],
           Cycle_hook_handle[36]]),
       _zl_=caml_call3(Core_Deque[31],0,0,0),
       _zm_=create$2(0),
       _zn_=create$2(0);
      caml_update_dummy
       (t,
        [0,
         0,
         create$1(0),
         _zn_,
         _zm_,
         _zl_,
         dummy_e,
         dummy_e,
         0,
         0,
         now,
         0,
         0,
         _zk_,
         0,
         _zj_,
         _zi_,
         0,
         _zh_,
         time_source,
         _zg_,
         _zf_,
         _ze_,
         _zd_,
         _zc_,
         _zb_,
         _za_,
         _y$_,
         _y__]);
      var _zo_=1;
      function _zp_(alarm)
       {return handle_fired$1
                (time_source,caml_call2(Timing_wheel[5][5],events,alarm))}
      var _zq_=Event$1[3][2],_zr_=Event$1[3][2];
      caml_update_dummy
       (time_source,
        [0,caml_call1(Time_source_id[45],0),0,0,events,_zr_,_zq_,_zp_,_zo_,t]);
      return t}
    function is_dead(t){return caml_call1(Core[243],t[8])}
    function set_check_access$0(t,f){t[1] = f;return 0}
    var match=caml_call1(Core_Result[47],create$10);
    if(0 === match[0])
     var t=match[1],_fU_=[0,t];
    else
     {var exn=match[1];
      log(cst_Async_cannot_create_its_ra,exn,Core[537]);
      var _fU_=caml_call1(Core[83],1)}
    function check_access$1(t)
     {var _y9_=t[1];if(! _y9_)return 0;var f=_y9_[1];return caml_call1(f,0)}
    function t$0(param){var t=_fU_[1];check_access$1(t);return t}
    function current_execution_context$1(t)
     {return t[28]?record_backtrace(t[7]):t[7]}
    function with_execution_context1(t,tmp_context,f,x)
     {var old_context=current_execution_context$1(t);
      set_execution_context(t,tmp_context);
      function _y8_(param){return set_execution_context(t,old_context)}
      return caml_call3(Core[252],f,x,_y8_)}
    function with_execution_context(t,tmp_context,f)
     {return with_execution_context1(t,tmp_context,f,0)}
    function create_job(t,execution_context,f,a)
     {if(caml_call1(Tuple_pool[14],t[2]))
       t[2] = caml_call2(Tuple_pool[13],0,t[2]);
      return caml_call4(Tuple_pool[19],t[2],execution_context,f,a)}
    function got_uncaught_exn(t,exn,sexp)
     {if(_be_)
       log
        (cst_got_uncaught_exn,
         [0,exn,sexp],
         function(param)
          {var
            arg1_072=param[2],
            arg0_071=param[1],
            res0_073=caml_call1(Base_Exn[1],arg0_071),
            res1_074=caml_call1(Core_Sexp[90],arg1_072);
           return [1,[0,res0_073,[0,res1_074,0]]]});
      caml_call2(Core_List[9],[0,t[3],[0,t[4],0]],clear);
      t[8] = [0,[0,exn,sexp]];
      return 0}
    function start_cycle(t,max_num_jobs_per_priority)
     {var n=caml_call1(Async_kernel_config[5][5],max_num_jobs_per_priority);
      set_jobs_left_this_cycle$0(t[3],n);
      return set_jobs_left_this_cycle$0(t[4],n)}
    function run_jobs$0(t)
     {for(;;)
       {var e=run_jobs(t[3],t);
        if(0 !== e[0])return e;
        var e$0=run_jobs(t[4],t);
        if(0 !== e$0[0])return e$0;
        if(! can_run_a_job(t[3]) && ! can_run_a_job(t[4]))return _fV_}}
    function stabilize(t)
     {start_cycle(t,caml_call1(Async_kernel_config[5][4],Core_Int[41]));
      var match=run_jobs$0(t);
      if(0 === match[0])return _fW_;
      var match$0=match[1],exn=match$0[1];
      return [1,exn]}
    function create$11(opt,now,param)
     {if(opt)
       var sth=opt[1],timing_wheel_config=sth;
      else
       var timing_wheel_config=Async_kernel_config[29];
      var
       t=t$0(0),
       events=caml_call2(Timing_wheel[9],timing_wheel_config,now),
       time_source=[],
       _y4_=0;
      function _y5_(alarm)
       {return handle_fired$1
                (time_source,caml_call2(Timing_wheel[5][5],events,alarm))}
      var _y6_=Event$1[3][2],_y7_=Event$1[3][2];
      caml_update_dummy
       (time_source,
        [0,caml_call1(Time_source_id[45],0),0,0,events,_y7_,_y6_,_y5_,_y4_,t]);
      return time_source}
    function wall_clock(param){return t$0(0)[19]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$46);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Scheduler1$0);
    var
     Async_kernel_Scheduler1=
      [0,
       events,
       set_execution_context,
       _be_,
       Ivar$0,
       Bvar$0,
       Very_low_priority_worker$0,
       record_backtraces,
       set_record_backtraces,
       max_num_jobs_per_priority_per_,
       set_max_num_jobs_per_priority_,
       check_invariants,
       set_check_invariants,
       yield_until_no_jobs_remain,
       set_yield_until_no_jobs_remain,
       yield$0,
       set_yield,
       event_added_hook,
       set_event_added_hook,
       job_queued_hook,
       set_job_queued_hook,
       thread_safe_external_job_hook,
       set_thread_safe_external_job_h,
       external_jobs,
       time_source,
       set_time_source,
       total_cycle_time,
       set_total_cycle_time,
       set_last_cycle_num_jobs,
       last_cycle_time,
       set_last_cycle_time,
       run_every_cycle_end_state,
       run_every_cycle_end,
       set_run_every_cycle_end,
       run_every_cycle_start_state,
       run_every_cycle_start,
       set_run_every_cycle_start,
       in_cycle,
       set_in_cycle,
       cycle_start,
       set_cycle_start,
       cycle_count,
       set_cycle_count,
       set_uncaught_exn,
       set_current_execution_context,
       main_execution_context,
       set_main_execution_context,
       very_low_priority_workers,
       low_priority_jobs,
       normal_priority_jobs,
       job_pool,
       set_job_pool,
       Fields$4,
       sexp_of_t$18,
       uncaught_exn_unwrapped,
       uncaught_exn$0,
       num_pending_jobs,
       num_jobs_run$1,
       last_cycle_num_jobs$1,
       unordered_is_sublist,
       check_hook_table_invariant,
       invariant$6,
       free_job,
       enqueue$0,
       enqueue_job,
       handle_fired$1,
       create$10,
       is_dead,
       set_check_access$0,
       _fU_,
       check_access$1,
       t$0,
       current_execution_context$1,
       with_execution_context1,
       with_execution_context,
       create_job,
       got_uncaught_exn,
       start_cycle,
       run_jobs$0,
       stabilize,
       create$11,
       wall_clock];
    caml_register_global
     (1127,Async_kernel_Scheduler1,"Async_kernel__Scheduler1");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Ivar0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$47);
    caml_call1(Expect_test_collector[5][1],cst_src_ivar0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$48,cst$15);
    function set_prev(param,x){param[3] = x;return 0}
    function set_next(param,x){param[4] = x;return 0}
    function create$12(run,execution_context)
     {var t=[0,run,execution_context,0,0];
      set_prev(t,t);
      set_next(t,t);
      return t}
    function create2(run1,execution_context1,run2,execution_context2)
     {var
       t1=[0,run1,execution_context1,0,0],
       t2=[0,run2,execution_context2,t1,t1];
      set_prev(t1,t2);
      set_next(t1,t2);
      return t1}
    function length$2(t)
     {var n=[0,1],r=[0,t[4]];
      for(;;)
       {if(caml_call2(Core[246],r[1],t))return n[1];n[1]++;r[1] = r[1][4]}}
    function enqueue$1(t,scheduler,v){return enqueue$0(scheduler,t[2],t[1],v)}
    function schedule_jobs(t,v)
     {var scheduler=t$0(0);
      enqueue$1(t,scheduler,v);
      var r=[0,t[4]];
      for(;;)
       {if(caml_call2(Core[246],r[1],t))return 0;
        enqueue$1(r[1],scheduler,v);
        r[1] = r[1][4]}}
    function add$0(t,run,execution_context)
     {var result=[0,run,execution_context,t[3],t];
      set_next(t[3],result);
      set_prev(t,result);
      return result}
    function of_list(l)
     {if(! l)return 0;
      var
       l$0=l[2],
       match=l[1],
       execution_context=match[2],
       run=match[1],
       prev=create$12(run,execution_context),
       prev$0=prev,
       l$1=l$0;
      for(;;)
       {if(l$1)
         {var
           l$2=l$1[2],
           match$0=l$1[1],
           execution_context$0=match$0[2],
           run$0=match$0[1],
           t=[0,run$0,execution_context$0,prev$0,prev];
          set_next(prev$0,t);
          var prev$0=t,l$1=l$2;
          continue}
        set_prev(prev,prev$0);
        return [0,prev]}}
    function to_list$11(first)
     {var t=first[3],acc=0;
      for(;;)
       {var acc$0=[0,[0,t[1],t[2]],acc];
        if(caml_call2(Core[246],t,first))return acc$0;
        var t$0=t[3],t=t$0,acc=acc$0}}
    function sexp_of_t$19(param,t)
     {var execution_context=t[2];
      return [1,[0,_fY_,[0,sexp_of_t$1(execution_context),0]]]}
    function cell_of_handler(x){return x}
    function equal$1(t$0,t){return caml_call2(Core[246],t$0,t)}
    function indir(t){return [0,[3,t]]}
    var
     create_with_cell$0=Ivar$0[1],
     create$13=Ivar$0[2],
     create_full$0=Ivar$0[3];
    function squash(t$3)
     {var _y2_=t$3[1];
      if(typeof _y2_ !== "number" && 3 === _y2_[0])
       {var t$4=_y2_[1],_y3_=t$4[1];
        if(typeof _y3_ !== "number" && 3 === _y3_[0])
         {var t$5=_y3_[1],indir=_y3_,t=t$5;
          for(;;)
           {var _y0_=t[1];
            if(typeof _y0_ !== "number" && 3 === _y0_[0])
             {var t$0=_y0_[1],indir=_y0_,t=t$0;continue}
            var t$1=t$3;
            for(;;)
             {var _y1_=t$1[1];
              if(typeof _y1_ !== "number" && 3 === _y1_[0])
               {var t$2=_y1_[1];t$1[1] = indir;var t$1=t$2;continue}
              return t$1}}}
        return t$4}
      return t$3}
    function invariant$7(a_invariant,t)
     {var t$0=squash(t),_yZ_=t$0[1];
      if(typeof _yZ_ === "number")return 0;
      switch(_yZ_[0])
       {case 0:
         var r=[0,_yZ_[4]];
         for(;;)
          {if(caml_call2(Core[246],r[1],_yZ_))return 0;
           var t1=r[1];
           if(! caml_call2(Core[246],t1[4][3],t1))
            throw [0,Assert_failure,_fX_];
           r[1] = r[1][4]}
        case 1:return 0;
        case 2:var a=_yZ_[1];return caml_call1(a_invariant,a);
        default:throw [0,Assert_failure,_fZ_]}}
    function sexp_of_t$20(sexp_of_a,t)
     {var t$0=squash(t),_yY_=t$0[1];
      if(typeof _yY_ !== "number")
       switch(_yY_[0])
        {case 2:
          var a=_yY_[1];return [1,[0,_f1_,[0,caml_call1(sexp_of_a,a),0]]];
         case 3:throw [0,Assert_failure,_f2_]
         }
      return _f0_}
    function peek(t)
     {var t$0=squash(t),_yX_=t$0[1];
      if(typeof _yX_ !== "number")
       switch(_yX_[0])
        {case 2:var a=_yX_[1];return [0,a];
         case 3:throw [0,Assert_failure,_f3_]
         }
      return 0}
    function value$1(t,if_empty_then_failwith)
     {var t$0=squash(t),_yW_=t$0[1];
      if(typeof _yW_ !== "number")
       switch(_yW_[0])
        {case 2:var a=_yW_[1];return a;case 3:throw [0,Assert_failure,_f4_]}
      return caml_call1(Core[6],if_empty_then_failwith)}
    function value_exn$0(t){return value$1(t,cst_Ivar_value_exn_called_on_e)}
    function is_empty(t)
     {var t$0=squash(t),_yV_=t$0[1];
      if(typeof _yV_ !== "number")
       switch(_yV_[0]){case 2:return 0;case 3:throw [0,Assert_failure,_f5_]}
      return 1}
    function is_full(t){return 1 - is_empty(t)}
    function fill(t,v)
     {var x_001=squash(t),_yQ_=x_001[1];
      if(typeof _yQ_ !== "number")
       switch(_yQ_[0])
        {case 0:x_001[1] = [2,v];return schedule_jobs(_yQ_,v);
         case 1:
          var execution_context=_yQ_[2],run=_yQ_[1];
          x_001[1] = [2,v];
          return enqueue$0(t$0(0),execution_context,run,v);
         case 2:
          var
           _yR_=0,
           _yS_=0,
           _yT_=
            [0,
             [1,
              [0,
               _f7_,
               [0,sexp_of_t$20(function(param){return _f6_},x_001),_yS_]]],
             _yR_],
           _yU_=
            [1,
             [0,
              caml_call1(Sexplib0_Sexp_conv[7],cst_Ivar_fill_of_full_ivar),
              _yT_]];
          return caml_call1(Core[253],_yU_);
         default:throw [0,Assert_failure,_f8_]}
      x_001[1] = [2,v];
      return 0}
    function remove_handler(t,handler)
     {function x(_yP_){return 0}
      handler[1] = x;
      var t$0=squash(t),_yO_=t$0[1];
      if(typeof _yO_ !== "number")
       switch(_yO_[0])
        {case 0:
          if(caml_call2(Core[246],handler,handler[4])){t$0[1] = 0;return 0}
          if(caml_call2(Core[246],handler,_yO_))t$0[1] = handler[4];
          set_prev(handler[4],handler[3]);
          set_next(handler[3],handler[4]);
          set_prev(handler,handler);
          return set_next(handler,handler);
         case 2:return 0;
         case 3:throw [0,Assert_failure,_f9_]
         }
      return 0}
    function add_handler(t,run,execution_context)
     {var t$1=squash(t),_yN_=t$1[1];
      if(typeof _yN_ !== "number")
       switch(_yN_[0])
        {case 0:return add$0(_yN_,run,execution_context);
         case 1:
          var
           execution_context$0=_yN_[2],
           run$0=_yN_[1],
           handler$0=create2(run,execution_context,run$0,execution_context$0);
          t$1[1] = handler$0;
          return handler$0;
         case 2:
          var
           v=_yN_[1],
           handler$1=create$12(run,execution_context),
           run$1=function(v){return caml_call1(handler$1[1],v)};
          enqueue$0(t$0(0),execution_context,run$1,v);
          return handler$1;
         default:throw [0,Assert_failure,_f__]}
      var handler=create$12(run,execution_context);
      t$1[1] = handler;
      return handler}
    function has_handlers(t)
     {var t$0=squash(t),_yM_=t$0[1];
      if(typeof _yM_ !== "number")
       switch(_yM_[0])
        {case 3:throw [0,Assert_failure,_f$_];case 2:break;default:return 1}
      return 0}
    function upon(t,run)
     {return add_handler(t,run,current_execution_context$1(t$0(0)))}
    function upon$0(t,run)
     {var
       scheduler=t$0(0),
       execution_context=current_execution_context$1(scheduler),
       t$1=squash(t),
       _yL_=t$1[1];
      if(typeof _yL_ !== "number")
       switch(_yL_[0])
        {case 0:add$0(_yL_,run,execution_context);return 0;
         case 1:
          var execution_context$0=_yL_[2],run$0=_yL_[1];
          t$1[1] = create2(run,execution_context,run$0,execution_context$0);
          return 0;
         case 2:
          var v=_yL_[1];return enqueue$0(scheduler,execution_context,run,v);
         default:throw [0,Assert_failure,_ga_]}
      t$1[1] = [1,run,execution_context];
      return 0}
    function connect(bind_result,bind_rhs)
     {var _yH_=1 - caml_call2(Core[246],bind_result,bind_rhs);
      if(! _yH_)return _yH_;
      var
       bind_result$0=squash(bind_result),
       indir=[3,bind_result$0],
       ivar=bind_rhs;
      for(;;)
       {var cell=ivar[1],switch$0=0;
        if(typeof cell !== "number")
         switch(cell[0])
          {case 2:switch$0 = 1;break;
           case 3:var ivar$0=cell[1];ivar[1] = indir;var ivar=ivar$0;continue
           }
        if(! switch$0 && 1 - caml_call2(Core[246],ivar,bind_result$0))
         ivar[1] = indir;
        var _yI_=bind_result$0[1],switch$1=0;
        if(typeof _yI_ !== "number")
         switch(_yI_[0])
          {case 0:
            if(typeof cell === "number")
             switch$1 = 1;
            else
             switch(cell[0])
              {case 0:
                var last1=_yI_[3],last2=cell[3];
                set_next(last1,cell);
                set_next(last2,_yI_);
                set_prev(_yI_,last2);
                return set_prev(cell,last1);
               case 1:
                var execution_context2=cell[2],run2=cell[1];
                add$0(_yI_,run2,execution_context2);
                return 0;
               case 2:
                var v=cell[1];
                bind_result$0[1] = cell;
                return schedule_jobs(_yI_,v)
               }
            break;
           case 1:
            var _yJ_=_yI_[2],_yK_=_yI_[1];
            if(typeof cell === "number")
             switch$1 = 1;
            else
             switch(cell[0])
              {case 0:
                var handler1=add$0(cell,_yK_,_yJ_);
                bind_result$0[1] = handler1;
                return 0;
               case 1:
                var
                 execution_context2$0=cell[2],
                 run2$0=cell[1],
                 handler1$0=create2(_yK_,_yJ_,run2$0,execution_context2$0);
                bind_result$0[1] = handler1$0;
                return 0;
               case 2:
                var v$0=cell[1];
                bind_result$0[1] = cell;
                return enqueue$0(t$0(0),_yJ_,_yK_,v$0)
               }
            break;
           case 2:break;
           default:switch$1 = 2}
        var switch$2=0;
        switch(switch$1)
         {case 0:
           var switch$3=0;
           if(typeof cell !== "number" && 3 === cell[0])
            {switch$2 = 1;switch$3 = 1}
           if(! switch$3 && typeof _yI_ !== "number")
            throw [0,Assert_failure,_gb_];
           break;
          case 1:break;
          default:switch$2 = 1}
        if(switch$2)throw [0,Assert_failure,_gc_];
        return typeof cell === "number"?0:(bind_result$0[1] = cell,0)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$49);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Ivar0$0);
    var
     _gd_=[0,sexp_of_t$19,length$2,of_list,to_list$11],
     include$9=
      [0,
       sexp_of_t$20,
       invariant$7,
       create$13,
       create_full$0,
       create_with_cell$0,
       peek,
       value_exn$0,
       value$1,
       is_empty,
       is_full,
       equal$1,
       connect,
       fill,
       _gd_,
       cell_of_handler,
       add_handler,
       remove_handler,
       has_handlers,
       upon$0,
       upon,
       indir,
       squash];
    caml_register_global(1128,include$9,"Async_kernel__Ivar0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$50);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$51,cst$16);
    function of_ivar(ivar){return ivar}
    function invariant$8(invariant_a,t){return invariant$7(invariant_a,t)}
    function sexp_of_t$21(sexp_of_a,t){return sexp_of_t$20(sexp_of_a,t)}
    function peek$0(t){return peek(t)}
    function return$0(a){return caml_call1(create_full$0,a)}
    function is_determined(t){return is_full(t)}
    function value_exn$1(t){return value$1(t,cst_Deferred_value_exn_called_)}
    function upon$1(t,f){return upon$0(t,f)}
    function create$14(f)
     {var result=caml_call1(create$13,0);caml_call1(f,result);return result}
    function bind(t,f)
     {var bind_result=caml_call1(create$13,0);
      upon$1(t,function(a){return connect(bind_result,caml_call1(f,a))});
      return bind_result}
    function add_handler$0(t,f,execution_context)
     {return add_handler(t,f,execution_context)}
    function remove_handler$0(t,h){return remove_handler(t,h)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$52);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred0$0);
    var
     Handler$0=[0,_gd_[1]],
     include$10=
      [0,
       sexp_of_t$21,
       invariant$8,
       of_ivar,
       create$14,
       peek$0,
       value_exn$1,
       is_determined,
       return$0,
       upon$1,
       bind,
       Handler$0,
       add_handler$0,
       remove_handler$0];
    caml_register_global(1129,include$10,"Async_kernel__Deferred0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Ivar);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$53);
    caml_call1(Expect_test_collector[5][1],cst_src_ivar_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$54,cst$17);
    function fill_if_empty(t,v)
     {var _yG_=is_empty(t);return _yG_?fill(t,v):_yG_}
    function to_binable(t){return peek(t)}
    function of_binable(param)
     {if(! param)return caml_call1(create$13,0);
      var a=param[1];
      return caml_call1(create_full$0,a)}
    var
     include$11=
      caml_call1
       (caml_call1
         (Core_Binable[7],
          [0,
           Core_Option[1],
           Core_Option[2],
           Core_Option[3],
           Core_Option[4],
           Core_Option[5]]),
        [0,to_binable,of_binable]),
     _ge_=include$11[1],
     _gf_=include$11[2],
     _gg_=include$11[3],
     _gh_=include$11[4],
     _gi_=include$11[5],
     _gj_=include$11[6],
     _gk_=include$11[7],
     _gl_=include$11[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$55);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Ivar$0);
    var
     Async_kernel_Ivar=
      [0,
       _ge_,
       _gf_,
       _gg_,
       _gh_,
       _gi_,
       _gj_,
       _gk_,
       _gl_,
       sexp_of_t$20,
       invariant$7,
       equal$1,
       create$13,
       create_full$0,
       fill,
       fill_if_empty,
       is_empty,
       is_full,
       of_ivar,
       peek,
       value_exn$0,
       has_handlers];
    caml_register_global(1131,Async_kernel_Ivar,"Async_kernel__Ivar");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Monad_sequenc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$56);
    caml_call1(Expect_test_collector[5][1],cst_src_monad_sequence_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$57,cst$18);
    function sexp_of_how(param)
     {if(typeof param === "number")return -676829465 <= param?_gm_:_gn_;
      var v_001=param[2];
      return [1,[0,_go_,[0,caml_call1(Core[356],v_001),0]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$58);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Monad_sequenc$0);
    var Async_kernel_Monad_sequence=[0,sexp_of_how];
    caml_register_global
     (1132,Async_kernel_Monad_sequence,"Async_kernel__Monad_sequence");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$59);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred1_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$60,cst$19);
    function never(param){return caml_call1(create$13,0)}
    var
     map$11=
      [0,
       -198771759,
       function(t,f)
        {var result=caml_call1(create$13,0);
         upon$1(t,function(a){return fill(result,caml_call1(f,a))});
         return result}],
     include$12=caml_call1(Base_Monad[1],[0,bind,return$0,map$11]),
     _gp_=include$12[1],
     _gq_=include$12[2],
     Monad_infix=include$12[3],
     bind$0=include$12[4],
     map$12=include$12[6],
     join=include$12[7],
     ignore_m=include$12[8],
     include$13=include$12[11],
     symbol_bind=include$13[2],
     symbol_map=include$13[3],
     include$14=include$12[11][4],
     bind$1=include$14[2],
     map$13=include$14[3],
     both=include$14[4],
     Open_on_rhs=include$14[5],
     Let_syntax=[0,bind$1,map$13,both,Open_on_rhs,return$0],
     Let_syntax$0=[0,symbol_bind,symbol_map,return$0,Let_syntax],
     unit=caml_call1(Let_syntax$0[3],0);
    function both$0(t1,t2)
     {return create$14
              (function(result)
                {return upon$1
                         (t1,
                          function(a1)
                           {return upon$1
                                    (t2,function(a2){return fill(result,[0,a1,a2])})})})}
    var
     symbol_bind$0=Monad_infix[1],
     symbol_map$0=Monad_infix[2],
     Infix=[0,symbol_bind$0,symbol_map$0,upon$1,both$0];
    function don_t_wait_for(param){return 0}
    function map$14(param,f2)
     {var f1=param[2],t=param[1];
      return [0,t,function(x){return caml_call1(f2,caml_call1(f1,x))}]}
    var Choice=[0,map$14];
    function process(param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var rest=param$0[3],handler=param$0[2],t=param$0[1];
        remove_handler$0(t,handler);
        var param$0=rest}}
    var Unregister=[0,process];
    function choice(t,f){return [0,t,f]}
    function enabled(choices)
     {var result=caml_call1(create$13,0),unregisters=[0,0];
      function ready(param)
       {var _yD_=is_empty(result);
        return _yD_
                ?(caml_call1(Unregister[1],unregisters[1]),
                  fill
                   (result,
                    function(param)
                     {function _yE_(ac,param)
                       {var f=param[2],t=param[1],match=peek$0(t);
                        if(! match)return ac;
                        var v=match[1];
                        return [0,caml_call1(f,v),ac]}
                      var _yF_=caml_call3(Core_List[10],choices,0,_yE_);
                      return caml_call1(Core_List[34],_yF_)}))
                :_yD_}
      var execution_context=current_execution_context$1(t$0(0));
      function _yC_(acc,param)
       {var t=param[1];
        return [0,t,add_handler$0(t,ready,execution_context),acc]}
      unregisters[1] = caml_call3(Core_List[10],choices,0,_yC_);
      return result}
    function choose_result(choices)
     {var choices$0=choices;
      for(;;)
       {if(! choices$0)throw [0,Assert_failure,_gr_];
        var
         choices$1=choices$0[2],
         match=choices$0[1],
         f=match[2],
         t=match[1],
         match$0=peek$0(t);
        if(match$0){var v=match$0[1];return caml_call1(f,v)}
        var choices$0=choices$1}}
    function choose(choices)
     {var result=caml_call1(create$13,0),unregisters=[0,0];
      function ready(param)
       {var _yB_=is_empty(result);
        return _yB_
                ?(caml_call1(Unregister[1],unregisters[1]),
                  fill(result,choose_result(choices)))
                :_yB_}
      var execution_context=current_execution_context$1(t$0(0));
      function _yA_(acc,param)
       {var t=param[1];
        return [0,t,add_handler$0(t,ready,execution_context),acc]}
      unregisters[1] = caml_call3(Core_List[10],choices,0,_yA_);
      return result}
    function any_f(ts,f)
     {function _yz_(t){return [0,t,f]}
      return choose(caml_call2(Core_List[72],ts,_yz_))}
    function any(ts){return any_f(ts,function(_yy_){return _yy_})}
    function any_unit(ts){return any_f(ts,function(_yx_){return 0})}
    function for$0(start,to,do$0)
     {function loop(i)
       {if(caml_call2(Core[91],i,to))return caml_call1(Let_syntax$0[3],0);
        function _yv_(param){return loop(i + 1 | 0)}
        var _yw_=caml_call1(do$0,i);
        return caml_call2(Let_syntax$0[4][1],_yw_,_yv_)}
      return loop(start)}
    function repeat_until_finished(state,f)
     {return create$14
              (function(finished)
                {function loop(state)
                  {function _yt_(param)
                    {if(990972795 <= param[1])
                      {var state=param[2];return loop(state)}
                     var result=param[2];
                     return fill(finished,result)}
                   var _yu_=caml_call1(f,state);
                   return caml_call2(Infix[3],_yu_,_yt_)}
                 return loop(state)})}
    function forever(state,f)
     {var
       _yp_=Core[159],
       _yq_=
        repeat_until_finished
         (state,
          function(state)
           {function _yr_(state){return [0,990972795,state]}
            var _ys_=caml_call1(f,state);
            return caml_call2(Let_syntax$0[4][2],_ys_,_yr_)});
      return caml_call2(Infix[3],_yq_,_yp_)}
    function fold$11(t,init,f)
     {return create$14
              (function(result)
                {function loop(t,b)
                  {if(! t)return fill(result,b);
                   var xs=t[2],x=t[1];
                   function _yn_(b){return loop(xs,b)}
                   var _yo_=caml_call2(f,b,x);
                   return caml_call2(Infix[3],_yo_,_yn_)}
                 return loop(t,init)})}
    function seqmap(t,f)
     {var
       _yj_=Core_List[34],
       _yk_=
        fold$11
         (t,
          0,
          function(bs,a)
           {function _yl_(b){return [0,b,bs]}
            var _ym_=caml_call1(f,a);
            return caml_call2(Infix[2],_ym_,_yl_)});
      return caml_call2(Infix[2],_yk_,_yj_)}
    function all(ds){return seqmap(ds,function(_yi_){return _yi_})}
    function all_unit(ds){return fold$11(ds,0,function(param,d){return d})}
    function ok(x)
     {function _yh_(x){return [0,x]}return caml_call2(Infix[2],x,_yh_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$61);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred1$0);
    var
     include$15=
      [0,
       sexp_of_t$21,
       invariant$8,
       of_ivar,
       create$14,
       peek$0,
       value_exn$1,
       is_determined,
       upon$1,
       Handler$0,
       add_handler$0,
       remove_handler$0,
       never,
       include$12,
       _gp_,
       _gq_,
       Monad_infix,
       bind$0,
       map$12,
       join,
       ignore_m,
       return$0,
       Let_syntax$0,
       unit,
       both$0,
       Infix,
       don_t_wait_for,
       Choice,
       Unregister,
       choice,
       enabled,
       choose_result,
       choose,
       any_f,
       any,
       any_unit,
       for$0,
       repeat_until_finished,
       forever,
       sexp_of_how,
       fold$11,
       seqmap,
       all,
       all_unit,
       ok];
    caml_register_global(1134,include$15,"Async_kernel__Deferred1");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_std);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$62);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_std_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$63,cst$20);
    var
     _gs_=Infix[3],
     _gu_=Let_syntax$0[1],
     _gv_=Let_syntax$0[2],
     _gw_=Let_syntax$0[3],
     _gx_=Let_syntax$0[4],
     _gt_=Infix[4];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$64);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_std$0);
    var
     Async_kernel_Deferred_std=
      [0,
       _gs_,
       _gt_,
       _gu_,
       _gv_,
       _gx_,
       choice,
       choose,
       don_t_wait_for,
       never,
       _gw_,
       upon$1];
    caml_register_global
     (1135,Async_kernel_Deferred_std,"Async_kernel__Deferred_std");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Ivar_filler);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$65);
    caml_call1(Expect_test_collector[5][1],cst_src_ivar_filler_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$66,cst$21);
    function sexp_of_t$22(of_a_005,x_006)
     {function _yg_(param)
       {if(! param)return _gz_;
        var arg0_002=param[1],res0_003=sexp_of_t$20(of_a_005,arg0_002);
        return [1,[0,_gy_,[0,res0_003,0]]]}
      return caml_call2(Core[501],_yg_,x_006)}
    function invariant$9(param,t)
     {function _yd_(param)
       {var _yf_=t[1];
        if(! _yf_)return 0;
        var ivar=_yf_[1];
        if(is_empty(ivar))return 0;
        throw [0,Assert_failure,_gA_]}
      function _ye_(x_007)
       {return sexp_of_t$22(function(param){return _gB_},x_007)}
      return caml_call4(include$5[1],_gC_,t,_ye_,_yd_)}
    function create$15(param)
     {var ivar=caml_call1(create$13,0),t=[0,[0,ivar]];return [0,t,ivar]}
    function is_empty$0(t){return t[1]?1:0}
    function fill$0(t,a)
     {var _yb_=t[1];
      if(_yb_){var i=_yb_[1];t[1] = 0;return fill(i,a)}
      var
       _yc_=
        caml_call1(Sexplib0_Sexp_conv[7],cst_attempt_to_fill_full_ivar);
      return caml_call1(Core[253],_yc_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$67);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Ivar_filler$0);
    var
     Async_kernel_Ivar_filler=
      [0,sexp_of_t$22,invariant$9,create$15,is_empty$0,fill$0];
    caml_register_global
     (1136,Async_kernel_Ivar_filler,"Async_kernel__Ivar_filler");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Tail);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$68);
    caml_call1(Expect_test_collector[5][1],cst_src_tail_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$69,cst$22);
    function sexp_of_t$23(sexp_of_a,d)
     {var d$0=d,ac=0;
      for(;;)
       {var match=peek$0(d$0);
        if(! match)return [1,caml_call1(Core_List[34],[0,_gD_,ac])];
        var _ya_=match[1];
        if(! _ya_)return [1,caml_call1(Core_List[34],ac)];
        var
         t=_ya_[2],
         a=_ya_[1],
         ac$0=[0,caml_call1(sexp_of_a,a),ac],
         d$0=t,
         ac=ac$0}}
    function next(t){return t}
    var include$16=[0,sexp_of_t$23,next];
    function sexp_of_t$24(param,t)
     {var _x$_=is_empty(t[1])?cst_open_tail:cst_closed_tail;return [0,_x$_]}
    function create$16(param){return [0,caml_call1(create$13,0)]}
    function collect(t){return t[1]}
    function is_closed(t){return is_full(t[1])}
    function fill_exn(t,v)
     {if(! is_closed(t))return fill(t[1],v);
      var _x__=caml_call1(Sexplib0_Sexp_conv[7],cst_stream_is_closed);
      return caml_call1(Core[253],_x__)}
    function close_exn(t){return fill_exn(t,0)}
    function close_if_open(t)
     {var _x9_=1 - is_closed(t);return _x9_?fill(t[1],0):_x9_}
    function extend(t,v)
     {var next=caml_call1(create$13,0);
      fill_exn(t,[0,v,next]);
      t[1] = next;
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$70);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Tail$0);
    var
     Async_kernel_Tail=
      [0,
       sexp_of_t$24,
       create$16,
       extend,
       close_exn,
       close_if_open,
       is_closed,
       include$16,
       collect];
    caml_register_global(1137,Async_kernel_Tail,"Async_kernel__Tail");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Monitor);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$71);
    caml_call1(Expect_test_collector[5][1],cst_src_monitor_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$72,cst$23);
    function invariant$10(t)
     {function _xT_(param)
       {function _xV_(_x8_){return 0}
        function _xW_(_x7_){return 0}
        function _xX_(_x6_){return 0}
        function _xY_(_x5_){return 0}
        function f(next_error)
         {if(is_empty(next_error))return 0;throw [0,Assert_failure,_gE_]}
        var _xU_=caml_call2(include$5[2],t,f);
        function _xZ_(_x4_){return 0}
        function _x0_(_x3_){return 0}
        function _x1_(_x2_){return 0}
        return caml_call8(Fields[13],_x1_,_x0_,_xZ_,_xU_,_xY_,_xX_,_xW_,_xV_)}
      return caml_call4(include$5[1],_gF_,t,sexp_of_t$0,_xT_)}
    function current_execution_context$2(param)
     {return current_execution_context$1(t$0(0))}
    function current(param){return current_execution_context$2(0)[1]}
    function detach(t){t[8] = 0;return 0}
    function detach_and_iter_errors(t,f)
     {detach(t);
      var
       scheduler=t$0(0),
       execution_context=current_execution_context$1(scheduler),
       handler_state_ref=[0,0];
      function run_f(exn)
       {var _xR_=handler_state_ref[1];
        if(typeof _xR_ === "number")
         {if(_xR_)return 0;throw [0,Assert_failure,_gG_]}
        var bag_elt=_xR_[1];
        try
         {var _xS_=caml_call1(f,exn);return _xS_}
        catch(inner_exn)
         {inner_exn = caml_wrap_exception(inner_exn);
          handler_state_ref[1] = 1;
          caml_call2(Core_Bag[26],t[5],bag_elt);
          throw inner_exn}}
      handler_state_ref[1]
      =
      [0,caml_call2(Core_Bag[23],t[5],[0,execution_context,run_f])];
      return 0}
    function detach_and_get_error_stream(t)
     {detach(t);var tail=create$16(0);t[6] = [0,tail,t[6]];return tail[1]}
    function get_next_error(t){return t[4]}
    function detach_and_get_next_error(t){detach(t);return t[4]}
    function create$17(here,info,name,param)
     {var parent=current(0);
      return create_with_parent(here,info,name,[0,parent])}
    function backtrace(t){return t[2]}
    function extract_exn(t){return t[1]}
    var
     Monitor_exn=
      [248,cst_Async_kernel_Monitor_Monit,runtime.caml_fresh_oo_id(0)];
    function _gN_(param)
     {if(param[1] !== Monitor_exn)throw [0,Assert_failure,_gO_];
      var
       t=param[2],
       monitor=t[4],
       backtrace_history=t[3],
       backtrace=t[2],
       exn=t[1],
       s=caml_call1(Core_Info[9],monitor[1]),
       name=runtime.caml_string_notequal(s,cst$24)?[0,s]:0,
       _xI_=monitor[2];
      if(_xI_)
       var
        here=_xI_[1],
        column=here[4] - here[3] | 0,
        _xJ_=
         Core[541]
          ?caml_call2(Core[257],_gH_,here[1])
          :caml_call5(Core[257],_gM_,here[1],here[2],column,column),
        pos=[0,_xJ_];
      else
       var pos=0;
      if(pos)
       {var _xK_=pos[1];
        if(name)
         var name$0=name[1],_xL_=[0,caml_call3(Core[257],_gI_,name$0,_xK_),0];
        else
         var _xL_=[0,caml_call2(Core[257],_gK_,_xK_),0];
        var monitor$0=_xL_}
      else
       if(name)
        var name$1=name[1],monitor$0=[0,caml_call2(Core[257],_gL_,name$1),0];
       else
        var monitor$0=0;
      if(backtrace)
       var
        backtrace$0=backtrace[1],
        backtrace$1=caml_call1(Base_Backtrace[4],backtrace$0);
      else
       var backtrace$1=0;
      var switch$0=0;
      if(backtrace$1)
       {var rest=backtrace$1[2],t1=backtrace$1[1];
        if(caml_call2(Core_String[57],t1,import0))
         {var switch$1=0;
          if(rest)
           {var rest$0=rest[2],t2=rest[1];
            if(caml_call2(Core_String[57],t2,error))
             {var switch$2=0;
              if(rest$0)
               {var rest$1=rest$0[2],t3=rest$0[1];
                if(caml_call2(Core_String[57],t3,error))
                 {var rest$2=rest$1;switch$2 = 1}}
              if(! switch$2)var rest$2=rest$0;
              var rest$3=rest$2;
              switch$1 = 1}}
          if(! switch$1)var rest$3=rest;
          var traces=rest$3;
          switch$0 = 1}}
      if(! switch$0)var traces=backtrace$1;
      var match=caml_call1(Core_List[34],traces),switch$3=0;
      if(match)
       {var rest$4=match[2],t1$0=match[1];
        if(caml_call2(Core_String[57],t1$0,job_queue))
         {var switch$4=0;
          if(rest$4)
           {var rest$5=rest$4[2],t2$0=rest$4[1];
            if(caml_call2(Core_String[57],t2$0,job_queue))
             {var switch$5=0;
              if(rest$5)
               {var rest$6=rest$5[2],t2$1=rest$5[1],switch$6=0;
                if
                 (!
                  caml_call2(Core_String[57],t2$1,deferred0)
                  &&
                  !
                  caml_call2(Core_String[57],t2$1,deferred1)
                  &&
                  !
                  caml_call2(Core_String[57],t2$1,monitor$1))
                 switch$6 = 1;
                if(! switch$6)
                 {var _xM_=caml_call1(Core_List[34],rest$6);
                  switch$4 = 1;
                  switch$5 = 1}}
              if(! switch$5)
               {var _xM_=caml_call1(Core_List[34],rest$5);switch$4 = 1}}}
          if(! switch$4)var _xM_=caml_call1(Core_List[34],rest$4)}
        else
         switch$3 = 1}
      else
       switch$3 = 1;
      if(switch$3)var _xM_=traces;
      var backtrace$2=caml_call2(Core[157],_xM_,monitor$0);
      function list_if_not_empty(l){return l?[0,l]:0}
      var
       match$0=list_if_not_empty(backtrace$2),
       _xN_=list_if_not_empty(backtrace_history),
       match$1=0;
      if(_xN_)
       var
        v=_xN_[1],
        _xO_=
         [0,
          [1,[0,_gJ_,[0,caml_call2(Core[421],Base_Backtrace[1],v),0]]],
          match$1];
      else
       var _xO_=match$1;
      if(match$0)
       var v$0=match$0[1],_xP_=[0,caml_call2(Core[421],Core[471],v$0),_xO_];
      else
       var _xP_=_xO_;
      var sexp=[1,[0,caml_call1(Core[537],exn),_xP_]];
      if(0 === sexp[0])var _xQ_=[0,sexp,0];else var l=sexp[1],_xQ_=l;
      return [1,
              [0,caml_call1(Sexplib0_Sexp_conv[7],cst_monitor_ml_Error),_xQ_]]}
    caml_call4(Sexplib_Conv[70][1],0,0,Monitor_exn,_gN_);
    function extract_exn$0(exn)
     {if(exn[1] !== Monitor_exn)return exn;var error=exn[2];return error[1]}
    function send_exn(t,opt,exn)
     {if(opt)var sth=opt[1],backtrace=sth;else var backtrace=3553398;
      if(exn[1] === Monitor_exn)
       var exn$0=exn;
      else
       {if(typeof backtrace === "number")
         var backtrace$0=caml_call1(Base_Backtrace[6][5],exn);
        else
         var b=backtrace[2],backtrace$0=[0,b];
        var
         backtrace_history=current_execution_context$2(0)[4],
         exn$0=[0,Monitor_exn,[0,exn,backtrace$0,backtrace_history,t]]}
      if(_bb_)
       log
        (cst_Monitor_send_exn,
         [0,t,exn$0],
         function(param)
          {var
            arg1_004=param[2],
            arg0_003=param[1],
            res0_005=sexp_of_t$0(arg0_003),
            res1_006=caml_call1(Core[537],arg1_004);
           return [1,[0,res0_005,[0,res1_006,0]]]});
      t[7] = 1;
      var scheduler=t$0(0),t$1=t;
      for(;;)
       {fill(t$1[4],exn$0);
        t$1[4] = caml_call1(create$13,0);
        var _xE_=t$1[8];
        if(typeof _xE_ !== "number"){var t$2=_xE_[1],t$1=t$2;continue}
        if(_xE_)
         {var _xF_=caml_call1(Async_kernel_config[31][1],0);
          return got_uncaught_exn(t$0(0),exn$0,_xF_)}
        if(_bb_)
         log
          (cst_Monitor_send_exn_found_lis,
           [0,t$1,exn$0],
           function(param)
            {var
              arg1_008=param[2],
              arg0_007=param[1],
              res0_009=sexp_of_t$0(arg0_007),
              res1_010=caml_call1(Core[537],arg1_008);
             return [1,[0,res0_009,[0,res1_010,0]]]});
        var
         _xG_=
          function(param)
           {var f=param[2],execution_context=param[1];
            return enqueue$0(scheduler,execution_context,f,exn$0)};
        caml_call2(Core_Bag[7],t$1[5],_xG_);
        var _xH_=function(tail){return extend(tail,exn$0)};
        return caml_call2(Core_List[9],t$1[6],_xH_)}}
    function within_context(context,f)
     {function _xD_(param)
       {var match=caml_call1(Core_Result[47],f);
        if(0 === match[0]){var x=match[1];return [0,x]}
        var exn=match[1];
        send_exn(context[1],_gP_,exn);
        return _gQ_}
      return with_execution_context(t$0(0),context,_xD_)}
    function within_gen(monitor,priority,f)
     {var
       tmp_context=
        create_like(monitor,priority,0,current_execution_context$2(0));
      return within_context(tmp_context,f)}
    function within(monitor,priority,f)
     {var match=within_gen(monitor,priority,f);
      if(0 !== match[0])return never(0);
      var d=match[1];
      return d}
    function within_v(monitor,priority,f)
     {var match=within_gen(monitor,priority,f);
      if(0 !== match[0])return 0;
      var x=match[1];
      return [0,x]}
    function within$0(monitor,priority,f)
     {var match=within_gen(monitor,priority,f);return 0 === match[0]?0:0}
    function schedule_with_data(monitor,priority,work,x)
     {var scheduler=t$0(0);
      return enqueue$0
              (scheduler,
               create_like
                (monitor,priority,0,current_execution_context$1(scheduler)),
               work,
               x)}
    function schedule$0(monitor,priority,work)
     {return schedule_with_data(monitor,priority,work,0)}
    function upon_work_fill_i(param)
     {var i=param[2],work=param[1];
      function _xC_(a){return fill(i,a)}
      return upon$1(caml_call1(work,0),_xC_)}
    function schedule$1(monitor,priority,work)
     {var i=caml_call1(create$13,0);
      schedule_with_data(monitor,priority,upon_work_fill_i,[0,work,i]);
      return i}
    function preserve_execution_context(f)
     {var
       scheduler=t$0(0),
       execution_context=current_execution_context$1(scheduler);
      function _xB_(a){return enqueue$0(scheduler,execution_context,f,a)}
      return caml_call1(Core[258],_xB_)}
    function preserve_execution_context$0(f)
     {var
       scheduler=t$0(0),
       execution_context=current_execution_context$1(scheduler);
      function call_and_fill(param)
       {var i=param[3],a=param[2],f=param[1];
        function _xA_(r){return fill(i,r)}
        return upon$1(caml_call1(f,a),_xA_)}
      function _xz_(a)
       {return create$14
                (function(i)
                  {return enqueue$0
                           (scheduler,execution_context,call_and_fill,[0,f,a,i])})}
      return caml_call1(Core[258],_xz_)}
    function stream_iter(stream,f)
     {function loop(stream)
       {function _xy_(param)
         {if(! param)return 0;
          var stream=param[2],v=param[1];
          loop(stream);
          return caml_call1(f,v)}
        return caml_call2(_gs_,caml_call1(include$16[2],stream),_xy_)}
      return loop(stream)}
    function create$18(here,info,name,run,f)
     {var
       monitor=create_with_parent(here,info,name,0),
       exns=detach_and_get_error_stream(monitor),
       ok=523273847 <= run?schedule$1([0,monitor],0,f):within([0,monitor],0,f);
      return [0,ok,exns]}
    function fill_result_and_handle_backgro
     (result_filler,result,exns,handle_exns_after_result)
     {var _xx_=is_empty$0(result_filler);
      return _xx_
              ?(fill$0(result_filler,result),
                caml_call1(handle_exns_after_result,exns))
              :_xx_}
    var
     try_with_log_exn=
      [0,
       function(exn)
        {var
          _xv_=[0,[1,[0,_gR_,[0,caml_call1(Base_Exn[1],exn),0]]],0],
          _xw_=
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7],cst_failed_to_set_Monitor_Expe),
             _xv_]];
         return caml_call1(Core[253],_xw_)}],
     Expert=[0,try_with_log_exn];
    function try_with(here,info,opt,_xt_,_xs_,_xr_,f$0)
     {if(opt)var sth=opt[1],name=sth;else var name=cst$25;
      if(_xt_)
       var sth$0=_xt_[1],do_extract_exn=sth$0;
      else
       var do_extract_exn=0;
      if(_xs_)var sth$1=_xs_[1],run=sth$1;else var run=3903734;
      if(_xr_)var sth$2=_xr_[1],rest=sth$2;else var rest=-146189108;
      var
       match=create$18(here,info,[0,name],run,f$0),
       exns=match[2],
       ok=match[1];
      if(typeof rest === "number")
       if(3804260 <= rest)
        var handle_exn=Expert[1][1];
       else
        var
         parent=current(0),
         handle_exn=function(exn){return send_exn(parent,0,exn)};
      else
       var
        f=rest[2],
        parent$0=current(0),
        handle_exn=
         function(exn)
          {return within$0
                   ([0,parent$0],0,function(param){return caml_call1(f,exn)})};
      function handle_exns_after_result(exns)
       {return stream_iter(exns,handle_exn)}
      return within
              ([0,main],
               0,
               function(param)
                {if(is_determined(ok))
                  {handle_exns_after_result(exns);
                   return caml_call1(_gw_,[0,value_exn$1(ok)])}
                 var
                  match=create$15(0),
                  result=match[2],
                  result_filler=match[1];
                 upon$1
                  (ok,
                   function(res)
                    {return fill_result_and_handle_backgro
                             (result_filler,[0,res],exns,handle_exns_after_result)});
                 function _xu_(param)
                  {if(! param)throw [0,Assert_failure,_gS_];
                   var
                    exns=param[2],
                    exn=param[1],
                    exn$0=do_extract_exn?extract_exn$0(exn):exn;
                   return fill_result_and_handle_backgro
                           (result_filler,[1,exn$0],exns,handle_exns_after_result)}
                 upon$1(caml_call1(include$16[2],exns),_xu_);
                 return result})}
    function try_with_or_error(here,info,opt,extract_exn,rest,f)
     {if(opt)var sth=opt[1],name=sth;else var name=cst_try_with_or_error;
      var arg=Core_Or_error[38];
      function _xq_(eta){return caml_call2(arg,0,eta)}
      return caml_call2
              (_gv_,try_with(here,info,[0,name],extract_exn,_gT_,rest,f),_xq_)}
    function try_with_join_or_error(here,info,opt,extract_exn,rest,f)
     {if(opt)var sth=opt[1],name=sth;else var name=cst_try_with_join_or_error;
      var _xp_=Core_Or_error[27];
      return caml_call2
              (_gv_,
               try_with_or_error(here,info,[0,name],extract_exn,rest,f),
               _xp_)}
    function protect(here,info,opt,extract_exn,run,rest,f,finally$0)
     {if(opt)var sth=opt[1],name=sth;else var name=cst_Monitor_protect;
      function _xg_(r)
       {function _xi_(fr)
         {if(0 === r[0])
           {var _xk_=r[1];if(0 === fr[0])return _xk_;var e=fr[1]}
          else
           {var _xl_=r[1];
            if(0 !== fr[0])
             {var
               finally_exn=fr[1],
               _xm_=[0,[1,[0,_gU_,[0,caml_call1(Core[537],finally_exn),0]]],0],
               _xn_=[0,[1,[0,_gV_,[0,caml_call1(Core[537],_xl_),0]]],_xm_],
               _xo_=
                [1,
                 [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Async_finally),_xn_]];
              return caml_call1(Core[253],_xo_)}
            var e=_xl_}
          throw e}
        var _xj_=try_with(here,info,_gY_,_gX_,_gW_,rest,finally$0);
        return caml_call2(_gx_[2],_xj_,_xi_)}
      var _xh_=try_with(here,info,[0,name],extract_exn,run,rest,f);
      return caml_call2(_gx_[1],_xh_,_xg_)}
    function handle_errors(here,info,name,f,handler)
     {var match=create$18(here,info,name,3903734,f),exns=match[2],ok=match[1];
      stream_iter(exns,handler);
      return ok}
    function catch_stream(here,info,name,f)
     {var
       match=
        create$18
         (here,
          info,
          name,
          3903734,
          function(param){caml_call1(f,0);return caml_call1(_gw_,0)}),
       exns=match[2];
      return exns}
    function catch$0(here,info,name,f)
     {function _xc_(param)
       {if(param){var x=param[1];return x}
        var
         _xf_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Monitor_catch_got_unexpect);
        return caml_call1(Core[253],_xf_)}
      var
       _xd_=catch_stream(here,info,name,f),
       _xe_=caml_call1(include$16[2],_xd_);
      return caml_call2(_gx_[2],_xe_,_xc_)}
    function catch_error(here,info,name,f)
     {var arg=Core_Error[25];
      function _xb_(eta){return caml_call2(arg,0,eta)}
      return caml_call2(_gv_,catch$0(here,info,name,f),_xb_)}
    function parent(t)
     {var _xa_=t[8];
      if(typeof _xa_ === "number")return _xa_?0:0;
      var parent=_xa_[1];
      return [0,parent]}
    function depth(t)
     {var t$0=t,n=0;
      for(;;)
       {var match=parent(t$0);
        if(! match)return n;
        var t$1=match[1],n$0=n + 1 | 0,t$0=t$1,n=n$0}}
    var For_tests=[0,parent,depth];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$73);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Monitor$0);
    var
     include$17=
      [0,
       within,
       within$0,
       within_v,
       schedule$1,
       schedule$0,
       within_context,
       preserve_execution_context,
       preserve_execution_context$0],
     Async_kernel_Monitor=
      [0,
       sexp_of_t$0,
       invariant$10,
       create$17,
       name,
       current,
       detach,
       detach_and_iter_errors,
       detach_and_get_next_error,
       detach_and_get_error_stream,
       get_next_error,
       [0,extract_exn,backtrace],
       Monitor_exn,
       extract_exn$0,
       has_seen_error,
       send_exn,
       try_with,
       try_with_or_error,
       try_with_join_or_error,
       handle_errors,
       catch_stream,
       catch$0,
       catch_error,
       protect,
       main,
       Expert,
       include$17,
       For_tests];
    caml_register_global(1139,Async_kernel_Monitor,"Async_kernel__Monitor");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Async_stream);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$74);
    caml_call1(Expect_test_collector[5][1],cst_src_async_stream_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$75,cst$26);
    var _g0_=include$16[2],_gZ_=include$16[1];
    function first_exn(t)
     {function _w9_(param)
       {if(param){var x=param[1];return x}
        var
         _w$_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Stream_first_of_empty_stre);
        return caml_call1(Core[253],_w$_)}
      var _w__=caml_call1(_g0_,t);
      return caml_call2(_gx_[2],_w__,_w9_)}
    function fold$12(t,init,f)
     {return create$14
              (function(result)
                {function loop(t,b)
                  {function _w6_(param)
                    {if(! param)return fill(result,b);
                     var t=param[2],v=param[1];
                     function _w7_(_w8_){return loop(t,_w8_)}
                     return upon$1(caml_call2(f,b,v),_w7_)}
                   return upon$1(caml_call1(_g0_,t),_w6_)}
                 return loop(t,init)})}
    function fold$13(t,init,f)
     {return create$14
              (function(result)
                {function loop$0(counter,t,b)
                  {var match=peek$0(caml_call1(_g0_,t));
                   if(! match)
                    {var _w5_=function(next){return loop_next(next,b)};
                     return upon$1(caml_call1(_g0_,t),_w5_)}
                   var next=match[1];
                   if(counter >= 50)
                    return caml_trampoline_return(loop_next$0,[0,next,b]);
                   var counter$0=counter + 1 | 0;
                   return loop_next$0(counter$0,next,b)}
                 function loop_next$0(counter,next,b)
                  {if(! next)return fill(result,b);
                   var t=next[2],v=next[1],_w4_=caml_call2(f,b,v);
                   if(counter >= 50)
                    return caml_trampoline_return(loop$0,[0,t,_w4_]);
                   var counter$0=counter + 1 | 0;
                   return loop$0(counter$0,t,_w4_)}
                 function loop(t,b){return caml_trampoline(loop$0(0,t,b))}
                 function loop_next(next,b)
                  {return caml_trampoline(loop_next$0(0,next,b))}
                 return loop(t,init)})}
    function length$3(t)
     {return fold$13(t,0,function(n,param){return n + 1 | 0})}
    function iter$11(t,f)
     {return fold$12(t,0,function(param,v){return caml_call1(f,v)})}
    function closed(t)
     {var match=peek$0(caml_call1(_g0_,t));
      if(match && ! match[1])return caml_call1(_gw_,0);
      return iter$11(t,function(param){return caml_call1(_gw_,0)})}
    function iter$12(t,f)
     {iter$11(t,function(a){caml_call1(f,a);return caml_call1(_gw_,0)});
      return 0}
    function create$19(f)
     {var tail=create$16(0),t=tail[1];caml_call1(f,tail);return t}
    function unfold(b,f)
     {return create$19
              (function(tail)
                {function loop(b)
                  {function _w3_(param)
                    {if(! param)return close_exn(tail);
                     var match=param[1],b=match[2],a=match[1];
                     extend(tail,a);
                     return loop(b)}
                   return upon$1(caml_call1(f,b),_w3_)}
                 return loop(b)})}
    function of_list$0(l)
     {return create$19
              (function(tail)
                {function _w2_(x){return extend(tail,x)}
                 caml_call2(Core_List[9],l,_w2_);
                 return close_exn(tail)})}
    function to_list$12(s)
     {var _w1_=Core_List[34];
      return caml_call2
              (_gv_,
               fold$12(s,0,function(b,a){return caml_call1(_gw_,[0,a,b])}),
               _w1_)}
    function copy_to_tail(t,tail)
     {return iter$11(t,function(a){return caml_call1(_gw_,extend(tail,a))})}
    function append(t1,t2)
     {return create$19
              (function(tail)
                {function _wZ_(param)
                  {function _w0_(param){return close_exn(tail)}
                   return upon$1(copy_to_tail(t2,tail),_w0_)}
                 return upon$1(copy_to_tail(t1,tail),_wZ_)})}
    function concat$0(t)
     {return create$19
              (function(tail)
                {function _wY_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11(t,function(t){return copy_to_tail(t,tail)}),_wY_)})}
    function filter_deprecated(t,f)
     {return create$19
              (function(tail)
                {function _wV_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11
                           (t,
                            function(a)
                             {function _wW_(param){return param?extend(tail,a):0}
                              var _wX_=caml_call1(_gw_,caml_call1(f,a));
                              return caml_call2(_gx_[2],_wX_,_wW_)}),
                          _wV_)})}
    function filter_map_deprecated(t,f)
     {return create$19
              (function(tail)
                {function _wS_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11
                           (t,
                            function(a)
                             {function _wT_(param)
                               {if(! param)return 0;var v=param[1];return extend(tail,v)}
                              var _wU_=caml_call1(_gw_,caml_call1(f,a));
                              return caml_call2(_gx_[2],_wU_,_wT_)}),
                          _wS_)})}
    function map$15(t,f)
     {return create$19
              (function(tail)
                {function _wP_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11
                           (t,
                            function(v)
                             {function _wQ_(_wR_){return extend(tail,_wR_)}
                              return caml_call2(_gv_,caml_call1(f,v),_wQ_)}),
                          _wP_)})}
    function map$16(t,f)
     {return map$15(t,function(a){return caml_call1(_gw_,caml_call1(f,a))})}
    function first_n(s,n)
     {return create$19
              (function(tail)
                {function loop(s,n)
                  {if(caml_call2(Core[90],n,0))return close_exn(tail);
                   function _wO_(param)
                    {if(! param)return close_exn(tail);
                     var t=param[2],x=param[1];
                     extend(tail,x);
                     return loop(t,n - 1 | 0)}
                   return upon$1(caml_call1(_g0_,s),_wO_)}
                 return loop(s,n)})}
    function available_now(t)
     {var t$0=t,ac=0;
      for(;;)
       {var match=peek$0(caml_call1(_g0_,t$0));
        if(match)
         {var _wN_=match[1];
          if(_wN_)
           {var t$1=_wN_[2],x=_wN_[1],ac$0=[0,x,ac],t$0=t$1,ac=ac$0;continue}}
        return [0,caml_call1(Core_List[34],ac),t$0]}}
    function split(opt,_wI_,t)
     {if(opt)var sth=opt[1],stop=sth;else var stop=never(0);
      if(_wI_)
       var sth$0=_wI_[1],f=sth$0;
      else
       var f=function(param){return 192584839};
      var reason_for_stopping=caml_call1(create$13,0),prefix=create$16(0);
      function finish(v){close_exn(prefix);return fill(reason_for_stopping,v)}
      function loop(t)
       {function _wJ_(param)
         {if(typeof param === "number")return finish([0,280164845,t]);
          var o=param[2];
          if(! o)return finish(1144100);
          var t$0=o[2],a=o[1],match=caml_call1(f,a);
          if(typeof match === "number"){extend(prefix,a);return loop(t$0)}
          var b=match[2];
          return finish([0,398750242,[0,b,t$0]])}
        var _wK_=0;
        function _wL_(o){return [0,870035731,o]}
        var _wM_=[0,[0,caml_call1(_g0_,t),_wL_],_wK_];
        return caml_call2
                (_gs_,
                 choose([0,[0,stop,function(param){return 280164845}],_wM_]),
                 _wJ_)}
      loop(t);
      return [0,prefix[1],reason_for_stopping]}
    function find(t,f)
     {var
       match=
        split
         (0,
          [0,function(a){return caml_call1(f,a)?[0,398750242,a]:192584839}],
          t),
       found=match[2];
      function _wH_(x)
       {if(typeof x !== "number" && 398750242 > x[1])
         throw [0,Assert_failure,_g1_];
        return x}
      return caml_call2(_gx_[2],found,_wH_)}
    function ungroup(t)
     {return create$19
              (function(tail)
                {function _wF_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11
                           (t,
                            function(l)
                             {function _wG_(x){return extend(tail,x)}
                              caml_call2(Core_List[9],l,_wG_);
                              return caml_call1(_gw_,0)}),
                          _wF_)})}
    function interleave(ts)
     {return create$19
              (function(tail)
                {var num_open=[0,1];
                 function close(param)
                  {num_open[1] = num_open[1] - 1 | 0;
                   var _wE_=caml_call2(Core[90],num_open[1],0);
                   return _wE_?close_exn(tail):_wE_}
                 var
                  outer_closed=
                   iter$11
                    (ts,
                     function(t)
                      {num_open[1] = num_open[1] + 1 | 0;
                       upon$1(copy_to_tail(t,tail),close);
                       return caml_call1(_gw_,0)});
                 return upon$1(outer_closed,close)})}
    function take_until(t,d)
     {return create$19
              (function(tail)
                {function loop(t)
                  {function _wz_(param)
                    {if(typeof param !== "number")
                      {var _wD_=param[2];
                       if(_wD_)
                        {var t=_wD_[2],x=_wD_[1];extend(tail,x);return loop(t)}}
                     return close_exn(tail)}
                   var _wA_=0;
                   function _wB_(z){return [0,870035731,z]}
                   var _wC_=[0,[0,caml_call1(_g0_,t),_wB_],_wA_];
                   return upon$1
                           (choose([0,[0,d,function(param){return 926227490}],_wC_]),
                            _wz_)}
                 return loop(t)})}
    function iter_durably(t,f)
     {return create$14
              (function(result)
                {function loop(t)
                  {function _wx_(param)
                    {if(! param)return fill(result,0);
                     var t=param[2],x=param[1];
                     function _wy_(z)
                      {loop(t);
                       if(0 === z[0])return 0;
                       var e=z[1];
                       return send_exn(current(0),0,e)}
                     return caml_call2
                             (_gs_,
                              try_with
                               (0,0,0,0,_g3_,_g2_,function(param){return caml_call1(f,x)}),
                              _wy_)}
                   return caml_call2(_gs_,caml_call1(_g0_,t),_wx_)}
                 return loop(t)})}
    function iter_durably_report_end(t,f)
     {return create$14
              (function(result)
                {function loop(t)
                  {function _ww_(param)
                    {if(! param)return fill(result,0);
                     var t=param[2],x=param[1];
                     loop(t);
                     return caml_call1(f,x)}
                   return caml_call2(_gs_,caml_call1(_g0_,t),_ww_)}
                 return loop(t)})}
    function iter_durably$0(t,f){iter_durably_report_end(t,f);return 0}
    function of_fun(f)
     {return unfold
              (0,
               function(param)
                {function _wu_(a){return [0,[0,a,0]]}
                 var _wv_=caml_call1(f,0);
                 return caml_call2(_gx_[2],_wv_,_wu_)})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$76);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Async_stream$0);
    var
     Async_kernel_Async_stream=
      [0,
       _gZ_,
       create$19,
       _g0_,
       first_exn,
       of_list$0,
       to_list$12,
       of_fun,
       copy_to_tail,
       append,
       concat$0,
       available_now,
       filter_deprecated,
       filter_map_deprecated,
       fold$12,
       fold$13,
       iter$11,
       closed,
       iter$12,
       take_until,
       iter_durably,
       iter_durably$0,
       iter_durably_report_end,
       length$3,
       map$15,
       map$16,
       first_n,
       unfold,
       split,
       find,
       ungroup,
       interleave];
    caml_register_global
     (1140,Async_kernel_Async_stream,"Async_kernel__Async_stream");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Time_source_i);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$77);
    caml_call1(Expect_test_collector[5][1],cst_src_time_source_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$78,cst$27);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$79);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Time_source_i$0);
    var Async_kernel_Time_source_intf=[0];
    caml_register_global
     (1141,Async_kernel_Time_source_intf,"Async_kernel__Time_source_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Bvar);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$80);
    caml_call1(Expect_test_collector[5][1],cst_src_bvar_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$81,cst$28);
    function ivar(r){return r[2]}
    function set_ivar(r,v){r[2] = v;return 0}
    function has_any_waiters(r){return r[1]}
    function set_has_any_waiters(r,v){r[1] = v;return 0}
    function _g4_(r,v){return [0,r[1],v]}
    var
     _g5_=[0,set_ivar],
     ivar$0=[0,function(param){return 0},cst_ivar,_g5_,ivar,_g4_];
    function _g6_(r,v){return [0,v,r[2]]}
    var
     _g7_=[0,set_has_any_waiters],
     has_any_waiters$0=
      [0,
       function(param){return 0},
       cst_has_any_waiters,
       _g7_,
       has_any_waiters,
       _g6_];
    function invariant$11(invariant_a,param,t)
     {var repr=caml_call1(Bvar[2],t);
      function _wr_(param)
       {function check(f){return caml_call2(include$5[2],repr,f)}
        var
         ivar_fun=
          check
           (function(ivar)
             {invariant$7(invariant_a,ivar);
              if(is_empty(ivar))return 0;
              throw [0,Assert_failure,_g__]}),
         has_any_waiters_fun=
          check
           (function(has_any_waiters)
             {var _wt_=has_handlers(repr[2]);
              if(! _wt_)return _wt_;
              if(has_any_waiters)return 0;
              throw [0,Assert_failure,_g$_]});
        caml_call1(has_any_waiters_fun,has_any_waiters$0);
        return caml_call1(ivar_fun,ivar$0)}
      function _ws_(x_007)
       {function of_a_001(param){return _ha_}
        var
         has_any_waiters_003=x_007[1],
         ivar_005=x_007[2],
         arg_006=sexp_of_t$20(of_a_001,ivar_005),
         bnds_002=[0,[1,[0,_g8_,[0,arg_006,0]]],0],
         arg_004=caml_call1(Core[305],has_any_waiters_003),
         bnds_002$0=[0,[1,[0,_g9_,[0,arg_004,0]]],bnds_002];
        return [1,bnds_002$0]}
      return caml_call4(include$5[1],_hb_,repr,_ws_,_wr_)}
    function sexp_of_t$25(param,_wq_,t)
     {var match=caml_call1(Bvar[2],t),has_any_waiters=match[1];
      return [1,[0,_hc_,[0,caml_call1(Core[305],has_any_waiters),0]]]}
    var _hd_=Bvar$0[1];
    function broadcast(t,a)
     {var
       repr=caml_call1(Bvar[2],t),
       _wo_=repr[1],
       _wp_=
        _wo_
         ?(repr[1] = 0,fill(repr[2],a),repr[2] = caml_call1(create$13,0),0)
         :_wo_;
      return _wp_}
    function wait(t)
     {var repr=caml_call1(Bvar[2],t);repr[1] = 1;return repr[2]}
    function has_any_waiters$1(t)
     {var repr=caml_call1(Bvar[2],t);return repr[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$82);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Bvar$0);
    var
     Async_kernel_Bvar=
      [0,sexp_of_t$25,invariant$11,_hd_,wait,broadcast,has_any_waiters$1];
    caml_register_global(1142,Async_kernel_Bvar,"Async_kernel__Bvar");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Time_source);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$83);
    caml_call1(Expect_test_collector[5][1],cst_src_time_source_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$84,cst$29);
    var Job_or_event$1=T1[2],invariant_with_jobs$1=T1[20],invariant$12=T1[21];
    function sexp_of_t$26(param,_wj_)
     {var events=_wj_[4],is_wall_clock=_wj_[8];
      if(is_wall_clock)
       return caml_call1(Sexplib0_Sexp_conv[7],cst_wall_clock$0);
      var _wk_=0,_wl_=0;
      function _wm_(param){return _he_}
      var
       _wn_=
        [0,[1,[0,_hf_,[0,caml_call2(Timing_wheel[2],_wm_,events),_wl_]]],_wk_];
      return [1,
              [0,[1,[0,_hg_,[0,caml_call1(Core[305],is_wall_clock),0]]],_wn_]]}
    function sexp_of_t$27(x_002){return sexp_of_t$26(Core[202],x_002)}
    var Read_write$0=[0,sexp_of_t$27,invariant$12,invariant_with_jobs$1];
    function sexp_of_t$28(x_003){return sexp_of_t$26(Core[171],x_003)}
    function read_only$0(t){return t}
    function alarm_precision$0(t){return caml_call1(Timing_wheel[10],t[4])}
    function is_wall_clock$2(t){return t[8]}
    function next_alarm_fires_at$0(t)
     {return caml_call1(Timing_wheel[38],t[4])}
    function timing_wheel_now$1(t){return caml_call1(Timing_wheel[11],t[4])}
    function id$4(t){return t[1]}
    function now$0(t){return t[8]?caml_call1(_X_,0):timing_wheel_now$1(t)}
    var send_exn$0=[0,send_exn];
    function advance(t,to){return advance_clock(t,to,send_exn$0)}
    function advance_by(t,by){return advance(t,after(now$0(t),by))}
    function fire_past_alarms$0(t){return fire_past_alarms(t,send_exn$0)}
    function yield$2(t){return wait(t[9][24])}
    function advance_by_alarms$0(wait_for,t,to)
     {function run_queued_alarms(param)
       {if(! wait_for)return yield$2(t);
        var f=wait_for[1];
        return caml_call1(f,0)}
      function finish(param)
       {advance(t,to);fire_past_alarms$0(t);return run_queued_alarms(0)}
      function walk_alarms(param)
       {for(;;)
         {var match=caml_call1(Timing_wheel[35],t[4]);
          if(! match)return finish(0);
          var min_alarm_time_in_min_interval=match[1];
          if(caml_call2(_aN_,min_alarm_time_in_min_interval,to))
           return finish(0);
          advance(t,min_alarm_time_in_min_interval);
          fire_past_alarms$0(t);
          var queued_alarms_ran=run_queued_alarms(0);
          if(is_determined(queued_alarms_ran))continue;
          var _wi_=function(param){return walk_alarms(0)};
          return caml_call2(_gx_[1],queued_alarms_ran,_wi_)}}
      fire_past_alarms$0(t);
      function _wg_(param){return walk_alarms(0)}
      var _wh_=run_queued_alarms(0);
      return caml_call2(_gx_[1],_wh_,_wg_)}
    function advance_by_max_alarms_in_each_$0(wait_for,t,to)
     {function run_queued_alarms(param)
       {if(! wait_for)return yield$2(t);
        var f=wait_for[1];
        return caml_call1(f,0)}
      function finish(param)
       {advance(t,to);fire_past_alarms$0(t);return run_queued_alarms(0)}
      function walk_alarms(param)
       {for(;;)
         {var match=next_alarm_fires_at$0(t);
          if(! match)return finish(0);
          var next_alarm_fires_at=match[1];
          if(caml_call2(_aN_,next_alarm_fires_at,to))return finish(0);
          advance(t,caml_call1(Timing_wheel[36],t[4]));
          fire_past_alarms$0(t);
          var queued_alarms_ran=run_queued_alarms(0);
          if(is_determined(queued_alarms_ran))continue;
          var _wf_=function(param){return walk_alarms(0)};
          return caml_call2(_gx_[1],queued_alarms_ran,_wf_)}}
      fire_past_alarms$0(t);
      function _wd_(param){return walk_alarms(0)}
      var _we_=run_queued_alarms(0);
      return caml_call2(_gx_[1],_we_,_wd_)}
    function advance_by_alarms_by(wait_for,t,by)
     {return advance_by_alarms$0(wait_for,t,after(now$0(t),by))}
    function span_to_time(t,span){return after(now$0(t),span)}
    function run_at_internal(t,time,f$0,a)
     {var execution_context=current_execution_context$1(t[9]);
      if(! caml_call2(_aQ_,time,caml_call1(Timing_wheel[11],t[4])))
       {enqueue$0(t[9],execution_context,f$0,a);
        return caml_call1(Timing_wheel[5][2],0)}
      var
       _wa_=create_job(t[9],execution_context,f$0,a),
       _wb_=caml_call1(Job_or_event$1[2],_wa_),
       alarm=caml_call3(Timing_wheel[25],t[4],time,_wb_),
       _wc_=t[9][23];
      if(_wc_){var f=_wc_[1];caml_call1(f,time)}
      return alarm}
    function run_at$0(t,time,f,a){run_at_internal(t,time,f,a);return 0}
    function run_after$0(t,span,f,a)
     {return run_at$0(t,span_to_time(t,span),f,a)}
    function fill$1(result){return fill(result,0)}
    function at$3(t,time)
     {if(caml_call2(_aO_,time,caml_call1(Timing_wheel[11],t[4])))
       return caml_call1(_gw_,0);
      var result=caml_call1(create$13,0);
      run_at_internal(t,time,fill$1,result);
      return result}
    function after$1(t,span){return at$3(t,span_to_time(t,span))}
    function remove_alarm(t,alarm)
     {var
       job_or_event=caml_call2(Timing_wheel[5][5],t[4],alarm),
       k=caml_call1(Job_or_event$1[5][1],job_or_event),
       match=caml_call2(Job_or_event$1[5][2],k,job_or_event);
      if(! k)throw [0,Assert_failure,_hh_];
      free_job(t[9],match);
      return caml_call2(Timing_wheel[28],t[4],alarm)}
    function sexp_of_t$29(of_a_008,of_h_009,param)
     {if(0 === param[0])
       {var arg0_010=param[1],res0_011=caml_call1(of_a_008,arg0_010);
        return [1,[0,_hi_,[0,res0_011,0]]]}
      var arg0_012=param[1],res0_013=caml_call1(of_h_009,arg0_012);
      return [1,[0,_hj_,[0,res0_013,0]]]}
    var Fired=[0,sexp_of_t$29];
    function scheduled_at$0(r){return r[5]}
    function set_scheduled_at(r,v){r[5] = v;return 0}
    function num_fires_to_skip(r){return r[4]}
    function set_num_fires_to_skip(r,v){r[4] = v;return 0}
    function fired(r){return r[3]}
    function alarm$2(r){return r[1]}
    function set_alarm$1(r,v){r[1] = v;return 0}
    function _hk_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6]]}
    var
     _hl_=[0,set_scheduled_at],
     scheduled_at$1=
      [0,function(param){return 0},cst_scheduled_at,_hl_,scheduled_at$0,_hk_];
    function _hm_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6]]}
    var
     _hn_=[0,set_num_fires_to_skip],
     num_fires_to_skip$0=
      [0,
       function(param){return 0},
       cst_num_fires_to_skip,
       _hn_,
       num_fires_to_skip,
       _hm_];
    function _ho_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6]]}
    var
     _hp_=0,
     fired$0=[0,function(param){return 0},cst_fired,_hp_,fired,_ho_];
    function _hq_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6]]}
    var
     _hr_=[0,set_alarm$1],
     alarm$3=[0,function(param){return 0},cst_alarm$0,_hr_,alarm$2,_hq_];
    function sexp_of_t$30(of_a_016,of_h_017,param)
     {var
       alarm_019=param[1],
       fired_023=param[3],
       num_fires_to_skip_025=param[4],
       scheduled_at_027=param[5],
       time_source_029=param[6],
       arg_030=sexp_of_t$12(time_source_029),
       bnds_018=[0,[1,[0,_hs_,[0,arg_030,0]]],0],
       arg_028=caml_call1(_aL_,scheduled_at_027),
       bnds_018$0=[0,[1,[0,_ht_,[0,arg_028,0]]],bnds_018],
       arg_026=caml_call1(Core[356],num_fires_to_skip_025),
       bnds_018$1=[0,[1,[0,_hu_,[0,arg_026,0]]],bnds_018$0],
       arg_024=sexp_of_t$20(caml_call2(Fired[1],of_a_016,of_h_017),fired_023),
       bnds_018$2=[0,[1,[0,_hv_,[0,arg_024,0]]],bnds_018$1];
      function _v__(_v$_){return 0}
      var
       arg_022=caml_call1(Sexplib0_Sexp_conv[24],_v__),
       bnds_018$3=[0,[1,[0,_hw_,[0,arg_022,0]]],bnds_018$2],
       arg_020=caml_call2(Timing_wheel[5][1],Job_or_event$1[6],alarm_019),
       bnds_018$4=[0,[1,[0,_hx_,[0,arg_020,0]]],bnds_018$3];
      return [1,bnds_018$4]}
    function sexp_of_t_unit(x_031)
     {return sexp_of_t$30(Core[518],Core[518],x_031)}
    function fired$1(t){return t[3]}
    function invariant$13(invariant_a,invariant_h,t)
     {function _v3_(param)
       {var events=t[6][4];
        function check(f){return caml_call2(include$5[2],t,f)}
        var
         scheduled_at_fun=
          check
           (function(got)
             {var _v9_=caml_call2(Timing_wheel[27],events,t[1]);
              if(! _v9_)return _v9_;
              var
               expect=caml_call2(Timing_wheel[5][3],events,t[1]),
               equal=0,
               message=0,
               here=0;
              function comparator(a_033,b_034)
               {return caml_call2(_aU_,a_033,b_034)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$4,
                       _aL_,
                       comparator,
                       here,
                       message,
                       equal,
                       expect,
                       got)}),
         num_fires_to_skip_fun=
          check
           (function(num_fires_to_skip)
             {if(caml_call2(symbol,num_fires_to_skip,0))return 0;
              throw [0,Assert_failure,_hy_]}),
         fired_fun=
          check
           (function(fired)
             {var match=peek$0(fired);
              if(! match)return 0;
              var _v8_=match[1];
              if(0 === _v8_[0])
               {var a=_v8_[1];return caml_call1(invariant_a,a)}
              var h=_v8_[1];
              return caml_call1(invariant_h,h)}),
         alarm_fun=
          check
           (function(alarm)
             {if(is_full(t[3]))
               {if(caml_call2(Timing_wheel[27],events,alarm))
                 throw [0,Assert_failure,_hz_];
                return 0}
              var _v6_=caml_call2(Timing_wheel[27],events,alarm);
              if(! _v6_)return _v6_;
              var _v7_=caml_call2(Timing_wheel[5][5],events,alarm);
              if(caml_call1(Job_or_event$1[4],_v7_))return 0;
              throw [0,Assert_failure,_hA_]});
        caml_call1(alarm_fun,alarm$3);
        caml_call1(fired_fun,fired$0);
        caml_call1(num_fires_to_skip_fun,num_fires_to_skip$0);
        caml_call1(scheduled_at_fun,scheduled_at$1);
        return 0}
      function _v4_(x_032)
       {function _v5_(param){return _hB_}
        return sexp_of_t$30(function(param){return _hC_},_v5_,x_032)}
      return caml_call4(include$5[1],_hD_,t,_v4_,_v3_)}
    function sexp_of_t$31(of_a_035,of_h_036,param)
     {switch(param[0])
       {case 0:
         var arg0_037=param[1],res0_038=caml_call1(of_a_035,arg0_037);
         return [1,[0,_hE_,[0,res0_038,0]]];
        case 1:
         var arg0_039=param[1],res0_040=caml_call1(of_h_036,arg0_039);
         return [1,[0,_hF_,[0,res0_040,0]]];
        default:
         var arg0_041=param[1],res0_042=caml_call1(_aL_,arg0_041);
         return [1,[0,_hG_,[0,res0_042,0]]]}}
    var Status$1=[0,sexp_of_t$31];
    function status$2(t)
     {var match=peek$0(t[3]);
      if(! match)return [2,t[5]];
      var _v2_=match[1];
      if(0 === _v2_[0]){var a=_v2_[1];return [0,a]}
      var h=_v2_[1];
      return [1,h]}
    function sexp_of_t$32(of_a_045,of_h_046,param)
     {if(typeof param === "number")return _hH_;
      if(0 === param[0])
       {var arg0_047=param[1],res0_048=caml_call1(of_a_045,arg0_047);
        return [1,[0,_hI_,[0,res0_048,0]]]}
      var arg0_049=param[1],res0_050=caml_call1(of_h_046,arg0_049);
      return [1,[0,_hJ_,[0,res0_050,0]]]}
    var Abort_result$0=[0,sexp_of_t$32];
    function abort$0(t,a)
     {if(_a7_)
       log
        (cst_Time_source_Event_abort,
         t,
         function(x_053)
          {function _v1_(param){return _hK_}
           return sexp_of_t$30(function(param){return _hL_},_v1_,x_053)});
      var match=peek$0(t[3]);
      if(! match)
       {fill(t[3],[0,a]);
        var _vZ_=t[1],_v0_=t[6];
        if(caml_call2(Timing_wheel[27],_v0_[4],_vZ_))remove_alarm(_v0_,_vZ_);
        return 0}
      var _vY_=match[1];
      if(0 === _vY_[0]){var a$0=_vY_[1];return [0,a$0]}
      var h=_vY_[1];
      return [1,h]}
    function abort_exn$0(t,a)
     {var match=abort$0(t,a);
      if(typeof match === "number")return 0;
      if(0 === match[0])
       {var
         _vW_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Clock_Event_abort_exn_fail);
        return caml_call1(Core[253],_vW_)}
      var
       _vX_=
        caml_call1(Sexplib0_Sexp_conv[7],cst_Clock_Event_abort_exn_fail$0);
      return caml_call1(Core[253],_vX_)}
    function abort_if_possible$0(t,a){abort$0(t,a);return 0}
    function schedule$2(t){t[1] = run_at_internal(t[6],t[5],t[2],0);return 0}
    function sexp_of_t$33(of_a_054,of_h_055,param)
     {if(typeof param === "number")return _hM_;
      if(0 === param[0])
       {var arg0_056=param[1],res0_057=caml_call1(of_a_054,arg0_056);
        return [1,[0,_hN_,[0,res0_057,0]]]}
      var arg0_058=param[1],res0_059=caml_call1(of_h_055,arg0_058);
      return [1,[0,_hO_,[0,res0_059,0]]]}
    var Reschedule_result=[0,sexp_of_t$33];
    function reschedule_at$0(t,at)
     {if(_a7_)
       log
        (cst_Time_source_Event_reschedu,
         [0,t,at],
         function(param)
          {var arg1_063=param[2],arg0_062=param[1];
           function _vV_(param){return _hP_}
           var
            res0_064=sexp_of_t$30(function(param){return _hQ_},_vV_,arg0_062),
            res1_065=caml_call1(_aL_,arg1_063);
           return [1,[0,res0_064,[0,res1_065,0]]]});
      var match=peek$0(t[3]);
      if(match)
       {var _vU_=match[1];
        if(0 === _vU_[0]){var a=_vU_[1];return [0,a]}
        var h=_vU_[1];
        return [1,h]}
      var
       events=t[6][4],
       is_in_timing_wheel=caml_call2(Timing_wheel[27],events,t[1]),
       am_trying_to_reschedule_in_the=
        caml_call2(_aQ_,at,caml_call1(Timing_wheel[11],events));
      t[5] = at;
      if(am_trying_to_reschedule_in_the)
       if(is_in_timing_wheel)
        caml_call3(Timing_wheel[29],events,t[1],at);
       else
        {t[4] = t[4] + 1 | 0;schedule$2(t)}
      else
       if(is_in_timing_wheel)
        {caml_call1(t[6][7],t[1]);caml_call2(Timing_wheel[28],events,t[1])}
      return 0}
    function reschedule_after$0(t,span)
     {return reschedule_at$0(t,span_to_time(t[6],span))}
    function run_at$1(time_source,scheduled_at,f,z)
     {if(_a7_)log(cst_Time_source_Event_run_at,scheduled_at,_aL_);
      var _vN_=0,_vO_=caml_call1(create$13,0);
      function _vP_(_vT_){return 0}
      var
       t=
        [0,
         caml_call1(Timing_wheel[5][2],0),
         _vP_,
         _vO_,
         _vN_,
         scheduled_at,
         time_source];
      function fire(param)
       {var _vQ_=is_empty(t[3]);
        if(_vQ_)
         {if(caml_call2(symbol$2,t[4],0)){t[4] = t[4] - 1 | 0;return 0}
          var result=caml_call1(f,z),_vR_=is_empty(t[3]);
          if(_vR_)return fill(t[3],[1,result]);
          var _vS_=_vR_}
        else
         var _vS_=_vQ_;
        return _vS_}
      t[2] = fire;
      schedule$2(t);
      return t}
    function at$4(time_source,time)
     {var _vL_=0;
      return run_at$1(time_source,time,function(_vM_){return 0},_vL_)}
    function run_after$1(time_source,span,f,a)
     {return run_at$1(time_source,span_to_time(time_source,span),f,a)}
    function after$2(time_source,span)
     {return at$4(time_source,span_to_time(time_source,span))}
    function at_times(opt,t,next_time)
     {if(opt)var sth=opt[1],stop=sth;else var stop=never(0);
      var tail=create$16(0);
      function loop(param)
       {function _vH_(param)
         {return 936767357 <= param?(extend(tail,0),loop(0)):close_exn(tail)}
        var _vI_=0;
        function _vJ_(param){return 936767357}
        var _vK_=[0,[0,at$3(t,caml_call1(next_time,0)),_vJ_],_vI_];
        return upon$1
                (choose([0,[0,stop,function(param){return 926227490}],_vK_]),
                 _vH_)}
      loop(0);
      return tail[1]}
    function at_varying_intervals(stop,t,compute_span)
     {return at_times
              (stop,
               t,
               function(param)
                {var _vG_=caml_call1(compute_span,0);
                 return after(now$0(t),_vG_)})}
    function at_intervals$0(start,stop,t,interval)
     {if(start)var x=start[1],start$0=x;else var start$0=now$0(t);
      return at_times
              (stop,
               t,
               function(param)
                {return caml_call5(_ak_,0,start$0,now$0(t),interval,0)})}
    var immediately=0;
    function run_repeatedly(opt,stop,_vC_,_vB_,t,f,continue$0)
     {if(opt)var sth=opt[1],start=sth;else var start=caml_call1(_gw_,0);
      if(_vC_)
       var sth$0=_vC_[1],continue_on_error=sth$0;
      else
       var continue_on_error=1;
      if(_vB_)
       var sth$1=_vB_[1],finished=sth$1;
      else
       var finished=caml_call1(create$13,0);
      return upon$1
              (start,
               function(param)
                {var alarm=[0,caml_call1(Timing_wheel[5][2],0)];
                 if(stop)
                  {var stop$0=stop[1];
                   upon$1
                    (stop$0,
                     function(param)
                      {var _vF_=caml_call2(Timing_wheel[27],t[4],alarm[1]);
                       return _vF_
                               ?(remove_alarm(t,alarm[1]),fill_if_empty(finished,0))
                               :_vF_});
                   var stop$1=stop$0}
                 else
                  var stop$1=never(0);
                 function continue_f(param)
                  {if(is_determined(stop$1))return fill_if_empty(finished,0);
                   var _vD_=0;
                   if(typeof continue$0 === "number")
                    var _vE_=caml_call1(Timing_wheel[11],t[4]);
                   else
                    if(0 === continue$0[0])
                     var span=continue$0[1],_vE_=span_to_time(t,span);
                    else
                     var
                      interval=continue$0[2],
                      base=continue$0[1],
                      _vE_=caml_call5(_ak_,0,base,now$0(t),interval,0);
                   alarm[1] = run_at_internal(t,_vE_,run_f,_vD_);
                   return 0}
                 function run_f(param)
                  {if(is_determined(stop$1))return fill_if_empty(finished,0);
                   if(continue_on_error)
                    return upon$1
                            (try_with(0,0,0,0,_hS_,_hR_,f),continue_try_with);
                   var d=caml_call1(f,0);
                   return is_determined(d)?continue_f(0):upon$1(d,continue_f)}
                 function continue_try_with(or_error)
                  {if(0 !== or_error[0])
                    {var error=or_error[1];send_exn(current(0),0,error)}
                   return continue_f(0)}
                 return run_f(0)})}
    function every(start,stop,continue_on_error,finished,t,span,f)
     {if(caml_call2(Core_Time_ns[1][16],span,Core_Time_ns[1][75]))
       {var
         _vz_=[0,[1,[0,_hT_,[0,caml_call1(Core_Time_ns[1][10],span),0]]],0],
         _vA_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Time_source_every_got_nonp),
            _vz_]];
        caml_call1(Core[253],_vA_)}
      return run_repeatedly
              (start,stop,continue_on_error,finished,t,f,[0,span])}
    function every$0(start,stop,continue_on_error,t,span,f)
     {return every
              (start,
               stop,
               continue_on_error,
               0,
               t,
               span,
               function(param){caml_call1(f,0);return caml_call1(_gw_,0)})}
    function run_at_intervals$0(start,stop,continue_on_error,t,interval,f)
     {var now=now$0(t);
      if(start)
       var
        start$0=start[1],
        start$1=[0,at$3(t,caml_call5(_ak_,_hU_,start$0,now,interval,0))],
        base=start$0;
      else
       var start$1=0,base=now;
      return run_repeatedly
              (start$1,stop,continue_on_error,0,t,f,[1,base,interval])}
    function run_at_intervals$1(start,stop,continue_on_error,t,interval,f)
     {return run_at_intervals$0
              (start,
               stop,
               continue_on_error,
               t,
               interval,
               function(param){caml_call1(f,0);return caml_call1(_gw_,0)})}
    function with_timeout(t,span,d)
     {var timeout=after$2(t,span),_vu_=0;
      function _vv_(param)
       {if(0 !== param[0])return 642269825;
        var
         _vy_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Time_source_with_timeout_b);
        return caml_call1(Core[253],_vy_)}
      var _vw_=[0,[0,timeout[3],_vv_],_vu_];
      return choose
              ([0,
                [0,
                 d,
                 function(v)
                  {var match=abort$0(timeout,0),switch$0=0;
                   if(typeof match !== "number" && 0 === match[0])
                    {var
                      _vx_=
                       caml_call1
                        (Sexplib0_Sexp_conv[7],cst_Time_source_with_timeout_b$0);
                     caml_call1(Core[253],_vx_);
                     switch$0 = 1}
                   return [0,1025039613,v]}],
                _vw_])}
    function duration_of$0(t,f)
     {var start=now$0(t);
      function _vs_(result)
       {var duration=caml_call2(_ac_,now$0(t),start);
        return [0,result,duration]}
      var _vt_=caml_call1(f,0);
      return caml_call2(_gx_[2],_vt_,_vs_)}
    function of_synchronous(t){return t}
    function to_synchronous(t){return t}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$85);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Time_source$0);
    var
     include$18=
      [0,
       sexp_of_t$30,
       sexp_of_t_unit,
       invariant$13,
       scheduled_at$0,
       Status$1,
       status$2,
       run_at$1,
       run_after$1,
       Abort_result$0,
       abort$0,
       abort_exn$0,
       abort_if_possible$0,
       Fired,
       fired$1,
       Reschedule_result,
       reschedule_at$0,
       reschedule_after$0,
       at$4,
       after$2],
     Async_kernel_Time_source=
      [0,
       [0,sexp_of_t$26],
       Read_write$0,
       Time_source_id,
       sexp_of_t$28,
       id$4,
       invariant$12,
       invariant_with_jobs$1,
       read_only$0,
       create$11,
       wall_clock,
       alarm_precision$0,
       is_wall_clock$2,
       next_alarm_fires_at$0,
       now$0,
       timing_wheel_now$1,
       advance,
       advance,
       advance_by,
       advance_by,
       fire_past_alarms$0,
       advance_by_alarms$0,
       advance_by_max_alarms_in_each_$0,
       advance_by_alarms_by,
       [0,immediately],
       run_repeatedly,
       run_at$0,
       run_after$0,
       at$3,
       after$1,
       with_timeout,
       duration_of$0,
       include$18,
       at_varying_intervals,
       at_intervals$0,
       every,
       every$0,
       run_at_intervals$0,
       run_at_intervals$1,
       of_synchronous,
       to_synchronous];
    caml_register_global
     (1143,Async_kernel_Time_source,"Async_kernel__Time_source");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Stack_or_coun);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$86);
    caml_call1(Expect_test_collector[5][1],cst_src_stack_or_counter_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$87,cst$30);
    function sexp_of_t$34(of_a_002,param)
     {if(0 === param[0])
       {var
         arg0_003=param[1],
         res0_004=caml_call2(Base_Stack[2],of_a_002,arg0_003);
        return [1,[0,_hV_,[0,res0_004,0]]]}
      var
       length_006=param[1],
       arg_007=caml_call1(Base[119],length_006),
       bnds_005=[0,[1,[0,_hW_,[0,arg_007,0]]],0];
      return [1,[0,_hX_,bnds_005]]}
    function of_list$1(list){return [0,caml_call1(Base_Stack[22],list)]}
    function create_counter(length)
     {if(length < 0)
       {var
         _vq_=[0,[1,[0,_hY_,[0,caml_call1(Base[119],length),0]]],0],
         _vr_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Stack_or_counter_create_co),
            _vq_]];
        caml_call1(Base[202],_vr_)}
      return [1,length]}
    function length$4(t)
     {if(0 !== t[0])return t[1];var s=t[1];return caml_call1(Base_Stack[6],s)}
    function clear$0(t)
     {if(0 === t[0]){var s=t[1];return caml_call1(Base_Stack[30],s)}
      t[1] = 0;
      return 0}
    function push(t,a)
     {if(0 === t[0]){var s=t[1];return caml_call2(Base_Stack[25],s,a)}
      t[1] = t[1] + 1 | 0;
      return 0}
    function pop_exn(r)
     {if(0 === r[0]){var s=r[1];return caml_call1(Base_Stack[27],s)}
      if(0 === r[1])
       {var
         _vp_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Stack_or_counter_pop_exn_o);
        caml_call1(Base[202],_vp_)}
      r[1] = r[1] - 1 | 0;
      return 0}
    function iter$13(t,f)
     {if(0 === t[0]){var s=t[1];return caml_call2(Base_Stack[8],s,f)}
      var _vn_=t[1],_vm_=1;
      if(_vn_ >= 1)
       {var for$0=_vm_;
        for(;;)
         {caml_call1(f,0);
          var _vo_=for$0 + 1 | 0;
          if(_vn_ !== for$0){var for$0=_vo_;continue}
          break}}
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$88);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Stack_or_coun$0);
    var
     Async_kernel_Stack_or_counter=
      [0,
       sexp_of_t$34,
       clear$0,
       create_counter,
       iter$13,
       length$4,
       of_list$1,
       pop_exn,
       push];
    caml_register_global
     (1146,Async_kernel_Stack_or_counter,"Async_kernel__Stack_or_counter");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Throttle);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$89);
    caml_call1(Expect_test_collector[5][1],cst_src_throttle_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$90,cst$31);
    function sexp_of_outcome(of_a_001,param)
     {if(typeof param === "number")return _hZ_;
      if(17724 <= param[1])
       {var v_002=param[2];
        return [1,[0,_h0_,[0,caml_call1(of_a_001,v_002),0]]]}
      var v_003=param[2];
      return [1,[0,_h1_,[0,caml_call1(Core[537],v_003),0]]]}
    function abort$1(t){return fill(t[1],774323088)}
    function cleaned(r){return r[10]}
    function num_resources_not_cleaned(r){return r[9]}
    function set_num_resources_not_cleaned(r,v){r[9] = v;return 0}
    function cleans(r){return r[8]}
    function set_cleans(r,v){r[8] = v;return 0}
    function is_dead$0(r){return r[7]}
    function set_is_dead(r,v){r[7] = v;return 0}
    function capacity_available(r){return r[6]}
    function set_capacity_available(r,v){r[6] = v;return 0}
    function num_jobs_running(r){return r[5]}
    function set_num_jobs_running(r,v){r[5] = v;return 0}
    function jobs_waiting_to_start(r){return r[4]}
    function job_resources_not_in_use(r){return r[3]}
    function max_concurrent_jobs(r){return r[2]}
    function continue_on_error(r){return r[1]}
    function _ia_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v]}
    var
     _ib_=0,
     cleaned$0=[0,function(param){return 0},cst_cleaned,_ib_,cleaned,_ia_];
    function _ic_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10]]}
    var
     _id_=[0,set_num_resources_not_cleaned],
     num_resources_not_cleaned$0=
      [0,
       function(param){return 0},
       cst_num_resources_not_cleaned,
       _id_,
       num_resources_not_cleaned,
       _ic_];
    function _ie_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10]]}
    var
     _if_=[0,set_cleans],
     cleans$0=[0,function(param){return 0},cst_cleans,_if_,cleans,_ie_];
    function _ig_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10]]}
    var
     _ih_=[0,set_is_dead],
     is_dead$1=[0,function(param){return 0},cst_is_dead,_ih_,is_dead$0,_ig_];
    function _ii_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10]]}
    var
     _ij_=[0,set_capacity_available],
     capacity_available$0=
      [0,
       function(param){return 0},
       cst_capacity_available,
       _ij_,
       capacity_available,
       _ii_];
    function _ik_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10]]}
    var
     _il_=[0,set_num_jobs_running],
     num_jobs_running$0=
      [0,
       function(param){return 0},
       cst_num_jobs_running,
       _il_,
       num_jobs_running,
       _ik_];
    function _im_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10]]}
    var
     _in_=0,
     jobs_waiting_to_start$0=
      [0,
       function(param){return 0},
       cst_jobs_waiting_to_start,
       _in_,
       jobs_waiting_to_start,
       _im_];
    function _io_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10]]}
    var
     _ip_=0,
     job_resources_not_in_use$0=
      [0,
       function(param){return 0},
       cst_job_resources_not_in_use,
       _ip_,
       job_resources_not_in_use,
       _io_];
    function _iq_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10]]}
    var
     _ir_=0,
     max_concurrent_jobs$0=
      [0,
       function(param){return 0},
       cst_max_concurrent_jobs,
       _ir_,
       max_concurrent_jobs,
       _iq_];
    function _is_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10]]}
    var
     _it_=0,
     continue_on_error$0=
      [0,
       function(param){return 0},
       cst_continue_on_error,
       _it_,
       continue_on_error,
       _is_];
    function iter$14
     (continue_on_error_fun,
      max_concurrent_jobs_fun,
      job_resources_not_in_use_fun,
      jobs_waiting_to_start_fun,
      num_jobs_running_fun,
      capacity_available_fun,
      is_dead_fun,
      cleans_fun,
      num_resources_not_cleaned_fun,
      cleaned_fun)
     {caml_call1(continue_on_error_fun,continue_on_error$0);
      caml_call1(max_concurrent_jobs_fun,max_concurrent_jobs$0);
      caml_call1(job_resources_not_in_use_fun,job_resources_not_in_use$0);
      caml_call1(jobs_waiting_to_start_fun,jobs_waiting_to_start$0);
      caml_call1(num_jobs_running_fun,num_jobs_running$0);
      caml_call1(capacity_available_fun,capacity_available$0);
      caml_call1(is_dead_fun,is_dead$1);
      caml_call1(cleans_fun,cleans$0);
      caml_call1(num_resources_not_cleaned_fun,num_resources_not_cleaned$0);
      return caml_call1(cleaned_fun,cleaned$0)}
    function sexp_of_t$35(of_a_011,param)
     {var
       jobs_waiting_to_start_019=param[4],
       job_resources_not_in_use_017=param[3],
       max_concurrent_jobs_015=param[2],
       continue_on_error_013=param[1],
       num_jobs_running_021=param[5],
       capacity_available_023=param[6],
       is_dead_025=param[7],
       cleans_027=param[8],
       num_resources_not_cleaned_029=param[9],
       cleaned_031=param[10],
       arg_032=sexp_of_t$20(Core[518],cleaned_031),
       bnds_012=[0,[1,[0,_iu_,[0,arg_032,0]]],0],
       arg_030=caml_call1(Core[356],num_resources_not_cleaned_029),
       bnds_012$0=[0,[1,[0,_iv_,[0,arg_030,0]]],bnds_012];
      function _vf_(param)
       {function _vk_(_vl_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_vk_)}
      var
       arg_028=caml_call2(Core[421],_vf_,cleans_027),
       bnds_012$1=[0,[1,[0,_iw_,[0,arg_028,0]]],bnds_012$0],
       arg_026=caml_call1(Core[305],is_dead_025),
       bnds_012$2=[0,[1,[0,_ix_,[0,arg_026,0]]],bnds_012$1],
       _vg_=Core[518];
      function _vh_(_vj_){return sexp_of_t$20(_vg_,_vj_)}
      var
       arg_024=caml_call2(Core[454],_vh_,capacity_available_023),
       bnds_012$3=[0,[1,[0,_iy_,[0,arg_024,0]]],bnds_012$2],
       arg_022=caml_call1(Core[356],num_jobs_running_021),
       bnds_012$4=[0,[1,[0,_iz_,[0,arg_022,0]]],bnds_012$3];
      function _vi_(param)
       {var
         outcome_009=param[2],
         start_006=param[1],
         bnds_005=0,
         arg_010=
          sexp_of_t$21
           (function(param)
             {return -216426513 === param?_h2_:17724 <= param?_h3_:_h4_},
            outcome_009),
         bnds_005$0=[0,[1,[0,_h5_,[0,arg_010,0]]],bnds_005],
         arg_007=
          sexp_of_t$20
           (function(param)
             {if(typeof param === "number")return _h6_;
              var v_008=param[2];
              return [1,[0,_h7_,[0,caml_call1(of_a_011,v_008),0]]]},
            start_006),
         bnds_005$1=[0,[1,[0,_h8_,[0,arg_007,0]]],bnds_005$0];
        return [1,bnds_005$1]}
      var
       arg_020=caml_call2(Core_Queue[11],_vi_,jobs_waiting_to_start_019),
       bnds_012$5=[0,[1,[0,_iA_,[0,arg_020,0]]],bnds_012$4],
       arg_018=sexp_of_t$34(of_a_011,job_resources_not_in_use_017),
       bnds_012$6=[0,[1,[0,_iB_,[0,arg_018,0]]],bnds_012$5],
       arg_016=caml_call1(Core[356],max_concurrent_jobs_015),
       bnds_012$7=[0,[1,[0,_iC_,[0,arg_016,0]]],bnds_012$6],
       arg_014=caml_call1(Core[305],continue_on_error_013),
       bnds_012$8=[0,[1,[0,_iD_,[0,arg_014,0]]],bnds_012$7];
      return [1,bnds_012$8]}
    function invariant$14(invariant_a,t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _uL_=
          function(cleaned)
           {var _ve_=is_full(cleaned);
            if(! _ve_)return _ve_;
            if(caml_call2(symbol$1,t[9],0))return 0;
            throw [0,Assert_failure,_iH_]},
         _uM_=function(_vd_){return check(_uL_,_vd_)},
         _uN_=
          function(num_resources_not_cleaned)
           {if(! caml_call2(symbol,num_resources_not_cleaned,0))
             throw [0,Assert_failure,_iK_];
            if(! caml_call2(symbol$0,num_resources_not_cleaned,t[2]))
             throw [0,Assert_failure,_iJ_];
            var _vc_=caml_call2(symbol$3,num_resources_not_cleaned,t[2]);
            if(! _vc_)return _vc_;
            if(t[7])return 0;
            throw [0,Assert_failure,_iI_]},
         _uO_=function(_vb_){return check(_uN_,_vb_)},
         _uP_=function(_va_){return 0},
         _uQ_=function(_u$_){return 0},
         _uR_=
          function(param)
           {if(! param)return 0;
            var ivar=param[1];
            if(is_empty(ivar))return 0;
            throw [0,Assert_failure,_iL_]},
         _uS_=function(_u__){return check(_uR_,_u__)},
         _uT_=
          function(num_jobs_running)
           {if(! caml_call2(symbol,num_jobs_running,0))
             throw [0,Assert_failure,_iO_];
            if(! caml_call2(symbol$0,num_jobs_running,t[2]))
             throw [0,Assert_failure,_iN_];
            var _u9_=caml_call2(symbol$3,num_jobs_running,t[2]);
            if(! _u9_)return _u9_;
            if(caml_call1(Core_Queue[15],t[4]))return 0;
            throw [0,Assert_failure,_iM_]},
         _uU_=function(_u8_){return check(_uT_,_u8_)},
         _uV_=
          function(jobs_waiting_to_start)
           {var _u7_=t[7];
            if(! _u7_)return _u7_;
            if(caml_call1(Core_Queue[15],jobs_waiting_to_start))return 0;
            throw [0,Assert_failure,_iP_]},
         _uW_=function(_u6_){return check(_uV_,_u6_)},
         _uX_=
          function(job_resources_not_in_use)
           {iter$13(job_resources_not_in_use,invariant_a);
            var _u5_=t[7]?0:t[2] - t[5] | 0;
            if(caml_call2(symbol$1,length$4(job_resources_not_in_use),_u5_))
             return 0;
            throw [0,Assert_failure,_iQ_]},
         _uY_=function(_u4_){return check(_uX_,_u4_)},
         _uZ_=
          function(max_concurrent_jobs)
           {if(caml_call2(symbol$2,max_concurrent_jobs,0))return 0;
            throw [0,Assert_failure,_iR_]},
         _u0_=function(_u3_){return check(_uZ_,_u3_)},
         _u1_=
          iter$14
           (function(_u2_){return 0},
            _u0_,
            _uY_,
            _uW_,
            _uU_,
            _uS_,
            _uQ_,
            _uP_,
            _uO_,
            _uM_);
        return _u1_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _uG_=0,
         _uH_=0,
         _uI_=
          [0,
           [1,
            [0,
             _iF_,
             [0,
              function(x_033)
                {return sexp_of_t$35(function(param){return _iE_},x_033)}
               (t),
              _uH_]]],
           _uG_],
         _uJ_=[0,[1,[0,_iG_,[0,caml_call1(Core[537],exn),0]]],_uI_],
         _uK_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Throttle_invariant_failed),
            _uJ_]];
        return caml_call1(Core[253],_uK_)}}
    function sexp_of_t$36(of_a_034,of_kind_035,x_036)
     {return sexp_of_t$35(of_a_034,x_036)}
    function invariant$15(invariant_a,param,t)
     {return invariant$14(invariant_a,t)}
    var T2=[0,sexp_of_t$36,invariant$15];
    function num_jobs_waiting_to_start(t)
     {return caml_call1(Core_Queue[14],t[4])}
    function clean_resource(t,a)
     {function _uD_(param)
       {t[9] = t[9] - 1 | 0;
        var _uF_=caml_call2(symbol$1,t[9],0);
        return _uF_?fill(t[10],0):_uF_}
      function _uE_(f){return caml_call1(f,a)}
      return caml_call2
              (_gs_,all_unit(caml_call2(Core_List[72],t[8],_uE_)),_uD_)}
    function kill(t)
     {var _uB_=1 - t[7];
      if(! _uB_)return _uB_;
      t[7] = 1;
      caml_call2(Core_Queue[16],t[4],abort$1);
      caml_call1(Core_Queue[47],t[4]);
      function _uC_(a){return clean_resource(t,a)}
      iter$13(t[3],_uC_);
      return clear$0(t[3])}
    function at_kill(t,f)
     {var _uA_=caml_call1(include$17[8],f),f$0=caml_call1(Core[259],_uA_);
      t[8] = [0,f$0,t[8]];
      return 0}
    function cleaned$1(t){return t[10]}
    function start_job(t)
     {if(t[7])throw [0,Assert_failure,_iS_];
      if(! caml_call2(symbol$3,t[5],t[2]))throw [0,Assert_failure,_iU_];
      if(caml_call1(Core_Queue[15],t[4]))throw [0,Assert_failure,_iT_];
      var t$0=caml_call1(Core_Queue[44],t[4]);
      t[5] = t[5] + 1 | 0;
      var a=pop_exn(t[3]);
      function _uy_(res)
       {t[5] = t[5] - 1 | 0;
        if(17724 > res && 1 - t[1])kill(t);
        if(t[7])return clean_resource(t,a);
        push(t[3],a);
        if(! caml_call1(Core_Queue[15],t[4]))return start_job(t);
        var _uz_=t[6];
        if(! _uz_)return 0;
        var ivar=_uz_[1];
        fill(ivar,0);
        t[6] = 0;
        return 0}
      fill(t$0[1],[0,389604418,a]);
      function _ux_(x)
       {if(-216426513 === x)throw [0,Assert_failure,_h$_];return x}
      return caml_call2(_gs_,caml_call2(_gx_[2],t$0[2],_ux_),_uy_)}
    function create_internal$0(continue_on_error,job_resources)
     {var
       max_concurrent_jobs=length$4(job_resources),
       _uw_=caml_call1(create$13,0);
      return [0,
              continue_on_error,
              max_concurrent_jobs,
              job_resources,
              caml_call2(Core_Queue[61],0,0),
              0,
              0,
              0,
              0,
              max_concurrent_jobs,
              _uw_]}
    function create_with(continue_on_error,job_resources)
     {return create_internal$0(continue_on_error,of_list$1(job_resources))}
    function create$20(opt,a)
     {if(opt)
       var sth=opt[1],continue_on_error=sth;
      else
       var continue_on_error=0;
      return create_with(continue_on_error,[0,a,0])}
    var Sequencer=[0,sexp_of_t$35,create$20];
    function create$21(continue_on_error,max_concurrent_jobs)
     {if(caml_call2(symbol$0,max_concurrent_jobs,0))
       {var
         _uu_=
          [0,[1,[0,_iV_,[0,caml_call1(Core[356],max_concurrent_jobs),0]]],0],
         _uv_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Throttle_create_requires_p),
            _uu_]];
        caml_call1(Core[253],_uv_)}
      return create_internal$0
              (continue_on_error,create_counter(max_concurrent_jobs))}
    function enqueue$2(t,f)
     {var start=caml_call1(create$13,0);
      function _uq_(param)
       {if(typeof param === "number")return caml_call1(_gw_,-216426513);
        var a=param[2];
        function _us_(param)
         {if(0 === param[0]){var a=param[1];return [0,17724,a]}
          var exn=param[1];
          return [0,-387916264,exn]}
        var
         _ut_=
          try_with(0,0,0,0,_h__,_h9_,function(param){return caml_call1(f,a)});
        return caml_call2(_gx_[2],_ut_,_us_)}
      var result=caml_call2(_gx_[1],start,_uq_);
      function _ur_(param)
       {return typeof param === "number"
                ?-216426513
                :17724 <= param[1]?17724:-387916264}
      var
       outcome=caml_call2(_gx_[2],result,_ur_),
       internal_job=[0,start,outcome];
      if(t[7])
       abort$1(internal_job);
      else
       {caml_call2(Core_Queue[41],t[4],internal_job);
        if(caml_call2(symbol$3,t[5],t[2]))start_job(t)}
      return result}
    function handle_enqueue_result(result)
     {if(typeof result === "number")
       {var _up_=caml_call1(Sexplib0_Sexp_conv[7],cst_throttle_aborted_job);
        return caml_call1(Core[253],_up_)}
      if(17724 <= result[1]){var a=result[2];return a}
      var exn=result[2];
      throw exn}
    function enqueue$3(t,f)
     {return caml_call2(_gv_,enqueue$2(t,f),handle_enqueue_result)}
    function enqueue_exclusive(t,f)
     {var n=t[2];
      if(caml_call2(Core_Int[84],n,1000000))
       {var
         _uj_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_enqueue_exclusive_was_call);
        caml_call1(Core[253],_uj_)}
      var done=caml_call1(create$13,0);
      if(! caml_call2(symbol$2,n,0))throw [0,Assert_failure,_iW_];
      function f_placeholder(slot){return done}
      var _ul_=n - 1 | 0,_uk_=1;
      if(_ul_ >= 1)
       {var for$0=_uk_;
        for(;;)
         {enqueue$3(t,f_placeholder);
          var _uo_=for$0 + 1 | 0;
          if(_ul_ !== for$0){var for$0=_uo_;continue}
          break}}
      function _um_(result){fill(done,0);return handle_enqueue_result(result)}
      var _un_=enqueue$2(t,function(slot){return caml_call1(f,0)});
      return caml_call2(_gx_[2],_un_,_um_)}
    function monad_sequence_how(how,f)
     {var switch$0=0;
      if(typeof how === "number" && -676829465 <= how){var f$0=f;switch$0 = 1}
      if(! switch$0)
       {if(typeof how === "number")
         var max_concurrent_jobs=1;
        else
         var
          max_concurrent_jobs$0=how[2],
          max_concurrent_jobs=max_concurrent_jobs$0;
        var
         t=create$21(0,max_concurrent_jobs),
         f$0=
          function(a)
           {return enqueue$3(t,function(param){return caml_call1(f,a)})}}
      return caml_call1(Core[258],f$0)}
    function monad_sequence_how2(how,f)
     {var switch$0=0;
      if(typeof how === "number" && -676829465 <= how){var f$0=f;switch$0 = 1}
      if(! switch$0)
       {if(typeof how === "number")
         var max_concurrent_jobs=1;
        else
         var
          max_concurrent_jobs$0=how[2],
          max_concurrent_jobs=max_concurrent_jobs$0;
        var
         t=create$21(0,max_concurrent_jobs),
         f$0=
          function(a1,a2)
           {return enqueue$3(t,function(param){return caml_call2(f,a1,a2)})}}
      return caml_call1(Core[258],f$0)}
    function prior_jobs_done(t)
     {return create$14
              (function(all_dummy_jobs_running)
                {var dummy_jobs_running=[0,0],_uh_=t[2],_ug_=1;
                 if(_uh_ >= 1)
                  {var for$0=_ug_;
                   for(;;)
                    {enqueue$3
                      (t,
                       function(param)
                        {dummy_jobs_running[1]++;
                         if(caml_call2(symbol$1,dummy_jobs_running[1],t[2]))
                          fill(all_dummy_jobs_running,0);
                         return all_dummy_jobs_running});
                     var _ui_=for$0 + 1 | 0;
                     if(_uh_ !== for$0){var for$0=_ui_;continue}
                     break}}
                 return 0})}
    function capacity_available$1(t)
     {if(caml_call2(symbol$3,t[5],t[2]))return caml_call1(_gw_,0);
      var _uf_=t[6];
      if(! _uf_)return create$14(function(ivar){t[6] = [0,ivar];return 0});
      var ivar=_uf_[1];
      return ivar}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$91);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Throttle$0);
    var
     Async_kernel_Throttle=
      [0,
       T2,
       sexp_of_t$35,
       invariant$14,
       create$21,
       create_with,
       sexp_of_outcome,
       enqueue$2,
       enqueue$3,
       enqueue_exclusive,
       monad_sequence_how,
       monad_sequence_how2,
       prior_jobs_done,
       max_concurrent_jobs,
       num_jobs_running,
       num_jobs_waiting_to_start,
       capacity_available$1,
       kill,
       is_dead$0,
       at_kill,
       cleaned$1,
       Sequencer];
    caml_register_global(1148,Async_kernel_Throttle,"Async_kernel__Throttle");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Synchronous_t$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$92);
    caml_call1(Expect_test_collector[5][1],cst_src_synchronous_time_sourc$1);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$93,cst$32);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$94);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Synchronous_t$2);
    var
     _iX_=Event$1[3],
     Async_kernel_Synchronous_time_=
      [0,
       [0,T1[17]],
       Read_write,
       Time_source_id,
       sexp_of_t$12,
       invariant_with_jobs$0,
       invariant$3,
       id$3,
       read_only,
       create$11,
       alarm_precision,
       is_wall_clock$1,
       now,
       timing_wheel_now$0,
       run_at,
       run_after,
       run_at_intervals,
       max_allowed_alarm_time,
       duration_of,
       [0,
        Event$1[17],
        Event$1[18],
        [0,
         _iX_[8],
         _iX_[2],
         _iX_[3],
         _iX_[4],
         _iX_[5],
         _iX_[9],
         _iX_[10],
         _iX_[11],
         _iX_[12],
         _iX_[7]],
        Event$1[25],
        Event$1[26],
        Event$1[28],
        Event$1[29],
        Event$1[30],
        Event$1[32],
        Event$1[31],
        Event$1[33],
        Event$1[35],
        Event$1[36],
        Event$1[37],
        Event$1[38],
        Event$1[39],
        Event$1[21]],
       default_timing_wheel_config,
       wall_clock,
       length$1,
       next_alarm_runs_at,
       next_alarm_fires_at,
       advance_by_alarms,
       advance_by_max_alarms_in_each_,
       advance_directly,
       max_alarm_time_in_min_timing_w,
       has_events_to_run];
    caml_register_global
     (1149,
      Async_kernel_Synchronous_time_,
      "Async_kernel__Synchronous_time_source");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Scheduler);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$95);
    caml_call1(Expect_test_collector[5][1],cst_src_scheduler_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$96,cst$33);
    var
     _iY_=include$17[1],
     _iZ_=include$17[2],
     _i0_=include$17[3],
     _i1_=include$17[4],
     _i2_=include$17[5],
     _i3_=include$17[6],
     _i4_=include$17[7],
     _i5_=include$17[8];
    function find_local$0(key)
     {return find_local(current_execution_context$1(t$0(0)),key)}
    function with_local$0(key,value,f)
     {var
       t=t$0(0),
       execution_context=with_local(current_execution_context$1(t),key,value);
      return with_execution_context(t,execution_context,f)}
    var main_execution_context$1=t$0(0)[6];
    function can_run_a_job$0(t)
     {var _ue_=caml_call2(symbol$2,num_pending_jobs(t),0);
      return _ue_?_ue_:has_any_waiters$1(t[24])}
    function has_upcoming_event(t)
     {var _ud_=events(t);return 1 - caml_call1(Timing_wheel[13],_ud_)}
    function next_upcoming_event(t)
     {var _uc_=events(t);return caml_call1(Timing_wheel[38],_uc_)}
    function next_upcoming_event_exn(t)
     {var _ub_=events(t);return caml_call1(Timing_wheel[39],_ub_)}
    function event_precision(t)
     {var _ua_=events(t);return caml_call1(Timing_wheel[10],_ua_)}
    function cycle_start$1(t){return t[10]}
    function run_every_cycle_start$1(t,f){t[12] = [0,f,t[12]];return 0}
    function run_every_cycle_end$1(t,f){t[14] = [0,f,t[14]];return 0}
    function add_every_cycle_start_hook(t,f)
     {var handle=caml_call1(Cycle_hook_handle[45],0);
      caml_call3(Core_Hashtbl[36],t[13],handle,f);
      run_every_cycle_start$1(t,f);
      return handle}
    function add_every_cycle_end_hook(t,f)
     {var handle=caml_call1(Cycle_hook_handle[45],0);
      caml_call3(Core_Hashtbl[36],t[15],handle,f);
      run_every_cycle_end$1(t,f);
      return handle}
    function remove_single_cycle_hook(lst,f)
     {var f$0=caml_call1(Core[246],f);
      function _t7_(x){return 1 - caml_call1(f$0,x)}
      var _t8_=caml_call2(Core_List[130],lst,_t7_),_t9_=_t8_[2],_t__=_t8_[1];
      if(_t9_)
       var r=_t9_[2],match=[0,caml_call2(Core[157],_t__,r)];
      else
       var match=0;
      if(match){var lst$0=match[1];return lst$0}
      var
       _t$_=
        caml_call1(Sexplib0_Sexp_conv[7],cst_Scheduler_remove_single_cy);
      return caml_call1(Core[253],_t$_)}
    function remove_every_cycle_start_hook_(t,handle)
     {var match=caml_call2(Core_Hashtbl[61],t[13],handle);
      if(! match)return caml_call1(Core[6],cst_Attempted_to_remove_a_cycl);
      var f=match[1];
      t[12] = remove_single_cycle_hook(t[12],f);
      return 0}
    function remove_every_cycle_end_hook_ex(t,handle)
     {var match=caml_call2(Core_Hashtbl[61],t[15],handle);
      if(! match)return caml_call1(Core[6],cst_Attempted_to_remove_a_cycl$0);
      var f=match[1];
      t[14] = remove_single_cycle_hook(t[14],f);
      return 0}
    function map_cycle_times(t,f)
     {return create$19
              (function(tail)
                {return run_every_cycle_start$1
                         (t,function(param){return extend(tail,caml_call1(f,t[16]))})})}
    function long_cycles(t,at_least)
     {return create$19
              (function(tail)
                {return run_every_cycle_start$1
                         (t,
                          function(param)
                           {var _t6_=caml_call2(Core_Time_ns[1][15],t[16],at_least);
                            return _t6_?extend(tail,t[16]):_t6_})})}
    function cycle_num_jobs(t)
     {return create$19
              (function(tail)
                {return run_every_cycle_start$1
                         (t,function(param){return extend(tail,t[17])})})}
    function cycle_count$1(t){return t[9]}
    function set_max_num_jobs_per_priority_$0(t,int$0)
     {t[27] = caml_call1(Async_kernel_config[5][4],int$0);return 0}
    function max_num_jobs_per_priority_per_$1(t)
     {return caml_call1(Async_kernel_config[5][5],t[27])}
    function set_thread_safe_external_job_h$0(t,f){t[21] = f;return 0}
    function thread_safe_enqueue_external_j(t,execution_context,f,a)
     {caml_call2(Thread_safe_queue[5],t[20],[0,execution_context,f,a]);
      return caml_call1(t[21],0)}
    function set_event_added_hook$0(t,f){t[23] = [0,f];return 0}
    function set_job_queued_hook$0(t,f){t[22] = [0,f];return 0}
    function create_alarm(t,f)
     {var execution_context=current_execution_context$1(t);
      function _t5_(param)
       {return thread_safe_enqueue_external_j(t,execution_context,f,0)}
      return caml_call1(include$19[10][6][2],_t5_)}
    function add_finalizer(t,heap_block,f)
     {var execution_context=current_execution_context$1(t);
      function finalizer(heap_block)
       {if(_a__)log_string(cst_enqueueing_finalizer);
        return thread_safe_enqueue_external_j
                (t,execution_context,f,heap_block)}
      if(_a__)log_string(cst_adding_finalizer);
      try
       {var _t3_=caml_call2(Stdlib_Gc[3],finalizer,heap_block);return _t3_}
      catch(_t4_)
       {_t4_ = caml_wrap_exception(_t4_);
        if(_t4_[1] === Stdlib[6])return 0;
        throw _t4_}}
    function add_finalizer_exn(t,x,f)
     {function _t2_(heap_block)
       {return caml_call1(f,caml_call1(Core_Heap_block[4],heap_block))}
      return add_finalizer(t,caml_call1(Core_Heap_block[3],x),_t2_)}
    function add_finalizer_last(t,heap_block,f)
     {var execution_context=current_execution_context$1(t);
      function finalizer(param)
       {if(_a__)log_string(cst_enqueueing_finalizer_using);
        return thread_safe_enqueue_external_j(t,execution_context,f,0)}
      if(_a__)log_string(cst_adding_finalizer_using_las);
      try
       {var _t0_=caml_call2(Stdlib_Gc[4],finalizer,heap_block);return _t0_}
      catch(_t1_)
       {_t1_ = caml_wrap_exception(_t1_);
        if(_t1_[1] === Stdlib[6])return 0;
        throw _t1_}}
    function add_finalizer_last_exn(t,x,f)
     {return add_finalizer_last(t,caml_call1(Core_Heap_block[3],x),f)}
    function force_current_cycle_to_end(t)
     {return set_jobs_left_this_cycle$0(t[3],0)}
    var send_exn$1=[0,send_exn];
    function advance_clock$0(t,now)
     {return advance_internal(t[19],now,send_exn$1)}
    function run_cycle(t)
     {if(_be_)log(cst_run_cycle_starting,t,sexp_of_t$18);
      var now=caml_call1(_X_,0);
      t[9] = t[9] + 1 | 0;
      t[10] = now;
      t[11] = 1;
      broadcast(t[24],0);
      var num_jobs_run_at_start_of_cycle=num_jobs_run$1(t);
      function _tS_(f){return caml_call1(f,0)}
      caml_call2(Core_List[9],t[12],_tS_);
      advance_clock$0(t,now);
      start_cycle(t,t[27]);
      for(;;)
       {var match=run_jobs$0(t);
        if(0 !== match[0])
         {var match$0=match[1],backtrace=match$0[2],exn=match$0[1];
          send_exn(current(0),[0,[0,936718974,backtrace]],exn);
          continue}
        var _tT_=t[10],cycle_time=caml_call2(_ac_,caml_call1(_X_,0),_tT_);
        t[16] = cycle_time;
        t[17] = num_jobs_run$1(t) - num_jobs_run_at_start_of_cycle | 0;
        t[18] = caml_call2(Core_Time_ns[1][97],t[18],cycle_time);
        var
         _tU_=has_any_waiters$1(t[25]),
         _tV_=_tU_?caml_call2(symbol$1,num_pending_jobs(t),0):_tU_;
        if(_tV_)broadcast(t[25],0);
        var _tW_=function(f){return caml_call1(f,0)};
        caml_call2(Core_List[9],t[14],_tW_);
        t[11] = 0;
        if(! _be_)return _be_;
        var
         _tX_=
          function(param)
           {var
             arg1_002=param[2],
             arg0_001=param[1],
             res0_003=caml_call2(Core[454],Core_Error[6],arg0_001),
             res1_004=caml_call1(Core[305],arg1_002);
            return [1,[0,res0_003,[0,res1_004,0]]]},
         _tY_=next_upcoming_event(t),
         _tZ_=caml_call1(Core[243],_tY_);
        return log(cst_run_cycle_finished,[0,uncaught_exn$0(t),_tZ_],_tX_)}}
    function run_cycles_until_no_jobs_remai(param)
     {if(_be_)log_string(cst_run_cycles_until_no_jobs_r);
      var t=t$0(0);
      if(is_dead(t))
       {var
         _tO_=[0,[1,[0,_i6_,[0,sexp_of_t$18(t),0]]],0],
         _tP_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_run_cycles_until_no_jobs_r$0),
            _tO_]];
        caml_call1(Core[253],_tP_)}
      for(;;)
       {run_cycle(t);
        advance_clock$0(t,caml_call1(_X_,0));
        if(can_run_a_job$0(t))continue;
        set_execution_context(t,t[6]);
        if(_be_)log_string(cst_run_cycles_until_no_jobs_r$1);
        var _tQ_=Core_Error[28],_tR_=uncaught_exn$0(t);
        return caml_call2(Core_Option[41],_tR_,_tQ_)}}
    function make_async_unusable(param)
     {var t=_fU_[1];
      t[1]
      =
      [0,
       function(param)
        {var
          _tN_=
           caml_call1(Sexplib0_Sexp_conv[7],cst_Async_scheduler_is_unusabl);
         return caml_call1(Core[253],_tN_)}];
      return 0}
    function reset_in_forked_process(param)
     {if(_be_)log_string(cst_reset_in_forked_process);
      _fU_[1] = create$10(0);
      return 0}
    function check_invariants$1(t){return t[26]}
    function set_check_invariants$0(t,b){t[26] = b;return 0}
    function set_record_backtraces$0(t,b){t[28] = b;return 0}
    function yield$3(t){return wait(t[24])}
    function yield_until_no_jobs_remain$1(opt,t)
     {if(opt)
       var sth=opt[1],may_return_immediately=sth;
      else
       var may_return_immediately=0;
      if(may_return_immediately && caml_call2(symbol$1,num_pending_jobs(t),0))
       return caml_call1(_gw_,0);
      return wait(t[25])}
    function yield_every(n)
     {if(caml_call2(symbol$0,n,0))
       {var
         _tJ_=[0,[1,[0,_i7_,[0,caml_call1(Core[356],n),0]]],0],
         _tK_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Scheduler_yield_every_got_),
            _tJ_]];
        return caml_call1(Core[253],_tK_)}
      if(caml_call2(symbol$1,n,1))
       {var _tL_=function(t){return yield$3(t)};
        return caml_call1(Core[258],_tL_)}
      var count_until_yield=[0,n];
      function _tM_(t)
       {count_until_yield[1] += -1;
        return caml_call2(symbol$2,count_until_yield[1],0)
                ?caml_call1(_gw_,0)
                :(count_until_yield[1] = n,yield$3(t))}
      return caml_call1(Core[258],_tM_)}
    function total_cycle_time$1(t)
     {if(! t[11])return t[18];
      var _tI_=t[10],this_cycle_time=caml_call2(_ac_,caml_call1(_X_,0),_tI_);
      return caml_call2(Core_Time_ns[1][97],t[18],this_cycle_time)}
    function yield_then_run(t)
     {var _tG_=1 - caml_call1(Core_Deque[16],t[5]);
      if(! _tG_)return _tG_;
      function _tH_(param){return run(t)}
      return upon$1(yield$3(t),_tH_)}
    function run_workers$0(counter,t,num_execs_before_yielding)
     {if(caml_call2(symbol$1,num_execs_before_yielding,0))
       return yield_then_run(t);
      var _tF_=1 - caml_call1(Core_Deque[16],t[5]);
      if(! _tF_)return _tF_;
      var worker=caml_call1(Core_Deque[61],t[5]);
      set_execution_context(t,worker[1]);
      if(counter >= 50)
       return caml_trampoline_return
               (run_worker,[0,t,worker,num_execs_before_yielding]);
      var counter$0=counter + 1 | 0;
      return run_worker(counter$0,t,worker,num_execs_before_yielding)}
    function run_worker(counter,t,worker,num_execs_before_yielding)
     {var num_execs_before_yielding$0=num_execs_before_yielding;
      for(;;)
       {if(! caml_call2(Core[246],t[7],worker[1]))
         throw [0,Assert_failure,_i8_];
        if(caml_call2(symbol$1,num_execs_before_yielding$0,0))
         {caml_call2(Core_Deque[52],t[5],worker);return yield_then_run(t)}
        var num_execs_before_yielding$1=num_execs_before_yielding$0 - 1 | 0;
        try
         {var val=caml_call1(worker[2],0)}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var bt=caml_call1(Base_Backtrace[6][4],0);
          send_exn(current(0),[0,[0,936718974,bt]],exn);
          if(counter >= 50)
           return caml_trampoline_return
                   (run_workers$0,[0,t,num_execs_before_yielding$1]);
          var counter$0=counter + 1 | 0;
          return run_workers$0(counter$0,t,num_execs_before_yielding$1)}
        if(val)
         {var num_execs_before_yielding$0=num_execs_before_yielding$1;
          continue}
        if(counter >= 50)
         return caml_trampoline_return
                 (run_workers$0,[0,t,num_execs_before_yielding$1]);
        var counter$1=counter + 1 | 0;
        return run_workers$0(counter$1,t,num_execs_before_yielding$1)}}
    function run_workers(t,num_execs_before_yielding)
     {return caml_trampoline(run_workers$0(0,t,num_execs_before_yielding))}
    function run(t){return run_workers(t,1000)}
    function enqueue$4(f)
     {var
       t=t$0(0),
       queue=t[5],
       running=1 - caml_call1(Core_Deque[16],queue),
       execution_context=create_like(0,_i9_,0,current_execution_context$1(t));
      caml_call2(Core_Deque[53],queue,[0,execution_context,f]);
      var _tE_=1 - running;
      return _tE_?enqueue$0(t,execution_context,run,t):_tE_}
    var For_bench=[0,advance_clock$0];
    function in_cycle$1(t){return t[11]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$97);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Scheduler$0);
    var
     include$20=
      [0,
       sexp_of_t$18,
       t$0,
       invariant$6,
       current_execution_context$1,
       with_execution_context,
       with_execution_context1,
       set_execution_context,
       enqueue$0,
       create_job,
       enqueue_job,
       free_job,
       main_execution_context$1,
       cycle_start$1,
       run_cycle,
       run_cycles_until_no_jobs_remai,
       has_upcoming_event,
       next_upcoming_event,
       next_upcoming_event_exn,
       event_precision,
       uncaught_exn$0,
       uncaught_exn_unwrapped,
       num_pending_jobs,
       num_jobs_run$1,
       last_cycle_num_jobs$1,
       map_cycle_times,
       cycle_num_jobs,
       cycle_count$1,
       total_cycle_time$1,
       max_num_jobs_per_priority_per_$1,
       set_max_num_jobs_per_priority_$0,
       set_check_access$0,
       check_access$1,
       check_invariants$1,
       set_check_invariants$0,
       set_record_backtraces$0,
       run_every_cycle_start$1,
       run_every_cycle_end$1,
       add_every_cycle_start_hook,
       add_every_cycle_end_hook,
       remove_every_cycle_start_hook_,
       remove_every_cycle_end_hook_ex,
       last_cycle_time,
       long_cycles,
       can_run_a_job$0,
       create_alarm,
       add_finalizer,
       add_finalizer_exn,
       add_finalizer_last,
       add_finalizer_last_exn,
       set_thread_safe_external_job_h$0,
       set_job_queued_hook$0,
       set_event_added_hook$0,
       thread_safe_enqueue_external_j,
       force_current_cycle_to_end,
       _iY_,
       _iZ_,
       _i0_,
       _i1_,
       _i2_,
       _i4_,
       _i5_,
       _i3_,
       find_local$0,
       with_local$0,
       make_async_unusable,
       reset_in_forked_process,
       yield$3,
       yield_every,
       yield_until_no_jobs_remain$1,
       [0,Very_low_priority_worker$0[1],enqueue$4],
       For_bench,
       in_cycle$1];
    caml_register_global(1154,include$20,"Async_kernel__Scheduler");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Cycle_hook);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$98);
    caml_call1(Expect_test_collector[5][1],cst_src_cycle_hook_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$99,cst$34);
    var Handle=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$100);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Cycle_hook$0);
    var Async_kernel_Cycle_hook=[0,Handle];
    caml_register_global
     (1155,Async_kernel_Cycle_hook,"Async_kernel__Cycle_hook");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Async_kernel_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$101);
    caml_call1(Expect_test_collector[5][1],cst_src_async_kernel_scheduler);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$102,cst$35);
    function enqueue_job$0(execution_context,f,a)
     {return enqueue$0(t$0(0),execution_context,f,a)}
    function thread_safe_enqueue_job(execution_context,f,a)
     {return thread_safe_enqueue_external_j(t$0(0),execution_context,f,a)}
    function current_execution_context$3(param)
     {return current_execution_context$1(t$0(0))}
    function cycle_count$2(param){return t$0(0)[9]}
    function cycle_start_ns(param){return t$0(0)[10]}
    function cycle_start$2(param){return caml_call1(_ap_,cycle_start_ns(0))}
    function cycle_times_ns(param)
     {function _tC_(_tD_){return _tD_}return map_cycle_times(t$0(0),_tC_)}
    function cycle_times(param)
     {var _tB_=Core_Time_ns[1][134];return map_cycle_times(t$0(0),_tB_)}
    function total_cycle_time$2(param){return total_cycle_time$1(t$0(0))}
    function last_cycle_time$1(param){return t$0(0)[16]}
    function long_cycles$0(at_least){return long_cycles(t$0(0),at_least)}
    function event_precision_ns(param){return event_precision(t$0(0))}
    function event_precision$0(param)
     {var _tA_=event_precision_ns(0);
      return caml_call1(Core_Time_ns[1][134],_tA_)}
    function set_max_num_jobs_per_priority_$1(i)
     {return set_max_num_jobs_per_priority_$0(t$0(0),i)}
    function max_num_jobs_per_priority_per_$2(param)
     {return max_num_jobs_per_priority_per_$1(t$0(0))}
    function set_record_backtraces$1(bool)
     {return set_record_backtraces$0(t$0(0),bool)}
    function force_current_cycle_to_end$0(param)
     {return force_current_cycle_to_end(t$0(0))}
    function yield$4(param){return yield$3(t$0(0))}
    function yield_until_no_jobs_remain$2(may_return_immediately,param)
     {return yield_until_no_jobs_remain$1(may_return_immediately,t$0(0))}
    function yield_every$0(n)
     {var
       _ty_=yield_every(n),
       yield_every$0=caml_call1(Base_Staged[2],_ty_),
       t=t$0(0);
      function _tz_(param){return caml_call1(yield_every$0,t)}
      return caml_call1(Core[258],_tz_)}
    function num_jobs_run$2(param){return num_jobs_run$1(t$0(0))}
    function num_pending_jobs$0(param){return num_pending_jobs(t$0(0))}
    function last_cycle_num_jobs$2(param){return t$0(0)[17]}
    function run_every_cycle_start$2(f)
     {return run_every_cycle_start$1(t$0(0),f)}
    function run_every_cycle_end$2(f){return run_every_cycle_end$1(t$0(0),f)}
    function add_every_cycle_start_hook$0(f)
     {return add_every_cycle_start_hook(t$0(0),f)}
    function add_every_cycle_end_hook$0(f)
     {return add_every_cycle_end_hook(t$0(0),f)}
    function remove_every_cycle_start_hook_$0(handle)
     {return remove_every_cycle_start_hook_(t$0(0),handle)}
    function remove_every_cycle_end_hook_ex$0(handle)
     {return remove_every_cycle_end_hook_ex(t$0(0),handle)}
    function with_execution_context$0(execution_context,f)
     {return with_execution_context(t$0(0),execution_context,f)}
    function with_execution_context1$0(execution_context,f,x)
     {return with_execution_context1(t$0(0),execution_context,f,x)}
    var
     Expert$0=
      [0,
       run_cycles_until_no_jobs_remai,
       last_cycle_num_jobs$2,
       run_every_cycle_start$2,
       run_every_cycle_end$2,
       add_every_cycle_start_hook$0,
       add_every_cycle_end_hook$0,
       remove_every_cycle_start_hook_$0,
       remove_every_cycle_end_hook_ex$0,
       with_execution_context$0,
       with_execution_context1$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$103);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Async_kernel_$0);
    var
     Async_kernel_Async_kernel_sche=
      [0,
       current_execution_context$3,
       _i3_,
       _iY_,
       _iZ_,
       _i0_,
       with_local$0,
       find_local$0,
       _i1_,
       _i2_,
       enqueue_job$0,
       thread_safe_enqueue_job,
       _i4_,
       _i5_,
       cycle_start$2,
       cycle_start_ns,
       cycle_times,
       cycle_times_ns,
       last_cycle_time$1,
       long_cycles$0,
       cycle_count$2,
       total_cycle_time$2,
       event_precision$0,
       event_precision_ns,
       force_current_cycle_to_end$0,
       set_max_num_jobs_per_priority_$1,
       max_num_jobs_per_priority_per_$2,
       set_record_backtraces$1,
       yield$4,
       yield_until_no_jobs_remain$2,
       yield_every$0,
       num_jobs_run$2,
       num_pending_jobs$0,
       Expert$0];
    caml_register_global
     (1157,
      Async_kernel_Async_kernel_sche,
      "Async_kernel__Async_kernel_scheduler");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Clock_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$104);
    caml_call1(Expect_test_collector[5][1],cst_src_clock_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$105,cst$36);
    function compare$1(cmp_a,a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(typeof a_001 === "number")
       {if(642269825 === b_002)return 0}
      else
       if(typeof b_002 !== "number" && 1025039613 === b_002[1])
        {var right_004=b_002[2],left_003=a_001[2];
         return caml_call2(cmp_a,left_003,right_004)}
      return runtime.caml_compare(a_001,b_002)}
    function sexp_of_t$37(of_a_005,param)
     {if(typeof param === "number")return _i__;
      var v_006=param[2];
      return [1,[0,_i$_,[0,caml_call1(of_a_005,v_006),0]]]}
    var Or_timeout=[0,compare$1,sexp_of_t$37];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$106);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Clock_intf$0);
    var Async_kernel_Clock_intf=[0,Or_timeout];
    caml_register_global
     (1159,Async_kernel_Clock_intf,"Async_kernel__Clock_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Clock_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$107);
    caml_call1(Expect_test_collector[5][1],cst_src_clock_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$108,cst$37);
    function time_source$1(param){return t$0(0)[19]}
    function after$3(span){return after$1(time_source$1(0),span)}
    function at$5(time){return at$3(time_source$1(0),time)}
    function at_varying_intervals$0(stop,compute_span)
     {return at_varying_intervals(stop,time_source$1(0),compute_span)}
    function at_intervals$1(start,stop,interval)
     {return at_intervals$0(start,stop,time_source$1(0),interval)}
    function every$1(start,stop,continue_on_error,finished,span,f)
     {return every
              (start,stop,continue_on_error,finished,time_source$1(0),span,f)}
    function every$2(start,stop,continue_on_error,span,f)
     {return every$0(start,stop,continue_on_error,time_source$1(0),span,f)}
    function run_after$2(span,f,a)
     {return run_after$0(time_source$1(0),span,f,a)}
    function run_at$2(time,f,a){return run_at$0(time_source$1(0),time,f,a)}
    function run_at_intervals$2(start,stop,continue_on_error,interval,f)
     {return run_at_intervals$1
              (start,stop,continue_on_error,time_source$1(0),interval,f)}
    function run_at_intervals$3(start,stop,continue_on_error,interval,f)
     {return run_at_intervals$0
              (start,stop,continue_on_error,time_source$1(0),interval,f)}
    function with_timeout$0(span,d)
     {return with_timeout(time_source$1(0),span,d)}
    function duration_of$1(f){return duration_of$0(time_source$1(0),f)}
    var
     sexp_of_t$38=include$18[1],
     sexp_of_t_unit$0=include$18[2],
     invariant$16=include$18[3],
     scheduled_at$2=include$18[4],
     Status$2=include$18[5],
     status$3=include$18[6],
     abort$2=include$18[10],
     abort_exn$1=include$18[11],
     abort_if_possible$1=include$18[12],
     fired$2=include$18[14],
     reschedule_at$1=include$18[16],
     reschedule_after$1=include$18[17],
     _ja_=include$18[7],
     _jb_=include$18[8],
     _jc_=include$18[18],
     _jd_=include$18[19];
    function after$4(span){return caml_call2(_jd_,time_source$1(0),span)}
    function run_after$3(span,f,a)
     {return caml_call4(_jb_,time_source$1(0),span,f,a)}
    function at$6(time){return caml_call2(_jc_,time_source$1(0),time)}
    function run_at$3(time,f,z)
     {return caml_call4(_ja_,time_source$1(0),time,f,z)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$109);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Clock_ns$0);
    var
     Async_kernel_Clock_ns=
      [0,
       run_at$2,
       run_after$2,
       at$5,
       after$3,
       with_timeout$0,
       [0,
        sexp_of_t$38,
        sexp_of_t_unit$0,
        invariant$16,
        scheduled_at$2,
        Status$2,
        status$3,
        run_at$3,
        run_after$3,
        abort$2,
        abort_exn$1,
        abort_if_possible$1,
        fired$2,
        reschedule_at$1,
        reschedule_after$1,
        at$6,
        after$4],
       at_varying_intervals$0,
       at_intervals$1,
       every$1,
       every$2,
       run_at_intervals$3,
       run_at_intervals$2,
       duration_of$1];
    caml_register_global(1160,Async_kernel_Clock_ns,"Async_kernel__Clock_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_arra);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$110);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$111,cst$38);
    function foldi(t,init,f)
     {return create$14
              (function(result)
                {function loop(i,b)
                  {if(caml_call2(Core[90],i,t.length - 1))
                    return fill(result,b);
                   function _tx_(b){return loop(i + 1 | 0,b)}
                   return caml_call2
                           (_gs_,caml_call3(f,i,b,caml_check_bound(t,i)[1 + i]),_tx_)}
                 return loop(0,init)})}
    function fold$14(t,init,f)
     {return foldi(t,init,function(param,a,x){return caml_call2(f,a,x)})}
    function seqmapi(t,f)
     {function _tt_(bs)
       {var _tw_=caml_call1(Core_List[34],bs);
        return caml_call1(Core_Array[52],_tw_)}
      var
       _tu_=
        foldi
         (t,
          0,
          function(i,bs,a)
           {function _tv_(b){return [0,b,bs]}
            return caml_call2(_gv_,caml_call2(f,i,a),_tv_)});
      return caml_call2(_gx_[2],_tu_,_tt_)}
    function all$0(ds){return seqmapi(ds,function(param,x){return x})}
    function all_unit$0(ds)
     {return caml_call1(ignore_m,fold$14(ds,0,function(param,d){return d}))}
    function iteri(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number" && -676829465 > how)
       return foldi(t,0,function(i,param,x){return caml_call2(f,i,x)});
      var _tr_=monad_sequence_how2(how,f),_ts_=caml_call1(Core[259],_tr_);
      return all_unit$0(caml_call2(Core_Array[59],t,_ts_))}
    function mapi(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number" && -676829465 > how)return seqmapi(t,f);
      var _tp_=monad_sequence_how2(how,f),_tq_=caml_call1(Core[259],_tp_);
      return all$0(caml_call2(Core_Array[59],t,_tq_))}
    function filteri(how,t,f)
     {function _tl_(bools)
       {function _tn_(ac,x,b){return b?[0,x,ac]:ac}
        var _to_=caml_call4(Core_Array[82],t,bools,0,_tn_);
        return caml_call1(Core_Array[90],_to_)}
      var _tm_=mapi(how,t,f);
      return caml_call2(_gx_[2],_tm_,_tl_)}
    function filter_mapi(how,t,f)
     {var _tk_=Core_Array[74];return caml_call2(_gv_,mapi(how,t,f),_tk_)}
    function concat_mapi(how,t,f)
     {function _th_(t)
       {var _tj_=caml_call1(Core_Array[32],t);
        return caml_call1(Core_Array[44],_tj_)}
      var _ti_=mapi(how,t,f);
      return caml_call2(_gx_[2],_ti_,_th_)}
    function find_mapi(t,f)
     {function aux(i)
       {if(caml_call2(Core[90],i,t.length - 1))return caml_call1(_gw_,0);
        function _tf_(some){return some?caml_call1(_gw_,some):aux(i + 1 | 0)}
        var _tg_=caml_call2(f,i,caml_check_bound(t,i)[1 + i]);
        return caml_call2(_gx_[1],_tg_,_tf_)}
      return aux(0)}
    function findi(t,f)
     {return find_mapi
              (t,
               function(i,elt)
                {function _td_(b){return b?[0,[0,i,elt]]:0}
                 var _te_=caml_call2(f,i,elt);
                 return caml_call2(_gx_[2],_te_,_td_)})}
    function find$0(t,f)
     {return find_mapi
              (t,
               function(param,elt)
                {function _tb_(b){return b?[0,elt]:0}
                 var _tc_=caml_call1(f,elt);
                 return caml_call2(_gx_[2],_tc_,_tb_)})}
    function existsi(t,f)
     {function _s9_(param){return param?1:0}
      var
       _s__=
        find_mapi
         (t,
          function(i,elt)
           {function _s$_(b){return b?_je_:0}
            var _ta_=caml_call2(f,i,elt);
            return caml_call2(_gx_[2],_ta_,_s$_)});
      return caml_call2(_gx_[2],_s__,_s9_)}
    function for_alli(t,f)
     {function _s5_(param){return param?0:1}
      var
       _s6_=
        find_mapi
         (t,
          function(i,elt)
           {function _s7_(b){return b?0:_jf_}
            var _s8_=caml_call2(f,i,elt);
            return caml_call2(_gx_[2],_s8_,_s7_)});
      return caml_call2(_gx_[2],_s6_,_s5_)}
    function iter$15(how,t,f)
     {return iteri(how,t,function(param,a){return caml_call1(f,a)})}
    function map$17(how,t,f)
     {return mapi(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map(how,t,f)
     {return filter_mapi(how,t,function(param,a){return caml_call1(f,a)})}
    function filter(how,t,f)
     {return filteri(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map(how,t,f)
     {return concat_mapi(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map(t,f)
     {return find_mapi(t,function(param,a){return caml_call1(f,a)})}
    function exists$11(t,f)
     {return existsi(t,function(param,a){return caml_call1(f,a)})}
    function for_all$11(t,f)
     {return for_alli(t,function(param,a){return caml_call1(f,a)})}
    function init(how,n,f)
     {function _s3_(_s4_){return _s4_}
      return map$17(how,caml_call2(Core_Array[40],n,_s3_),f)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$112);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_arra$0);
    var
     Async_kernel_Deferred_array=
      [0,
       foldi,
       fold$14,
       find$0,
       findi,
       find_map,
       find_mapi,
       exists$11,
       existsi,
       for_all$11,
       for_alli,
       all$0,
       all_unit$0,
       init,
       iter$15,
       iteri,
       map$17,
       mapi,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       concat_map,
       concat_mapi];
    caml_register_global
     (1162,Async_kernel_Deferred_array,"Async_kernel__Deferred_array");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_list);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$113);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_list_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$114,cst$39);
    function foldi$0(t,init,f)
     {return create$14
              (function(result)
                {function loop(t,i,b)
                  {if(! t)return fill(result,b);
                   var xs=t[2],x=t[1];
                   function _s2_(b){return loop(xs,i + 1 | 0,b)}
                   return caml_call2(_gs_,caml_call3(f,i,b,x),_s2_)}
                 return loop(t,0,init)})}
    function fold$15(t,init,f)
     {return foldi$0(t,init,function(param,a,x){return caml_call2(f,a,x)})}
    function seqmapi$0(t,f)
     {var _sZ_=Core_List[34];
      return caml_call2
              (_gv_,
               foldi$0
                (t,
                 0,
                 function(i,bs,a)
                  {function _s0_(b){return [0,b,bs]}
                   var _s1_=caml_call2(f,i,a);
                   return caml_call2(_gx_[2],_s1_,_s0_)}),
               _sZ_)}
    function all$1(ds){return seqmapi$0(ds,function(param,x){return x})}
    function all_unit$1(ds)
     {return caml_call1(ignore_m,fold$15(ds,0,function(param,d){return d}))}
    function iteri$0(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number" && -676829465 > how)
       return foldi$0(t,0,function(i,param,x){return caml_call2(f,i,x)});
      var _sX_=monad_sequence_how2(how,f),_sY_=caml_call1(Core[259],_sX_);
      return all_unit$1(caml_call2(Core_List[92],t,_sY_))}
    function mapi$0(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number" && -676829465 > how)return seqmapi$0(t,f);
      var _sV_=monad_sequence_how2(how,f),_sW_=caml_call1(Core[259],_sV_);
      return all$1(caml_call2(Core_List[92],t,_sW_))}
    function filteri$0(how,t,f)
     {function _sR_(bools)
       {function _sT_(ac,x,b){return b?[0,x,ac]:ac}
        var _sU_=caml_call4(Core_List[42],t,bools,0,_sT_);
        return caml_call1(Core_List[34],_sU_)}
      var _sS_=mapi$0(how,t,f);
      return caml_call2(_gx_[2],_sS_,_sR_)}
    function filter_mapi$0(how,t,f)
     {var _sQ_=Core_List[124];return caml_call2(_gv_,mapi$0(how,t,f),_sQ_)}
    function concat_mapi$0(how,t,f)
     {var _sP_=Core_List[133];return caml_call2(_gv_,mapi$0(how,t,f),_sP_)}
    function find_mapi$0(t,f)
     {function find_mapi(t,f,i)
       {if(! t)return caml_call1(_gw_,0);
        var tl=t[2],hd=t[1];
        function _sN_(some)
         {return some?caml_call1(_gw_,some):find_mapi(tl,f,i + 1 | 0)}
        var _sO_=caml_call2(f,i,hd);
        return caml_call2(_gx_[1],_sO_,_sN_)}
      return find_mapi(t,f,0)}
    function findi$0(t,f)
     {return find_mapi$0
              (t,
               function(i,elt)
                {function _sL_(b){return b?[0,[0,i,elt]]:0}
                 var _sM_=caml_call2(f,i,elt);
                 return caml_call2(_gx_[2],_sM_,_sL_)})}
    function find$1(t,f)
     {return find_mapi$0
              (t,
               function(param,elt)
                {function _sJ_(b){return b?[0,elt]:0}
                 var _sK_=caml_call1(f,elt);
                 return caml_call2(_gx_[2],_sK_,_sJ_)})}
    function existsi$0(t,f)
     {function _sF_(param){return param?1:0}
      var
       _sG_=
        find_mapi$0
         (t,
          function(i,elt)
           {function _sH_(b){return b?_jg_:0}
            var _sI_=caml_call2(f,i,elt);
            return caml_call2(_gx_[2],_sI_,_sH_)});
      return caml_call2(_gx_[2],_sG_,_sF_)}
    function for_alli$0(t,f)
     {function _sB_(param){return param?0:1}
      var
       _sC_=
        find_mapi$0
         (t,
          function(i,elt)
           {function _sD_(b){return b?0:_jh_}
            var _sE_=caml_call2(f,i,elt);
            return caml_call2(_gx_[2],_sE_,_sD_)});
      return caml_call2(_gx_[2],_sC_,_sB_)}
    function iter$16(how,t,f)
     {return iteri$0(how,t,function(param,a){return caml_call1(f,a)})}
    function map$18(how,t,f)
     {return mapi$0(how,t,function(param,a){return caml_call1(f,a)})}
    function filter$0(how,t,f)
     {return filteri$0(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map$0(how,t,f)
     {return filter_mapi$0(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map$0(how,t,f)
     {return concat_mapi$0(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map$0(t,f)
     {return find_mapi$0(t,function(param,a){return caml_call1(f,a)})}
    function exists$12(t,f)
     {return existsi$0(t,function(param,a){return caml_call1(f,a)})}
    function for_all$12(t,f)
     {return for_alli$0(t,function(param,a){return caml_call1(f,a)})}
    function init$0(how,n,f)
     {function _sz_(_sA_){return _sA_}
      return map$18(how,caml_call2(Core_List[119],n,_sz_),f)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$115);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_list$0);
    var
     Async_kernel_Deferred_list=
      [0,
       foldi$0,
       fold$15,
       find$1,
       findi$0,
       find_map$0,
       find_mapi$0,
       exists$12,
       existsi$0,
       for_all$12,
       for_alli$0,
       all$1,
       all_unit$1,
       init$0,
       iter$16,
       iteri$0,
       map$18,
       mapi$0,
       filter$0,
       filteri$0,
       filter_map$0,
       filter_mapi$0,
       concat_map$0,
       concat_mapi$0];
    caml_register_global
     (1163,Async_kernel_Deferred_list,"Async_kernel__Deferred_list");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_map);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$116);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$117,cst$40);
    function change(t,k,f)
     {function _sw_(opt)
       {function _sy_(param){return opt}
        return caml_call3(Core_Map[36],t,k,_sy_)}
      var _sx_=caml_call1(f,caml_call2(Core_Map[38],t,k));
      return caml_call2(_gx_[2],_sx_,_sw_)}
    function update(t,k,f)
     {function _su_(data){return caml_call3(Core_Map[32],t,k,data)}
      var _sv_=caml_call1(f,caml_call2(Core_Map[38],t,k));
      return caml_call2(_gx_[2],_sv_,_su_)}
    function iter_keys(how,t,f)
     {return iter$16(how,caml_call1(Core_Map[72],t),f)}
    function iter$17(how,t,f)
     {return iter$16(how,caml_call1(Core_Map[73],t),f)}
    function iteri$1(how,t,f)
     {function _st_(param)
       {var data=param[2],key=param[1];return caml_call2(f,key,data)}
      return iter$16(how,caml_call2(Core_Map[74],0,t),_st_)}
    function fold$16(t,init,f)
     {function _ss_(key,data,alist){return [0,[0,key,data],alist]}
      var alist_in_increasing_key_order=caml_call3(Core_Map[57],t,0,_ss_);
      return fold$15
              (alist_in_increasing_key_order,
               init,
               function(ac,param)
                {var data=param[2],key=param[1];
                 return caml_call3(f,key,data,ac)})}
    function fold_right(t,init,f)
     {function _sr_(key,data,alist){return [0,[0,key,data],alist]}
      var alist_in_decreasing_key_order=caml_call3(Core_Map[55],t,0,_sr_);
      return fold$15
              (alist_in_decreasing_key_order,
               init,
               function(ac,param)
                {var data=param[2],key=param[1];
                 return caml_call3(f,key,data,ac)})}
    function result(r){return r[3]}
    function filter_mapi$1(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number" && -676829465 > how)
       {var
         comparator=caml_call1(Core_Map[2],t),
         sequence=caml_call4(Core_Map[101],_ji_,0,0,t);
        return create$14
                (function(ivar)
                  {function _sn_(x)
                    {var _sq_=caml_call1(Base_Map[104][3][96][3],x);
                     return fill
                             (ivar,caml_call2(Core_Map[110][23],comparator,_sq_))}
                   function _so_(s,param,k)
                    {var data=param[2],key=param[1];
                     function _sp_(param)
                      {if(! param)return caml_call1(k,s);
                       var
                        data=param[1],
                        s$0=
                         caml_call4(Base_Map[104][3][96][2],s,comparator,key,data);
                       return caml_call1(k,s$0)}
                     return upon$1(caml_call2(f,key,data),_sp_)}
                   return caml_call4
                           (Core_Sequence[105],
                            sequence,
                            Base_Map[104][3][96][1],
                            _so_,
                            _sn_)})}
      var jobs=[0,0];
      function _sh_(key,data)
       {var job=[0,key,data,0];jobs[1] = [0,job,jobs[1]];return job}
      var job_map=caml_call2(Core_Map[52],t,_sh_);
      function _si_(param){return caml_call2(Core_Map[62],job_map,result)}
      function _sj_(job)
       {var data=job[2],key=job[1];
        function _sl_(x){job[3] = x;return 0}
        var _sm_=caml_call2(f,key,data);
        return caml_call2(_gx_[2],_sm_,_sl_)}
      var _sk_=iter$16([0,how],caml_call1(Base_List[38],jobs[1]),_sj_);
      return caml_call2(_gx_[2],_sk_,_si_)}
    function filter_map$1(how,t,f)
     {return filter_mapi$1
              (how,t,function(param,data){return caml_call1(f,data)})}
    function filter_keys(how,t,f)
     {return filter_mapi$1
              (how,
               t,
               function(key,data)
                {function _sf_(b){return b?[0,data]:0}
                 var _sg_=caml_call1(f,key);
                 return caml_call2(_gx_[2],_sg_,_sf_)})}
    function filter$1(how,t,f)
     {return filter_mapi$1
              (how,
               t,
               function(param,data)
                {function _sd_(b){return b?[0,data]:0}
                 var _se_=caml_call1(f,data);
                 return caml_call2(_gx_[2],_se_,_sd_)})}
    function filteri$1(how,t,f)
     {return filter_mapi$1
              (how,
               t,
               function(key,data)
                {function _sb_(b){return b?[0,data]:0}
                 var _sc_=caml_call2(f,key,data);
                 return caml_call2(_gx_[2],_sc_,_sb_)})}
    function mapi$1(how,t,f)
     {return filter_mapi$1
              (how,
               t,
               function(key,data)
                {function _r$_(z){return [0,z]}
                 var _sa_=caml_call2(f,key,data);
                 return caml_call2(_gx_[2],_sa_,_r$_)})}
    function map$19(how,t,f)
     {return mapi$1(how,t,function(param,data){return caml_call1(f,data)})}
    function merge(how,t1,t2,f)
     {function _r9_(thunk){return caml_call1(thunk,0)}
      function _r__(key,z)
       {return [0,function(param){return caml_call2(f,key,z)}]}
      return filter_map$1(how,caml_call3(Core_Map[77],t1,t2,_r__),_r9_)}
    function all$2(t){return map$19(0,t,function(_r8_){return _r8_})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$118);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_map$0);
    var
     Async_kernel_Deferred_map=
      [0,
       change,
       update,
       iter_keys,
       iter$17,
       iteri$1,
       map$19,
       mapi$1,
       fold$16,
       fold_right,
       filter_keys,
       filter$1,
       filteri$1,
       filter_map$1,
       filter_mapi$1,
       merge,
       all$2];
    caml_register_global
     (1168,Async_kernel_Deferred_map,"Async_kernel__Deferred_map");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_memo);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$119);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_memo_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$120,cst$41);
    function reraise(param)
     {if(0 === param[0]){var x=param[1];return x}
      var exn=param[1];
      return caml_call2(Base_Exn[8],exn,cst_caught_exception_in_memoiz)}
    function general(hashable,f)
     {function _r6_(a)
       {return try_with
                (0,0,0,0,_jk_,_jj_,function(param){return caml_call1(f,a)})}
      var f$0=caml_call3(Core_Memo[1],[0,hashable[4]],0,_r6_);
      function _r7_(a){return caml_call2(_gv_,caml_call1(f$0,a),reraise)}
      return caml_call1(Base_Staged[1],_r7_)}
    function unit$0(f)
     {function _r4_(param){return try_with(0,0,0,0,_jm_,_jl_,f)}
      var f$0=caml_call1(Core_Memo[3],_r4_);
      function _r5_(param){return caml_call2(_gv_,caml_call1(f$0,0),reraise)}
      return caml_call1(Base_Staged[1],_r5_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$121);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_memo$0);
    var Async_kernel_Deferred_memo=[0,general,unit$0];
    caml_register_global
     (1170,Async_kernel_Deferred_memo,"Async_kernel__Deferred_memo");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_opti);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$122);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$123,cst$42);
    function return$1(a){return return$0([0,a])}
    function bind$2(t,f)
     {return caml_call2
              (bind$0,
               t,
               function(param)
                {if(! param)return return$0(0);
                 var a=param[1];
                 return caml_call1(f,a)})}
    var
     map$20=
      [0,
       -198771759,
       function(t,f)
        {return caml_call2
                 (map$12,
                  t,
                  function(r){return caml_call2(Core_Option[29],r,f)})}],
     include$21=caml_call1(Base_Monad[1],[0,bind$2,return$1,map$20]),
     _jn_=include$21[1],
     _jo_=include$21[2],
     _jp_=include$21[3],
     _jq_=include$21[4],
     _jr_=include$21[5],
     _js_=include$21[6],
     _jt_=include$21[7],
     _ju_=include$21[8],
     _jv_=include$21[9],
     _jw_=include$21[10],
     _jx_=include$21[11];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$124);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_opti$0);
    var
     Async_kernel_Deferred_option=
      [0,_jn_,_jo_,_jp_,_jq_,_jr_,_js_,_jt_,_ju_,_jv_,_jw_,_jx_];
    caml_register_global
     (1171,Async_kernel_Deferred_option,"Async_kernel__Deferred_option");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_resu);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$125);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$126,cst$43);
    function combine(t1,t2,ok,err)
     {function _r2_(param)
       {var t2=param[2],t1=param[1];
        return caml_call4(Core_Result[40],t1,t2,ok,err)}
      var _r3_=caml_call2(_gx_[3],t1,t2);
      return caml_call2(_gx_[2],_r3_,_r2_)}
    function return$2(a){return return$0([0,a])}
    function bind$3(t,f)
     {return caml_call2
              (bind$0,
               t,
               function(error)
                {if(0 !== error[0])return return$0(error);
                 var a=error[1];
                 return caml_call1(f,a)})}
    var
     map$21=
      [0,
       -198771759,
       function(t,f)
        {return caml_call2
                 (map$12,
                  t,
                  function(r){return caml_call2(Core_Result[38],r,f)})}],
     include$22=caml_call1(Base_Monad[2],[0,bind$3,map$21,return$2]),
     symbol_bind$1=include$22[1],
     _jy_=include$22[2],
     Monad_infix$0=include$22[4],
     bind$4=include$22[5],
     return$3=include$22[6],
     _jA_=include$22[7],
     join$0=include$22[8],
     ignore_m$0=include$22[9],
     _jz_=include$22[3],
     _jB_=include$22[10],
     _jC_=include$22[11];
    function fail(x){return return$0([1,x])}
    function failf(format){return caml_call2(Core_Printf[4],fail,format)}
    function map_error(t,f)
     {return caml_call2
              (map$12,t,function(r){return caml_call2(Core_Result[39],r,f)})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$127);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_resu$0);
    var
     Async_kernel_Deferred_result=
      [0,
       symbol_bind$1,
       _jy_,
       _jz_,
       Monad_infix$0,
       bind$4,
       return$3,
       _jA_,
       join$0,
       ignore_m$0,
       _jB_,
       _jC_,
       fail,
       failf,
       map_error,
       combine];
    caml_register_global
     (1173,Async_kernel_Deferred_result,"Async_kernel__Deferred_result");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_or_e);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$128);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_or_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$129,cst$44);
    function apply(f,x)
     {function _r1_(e1,e2)
       {return caml_call2(Core_Error[24],0,[0,e1,[0,e2,0]])}
      return combine(f,x,function(f,x){return caml_call1(f,x)},_r1_)}
    var
     map$22=[0,-198771759,_jA_],
     include$23=caml_call1(Base_Applicative[5],[0,return$3,apply,map$22]),
     return$4=include$23[1],
     map$23=include$23[2],
     both$1=include$23[3],
     symbol$5=include$23[4],
     symbol$6=include$23[5],
     symbol$7=include$23[6],
     apply$0=include$23[8],
     map2=include$23[9],
     map3=include$23[10],
     all$3=include$23[11],
     all_unit$2=include$23[12],
     Applicative_infix=include$23[13],
     symbol_bind$2=Monad_infix$0[1],
     symbol_map$1=Monad_infix$0[2],
     Open_on_rhs$0=[0],
     _jD_=include$23[7];
    function fail$0(error){return return$0(caml_call1(Core_Result[27],error))}
    function ok_exn(t){return caml_call2(map$12,t,Core_Or_error[36])}
    function of_exn(exn){return return$0(caml_call2(Core_Or_error[37],0,exn))}
    function of_exn_result(t)
     {var arg=Core_Or_error[38];
      return caml_call2(map$12,t,function(eta){return caml_call2(arg,0,eta)})}
    function error$0(msg,v,sexp_of)
     {return return$0(caml_call5(Core_Or_error[39],0,0,msg,v,sexp_of))}
    function error_s(sexp)
     {return return$0(caml_call1(Core_Or_error[40],sexp))}
    function error_string(msg)
     {return return$0(caml_call1(Core_Or_error[41],msg))}
    function errorf(format){return caml_call2(Core[244],error_string,format)}
    function tag(t,tag)
     {var _rZ_=Core_Or_error[43];
      return caml_call2
              (map$12,t,function(_r0_){return caml_call2(_rZ_,_r0_,tag)})}
    function tag_s(t,tag)
     {var _rX_=Core_Or_error[44];
      return caml_call2
              (map$12,t,function(_rY_){return caml_call2(_rX_,_rY_,tag)})}
    function tag_s_lazy(t,tag)
     {var _rV_=Core_Or_error[45];
      return caml_call2
              (map$12,t,function(_rW_){return caml_call2(_rV_,_rW_,tag)})}
    function tag_arg(t,message,a,sexp_of_a)
     {return caml_call2
              (map$12,
               t,
               function(t)
                {return caml_call4(Core_Or_error[46],t,message,a,sexp_of_a)})}
    function unimplemented(msg)
     {return return$0(caml_call1(Core_Or_error[47],msg))}
    function combine_errors(l)
     {var _rU_=Core_Or_error[51];return caml_call2(map$12,all(l),_rU_)}
    function combine_errors_unit(l)
     {var _rT_=Core_Or_error[52];return caml_call2(map$12,all(l),_rT_)}
    function filter_ok_at_least_one(l)
     {var _rS_=Core_Or_error[53];return caml_call2(map$12,all(l),_rS_)}
    function find_map_ok(l,f)
     {return repeat_until_finished
              ([0,l,0],
               function(param)
                {var errors=param[2],l=param[1];
                 if(l)
                  {var
                    tl=l[2],
                    hd=l[1],
                    _rQ_=
                     function(param)
                      {if(0 === param[0])
                        {var result=param[1];return [0,-289386606,[0,result]]}
                       var current_error=param[1];
                       return [0,990972795,[0,tl,[0,current_error,errors]]]};
                   return caml_call2(map$12,caml_call1(f,hd),_rQ_)}
                 var
                  _rR_=caml_call1(Core_List[34],errors),
                  errors$0=caml_call2(Core_Error[24],0,_rR_);
                 return return$0([0,-289386606,[1,errors$0]])})}
    var ok_unit=caml_call1(return$4,0);
    function try_with$0(extract_exn,run,rest,here,name,f)
     {function _rP_(ok)
       {if(0 === ok[0])return ok;
        var exn=ok[1];
        return [1,caml_call2(Core_Error[25],0,exn)]}
      return caml_call2
              (map$12,try_with(here,0,name,extract_exn,run,rest,f),_rP_)}
    function try_with_join(extract_exn,run,rest,here,name,f)
     {var _rO_=Core_Or_error[27];
      return caml_call2
              (map$12,try_with$0(extract_exn,run,rest,here,name,f),_rO_)}
    function foldi$1(list,acc,f)
     {function loop(i,acc,param)
       {if(! param)return caml_call1(return$4,acc);
        var tl=param[2],hd=param[1];
        function _rN_(acc){return loop(i + 1 | 0,acc,tl)}
        return caml_call2(bind$4,caml_call3(f,i,acc,hd),_rN_)}
      return loop(0,acc,list)}
    function fold$17(t,init,f)
     {return foldi$1(t,init,function(param,a,x){return caml_call2(f,a,x)})}
    function iteri$2(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number" && -676829465 > how)
       return foldi$1(t,0,function(i,param,x){return caml_call2(f,i,x)});
      var _rL_=monad_sequence_how2(how,f),_rM_=caml_call1(Core[259],_rL_);
      return caml_call1(all_unit$2,caml_call2(Core_List[92],t,_rM_))}
    function mapi$2(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number" && -676829465 > how)
       {var _rH_=Core_List[34];
        return caml_call2
                (symbol_map$1,
                 foldi$1
                  (t,
                   0,
                   function(i,bs,a)
                    {function _rK_(b){return [0,b,bs]}
                     return caml_call2(map$23,caml_call2(f,i,a),_rK_)}),
                 _rH_)}
      var _rI_=monad_sequence_how2(how,f),_rJ_=caml_call1(Core[259],_rI_);
      return caml_call1(all$3,caml_call2(Core_List[92],t,_rJ_))}
    function filter_mapi$2(how,t,f)
     {var _rG_=Core_List[124];
      return caml_call2(symbol_map$1,mapi$2(how,t,f),_rG_)}
    function concat_mapi$1(how,t,f)
     {var _rF_=Core_List[133];
      return caml_call2(symbol_map$1,mapi$2(how,t,f),_rF_)}
    function filteri$2(how,t,f)
     {return filter_mapi$2
              (how,
               t,
               function(i,x)
                {function _rE_(b){return b?[0,x]:0}
                 return caml_call2(map$23,caml_call2(f,i,x),_rE_)})}
    function find_mapi$1(t,f)
     {function find_mapi(t,f,i)
       {if(! t)return caml_call1(return$4,0);
        var tl=t[2],hd=t[1];
        function _rD_(some)
         {return some?caml_call1(return$4,some):find_mapi(tl,f,i + 1 | 0)}
        return caml_call2(bind$4,caml_call2(f,i,hd),_rD_)}
      return find_mapi(t,f,0)}
    function findi$1(t,f)
     {return find_mapi$1
              (t,
               function(i,elt)
                {function _rC_(b){return b?[0,[0,i,elt]]:0}
                 return caml_call2(map$23,caml_call2(f,i,elt),_rC_)})}
    function find$2(t,f)
     {return find_mapi$1
              (t,
               function(param,elt)
                {function _rB_(b){return b?[0,elt]:0}
                 return caml_call2(map$23,caml_call1(f,elt),_rB_)})}
    function existsi$1(t,f)
     {function _rz_(param){return param?1:0}
      return caml_call2
              (map$23,
               find_mapi$1
                (t,
                 function(i,elt)
                  {function _rA_(b){return b?_jE_:0}
                   return caml_call2(map$23,caml_call2(f,i,elt),_rA_)}),
               _rz_)}
    function for_alli$1(t,f)
     {function _rx_(param){return param?0:1}
      return caml_call2
              (map$23,
               find_mapi$1
                (t,
                 function(i,elt)
                  {function _ry_(b){return b?0:_jF_}
                   return caml_call2(map$23,caml_call2(f,i,elt),_ry_)}),
               _rx_)}
    function iter$18(how,t,f)
     {return iteri$2(how,t,function(param,a){return caml_call1(f,a)})}
    function map$24(how,t,f)
     {return mapi$2(how,t,function(param,a){return caml_call1(f,a)})}
    function filter$2(how,t,f)
     {return filteri$2(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map$2(how,t,f)
     {return filter_mapi$2(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map$1(how,t,f)
     {return concat_mapi$1(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map$1(t,f)
     {return find_mapi$1(t,function(param,a){return caml_call1(f,a)})}
    function exists$13(t,f)
     {return existsi$1(t,function(param,a){return caml_call1(f,a)})}
    function for_all$13(t,f)
     {return for_alli$1(t,function(param,a){return caml_call1(f,a)})}
    function init$1(how,n,f)
     {function _rv_(_rw_){return _rw_}
      return map$24(how,caml_call2(Core_List[119],n,_rv_),f)}
    function repeat_until_finished$0(state,f)
     {function _ru_(param)
       {if(990972795 <= param[1])
         {var state=param[2];return repeat_until_finished$0(state,f)}
        var state$0=param[2];
        return caml_call1(return$4,state$0)}
      return caml_call2(bind$4,caml_call1(f,state),_ru_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$130);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_or_e$0);
    var
     Async_kernel_Deferred_or_error=
      [0,
       both$1,
       symbol$5,
       symbol$6,
       symbol$7,
       apply$0,
       map2,
       map3,
       Applicative_infix,
       symbol_bind$1,
       _jD_,
       Monad_infix$0,
       bind$4,
       return$4,
       map$23,
       join$0,
       ignore_m$0,
       all$3,
       all_unit$2,
       [0,
        return$4,
        symbol_bind$2,
        symbol_map$1,
        [0,return$4,bind$4,map$23,both$1,Open_on_rhs$0]],
       fail$0,
       ok_exn,
       of_exn,
       of_exn_result,
       error$0,
       error_s,
       error_string,
       errorf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       unimplemented,
       combine_errors,
       combine_errors_unit,
       filter_ok_at_least_one,
       find_map_ok,
       ok_unit,
       try_with$0,
       try_with_join,
       [0,
        foldi$1,
        fold$17,
        find$2,
        findi$1,
        find_map$1,
        find_mapi$1,
        exists$13,
        existsi$1,
        for_all$13,
        for_alli$1,
        all$3,
        all_unit$2,
        init$1,
        iter$18,
        iteri$2,
        map$24,
        mapi$2,
        filter$2,
        filteri$2,
        filter_map$2,
        filter_mapi$2,
        concat_map$1,
        concat_mapi$1],
       repeat_until_finished$0];
    caml_register_global
     (1175,Async_kernel_Deferred_or_error,"Async_kernel__Deferred_or_error");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_queu);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$131);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$132,cst$45);
    function foldi$2(t,init,f)
     {return foldi$0(caml_call1(Core_Queue[26],t),init,f)}
    function fold$18(t,init,f)
     {return fold$15(caml_call1(Core_Queue[26],t),init,f)}
    function all$4(t)
     {var _rt_=Core_Queue[38];
      return caml_call2(_gv_,all$1(caml_call1(Core_Queue[26],t)),_rt_)}
    function all_unit$3(t){return all_unit$1(caml_call1(Core_Queue[26],t))}
    function iter$19(how,t,f)
     {return iter$16(how,caml_call1(Core_Queue[26],t),f)}
    function iteri$3(how,t,f)
     {return iteri$0(how,caml_call1(Core_Queue[26],t),f)}
    function map$25(how,t,f)
     {var _rs_=Core_Queue[38];
      return caml_call2(_gv_,map$18(how,caml_call1(Core_Queue[26],t),f),_rs_)}
    function mapi$3(how,t,f)
     {var _rr_=Core_Queue[38];
      return caml_call2(_gv_,mapi$0(how,caml_call1(Core_Queue[26],t),f),_rr_)}
    function init$2(how,n,f)
     {var _rq_=Core_Queue[38];return caml_call2(_gv_,init$0(how,n,f),_rq_)}
    function filter$3(how,t,f)
     {var _rp_=Core_Queue[38];
      return caml_call2
              (_gv_,filter$0(how,caml_call1(Core_Queue[26],t),f),_rp_)}
    function filteri$3(how,t,f)
     {var _ro_=Core_Queue[38];
      return caml_call2
              (_gv_,filteri$0(how,caml_call1(Core_Queue[26],t),f),_ro_)}
    function filter_map$3(how,t,f)
     {var _rn_=Core_Queue[38];
      return caml_call2
              (_gv_,filter_map$0(how,caml_call1(Core_Queue[26],t),f),_rn_)}
    function filter_mapi$3(how,t,f)
     {var _rm_=Core_Queue[38];
      return caml_call2
              (_gv_,filter_mapi$0(how,caml_call1(Core_Queue[26],t),f),_rm_)}
    function concat_map$2(how,t,f)
     {var _rj_=Core_Queue[38];
      function _rk_(x)
       {var _rl_=Core_Queue[26];return caml_call2(_gv_,caml_call1(f,x),_rl_)}
      return caml_call2
              (_gv_,concat_map$0(how,caml_call1(Core_Queue[26],t),_rk_),_rj_)}
    function concat_mapi$2(how,t,f)
     {var _rg_=Core_Queue[38];
      function _rh_(i,x)
       {var _ri_=Core_Queue[26];
        return caml_call2(_gv_,caml_call2(f,i,x),_ri_)}
      return caml_call2
              (_gv_,concat_mapi$0(how,caml_call1(Core_Queue[26],t),_rh_),_rg_)}
    function find_map$2(t,f)
     {return find_map$0(caml_call1(Core_Queue[26],t),f)}
    function find_mapi$2(t,f)
     {return find_mapi$0(caml_call1(Core_Queue[26],t),f)}
    function find$3(t,f){return find$1(caml_call1(Core_Queue[26],t),f)}
    function findi$2(t,f){return findi$0(caml_call1(Core_Queue[26],t),f)}
    function for_all$14(t,f)
     {return for_all$12(caml_call1(Core_Queue[26],t),f)}
    function for_alli$2(t,f)
     {return for_alli$0(caml_call1(Core_Queue[26],t),f)}
    function exists$14(t,f){return exists$12(caml_call1(Core_Queue[26],t),f)}
    function existsi$2(t,f){return existsi$0(caml_call1(Core_Queue[26],t),f)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$133);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_queu$0);
    var
     Async_kernel_Deferred_queue=
      [0,
       foldi$2,
       fold$18,
       find$3,
       findi$2,
       find_map$2,
       find_mapi$2,
       exists$14,
       existsi$2,
       for_all$14,
       for_alli$2,
       all$4,
       all_unit$3,
       init$2,
       iter$19,
       iteri$3,
       map$25,
       mapi$3,
       filter$3,
       filteri$3,
       filter_map$3,
       filter_mapi$3,
       concat_map$2,
       concat_mapi$2];
    caml_register_global
     (1176,Async_kernel_Deferred_queue,"Async_kernel__Deferred_queue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred_sequ);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$134);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_sequence_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$135,cst$46);
    function fold_mapi(opt,t)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      return function(init,mapi_f,fold_f)
       {if(typeof how !== "number")
         {var
           max_concurrent_jobs=how[2],
           throttle=create$21(0,max_concurrent_jobs),
           loop$0=
            function(i,t,c)
             {function _rb_(param)
               {var match=caml_call1(Core_Sequence[47],t);
                if(! match)return c;
                var match$0=match[1],t$0=match$0[2],a=match$0[1];
                function _rd_(b)
                 {function _rf_(c){return caml_call2(fold_f,c,b)}
                  return caml_call2(_gx_[2],c,_rf_)}
                var
                 _re_=
                  enqueue$3
                   (throttle,function(param){return caml_call2(mapi_f,i,a)});
                return loop$0(i + 1 | 0,t$0,caml_call2(_gx_[1],_re_,_rd_))}
              var _rc_=capacity_available$1(throttle);
              return caml_call2(_gx_[1],_rc_,_rb_)};
          return loop$0(0,t,caml_call1(_gw_,init))}
        if(-676829465 > how)
         {var
           loop=
            function(i,t,c)
             {var match=caml_call1(Core_Sequence[47],t);
              if(! match)return caml_call1(_gw_,c);
              var match$0=match[1],t$0=match$0[2],a=match$0[1];
              function _q$_(b)
               {return loop(i + 1 | 0,t$0,caml_call2(fold_f,c,b))}
              var _ra_=caml_call2(mapi_f,i,a);
              return caml_call2(_gx_[1],_ra_,_q$_)};
          return loop(0,t,init)}
        var c$1=caml_call1(_gw_,init),i=0,t$0=t,c=c$1;
        for(;;)
         {var match=caml_call1(Core_Sequence[47],t$0);
          if(! match)return c;
          var
           match$0=match[1],
           t$1=match$0[2],
           a=match$0[1],
           _q8_=
            function(c)
              {return function(b)
                {function _q__(c){return caml_call2(fold_f,c,b)}
                 return caml_call2(_gx_[2],c,_q__)}}
             (c),
           _q9_=caml_call2(mapi_f,i,a),
           c$0=caml_call2(_gx_[1],_q9_,_q8_),
           i$0=i + 1 | 0,
           i=i$0,
           t$0=t$1,
           c=c$0}}}
    function foldi$3(t,init,f)
     {function _q4_(param){var b=param[2];return caml_call1(_gw_,b)}
      function _q5_(param,a,k)
       {var b=param[2],i=param[1];
        function _q6_(b){return caml_call1(k,[0,i + 1 | 0,b])}
        var _q7_=caml_call3(f,i,b,a);
        return caml_call2(_gx_[1],_q7_,_q6_)}
      return caml_call4(Core_Sequence[105],t,[0,0,init],_q5_,_q4_)}
    function fold$19(t,init,f)
     {function _q3_(b,a,k){return caml_call2(_gu_,caml_call2(f,b,a),k)}
      return caml_call4(Core_Sequence[105],t,init,_q3_,_gw_)}
    function all$5(t)
     {function _qZ_(res)
       {var _q2_=caml_call1(Core_List[34],res);
        return caml_call1(Core_Sequence[109],_q2_)}
      var
       _q0_=
        fold$19
         (t,
          0,
          function(accum,d)
           {function _q1_(a){return [0,a,accum]}
            return caml_call2(_gx_[2],d,_q1_)});
      return caml_call2(_gx_[2],_q0_,_qZ_)}
    function all_unit$4(t){return fold$19(t,0,function(param,v){return v})}
    function find_mapi$3(t,f)
     {function find_mapi(t,f,i)
       {var match=caml_call1(Core_Sequence[47],t);
        if(! match)return caml_call1(_gw_,0);
        var match$0=match[1],rest=match$0[2],v=match$0[1];
        function _qX_(some)
         {return some?caml_call1(_gw_,some):find_mapi(rest,f,i + 1 | 0)}
        var _qY_=caml_call2(f,i,v);
        return caml_call2(_gx_[1],_qY_,_qX_)}
      return find_mapi(t,f,0)}
    function findi$3(t,f)
     {return find_mapi$3
              (t,
               function(i,elt)
                {function _qV_(b){return b?[0,[0,i,elt]]:0}
                 var _qW_=caml_call2(f,i,elt);
                 return caml_call2(_gx_[2],_qW_,_qV_)})}
    function find$4(t,f)
     {return find_mapi$3
              (t,
               function(param,elt)
                {function _qT_(b){return b?[0,elt]:0}
                 var _qU_=caml_call1(f,elt);
                 return caml_call2(_gx_[2],_qU_,_qT_)})}
    function existsi$3(t,f)
     {function _qP_(param){return param?1:0}
      var
       _qQ_=
        find_mapi$3
         (t,
          function(i,elt)
           {function _qR_(b){return b?_jG_:0}
            var _qS_=caml_call2(f,i,elt);
            return caml_call2(_gx_[2],_qS_,_qR_)});
      return caml_call2(_gx_[2],_qQ_,_qP_)}
    function for_alli$3(t,f)
     {function _qL_(param){return param?0:1}
      var
       _qM_=
        find_mapi$3
         (t,
          function(i,elt)
           {function _qN_(b){return b?0:_jH_}
            var _qO_=caml_call2(f,i,elt);
            return caml_call2(_gx_[2],_qO_,_qN_)});
      return caml_call2(_gx_[2],_qM_,_qL_)}
    function iteri$4(how,t,f)
     {function _qJ_(param,_qK_){return 0}
      return caml_call3(fold_mapi(how,t),0,f,_qJ_)}
    function mapi$4(how,t,f)
     {function _qE_(bs)
       {var _qI_=caml_call1(Core_List[34],bs);
        return caml_call1(Core_Sequence[109],_qI_)}
      function _qF_(bs,b){return [0,b,bs]}
      function _qG_(i,a){return caml_call2(f,i,a)}
      var _qH_=caml_call3(fold_mapi(how,t),0,_qG_,_qF_);
      return caml_call2(_gx_[2],_qH_,_qE_)}
    function filter_mapi$4(how,t,f)
     {function _qz_(bs)
       {var _qD_=caml_call1(Core_List[34],bs);
        return caml_call1(Core_Sequence[109],_qD_)}
      function _qA_(bs,maybe_v)
       {if(! maybe_v)return bs;var b=maybe_v[1];return [0,b,bs]}
      function _qB_(i,a){return caml_call2(f,i,a)}
      var _qC_=caml_call3(fold_mapi(how,t),0,_qB_,_qA_);
      return caml_call2(_gx_[2],_qC_,_qz_)}
    function concat_mapi$3(how,t,f)
     {var _qy_=Core_Sequence[70];return caml_call2(_gv_,mapi$4(how,t,f),_qy_)}
    function filteri$4(how,t,f)
     {return filter_mapi$4
              (how,
               t,
               function(i,a)
                {function _qw_(param){return param?[0,a]:0}
                 var _qx_=caml_call2(f,i,a);
                 return caml_call2(_gx_[2],_qx_,_qw_)})}
    function iter$20(how,t,f)
     {return iteri$4(how,t,function(param,a){return caml_call1(f,a)})}
    function map$26(how,t,f)
     {return mapi$4(how,t,function(param,a){return caml_call1(f,a)})}
    function filter$4(how,t,f)
     {return filteri$4(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map$4(how,t,f)
     {return filter_mapi$4(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map$3(how,t,f)
     {return concat_mapi$3(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map$3(t,f)
     {return find_mapi$3(t,function(param,a){return caml_call1(f,a)})}
    function exists$15(t,f)
     {return existsi$3(t,function(param,a){return caml_call1(f,a)})}
    function for_all$15(t,f)
     {return for_alli$3(t,function(param,a){return caml_call1(f,a)})}
    function init$3(how,n,f)
     {function _qu_(_qv_){return _qv_}
      return map$26(how,caml_call2(Core_Sequence[83],n,_qu_),f)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$136);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred_sequ$0);
    var
     Async_kernel_Deferred_sequence=
      [0,
       foldi$3,
       fold$19,
       find$4,
       findi$3,
       find_map$3,
       find_mapi$3,
       exists$15,
       existsi$3,
       for_all$15,
       for_alli$3,
       all$5,
       all_unit$4,
       init$3,
       iter$20,
       iteri$4,
       map$26,
       mapi$4,
       filter$4,
       filteri$4,
       filter_map$4,
       filter_mapi$4,
       concat_map$3,
       concat_mapi$3];
    caml_register_global
     (1177,Async_kernel_Deferred_sequence,"Async_kernel__Deferred_sequence");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Deferred);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$137);
    caml_call1(Expect_test_collector[5][1],cst_src_deferred_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$138,cst$47);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$139);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Deferred$0);
    var
     _jI_=[0,Infix[1],Infix[2],Infix[3]],
     _jJ_=Let_syntax$0[4],
     include$24=
      [0,
       Let_syntax$0[3],
       Let_syntax$0[1],
       Let_syntax$0[2],
       [0,_jJ_[5],_jJ_[1],_jJ_[2],_jJ_[3],_jJ_[4]]],
     Async_kernel_Deferred=
      [0,
       sexp_of_t$21,
       invariant$8,
       create$14,
       upon$1,
       peek$0,
       value_exn$1,
       is_determined,
       _gp_,
       _gq_,
       Monad_infix,
       bind$0,
       return$0,
       map$12,
       join,
       ignore_m,
       include$24,
       _jI_,
       unit,
       never,
       both$0,
       all,
       all_unit,
       any,
       any_unit,
       don_t_wait_for,
       Choice,
       choice,
       enabled,
       choose,
       for$0,
       repeat_until_finished,
       forever,
       ok];
    caml_register_global(1178,Async_kernel_Deferred,"Async_kernel__Deferred");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Require_expli);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$140);
    caml_call1(Expect_test_collector[5][1],cst_src_require_explicit_time_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$141,cst$48);
    var
     _jK_=Async_kernel_Clock_ns[4],
     _jL_=Async_kernel_Clock_ns[3],
     _jM_=Async_kernel_Clock_ns[10],
     _jN_=Async_kernel_Clock_ns[5];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$142);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Require_expli$0);
    var
     Async_kernel_Require_explicit_=
      [0,
       Async_kernel_Clock_ns,
       [0,
        _a_,
        _b_,
        _c_,
        _d_,
        _e_,
        _f_,
        _g_,
        _h_,
        _i_,
        _j_,
        _k_,
        _l_,
        _m_,
        _n_,
        _o_,
        _p_,
        _q_,
        _r_,
        _s_,
        _t_,
        _u_,
        _v_,
        _w_,
        _x_,
        _y_,
        _z_,
        _A_,
        _B_,
        _C_,
        _D_,
        _E_,
        _F_,
        _G_,
        _H_,
        _I_,
        _J_,
        _K_,
        _L_,
        _M_,
        _N_,
        _O_,
        _P_,
        _Q_,
        _R_,
        _S_,
        _T_,
        _U_,
        _V_,
        _W_,
        _Y_,
        _Z_,
        ___,
        _$_,
        _aa_,
        _ab_,
        _ac_,
        _ad_,
        _ae_,
        _af_,
        _ag_,
        _ah_,
        _ai_,
        _aj_,
        _ak_,
        _al_,
        _am_,
        _an_,
        _ao_,
        _ap_,
        _aq_,
        _ar_,
        _as_,
        _at_,
        _au_,
        _av_,
        _aw_,
        _ax_,
        _ay_,
        _az_,
        _aA_,
        _aB_,
        _aC_,
        _aD_,
        _aE_,
        _aF_,
        _aG_,
        _aH_,
        _aI_,
        _aJ_,
        _aK_,
        _aL_,
        _aM_,
        _aN_,
        _aO_,
        _aP_,
        _aQ_,
        _aR_,
        _aS_,
        _aT_,
        _aU_,
        _aV_,
        _aW_,
        _aX_,
        _aY_,
        _aZ_,
        _a0_,
        _a1_,
        _a2_,
        _a3_,
        _a4_,
        _a5_,
        after,
        _X_],
       [0,
        Core_Time_float[1],
        Core_Time_float[2],
        Core_Time_float[3],
        Core_Time_float[4],
        Core_Time_float[5],
        Core_Time_float[6],
        Core_Time_float[7],
        Core_Time_float[8],
        Core_Time_float[9],
        Core_Time_float[10],
        Core_Time_float[11],
        Core_Time_float[12],
        Core_Time_float[14],
        Core_Time_float[15],
        Core_Time_float[16],
        Core_Time_float[17],
        Core_Time_float[18],
        Core_Time_float[19],
        Core_Time_float[20],
        Core_Time_float[21],
        Core_Time_float[22],
        Core_Time_float[23],
        Core_Time_float[24],
        Core_Time_float[25],
        Core_Time_float[26],
        Core_Time_float[27],
        Core_Time_float[28],
        Core_Time_float[29],
        Core_Time_float[30],
        Core_Time_float[31],
        Core_Time_float[32],
        Core_Time_float[33],
        Core_Time_float[34],
        Core_Time_float[35],
        Core_Time_float[36],
        Core_Time_float[37],
        Core_Time_float[38],
        Core_Time_float[39],
        Core_Time_float[40],
        Core_Time_float[41],
        Core_Time_float[42],
        Core_Time_float[43],
        Core_Time_float[45],
        Core_Time_float[46],
        Core_Time_float[48],
        Core_Time_float[49],
        Core_Time_float[50],
        Core_Time_float[51],
        Core_Time_float[52],
        Core_Time_float[53],
        Core_Time_float[54],
        Core_Time_float[55],
        Core_Time_float[56],
        Core_Time_float[57],
        Core_Time_float[58],
        Core_Time_float[59],
        Core_Time_float[60],
        Core_Time_float[61],
        Core_Time_float[62],
        Core_Time_float[63],
        Core_Time_float[64],
        Core_Time_float[65],
        Core_Time_float[66],
        Core_Time_float[67],
        Core_Time_float[68],
        Core_Time_float[69],
        Core_Time_float[70],
        Core_Time_float[71],
        Core_Time_float[72],
        Core_Time_float[73],
        Core_Time_float[74],
        Core_Time_float[75],
        Core_Time_float[76],
        Core_Time_float[77],
        Core_Time_float[78],
        Core_Time_float[79],
        Core_Time_float[80],
        Core_Time_float[81],
        Core_Time_float[82],
        Core_Time_float[93],
        Core_Time_float[94],
        Core_Time_float[95],
        Core_Time_float[96],
        Core_Time_float[97],
        Core_Time_float[98],
        Core_Time_float[99],
        Core_Time_float[100],
        Core_Time_float[101],
        Core_Time_float[102],
        Core_Time_float[103],
        Core_Time_float[104],
        Core_Time_float[105],
        Core_Time_float[106],
        Core_Time_float[107],
        Core_Time_float[108],
        Core_Time_float[109],
        Core_Time_float[110],
        Core_Time_float[111],
        Core_Time_float[112],
        Core_Time_float[113],
        Core_Time_float[114],
        Core_Time_float[115],
        Core_Time_float[47]],
       [0,
        current_execution_context$3,
        _i3_,
        _iY_,
        _iZ_,
        _i0_,
        with_local$0,
        find_local$0,
        _i1_,
        _i2_,
        enqueue_job$0,
        thread_safe_enqueue_job,
        _i4_,
        _i5_,
        cycle_times,
        cycle_times_ns,
        last_cycle_time$1,
        long_cycles$0,
        cycle_count$2,
        total_cycle_time$2,
        event_precision$0,
        event_precision_ns,
        force_current_cycle_to_end$0,
        set_max_num_jobs_per_priority_$1,
        max_num_jobs_per_priority_per_$2,
        set_record_backtraces$1,
        yield$4,
        yield_until_no_jobs_remain$2,
        yield_every$0,
        num_jobs_run$2,
        num_pending_jobs$0,
        cycle_start$2,
        cycle_start_ns],
       [0,
        Core_Date[1],
        Core_Date[2],
        Core_Date[3],
        Core_Date[4],
        Core_Date[5],
        Core_Date[6],
        Core_Date[7],
        Core_Date[8],
        Core_Date[9],
        Core_Date[10],
        Core_Date[11],
        Core_Date[12],
        Core_Date[13],
        Core_Date[14],
        Core_Date[15],
        Core_Date[16],
        Core_Date[20],
        Core_Date[21],
        Core_Date[22],
        Core_Date[23],
        Core_Date[24],
        Core_Date[25],
        Core_Date[26],
        Core_Date[27],
        Core_Date[28],
        Core_Date[29],
        Core_Date[30],
        Core_Date[31],
        Core_Date[32],
        Core_Date[33],
        Core_Date[34],
        Core_Date[35],
        Core_Date[36],
        Core_Date[37],
        Core_Date[38],
        Core_Date[39],
        Core_Date[41],
        Core_Date[44],
        Core_Date[45],
        Core_Date[46],
        Core_Date[47],
        Core_Date[48],
        Core_Date[49],
        Core_Date[50],
        Core_Date[51],
        Core_Date[52],
        Core_Date[53],
        Core_Date[54],
        Core_Date[55],
        Core_Date[56],
        Core_Date[57],
        Core_Date[58],
        Core_Date[59],
        Core_Date[60],
        Core_Date[61],
        Core_Date[62],
        Core_Date[63],
        Core_Date[64],
        Core_Date[65],
        Core_Date[66],
        Core_Date[67],
        Core_Date[68],
        Core_Date[69],
        Core_Date[70],
        Core_Date[71],
        Core_Date[72],
        Core_Date[73],
        Core_Date[74],
        Core_Date[75],
        Core_Date[76],
        Core_Date[77],
        Core_Date[78],
        Core_Date[79],
        Core_Date[80],
        Core_Date[81],
        Core_Date[82],
        Core_Date[83],
        Core_Date[84],
        Core_Date[85],
        Core_Date[86],
        Core_Date[92],
        Core_Date[94],
        Core_Date[95],
        Core_Date[96],
        Core_Date[93]],
       _jL_,
       _jK_,
       _jM_,
       _jN_];
    caml_register_global
     (1181,
      Async_kernel_Require_explicit_,
      "Async_kernel__Require_explicit_time_source");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Pipe);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$143);
    caml_call1(Expect_test_collector[5][1],cst_src_pipe_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$144,cst$49);
    var show_debug_messages=[0,0],check_invariant=[0,0];
    function compare$2(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(17724 <= a_001)
       {if(17724 === b_002)return 0}
      else
       if(-402004920 === b_002)return 0;
      return caml_int_compare(a_001,b_002)}
    function sexp_of_t$39(param){return 17724 <= param?_jO_:_jP_}
    function equal$2(x_003,x_004)
     {var match=compare$2(x_003,x_004);return 0 === match?1:0}
    function combine$0(l)
     {function _qs_(l)
       {var match=caml_call3(Core_List[6],l,-402004920,equal$2);
        return match?-402004920:17724}
      var _qt_=all(l);
      return caml_call2(_gx_[2],_qt_,_qs_)}
    function downstream_flushed(r){return r[3]}
    function values_read(r){return r[2]}
    function set_values_read(r,v){r[2] = v;return 0}
    function pipe_id(r){return r[1]}
    function _jQ_(r,v){return [0,r[1],r[2],v]}
    var
     _jR_=0,
     downstream_flushed$0=
      [0,
       function(param){return 0},
       cst_downstream_flushed,
       _jR_,
       downstream_flushed,
       _jQ_];
    function _jS_(r,v){return [0,r[1],v,r[3]]}
    var
     _jT_=[0,set_values_read],
     values_read$0=
      [0,function(param){return 0},cst_values_read,_jT_,values_read,_jS_];
    function _jU_(r,v){return [0,v,r[2],r[3]]}
    var
     _jV_=0,
     pipe_id$0=[0,function(param){return 0},cst_pipe_id,_jV_,pipe_id,_jU_];
    function iter$21(pipe_id_fun,values_read_fun,downstream_flushed_fun)
     {caml_call1(pipe_id_fun,pipe_id$0);
      caml_call1(values_read_fun,values_read$0);
      return caml_call1(downstream_flushed_fun,downstream_flushed$0)}
    function sexp_of_t$40(param)
     {var pipe_id_009=param[1],values_read_011=param[2],bnds_008=0;
      function _qq_(_qr_){return 0}
      var
       arg_015=caml_call1(Sexplib0_Sexp_conv[24],_qq_),
       bnds_008$0=[0,[1,[0,_jW_,[0,arg_015,0]]],bnds_008];
      if(typeof values_read_011 === "number")
       var arg_012=_jX_;
      else
       var
        v_013=values_read_011[2],
        arg_012=[1,[0,_j0_,[0,sexp_of_t$20(Core[518],v_013),0]]];
      var
       bnds_008$1=[0,[1,[0,_jY_,[0,arg_012,0]]],bnds_008$0],
       arg_010=caml_call1(Core[356],pipe_id_009),
       bnds_008$2=[0,[1,[0,_jZ_,[0,arg_010,0]]],bnds_008$1];
      return [1,bnds_008$2]}
    function invariant$17(t)
     {try
       {var
         _ql_=function(_qp_){return 0},
         _qm_=
          function(field)
           {var param=caml_call2(Base_Field[3],field,t);
            if(typeof param === "number")return 0;
            var ivar=param[2];
            if(is_empty(ivar))return 0;
            throw [0,Assert_failure,_j3_]},
         _qn_=iter$21(function(_qo_){return 0},_qm_,_ql_);
        return _qn_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _qi_=[0,[1,[0,_j1_,[0,sexp_of_t$40(t),0]]],0],
         _qj_=[0,[1,[0,_j2_,[0,caml_call1(Core[537],exn),0]]],_qi_],
         _qk_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Pipe_Consumer_invariant_fa),
            _qj_]];
        return caml_call1(Core[253],_qk_)}}
    function start(t)
     {return typeof t[2] === "number"
              ?(t[2] = [0,-122467239,caml_call1(create$13,0)],0)
              :0}
    function values_sent_downstream(t)
     {var _qh_=t[2];
      if(typeof _qh_ === "number")return 0;
      var ivar=_qh_[2];
      fill(ivar,0);
      t[2] = -758792467;
      return 0}
    function values_sent_downstream_and_flu(t)
     {var _qf_=t[2];
      if(typeof _qf_ === "number")return caml_call1(t[3],0);
      var when_sent_downstream=_qf_[2];
      function _qg_(param){return caml_call1(t[3],0)}
      return caml_call2(_gx_[1],when_sent_downstream,_qg_)}
    function consumer(r){return r[2]}
    function wants(r){return r[1]}
    function _kb_(r,v){return [0,r[1],v]}
    var
     _kc_=0,
     consumer$0=[0,function(param){return 0},cst_consumer,_kc_,consumer,_kb_];
    function _kd_(r,v){return [0,v,r[2]]}
    var
     _ke_=0,
     wants$0=[0,function(param){return 0},cst_wants,_ke_,wants,_kd_];
    function iter$22(wants_fun,consumer_fun)
     {caml_call1(wants_fun,wants$0);
      return caml_call1(consumer_fun,consumer$0)}
    function sexp_of_t$41(of_a_029,param)
     {var
       consumer_033=param[2],
       wants_031=param[1],
       arg_034=caml_call2(Core[454],sexp_of_t$40,consumer_033),
       bnds_030=[0,[1,[0,_kf_,[0,arg_034,0]]],0];
      switch(wants_031[0])
       {case 0:
         var
          arg0_018=wants_031[1],
          res0_019=
           sexp_of_t$20
            (function(param){return 3456156 <= param?_j4_:_j5_},arg0_018),
          arg_032=[1,[0,_j6_,[0,res0_019,0]]];
         break;
        case 1:
         var
          arg0_021=wants_031[1],
          res0_022=
           sexp_of_t$20
            (function(param)
              {if(typeof param === "number")return _j7_;
               var v_020=param[2];
               return [1,[0,_j8_,[0,caml_call1(of_a_029,v_020),0]]]},
             arg0_021),
          arg_032=[1,[0,_j9_,[0,res0_022,0]]];
         break;
        default:
         var
          arg1_025=wants_031[2],
          arg0_024=wants_031[1],
          res0_026=caml_call1(Core[356],arg0_024),
          res1_027=
           sexp_of_t$20
            (function(param)
              {if(typeof param === "number")return _j__;
               var v_023=param[2];
               return [1,
                       [0,_j$_,[0,caml_call2(Core_Queue[11],of_a_029,v_023),0]]]},
             arg1_025),
          arg_032=[1,[0,_ka_,[0,res0_026,[0,res1_027,0]]]]}
      var bnds_030$0=[0,[1,[0,_kg_,[0,arg_032,0]]],bnds_030];
      return [1,bnds_030$0]}
    function invariant$18(t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _p$_=
          function(param)
           {if(! param)return 0;
            var consumer=param[1];
            return invariant$17(consumer)},
         _qa_=function(_qe_){return check(_p$_,_qe_)},
         _qb_=
          function(param)
           {if(2 !== param[0])return 0;
            var i=param[1];
            if(caml_call2(symbol$2,i,0))return 0;
            throw [0,Assert_failure,_kk_]},
         _qc_=iter$22(function(_qd_){return check(_qb_,_qd_)},_qa_);
        return _qc_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _p6_=0,
         _p7_=0,
         _p8_=
          [0,
           [1,
            [0,
             _ki_,
             [0,
              function(x_035)
                {return sexp_of_t$41(function(param){return _kh_},x_035)}
               (t),
              _p7_]]],
           _p6_],
         _p9_=[0,[1,[0,_kj_,[0,caml_call1(Core[537],exn),0]]],_p8_],
         _p__=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Pipe_Blocked_read_invarian),
            _p9_]];
        return caml_call1(Core[253],_p__)}}
    function fill_with_eof(t)
     {var _p5_=t[1];
      switch(_p5_[0])
       {case 0:var i=_p5_[1];return fill(i,3456156);
        case 1:var i$0=_p5_[1];return fill(i$0,3456156);
        default:var i$1=_p5_[2];return fill(i$1,3456156)}}
    function fill_when_num_values_read(r){return r[1]}
    function sexp_of_t$42(param)
     {var
       ready_039=param[2],
       fill_when_num_values_read_037=param[1],
       bnds_036=0,
       arg_040=
        sexp_of_t$20
         (function(param){return 17724 <= param?_kl_:_km_},ready_039),
       bnds_036$0=[0,[1,[0,_kn_,[0,arg_040,0]]],bnds_036],
       arg_038=caml_call1(Core[356],fill_when_num_values_read_037),
       bnds_036$1=[0,[1,[0,_ko_,[0,arg_038,0]]],bnds_036$0];
      return [1,bnds_036$1]}
    function fill$2(t,v){return fill(t[2],v)}
    function upstream_flusheds(r){return r[12]}
    function consumers(r){return r[11]}
    function set_consumers(r,v){r[11] = v;return 0}
    function read_closed(r){return r[10]}
    function closed$0(r){return r[9]}
    function blocked_reads(r){return r[8]}
    function blocked_flushes(r){return r[7]}
    function num_values_read(r){return r[6]}
    function set_num_values_read(r,v){r[6] = v;return 0}
    function pushback(r){return r[5]}
    function set_pushback(r,v){r[5] = v;return 0}
    function size_budget(r){return r[4]}
    function set_size_budget(r,v){r[4] = v;return 0}
    function buffer(r){return r[3]}
    function set_buffer(r,v){r[3] = v;return 0}
    function info(r){return r[2]}
    function set_info(r,v){r[2] = v;return 0}
    function id$5(r){return r[1]}
    function _kp_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11],v]}
    var
     _kq_=0,
     upstream_flusheds$0=
      [0,
       function(param){return 0},
       cst_upstream_flusheds,
       _kq_,
       upstream_flusheds,
       _kp_];
    function _kr_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],v,r[12]]}
    var
     _ks_=[0,set_consumers],
     consumers$0=
      [0,function(param){return 0},cst_consumers,_ks_,consumers,_kr_];
    function _kt_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v,r[11],r[12]]}
    var
     _ku_=0,
     read_closed$0=
      [0,function(param){return 0},cst_read_closed,_ku_,read_closed,_kt_];
    function _kv_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10],r[11],r[12]]}
    var
     _kw_=0,
     closed$1=[0,function(param){return 0},cst_closed,_kw_,closed$0,_kv_];
    function _kx_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10],r[11],r[12]]}
    var
     _ky_=0,
     blocked_reads$0=
      [0,function(param){return 0},cst_blocked_reads,_ky_,blocked_reads,_kx_];
    function _kz_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10],r[11],r[12]]}
    var
     _kA_=0,
     blocked_flushes$0=
      [0,
       function(param){return 0},
       cst_blocked_flushes,
       _kA_,
       blocked_flushes,
       _kz_];
    function _kB_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10],r[11],r[12]]}
    var
     _kC_=[0,set_num_values_read],
     num_values_read$0=
      [0,
       function(param){return 0},
       cst_num_values_read,
       _kC_,
       num_values_read,
       _kB_];
    function _kD_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10],r[11],r[12]]}
    var
     _kE_=[0,set_pushback],
     pushback$0=[0,function(param){return 0},cst_pushback,_kE_,pushback,_kD_];
    function _kF_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10],r[11],r[12]]}
    var
     _kG_=[0,set_size_budget],
     size_budget$0=
      [0,function(param){return 0},cst_size_budget,_kG_,size_budget,_kF_];
    function _kH_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11],r[12]]}
    var
     _kI_=[0,set_buffer],
     buffer$0=[0,function(param){return 0},cst_buffer,_kI_,buffer,_kH_];
    function _kJ_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11],r[12]]}
    var
     _kK_=[0,set_info],
     info$0=[0,function(param){return 0},cst_info,_kK_,info,_kJ_];
    function _kL_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11],r[12]]}
    var _kM_=0,id$6=[0,function(param){return 0},cst_id$2,_kM_,id$5,_kL_];
    function iter$23
     (id_fun,
      info_fun,
      buffer_fun,
      size_budget_fun,
      pushback_fun,
      num_values_read_fun,
      blocked_flushes_fun,
      blocked_reads_fun,
      closed_fun,
      read_closed_fun,
      consumers_fun,
      upstream_flusheds_fun)
     {caml_call1(id_fun,id$6);
      caml_call1(info_fun,info$0);
      caml_call1(buffer_fun,buffer$0);
      caml_call1(size_budget_fun,size_budget$0);
      caml_call1(pushback_fun,pushback$0);
      caml_call1(num_values_read_fun,num_values_read$0);
      caml_call1(blocked_flushes_fun,blocked_flushes$0);
      caml_call1(blocked_reads_fun,blocked_reads$0);
      caml_call1(closed_fun,closed$1);
      caml_call1(read_closed_fun,read_closed$0);
      caml_call1(consumers_fun,consumers$0);
      return caml_call1(upstream_flusheds_fun,upstream_flusheds$0)}
    function sexp_of_pipe(of_a_041,of_phantom_042,param)
     {var
       id_044=param[1],
       info_046=param[2],
       buffer_050=param[3],
       size_budget_052=param[4],
       pushback_054=param[5],
       num_values_read_056=param[6],
       read_closed_064=param[10],
       closed_062=param[9],
       blocked_reads_060=param[8],
       blocked_flushes_058=param[7],
       consumers_066=param[11],
       upstream_flusheds_068=param[12],
       bnds_043=0;
      function _p0_(param)
       {function _p3_(_p4_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_p3_)}
      var
       arg_069=caml_call2(Core_Bag[3],_p0_,upstream_flusheds_068),
       bnds_043$0=[0,[1,[0,_kN_,[0,arg_069,0]]],bnds_043],
       arg_067=caml_call2(Core[421],sexp_of_t$40,consumers_066),
       bnds_043$1=[0,[1,[0,_kO_,[0,arg_067,0]]],bnds_043$0],
       arg_065=sexp_of_t$20(Core[518],read_closed_064),
       bnds_043$2=[0,[1,[0,_kP_,[0,arg_065,0]]],bnds_043$1],
       arg_063=sexp_of_t$20(Core[518],closed_062),
       bnds_043$3=[0,[1,[0,_kQ_,[0,arg_063,0]]],bnds_043$2];
      function _p1_(_p2_){return sexp_of_t$41(of_a_041,_p2_)}
      var
       arg_061=caml_call2(Core_Queue[11],_p1_,blocked_reads_060),
       bnds_043$4=[0,[1,[0,_kR_,[0,arg_061,0]]],bnds_043$3],
       arg_059=caml_call2(Core_Queue[11],sexp_of_t$42,blocked_flushes_058),
       bnds_043$5=[0,[1,[0,_kS_,[0,arg_059,0]]],bnds_043$4],
       arg_057=caml_call1(Core[356],num_values_read_056),
       bnds_043$6=[0,[1,[0,_kT_,[0,arg_057,0]]],bnds_043$5],
       arg_055=sexp_of_t$20(Core[518],pushback_054),
       bnds_043$7=[0,[1,[0,_kU_,[0,arg_055,0]]],bnds_043$6],
       arg_053=caml_call1(Core[356],size_budget_052),
       bnds_043$8=[0,[1,[0,_kV_,[0,arg_053,0]]],bnds_043$7],
       arg_051=caml_call2(Core_Queue[11],of_a_041,buffer_050),
       bnds_043$9=[0,[1,[0,_kW_,[0,arg_051,0]]],bnds_043$8];
      if(info_046)
       var
        v_047=info_046[1],
        arg_049=caml_call1(Core_Sexp[90],v_047),
        bnd_048=[1,[0,_kX_,[0,arg_049,0]]],
        bnds_043$10=[0,bnd_048,bnds_043$9];
      else
       var bnds_043$10=bnds_043$9;
      var
       arg_045=caml_call2(Sexp_hidden_in_test[10],Core[356],id_044),
       bnds_043$11=[0,[1,[0,_kY_,[0,arg_045,0]]],bnds_043$10];
      return [1,bnds_043$11]}
    function hash(t){return caml_call1(Core_Hashtbl[1],t[1])}
    function equal$3(t1,t2){return caml_call2(Core[246],t1,t2)}
    function compare$3(t1,t2){return caml_call2(Core_Int[91],t1[1],t2[1])}
    function is_closed$0(t){return is_full(t[9])}
    function is_read_closed(t){return is_full(t[10])}
    function closed$2(t){return t[9]}
    function pushback$1(t){return t[5]}
    function length$5(t){return caml_call1(Core_Queue[14],t[3])}
    function is_empty$1(t){return caml_call2(symbol$1,length$5(t),0)}
    function invariant$19(t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _pi_=function(_pZ_){return 0},
         _pj_=
          function(l)
           {function _pY_(consumer)
             {invariant$17(consumer);
              if(caml_call2(symbol$1,consumer[1],t[1]))return 0;
              throw [0,Assert_failure,_k3_]}
            return caml_call2(Core_List[9],l,_pY_)},
         _pk_=function(_pX_){return check(_pj_,_pX_)},
         _pl_=function(_pW_){return 0},
         _pm_=function(_pV_){return 0},
         _pn_=
          function(blocked_reads)
           {if
             (1 - is_empty$1(t) && ! caml_call1(Core_Queue[15],blocked_reads))
             throw [0,Assert_failure,_k6_];
            function _pR_(read)
             {invariant$18(read);
              var _pT_=read[1];
              switch(_pT_[0])
               {case 0:var i=_pT_[1],_pU_=is_empty(i);break;
                case 1:var i$0=_pT_[1],_pU_=is_empty(i$0);break;
                default:var i$1=_pT_[2],_pU_=is_empty(i$1)}
              if(_pU_)return 0;
              throw [0,Assert_failure,_k4_]}
            caml_call2(Core_Queue[16],blocked_reads,_pR_);
            var _pS_=is_closed$0(t);
            if(! _pS_)return _pS_;
            if(caml_call1(Core_Queue[15],blocked_reads))return 0;
            throw [0,Assert_failure,_k5_]},
         _po_=function(_pQ_){return check(_pn_,_pQ_)},
         _pp_=
          function(blocked_flushes)
           {function _pL_(f)
             {if(caml_call2(symbol$2,f[1],t[6]))return 0;
              throw [0,Assert_failure,_k7_]}
            caml_call2(Core_Queue[16],blocked_flushes,_pL_);
            var
             _pM_=Core_Int[91],
             _pN_=caml_call1(Core_Queue[26],blocked_flushes),
             _pO_=caml_call2(Core_List[72],_pN_,fill_when_num_values_read);
            if(! caml_call2(Core_List[140],_pO_,_pM_))
             throw [0,Assert_failure,_k9_];
            var _pP_=is_empty$1(t);
            if(! _pP_)return _pP_;
            if(caml_call1(Core_Queue[15],blocked_flushes))return 0;
            throw [0,Assert_failure,_k8_]},
         _pq_=function(_pK_){return check(_pp_,_pK_)},
         _pr_=function(_pJ_){return 0},
         _ps_=
          function(pushback)
           {var
             _pF_=t[4],
             _pG_=caml_call2(symbol$0,length$5(t),_pF_),
             _pH_=_pG_ || is_closed$0(t),
             _pI_=is_full(pushback);
            if(caml_call2(Core_Bool[27],_pI_,_pH_))return 0;
            throw [0,Assert_failure,_k__]},
         _pt_=function(_pE_){return check(_ps_,_pE_)},
         _pu_=
          function(size_budget)
           {if(caml_call2(symbol,size_budget,0))return 0;
            throw [0,Assert_failure,_k$_]},
         _pv_=function(_pD_){return check(_pu_,_pD_)},
         _pw_=function(_pC_){return 0},
         _px_=function(_pB_){return 0},
         _py_=
          iter$23
           (function(_pA_){return 0},
            _px_,
            _pw_,
            _pv_,
            _pt_,
            _pr_,
            _pq_,
            _po_,
            _pm_,
            _pl_,
            _pk_,
            _pi_);
        return _py_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _pd_=0,
         _pe_=0,
         _pf_=
          [0,
           [1,
            [0,
             _k1_,
             [0,
              function(x_073)
                {function _pz_(param){return _kZ_}
                 return sexp_of_pipe(function(param){return _k0_},_pz_,x_073)}
               (t),
              _pe_]]],
           _pd_],
         _pg_=[0,[1,[0,_k2_,[0,caml_call1(Core[537],exn),0]]],_pf_],
         _ph_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Pipe_invariant_failed),
            _pg_]];
        return caml_call1(Core[253],_ph_)}}
    function sexp_of_phantom(param){throw [0,Assert_failure,_la_]}
    function sexp_of_t$43(of_a_074,x_075)
     {return sexp_of_pipe(of_a_074,sexp_of_phantom,x_075)}
    function sexp_of_phantom$0(param){throw [0,Assert_failure,_lb_]}
    function sexp_of_t$44(of_a_076,x_077)
     {return sexp_of_pipe(of_a_076,sexp_of_phantom$0,x_077)}
    var id_ref=[0,0];
    function create_internal$1(size_budget,info,initial_buffer)
     {id_ref[1]++;
      var
       _o9_=caml_call1(Core_Bag[22],0),
       _o__=caml_call1(create$13,0),
       _o$_=caml_call1(create$13,0),
       _pa_=caml_call2(Core_Queue[61],0,0),
       _pb_=caml_call2(Core_Queue[61],0,0),
       _pc_=caml_call1(create$13,0),
       t=
        [0,
         id_ref[1],
         info,
         initial_buffer,
         size_budget,
         _pc_,
         0,
         _pb_,
         _pa_,
         _o$_,
         _o__,
         0,
         _o9_];
      return t}
    function validate_size_budget(size_budget)
     {if(! caml_call2(symbol$3,size_budget,0))return size_budget;
      var
       _o7_=[0,[1,[0,_lc_,[0,caml_call1(Core[356],size_budget),0]]],0],
       _o8_=
        [1,
         [0,caml_call1(Sexplib0_Sexp_conv[7],cst_negative_size_budget),_o7_]];
      return caml_call1(Core[253],_o8_)}
    function create$22(size_budget,info,param)
     {if(size_budget)
       var v=size_budget[1],size_budget$0=validate_size_budget(v);
      else
       var size_budget$0=0;
      var
       t=
        create_internal$1(size_budget$0,info,caml_call2(Core_Queue[61],0,0));
      fill(t[5],0);
      if(check_invariant[1])invariant$19(t);
      return [0,t,t]}
    function update_pushback(t)
     {var _o4_=t[4];
      if(! caml_call2(symbol$0,length$5(t),_o4_) && ! is_closed$0(t))
       {var
         _o5_=is_full(t[5]),
         _o6_=_o5_?(t[5] = caml_call1(create$13,0),0):_o5_;
        return _o6_}
      return fill_if_empty(t[5],0)}
    function close(t)
     {if(show_debug_messages[1])
       caml_call3
        (eprints,
         cst_close,
         t,
         function(x_078)
          {function _o3_(param){return _ld_}
           return sexp_of_pipe(function(param){return _le_},_o3_,x_078)});
      if(check_invariant[1])invariant$19(t);
      var _o2_=1 - is_closed$0(t);
      if(! _o2_)return _o2_;
      fill(t[9],0);
      if(is_empty$1(t))
       {caml_call2(Core_Queue[16],t[8],fill_with_eof);
        caml_call1(Core_Queue[47],t[8])}
      return update_pushback(t)}
    function close_read(t)
     {if(show_debug_messages[1])
       caml_call3
        (eprints,
         cst_close_read,
         t,
         function(x_079)
          {function _o1_(param){return _lf_}
           return sexp_of_pipe(function(param){return _lg_},_o1_,x_079)});
      if(check_invariant[1])invariant$19(t);
      var _oZ_=1 - is_read_closed(t);
      if(! _oZ_)return _oZ_;
      fill(t[10],0);
      function _o0_(flush){return fill$2(flush,-402004920)}
      caml_call2(Core_Queue[16],t[7],_o0_);
      caml_call1(Core_Queue[47],t[7]);
      caml_call1(Core_Queue[47],t[3]);
      update_pushback(t);
      return close(t)}
    function create_reader_not_close_on_exc(size_budget,f)
     {var match=create$22(size_budget,0,0),w=match[2],r=match[1];
      function _oY_(param){return close(w)}
      upon$1(caml_call1(f,w),_oY_);
      return r}
    function create_reader(size_budget,close_on_exception,f)
     {if(! close_on_exception)
       return create_reader_not_close_on_exc(size_budget,f);
      var match=create$22(size_budget,0,0),w=match[2],r=match[1];
      function _oX_(param){close(w);return caml_call1(_gw_,0)}
      protect(0,0,0,0,_li_,_lh_,function(param){return caml_call1(f,w)},_oX_);
      return r}
    function create_writer(size_budget,f)
     {var match=create$22(size_budget,0,0),w=match[2],r=match[1];
      function _oW_(param){close_read(r);return caml_call1(_gw_,0)}
      protect(0,0,0,0,_lk_,_lj_,function(param){return caml_call1(f,r)},_oW_);
      return w}
    function values_were_read(t,consumer)
     {caml_call2(Core_Option[41],consumer,start);
      for(;;)
       {var match=caml_call1(Core_Queue[45],t[7]);
        if(! match)return 0;
        var flush=match[1],_oU_=caml_call2(symbol,t[6],flush[1]);
        if(! _oU_)return _oU_;
        caml_call1(Core_Queue[44],t[7]);
        if(consumer)
         {var
           consumer$0=consumer[1],
           _oV_=
            function(flush)
              {return function(flush_result)
                {return fill$2(flush,flush_result)}}
             (flush);
          upon$1(values_sent_downstream_and_flu(consumer$0),_oV_)}
        else
         fill$2(flush,17724)}}
    function consume_one(t,consumer)
     {if(! caml_call2(symbol,length$5(t),1))throw [0,Assert_failure,_ll_];
      var result=caml_call1(Core_Queue[44],t[3]);
      t[6] = t[6] + 1 | 0;
      values_were_read(t,consumer);
      update_pushback(t);
      return result}
    function consume(t,max_queue_length,consumer)
     {if(! caml_call2(symbol,max_queue_length,0))
       throw [0,Assert_failure,_lm_];
      if(caml_call2(symbol,max_queue_length,length$5(t)))
       {var result=t[3];
        t[3] = caml_call2(Core_Queue[61],0,0);
        var _oT_=caml_call1(Core_Queue[14],result);
        t[6] = t[6] + _oT_ | 0;
        values_were_read(t,consumer);
        update_pushback(t);
        return result}
      t[6] = t[6] + max_queue_length | 0;
      values_were_read(t,consumer);
      var result$0=caml_call2(Core_Queue[61],[0,max_queue_length],0);
      caml_call4(Core_Queue[64],t[3],result$0,[0,max_queue_length],0);
      update_pushback(t);
      return result$0}
    function set_size_budget$0(t,size_budget)
     {var size_budget$0=validate_size_budget(size_budget);
      t[4] = size_budget$0;
      return update_pushback(t)}
    function start_write(t)
     {if(show_debug_messages[1])
       caml_call3
        (eprints,
         cst_write,
         t,
         function(x_080)
          {function _oS_(param){return _ln_}
           return sexp_of_pipe(function(param){return _lo_},_oS_,x_080)});
      if(check_invariant[1])invariant$19(t);
      var _oM_=is_closed$0(t);
      if(! _oM_)return _oM_;
      var _oN_=0,_oO_=0;
      function _oP_(param){return _lp_}
      var
       _oQ_=
        [0,
         [1,
          [0,_lr_,[0,sexp_of_pipe(function(param){return _lq_},_oP_,t),_oO_]]],
         _oN_],
       _oR_=
        [1,
         [0,caml_call1(Sexplib0_Sexp_conv[7],cst_write_to_closed_pipe),_oQ_]];
      return caml_call1(Core[253],_oR_)}
    function finish_write(t)
     {for(;;)
       {if(! caml_call1(Core_Queue[15],t[8]) && ! is_empty$1(t))
         {var
           blocked_read=caml_call1(Core_Queue[44],t[8]),
           consumer=blocked_read[2],
           _oL_=blocked_read[1];
          switch(_oL_[0])
           {case 0:var ivar=_oL_[1];fill(ivar,17724);break;
            case 1:
             var ivar$0=_oL_[1];
             fill(ivar$0,[0,17724,consume_one(t,consumer)]);
             break;
            default:
             var ivar$1=_oL_[2],max_queue_length=_oL_[1];
             fill(ivar$1,[0,17724,consume(t,max_queue_length,consumer)])}
          continue}
        return update_pushback(t)}}
    function transfer_in_without_pushback(t,from)
     {start_write(t);
      caml_call4(Core_Queue[64],from,t[3],0,0);
      return finish_write(t)}
    function transfer_in(t,from)
     {transfer_in_without_pushback(t,from);return t[5]}
    function write(t,q){return transfer_in(t,q)}
    function write_without_pushback(t,value)
     {start_write(t);
      caml_call2(Core_Queue[41],t[3],value);
      return finish_write(t)}
    function write$0(t,value){write_without_pushback(t,value);return t[5]}
    function write_when_ready(t,f)
     {function _oK_(param)
       {return is_closed$0(t)
                ?-1025106484
                :[0,
                  17724,
                  caml_call1
                   (f,function(x){return write_without_pushback(t,x)})]}
      return caml_call2(_gx_[2],t[5],_oK_)}
    function write_if_open(t,x)
     {return is_closed$0(t)?caml_call1(_gw_,0):write$0(t,x)}
    function write_without_pushback_if_open(t,x)
     {var _oJ_=1 - is_closed$0(t);
      return _oJ_?write_without_pushback(t,x):_oJ_}
    function ensure_consumer_matches(consumer,t)
     {if(! consumer)return 0;
      var consumer$0=consumer[1],_oD_=caml_call2(symbol$4,t[1],consumer$0[1]);
      if(! _oD_)return _oD_;
      var
       _oE_=0,
       _oF_=0,
       _oG_=
        [0,
         [1,[0,_lt_,[0,sexp_of_t$43(function(param){return _ls_},t),_oF_]]],
         _oE_],
       _oH_=[0,[1,[0,_lu_,[0,sexp_of_t$40(consumer$0),0]]],_oG_],
       _oI_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_Attempt_to_use_consumer_wi),
          _oH_]];
      return caml_call1(Core[253],_oI_)}
    function start_read(consumer,t,label)
     {if(show_debug_messages[1])
       caml_call3
        (eprints,
         label,
         t,
         function(x_084)
          {function _oC_(param){return _lv_}
           return sexp_of_pipe(function(param){return _lw_},_oC_,x_084)});
      if(check_invariant[1])invariant$19(t);
      return ensure_consumer_matches(consumer,t)}
    function gen_read_now(consumer,t,consume)
     {start_read(consumer,t,cst_read_now);
      if(is_empty$1(t))return is_closed$0(t)?3456156:-445537353;
      if(caml_call1(Core_Queue[15],t[8]))
       return [0,17724,caml_call2(consume,t,consumer)];
      throw [0,Assert_failure,_lx_]}
    function get_max_queue_length(max_queue_length)
     {if(! max_queue_length)return Core_Int[41];
      var max_queue_length$0=max_queue_length[1];
      if(caml_call2(symbol$0,max_queue_length$0,0))
       {var
         _oA_=
          [0,[1,[0,_ly_,[0,caml_call1(Core[356],max_queue_length$0),0]]],0],
         _oB_=
          [1,
           [0,caml_call1(Sexplib0_Sexp_conv[7],cst_max_queue_length_0),_oA_]];
        caml_call1(Core[253],_oB_)}
      return max_queue_length$0}
    function read_now(consumer,max_queue_length,t)
     {var max_queue_length$0=get_max_queue_length(max_queue_length);
      return gen_read_now
              (consumer,
               t,
               function(t,consumer)
                {return consume(t,max_queue_length$0,consumer)})}
    function read_now$0(consumer,t)
     {return gen_read_now(consumer,t,consume_one)}
    function peek$1(t){return caml_call1(Core_Queue[45],t[3])}
    function clear$1(t){read_now(0,0,t);return 0}
    function read(consumer,max_queue_length,t)
     {var max_queue_length$0=get_max_queue_length(max_queue_length);
      start_read(consumer,t,cst_read);
      var r=read_now(consumer,[0,max_queue_length$0],t);
      if(typeof r === "number" && 3456156 > r)
       return create$14
               (function(ivar)
                 {return caml_call2
                          (Core_Queue[41],
                           t[8],
                           [0,[2,max_queue_length$0,ivar],consumer])});
      return caml_call1(_gw_,r)}
    function read$0(consumer,t)
     {start_read(consumer,t,cst_read$0);
      if(is_empty$1(t))
       return is_closed$0(t)
               ?caml_call1(_gw_,3456156)
               :create$14
                 (function(ivar)
                   {return caml_call2
                            (Core_Queue[41],t[8],[0,[1,ivar],consumer])});
      if(caml_call1(Core_Queue[15],t[8]))
       return caml_call1(_gw_,[0,17724,consume_one(t,consumer)]);
      throw [0,Assert_failure,_lz_]}
    function read_exn(consumer,t)
     {function _ox_(param)
       {if(typeof param === "number")
         {var
           _oz_=
            caml_call1(Sexplib0_Sexp_conv[7],cst_Pipe_read_exn_received_EOF);
          return caml_call1(Core[253],_oz_)}
        var value=param[2];
        return value}
      var _oy_=read$0(consumer,t);
      return caml_call2(_gx_[2],_oy_,_ox_)}
    function values_available(t)
     {start_read(0,t,cst_values_available);
      if(! is_empty$1(t))return caml_call1(_gw_,17724);
      if(is_closed$0(t))return caml_call1(_gw_,3456156);
      var match=caml_call1(Core_Queue[62],t[8]);
      if(match)
       {var _ov_=match[1],_ow_=_ov_[1];
        if(0 === _ow_[0] && ! _ov_[2]){var ivar=_ow_[1];return ivar}}
      return create$14
              (function(ivar)
                {return caml_call2(Core_Queue[41],t[8],[0,[0,ivar],0])})}
    function read_choice(t)
     {function _ou_(param){return read_now$0(0,t)}
      return [0,values_available(t),_ou_]}
    function read_choice_single_consumer_ex(t,here)
     {function _oq_(x)
       {if(typeof x === "number" && 3456156 > x)
         {var
           _os_=
            [0,
             [1,[0,_lA_,[0,caml_call1(Core_Source_code_position[1],here),0]]],
             0],
           _ot_=
            [1,
             [0,
              caml_call1(Sexplib0_Sexp_conv[7],cst_Pipe_read_choice_single_co),
              _os_]];
          return caml_call1(Core[253],_ot_)}
        return x}
      var _or_=read_choice(t);
      return caml_call2(Choice[1],_or_,_oq_)}
    function read_exactly(consumer,t,num_values)
     {start_read(consumer,t,cst_read_exactly);
      if(caml_call2(symbol$0,num_values,0))
       {var
         _om_=[0,[1,[0,_lB_,[0,caml_call1(Core[356],num_values),0]]],0],
         _on_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Pipe_read_exactly_got_num_),
            _om_]];
        caml_call1(Core[253],_on_)}
      return create$14
              (function(finish)
                {var result=caml_call2(Core_Queue[61],0,0);
                 function loop(param)
                  {var already_read=caml_call1(Core_Queue[14],result);
                   if(! caml_call2(symbol$0,already_read,num_values))
                    throw [0,Assert_failure,_lC_];
                   if(caml_call2(symbol$1,already_read,num_values))
                    return fill(finish,[0,-876407060,result]);
                   function _oo_(param)
                    {if(typeof param === "number")
                      {var
                        _op_=
                         caml_call2(symbol$1,already_read,0)
                          ?3456156
                          :[0,287952037,result];
                       return fill(finish,_op_)}
                     var q=param[2];
                     caml_call4(Core_Queue[64],q,result,0,0);
                     return loop(0)}
                   return caml_call2
                           (_gs_,
                            read(consumer,[0,num_values - already_read | 0],t),
                            _oo_)}
                 return loop(0)})}
    function downstream_flushed$1(t)
     {return is_empty$1(t)
              ?caml_call1(Core_List[8],t[11])
                ?caml_call1(_gw_,17724)
                :combine$0
                  (caml_call2
                    (Core_List[72],t[11],values_sent_downstream_and_flu))
              :create$14
                (function(ready)
                  {var _ol_=length$5(t);
                   return caml_call2
                           (Core_Queue[41],t[7],[0,t[6] + _ol_ | 0,ready])})}
    function upstream_flushed(t)
     {if(caml_call1(Core_Bag[6],t[12]))return downstream_flushed$1(t);
      function _oj_(f){return caml_call1(f,0)}
      var _ok_=caml_call1(Core_Bag[17],t[12]);
      return combine$0(caml_call2(Core_List[72],_ok_,_oj_))}
    function add_consumer(t,downstream_flushed)
     {var consumer=[0,t[1],-758792467,downstream_flushed];
      t[11] = [0,consumer,t[11]];
      return consumer}
    function consumer$1(param){var t=param[1];return t[2]}
    function create$23(upstream,downstream)
     {function upstream_flushed$0(param){return upstream_flushed(upstream)}
      var _oi_=caml_call2(Core_Bag[23],downstream[12],upstream_flushed$0);
      return [0,
              [0,
               downstream,
               add_consumer
                (upstream,
                 function(param){return downstream_flushed$1(downstream)}),
               _oi_]]}
    function sexp_of_t$45(param)
     {if(typeof param === "number")return param?_lD_:_lE_;
      var arg0_085=param[1],res0_086=sexp_of_t$40(arg0_085);
      return [1,[0,_lF_,[0,res0_086,0]]]}
    var Flushed=[0,sexp_of_t$45];
    function fold_gen(read_now,opt,t,init,f)
     {if(opt)var sth=opt[1],flushed=sth;else var flushed=1;
      if(typeof flushed === "number")
       var
        consumer=
         flushed
          ?0
          :[0,add_consumer(t,function(param){return caml_call1(_gw_,17724)})];
      else
       var consumer$0=flushed[1],consumer=[0,consumer$0];
      if(check_invariant[1])invariant$19(t);
      ensure_consumer_matches(consumer,t);
      return create$14
              (function(finished)
                {function _og_(param)
                  {function loop(b)
                    {var match=caml_call2(read_now,consumer,t);
                     if(typeof match !== "number")
                      {var v=match[2];return caml_call3(f,b,v,continue$0)}
                     if(3456156 <= match)return fill(finished,b);
                     function _oh_(param){return loop(b)}
                     return caml_call2(_gs_,values_available(t),_oh_)}
                   function continue$0(b)
                    {caml_call2(Core_Option[41],consumer,values_sent_downstream);
                     return loop(b)}
                   return loop(init)}
                 return caml_call2(_gs_,caml_call1(_gw_,0),_og_)})}
    function fold$20(flushed,max_queue_length,t,init,f)
     {function _od_(b,q,loop){return caml_call2(_gs_,caml_call2(f,b,q),loop)}
      return fold_gen
              (function(_oe_)
                {return function(_of_)
                  {return read_now(_oe_,max_queue_length,_of_)}},
               flushed,
               t,
               init,
               _od_)}
    function fold$21(flushed,t,init,f)
     {return fold_gen
              (read_now$0,
               flushed,
               t,
               init,
               function(b,a,loop)
                {return caml_call2(_gs_,caml_call2(f,b,a),loop)})}
    function fold_without_pushback(consumer,t,init,f)
     {function _ob_(b,a,loop){return caml_call1(loop,caml_call2(f,b,a))}
      if(consumer)var c=consumer[1],_oc_=[0,[0,c]];else var _oc_=0;
      return fold_gen(read_now$0,_oc_,t,init,_ob_)}
    function with_error_to_current_monitor(opt,f,a)
     {if(opt)
       var sth=opt[1],continue_on_error=sth;
      else
       var continue_on_error=0;
      if(! continue_on_error)return caml_call1(f,a);
      function _n__(param)
       {if(0 === param[0])return 0;
        var exn=param[1],_oa_=extract_exn$0(exn);
        return send_exn(current(0),0,_oa_)}
      var
       _n$_=
        try_with(0,0,0,0,_lH_,_lG_,function(param){return caml_call1(f,a)});
      return caml_call2(_gx_[2],_n$_,_n__)}
    function iter$24(continue_on_error,flushed,max_queue_length,t,f)
     {return fold$20
              (flushed,
               max_queue_length,
               t,
               0,
               function(param,q)
                {return with_error_to_current_monitor(continue_on_error,f,q)})}
    function iter$25(continue_on_error,flushed,t,f)
     {return fold_gen
              (read_now$0,
               flushed,
               t,
               0,
               function(param,a,loop)
                {function _n9_(param){return caml_call1(loop,0)}
                 return caml_call2
                         (_gs_,
                          with_error_to_current_monitor(continue_on_error,f,a),
                          _n9_)})}
    function iter_without_pushback(consumer,opt,max_iterations_per_job,t,f)
     {if(opt)
       var sth=opt[1],continue_on_error=sth;
      else
       var continue_on_error=0;
      ensure_consumer_matches(consumer,t);
      if(max_iterations_per_job)
       {var max_iterations_per_job$0=max_iterations_per_job[1];
        if(caml_call2(symbol$0,max_iterations_per_job$0,0))
         {var
           _n3_=
            [0,
             [1,[0,_lI_,[0,caml_call1(Core[356],max_iterations_per_job$0),0]]],
             0],
           _n4_=
            [1,
             [0,
              caml_call1(Sexplib0_Sexp_conv[7],cst_iter_without_pushback_got_),
              _n3_]];
          caml_call1(Core[253],_n4_)}
        var max_iterations_per_job$1=max_iterations_per_job$0}
      else
       var max_iterations_per_job$1=Core_Int[41];
      var
       f$0=
        continue_on_error
         ?function(a)
           {try
             {var _n8_=caml_call1(f,a);return _n8_}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              return send_exn(current(0),0,exn)}}
         :f;
      return create$14
              (function(finished)
                {function _n5_(param)
                  {function start(param)
                    {var remaining=max_iterations_per_job$1;
                     for(;;)
                      {if(caml_call2(symbol$1,remaining,0))
                        {var _n6_=function(param){return start(0)};
                         return caml_call2(_gs_,caml_call1(_gw_,0),_n6_)}
                       var match=read_now$0(consumer,t);
                       if(typeof match !== "number")
                        {var a=match[2];
                         caml_call1(f$0,a);
                         var remaining$0=remaining - 1 | 0,remaining=remaining$0;
                         continue}
                       if(3456156 <= match)return fill(finished,0);
                       var _n7_=function(param){return start(0)};
                       return caml_call2(_gs_,values_available(t),_n7_)}}
                   return start(0)}
                 return caml_call2(_gs_,caml_call1(_gw_,0),_n5_)})}
    function drain(t)
     {return iter$24(0,0,0,t,function(param){return caml_call1(_gw_,0)})}
    function drain_and_count(t)
     {return fold$20
              (0,
               0,
               t,
               0,
               function(sum,q)
                {return caml_call1
                         (_gw_,sum + caml_call1(Core_Queue[14],q) | 0)})}
    function read_all(input)
     {var result=caml_call2(Core_Queue[61],0,0);
      function _n1_(param){return result}
      var
       _n2_=
        iter$24
         (0,
          0,
          0,
          input,
          function(q)
           {caml_call4(Core_Queue[64],q,result,0,0);return caml_call1(_gw_,0)});
      return caml_call2(_gx_[2],_n2_,_n1_)}
    function to_list$13(r)
     {var _n0_=Core_Queue[26];return caml_call2(_gv_,read_all(r),_n0_)}
    function to_stream_deprecated(t)
     {return create$19
              (function(tail)
                {function _nZ_(param){return close_exn(tail)}
                 return caml_call2
                         (_gs_,
                          iter_without_pushback
                           (0,0,0,t,function(x){return extend(tail,x)}),
                          _nZ_)})}
    function of_stream_deprecated(s)
     {var
       match=create$22(0,0,0),
       w=match[2],
       r=match[1],
       q=caml_call2(Core_Queue[61],0,0);
      function transfer(param)
       {var _nY_=1 - caml_call1(Core_Queue[15],q);
        return _nY_?(write(w,q),0):_nY_}
      function loop$0(counter,s)
       {if(is_closed$0(w))throw [0,Assert_failure,_lJ_];
        var next_deferred=caml_call1(_g0_,s),match=peek$0(next_deferred);
        if(! match)
         {transfer(0);return upon$1(next_deferred,check_closed_loop_next)}
        var next=match[1];
        if(counter >= 50)return caml_trampoline_return(loop_next$0,[0,next]);
        var counter$0=counter + 1 | 0;
        return loop_next$0(counter$0,next)}
      function loop_next$0(counter,param)
       {if(! param){transfer(0);return close(w)}
        var s=param[2],x=param[1];
        caml_call2(Core_Queue[41],q,x);
        if(counter >= 50)return caml_trampoline_return(loop$0,[0,s]);
        var counter$0=counter + 1 | 0;
        return loop$0(counter$0,s)}
      function loop(s){return caml_trampoline(loop$0(0,s))}
      function loop_next(param){return caml_trampoline(loop_next$0(0,param))}
      function check_closed_loop_next(next)
       {var _nX_=1 - is_closed$0(w);return _nX_?loop_next(next):_nX_}
      loop(s);
      return r}
    function transfer_gen(read_now,write,input,output,f)
     {if(check_invariant[1]){invariant$19(input);invariant$19(output)}
      var param=create$23(input,output),consumer=consumer$1(param);
      function unlink(param$0)
       {var t=param[1];return caml_call2(Core_Bag[26],t[1][12],t[3])}
      return create$14
              (function(result)
                {function _nP_(param)
                  {function output_closed(param)
                    {close_read(input);unlink(0);return fill(result,0)}
                   function loop(param)
                    {if(is_closed$0(output))return output_closed(0);
                     var match=caml_call2(read_now,[0,consumer],input);
                     if(typeof match !== "number")
                      {var x=match[2];return caml_call2(f,x,continue$0)}
                     if(3456156 <= match){unlink(0);return fill(result,0)}
                     function _nQ_(param){return loop(0)}
                     var _nR_=0;
                     function _nS_(_nW_){return 0}
                     var _nT_=[0,[0,output[9],_nS_],_nR_];
                     function _nU_(_nV_){return 0}
                     return caml_call2
                             (_gs_,
                              choose([0,[0,values_available(input),_nU_],_nT_]),
                              _nQ_)}
                   function continue$0(y)
                    {if(is_closed$0(output))return output_closed(0);
                     var pushback=caml_call2(write,output,y);
                     values_sent_downstream(consumer);
                     return caml_call2
                             (_gs_,pushback,function(param){return loop(0)})}
                   return loop(0)}
                 return caml_call2(_gs_,caml_call1(_gw_,0),_nP_)})}
    function transfer(max_queue_length,input,output,f)
     {function _nM_(q,k){return caml_call2(_gs_,caml_call1(f,q),k)}
      return transfer_gen
              (function(_nN_)
                {return function(_nO_)
                  {return read_now(_nN_,max_queue_length,_nO_)}},
               write,
               input,
               output,
               _nM_)}
    function transfer$0(input,output,f)
     {return transfer_gen
              (read_now$0,
               write$0,
               input,
               output,
               function(a,k){return caml_call1(k,caml_call1(f,a))})}
    function transfer_id(max_queue_length,input,output)
     {function _nJ_(q,k){return caml_call1(k,q)}
      return transfer_gen
              (function(_nK_)
                {return function(_nL_)
                  {return read_now(_nK_,max_queue_length,_nL_)}},
               write,
               input,
               output,
               _nJ_)}
    function map_gen(read,write,input,f)
     {function _nH_(info)
       {return [1,[0,_lK_,[0,caml_call1(Core_Sexp[90],info),0]]]}
      var
       info=caml_call2(Core_Option[29],input[2],_nH_),
       match=create$22(0,info,0),
       output=match[2],
       result=match[1];
      function _nI_(param){return close(output)}
      upon$1(transfer_gen(read,write,input,output,f),_nI_);
      return result}
    function map$27(max_queue_length,input,f)
     {function _nE_(q,k){return caml_call2(_gs_,caml_call1(f,q),k)}
      return map_gen
              (function(_nF_)
                {return function(_nG_)
                  {return read_now(_nF_,max_queue_length,_nG_)}},
               write,
               input,
               _nE_)}
    function map$28(input,f)
     {return map_gen
              (read_now$0,
               write$0,
               input,
               function(a,k){return caml_call1(k,caml_call1(f,a))})}
    function concat_map_list(max_queue_length,input,f)
     {function _nB_(q,k){return caml_call1(k,caml_call2(Core_Queue[51],q,f))}
      return map_gen
              (function(_nC_)
                {return function(_nD_)
                  {return read_now(_nC_,max_queue_length,_nD_)}},
               write,
               input,
               _nB_)}
    function filter_map$5(max_queue_length,input,f)
     {return map$27
              (max_queue_length,input,function(q){return filter_map$3(0,q,f)})}
    function filter_map$6(max_queue_length,input,f)
     {function _nx_(q,k)
       {function _nA_(x){return is_read_closed(input)?0:caml_call1(f,x)}
        return caml_call1(k,caml_call2(Core_Queue[53],q,_nA_))}
      return map_gen
              (function(_ny_)
                {return function(_nz_)
                  {return read_now(_ny_,max_queue_length,_nz_)}},
               write,
               input,
               _nx_)}
    function folding_filter_map(max_queue_length,input,init,f)
     {var accum=[0,init];
      return filter_map$5
              (max_queue_length,
               input,
               function(x)
                {function _nv_(param)
                  {var x=param[2],a=param[1];accum[1] = a;return x}
                 var _nw_=caml_call2(f,accum[1],x);
                 return caml_call2(_gx_[2],_nw_,_nv_)})}
    function folding_filter_map$0(max_queue_length,input,init,f)
     {var accum=[0,init];
      return filter_map$6
              (max_queue_length,
               input,
               function(x)
                {var match=caml_call2(f,accum[1],x),x$0=match[2],a=match[1];
                 accum[1] = a;
                 return x$0})}
    function folding_map(max_queue_length,input,init,f)
     {return folding_filter_map$0
              (max_queue_length,
               input,
               init,
               function(accum,a)
                {var match=caml_call2(f,accum,a),b=match[2],accum$0=match[1];
                 return [0,accum$0,[0,b]]})}
    function filter$5(input,f)
     {return filter_map$6(0,input,function(x){return caml_call1(f,x)?[0,x]:0})}
    function of_list$2(l)
     {var t=create_internal$1(0,0,caml_call1(Core_Queue[38],l));
      fill(t[9],0);
      update_pushback(t);
      return t}
    function empty(param){return of_list$2(0)}
    function singleton(x)
     {var match=create$22(0,0,0),writer=match[2],reader=match[1];
      write_without_pushback(writer,x);
      close(writer);
      return reader}
    function unfold$0(s,f)
     {function symbol(d,f)
       {var match=peek$0(d);
        if(! match)return caml_call2(_gu_,d,f);
        var x=match[1];
        return caml_call1(f,x)}
      return create_reader
              (0,
               0,
               function(writer)
                {function loop(s)
                  {function _nt_(param)
                    {if(! param)return caml_call1(_gw_,0);
                     var match=param[1],s=match[2],a=match[1];
                     if(is_closed$0(writer))return caml_call1(_gw_,0);
                     function _nu_(param){return loop(s)}
                     return symbol(write$0(writer,a),_nu_)}
                   return symbol(caml_call1(f,s),_nt_)}
                 return loop(s)})}
    function of_sequence(sequence)
     {return create_reader
              (0,
               0,
               function(writer)
                {function loop(sequence$1)
                  {if
                    (!
                     is_closed$0(writer)
                     &&
                     !
                     caml_call1(Core_Sequence[16],sequence$1))
                    {start_write(writer);
                     var
                      _nr_=length$5(writer),
                      i$1=(1 + writer[4] | 0) - _nr_ | 0,
                      sequence=sequence$1,
                      i=i$1;
                     for(;;)
                      {if(! caml_call2(symbol$0,i,0))
                        {var match=caml_call1(Core_Sequence[47],sequence);
                         if(match)
                          {var match$0=match[1],sequence$0=match$0[2],a=match$0[1];
                           caml_call2(Core_Queue[41],writer[3],a);
                           var i$0=i - 1 | 0,sequence=sequence$0,i=i$0;
                           continue}}
                       finish_write(writer);
                       var _ns_=function(param){return loop(sequence)};
                       return caml_call2(_gx_[1],writer[5],_ns_)}}
                   return caml_call1(_gw_,0)}
                 return loop(sequence)})}
    function to_sequence(t)
     {function _nq_(param)
       {var match=read_now$0(0,t);
        if(typeof match === "number")
         return 3456156 <= match?0:[0,[0,[1,values_available(t)],0]];
        var a=match[2];
        return [0,[0,[0,a],0]]}
      return caml_call2(Core_Sequence[49],0,_nq_)}
    function interleave_pipe(inputs)
     {var
       match=
        create$22
         (0,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_Pipe_interleave)],0),
       output_writer=match[2],
       output=match[1],
       num_pipes_remaining=[0,1];
      function decr_num_pipes_remaining(param)
       {num_pipes_remaining[1] += -1;
        var _np_=caml_call2(symbol$1,num_pipes_remaining[1],0);
        return _np_?close(output_writer):_np_}
      function _nl_(param){return decr_num_pipes_remaining(0)}
      var
       _nm_=
        iter_without_pushback
         (0,
          0,
          0,
          inputs,
          function(input)
           {num_pipes_remaining[1]++;
            function _nn_(param){return decr_num_pipes_remaining(0)}
            var _no_=transfer_id(0,input,output_writer);
            caml_call2(_gx_[2],_no_,_nn_);
            return 0});
      caml_call2(_gx_[2],_nm_,_nl_);
      return output}
    function interleave$0(inputs)
     {if(check_invariant[1])caml_call2(Core_List[9],inputs,invariant$19);
      return interleave_pipe(of_list$2(inputs))}
    function merge$0(inputs,compare)
     {if(! inputs)return empty(0);
      if(inputs[2])
       {var
         match=create$22(0,0,0),
         w=match[2],
         r=match[1],
         _nb_=
          function(param){return caml_call2(Core_List[9],inputs,close_read)};
        upon$1(w[9],_nb_);
        var
         _nc_=0,
         _nd_=
          function(param,_nk_)
           {var a2=_nk_[1],a1=param[1];return caml_call2(compare,a1,a2)},
         heap=caml_call3(Pairing_heap[20],0,_nd_,_nc_),
         handle_read=
          function(input,eof_or_ok)
           {if(typeof eof_or_ok === "number")return 0;
            var v=eof_or_ok[2];
            return caml_call2(Pairing_heap[25],heap,[0,v,input])},
         pop_heap_and_loop=
          function(param)
           {for(;;)
             {var match=caml_call1(Pairing_heap[28],heap);
              if(! match)return close(w);
              var
               match$0=match[1],
               input=match$0[2],
               v=match$0[1],
               _ng_=1 - is_closed$0(w);
              if(! _ng_)return _ng_;
              write_without_pushback(w,v);
              if(caml_call2(symbol$1,caml_call1(Pairing_heap[3],heap),0))
               {var _nh_=function(param){return close(w)};
                return upon$1(transfer_id(0,input,w),_nh_)}
              var x=read_now$0(0,input);
              if(typeof x === "number" && 3456156 > x)
               {var
                 _ni_=
                  function(param)
                   {function _nj_(x)
                     {handle_read(input,x);return pop_heap_and_loop(0)}
                    return caml_call2(_gs_,read$0(0,input),_nj_)};
                return caml_call2(_gs_,w[5],_ni_)}
              handle_read(input,x)}},
         initial_push=
          iter$16
           (0,
            inputs,
            function(input)
             {function _ne_(x){return handle_read(input,x)}
              var _nf_=read$0(0,input);
              return caml_call2(_gx_[2],_nf_,_ne_)});
        upon$1(initial_push,pop_heap_and_loop);
        return r}
      var input=inputs[1];
      return input}
    function concat_pipe(inputs)
     {var
       r=
        create_reader_not_close_on_exc
         (0,
          function(w)
           {var link=create$23(inputs,w),consumer=consumer$1(link);
            return iter$25
                    (0,
                     [0,[0,consumer]],
                     inputs,
                     function(input){return transfer_id(0,input,w)})});
      function _na_(param){return close(inputs)}
      upon$1(r[9],_na_);
      return r}
    function concat$1(inputs)
     {return create_reader_not_close_on_exc
              (0,
               function(w)
                {return iter$16
                         (0,inputs,function(input){return transfer_id(0,input,w)})})}
    function fork(t,pushback_uses)
     {var
       match=create$22(0,0,0),
       writer0=match[2],
       reader0=match[1],
       match$0=create$22(0,0,0),
       writer1=match$0[2],
       reader1=match$0[1],
       some_reader_was_closed=[0,0],
       consumer=
        add_consumer
         (t,
          function(param)
           {var some_reader_was_closed$0=some_reader_was_closed[1];
            function _m9_(param)
             {return 17724 <= param
                      ?some_reader_was_closed$0?-402004920:17724
                      :-402004920}
            var
             _m__=[0,downstream_flushed$1(writer1),0],
             _m$_=combine$0([0,downstream_flushed$1(writer0),_m__]);
            return caml_call2(_gx_[2],_m$_,_m9_)}),
       still_open=[0,writer0,[0,writer1,0]];
      function filter_open(still_open)
       {if(! caml_call2(Core_List[13],still_open,is_closed$0))
         return still_open;
        some_reader_was_closed[1] = 1;
        function _m8_(w){return 1 - is_closed$0(w)}
        var still_open$0=caml_call2(Core_List[50],still_open,_m8_);
        if(caml_call1(Core_List[8],still_open$0))close(t);
        return still_open$0}
      function _m2_(still_open)
       {caml_call2(Core_List[9],still_open,close);return caml_call1(_gw_,0)}
      var
       _m3_=
        fold$20
         ([0,[0,consumer]],
          0,
          t,
          still_open,
          function(still_open,queue)
           {var still_open$0=filter_open(still_open);
            if(caml_call1(Core_List[8],still_open$0))
             return caml_call1(_gw_,0);
            function _m4_(param)
             {var still_open=filter_open(still_open$0);
              function _m6_(w)
               {start_write(w);
                function _m7_(x){return caml_call2(Core_Queue[41],w[3],x)}
                caml_call2(Core_Queue[16],queue,_m7_);
                return finish_write(w)}
              caml_call2(Core_List[9],still_open,_m6_);
              return still_open}
            var
             _m5_=
              -648027566 <= pushback_uses
               ?any(caml_call2(Core_List[72],still_open$0,pushback$1))
               :all_unit(caml_call2(Core_List[72],still_open$0,pushback$1));
            return caml_call2(_gx_[2],_m5_,_m4_)});
      caml_call2(_gx_[1],_m3_,_m2_);
      return [0,reader0,reader1]}
    function set_info$0(t,info){return set_info(t,[0,info])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$145);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Pipe$0);
    var
     Async_kernel_Pipe=
      [0,
       sexp_of_pipe,
       sexp_of_pipe,
       [0,sexp_of_t$44,invariant$19],
       [0,sexp_of_t$43,invariant$19],
       create_reader,
       create_writer,
       create$22,
       empty,
       of_list$2,
       singleton,
       unfold$0,
       of_sequence,
       to_sequence,
       close,
       close_read,
       is_closed$0,
       closed$2,
       [0,compare$2,sexp_of_t$39],
       upstream_flushed,
       downstream_flushed$1,
       [0,values_sent_downstream],
       add_consumer,
       length$5,
       is_empty$1,
       pushback$1,
       write$0,
       write_without_pushback,
       transfer_in,
       transfer_in_without_pushback,
       write_when_ready,
       write_if_open,
       write_without_pushback_if_open,
       read,
       read$0,
       read_exn,
       read_exactly,
       read_now,
       read_now$0,
       peek$1,
       clear$1,
       read_all,
       values_available,
       read_choice,
       read_choice_single_consumer_ex,
       Flushed,
       fold$20,
       fold$21,
       fold_without_pushback,
       iter$24,
       iter$25,
       iter_without_pushback,
       transfer,
       transfer$0,
       transfer_id,
       map$27,
       map$28,
       concat_map_list,
       folding_map,
       filter_map$5,
       filter_map$6,
       folding_filter_map,
       folding_filter_map$0,
       filter$5,
       interleave$0,
       interleave_pipe,
       merge$0,
       concat$1,
       concat_pipe,
       fork,
       to_stream_deprecated,
       of_stream_deprecated,
       drain,
       drain_and_count,
       to_list$13,
       hash,
       equal$3,
       compare$3,
       size_budget,
       set_size_budget$0,
       show_debug_messages,
       check_invariant,
       set_info$0];
    caml_register_global(1184,Async_kernel_Pipe,"Async_kernel__Pipe");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Mvar);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$146);
    caml_call1(Expect_test_collector[5][1],cst_src_mvar_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$147,cst$50);
    function value_available(r){return r[3]}
    function set_value_available(r,v){r[3] = v;return 0}
    function taken(r){return r[2]}
    function current_value(r){return r[1]}
    function _lL_(r,v){return [0,r[1],r[2],v]}
    var
     _lM_=[0,set_value_available],
     value_available$0=
      [0,
       function(param){return 0},
       cst_value_available,
       _lM_,
       value_available,
       _lL_];
    function _lN_(r,v){return [0,r[1],v,r[3]]}
    var
     _lO_=0,
     taken$0=[0,function(param){return 0},cst_taken,_lO_,taken,_lN_];
    function _lP_(r,v){return [0,v,r[2],r[3]]}
    var
     _lQ_=0,
     current_value$0=
      [0,function(param){return 0},cst_current_value,_lQ_,current_value,_lP_];
    function value_available$1(t){return t[3]}
    function is_empty$2(t){return caml_call1(Moption[5],t[1])}
    function invariant$20(invariant_a,param,t)
     {function _mW_(param)
       {function check(f){return caml_call2(include$5[2],t,f)}
        var
         value_available_fun=
          check
           (function(value_available)
             {var
               got=is_full(value_available),
               expect=caml_call1(Moption[6],t[1]),
               sexpifier=Core[305],
               equal=0,
               message=0,
               here=0;
              function comparator(a_011,b_012)
               {return caml_call2(Core[301],a_011,b_012)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$5,
                       sexpifier,
                       comparator,
                       here,
                       message,
                       equal,
                       expect,
                       got)});
        function _mY_(_m1_){return 0}
        var
         _mZ_=Core_Unit[5],
         taken_fun=check(function(_m0_){return invariant$11(_mZ_,_mY_,_m0_)}),
         current_value_fun=check(caml_call1(Moption[2],invariant_a));
        caml_call1(current_value_fun,current_value$0);
        caml_call1(taken_fun,taken$0);
        return caml_call1(value_available_fun,value_available$0)}
      function _mX_(x_010)
       {function of_a_001(param){return _lU_}
        var
         taken_006=x_010[2],
         current_value_004=x_010[1],
         value_available_008=x_010[3],
         arg_009=sexp_of_t$20(Core[518],value_available_008),
         bnds_003=[0,[1,[0,_lR_,[0,arg_009,0]]],0],
         arg_007=sexp_of_t$25(Core[518],Core[202],taken_006),
         bnds_003$0=[0,[1,[0,_lS_,[0,arg_007,0]]],bnds_003],
         arg_005=caml_call2(Moption[1],of_a_001,current_value_004),
         bnds_003$1=[0,[1,[0,_lT_,[0,arg_005,0]]],bnds_003$0];
        return [1,bnds_003$1]}
      return caml_call4(include$5[1],_lV_,t,_mX_,_mW_)}
    function peek$2(t){return caml_call1(Moption[7],t[1])}
    function peek_exn(t)
     {if(is_empty$2(t))
       {var
         _mV_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Mvar_peek_exn_called_on_em);
        caml_call1(Core[253],_mV_)}
      return caml_call1(Moption[8],t[1])}
    function sexp_of_t$46(sexp_of_a,param,t)
     {var x_013=peek$2(t);return caml_call2(Core[454],sexp_of_a,x_013)}
    function sexp_of_t$47(of_a_014,x_015)
     {return sexp_of_t$46(of_a_014,Core[202],x_015)}
    function invariant$21(invariant_a,t)
     {return invariant$20(invariant_a,function(_mU_){return 0},t)}
    var Read_write$1=[0,sexp_of_t$47,invariant$21];
    function sexp_of_t$48(of_a_016,x_017)
     {return sexp_of_t$46(of_a_016,Core[171],x_017)}
    function invariant$22(invariant_a,t)
     {return invariant$20(invariant_a,function(_mT_){return 0},t)}
    var Read_only=[0,sexp_of_t$48,invariant$22];
    function read_only$1(t){return t}
    function write_only(t){return t}
    function create$24(param)
     {var _mR_=caml_call1(create$13,0),_mS_=caml_call1(_hd_,0);
      return [0,caml_call1(Moption[4],0),_mS_,_mR_]}
    function take_nonempty(t)
     {if(is_empty$2(t))throw [0,Assert_failure,_lW_];
      var r=caml_call1(Moption[8],t[1]);
      caml_call1(Moption[11],t[1]);
      broadcast(t[2],0);
      t[3] = caml_call1(create$13,0);
      return r}
    function take_now_exn(t)
     {if(is_empty$2(t))
       {var
         _mQ_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Mvar_take_exn_called_on_em);
        caml_call1(Core[253],_mQ_)}
      return take_nonempty(t)}
    function take_now(t){return is_empty$2(t)?0:[0,take_nonempty(t)]}
    function take(t)
     {if(! is_empty$2(t))return caml_call1(_gw_,take_nonempty(t));
      function _mP_(param){return take(t)}
      return caml_call2(_gx_[1],t[3],_mP_)}
    function set$0(t,v)
     {caml_call2(Moption[12],t[1],v);return fill_if_empty(t[3],0)}
    function update$0(t,f){return set$0(t,caml_call1(f,peek$2(t)))}
    function update_exn(t,f){return set$0(t,caml_call1(f,peek_exn(t)))}
    function taken$1(t){return wait(t[2])}
    function put(t,v)
     {if(is_empty$2(t)){set$0(t,v);return caml_call1(_gw_,0)}
      function _mN_(param){return put(t,v)}
      var _mO_=taken$1(t);
      return caml_call2(_gx_[1],_mO_,_mN_)}
    function pipe_when_ready(t)
     {var match=create$22(0,0,0),w=match[2],r=match[1];
      function loop(param)
       {function _mK_(param)
         {if(is_closed$0(w))return caml_call1(_gw_,0);
          var match=take_now(t);
          if(! match)return loop(0);
          var x=match[1];
          function _mL_(param){return loop(0)}
          var _mM_=write$0(w,x);
          return caml_call2(_gx_[1],_mM_,_mL_)}
        return caml_call2(_gx_[1],t[3],_mK_)}
      loop(0);
      return r}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$148);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Mvar$0);
    var
     Async_kernel_Mvar=
      [0,
       sexp_of_t$46,
       Read_write$1,
       Read_only,
       create$24,
       is_empty$2,
       put,
       set$0,
       update$0,
       update_exn,
       read_only$1,
       write_only,
       value_available$1,
       take,
       take_now,
       take_now_exn,
       taken$1,
       peek$2,
       peek_exn,
       pipe_when_ready];
    caml_register_global(1187,Async_kernel_Mvar,"Async_kernel__Mvar");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Lazy_deferred);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$149);
    caml_call1(Expect_test_collector[5][1],cst_src_lazy_deferred_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$150,cst$51);
    function create$25(f)
     {var start=caml_call1(create$13,0);
      function _mJ_(param){return try_with_or_error(0,0,0,0,_lX_,f)}
      return [0,start,caml_call2(_gx_[1],start,_mJ_)]}
    function create_or_error(f)
     {var start=caml_call1(create$13,0);
      function _mI_(param){return try_with_join_or_error(0,0,0,0,_lY_,f)}
      return [0,start,caml_call2(_gx_[1],start,_mI_)]}
    function wait$0(t){return t[2]}
    function wait_exn(t){return caml_call2(_gv_,t[2],Core[245])}
    function force(t){fill_if_empty(t[1],0);return t[2]}
    function force_exn(t)
     {var _mH_=Core[245];return caml_call2(_gv_,force(t),_mH_)}
    function return$5(a)
     {return create$25(function(param){return caml_call1(_gw_,a)})}
    function bind$5(t,f)
     {return create$25
              (function(param)
                {function _mF_(a){return force_exn(caml_call1(f,a))}
                 var _mG_=force_exn(t);
                 return caml_call2(_gx_[1],_mG_,_mF_)})}
    var
     map$29=
      [0,
       -198771759,
       function(t,f)
        {return create$25
                 (function(param){return caml_call2(_gv_,force_exn(t),f)})}],
     include$25=caml_call1(Base_Monad[1],[0,bind$5,return$5,map$29]),
     _l2_=include$25[4],
     _lZ_=include$25[1],
     _l0_=include$25[2],
     _l1_=include$25[3],
     _l3_=include$25[5],
     _l4_=include$25[6],
     _l5_=include$25[7],
     _l6_=include$25[8],
     _l7_=include$25[9],
     _l8_=include$25[10],
     _l9_=include$25[11];
    function bind$6(t,f)
     {return caml_call2
              (_l2_,
               t,
               function(a)
                {return create$25(function(param){return caml_call1(f,a)})})}
    function is_forced(t){return is_full(t[1])}
    function is_determined$0(t){return is_determined(t[2])}
    function peek$3(t){return peek$0(t[2])}
    function peek_exn$0(t)
     {var _mD_=Core[245],_mE_=peek$3(t);
      return caml_call2(Core_Option[29],_mE_,_mD_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$151);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Lazy_deferred$0);
    var
     Async_kernel_Lazy_deferred=
      [0,
       create$25,
       create_or_error,
       force,
       force_exn,
       wait$0,
       wait_exn,
       _lZ_,
       _l0_,
       _l1_,
       _l2_,
       _l3_,
       _l4_,
       _l5_,
       _l6_,
       _l7_,
       _l8_,
       _l9_,
       bind$6,
       peek$3,
       peek_exn$0,
       is_determined$0,
       is_forced];
    caml_register_global
     (1188,Async_kernel_Lazy_deferred,"Async_kernel__Lazy_deferred");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Async_conditi);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$152);
    caml_call1(Expect_test_collector[5][1],cst_src_async_condition_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$153,cst$52);
    function sexp_of_t$49(of_a_001,param)
     {var waits_003=param[1],bnds_002=0;
      function _mB_(_mC_){return sexp_of_t$20(of_a_001,_mC_)}
      var
       arg_004=caml_call2(Core_Queue[11],_mB_,waits_003),
       bnds_002$0=[0,[1,[0,_l__,[0,arg_004,0]]],bnds_002];
      return [1,bnds_002$0]}
    function create$26(param){return [0,caml_call2(Core_Queue[61],0,0)]}
    function wait$1(t)
     {return create$14
              (function(ivar){return caml_call2(Core_Queue[41],t[1],ivar)})}
    function signal(t,a)
     {function _mz_(ivar){return fill(ivar,a)}
      var _mA_=caml_call1(Core_Queue[43],t[1]);
      return caml_call2(Core_Option[41],_mA_,_mz_)}
    function broadcast$0(t,a)
     {function _my_(ivar){return fill(ivar,a)}
      caml_call2(Core_Queue[16],t[1],_my_);
      return caml_call1(Core_Queue[47],t[1])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$154);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Async_conditi$0);
    var
     Async_kernel_Async_condition=
      [0,sexp_of_t$49,create$26,signal,broadcast$0,wait$1];
    caml_register_global
     (1189,Async_kernel_Async_condition,"Async_kernel__Async_condition");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Async_gc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$155);
    caml_call1(Expect_test_collector[5][1],cst_src_async_gc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$156,cst$53);
    var
     Stat=include$19[1],
     Control=include$19[2],
     print_stat=include$19[3],
     allocated_bytes=include$19[4],
     keep_alive=include$19[5],
     Allocation_policy=include$19[6],
     tune=include$19[7],
     disable_compaction=include$19[8],
     For_testing=include$19[9],
     Stable=include$19[11];
    function add_finalizer$0(heap_block,f)
     {return add_finalizer(t$0(0),heap_block,f)}
    function add_finalizer_exn$0(heap_block,f)
     {return add_finalizer_exn(t$0(0),heap_block,f)}
    function add_finalizer_last$0(heap_block,f)
     {return add_finalizer_last(t$0(0),heap_block,f)}
    function add_finalizer_last_exn$0(heap_block,f)
     {return add_finalizer_last_exn(t$0(0),heap_block,f)}
    var sexp_of_t$50=include$19[10][6][1];
    function create$27(f){return create_alarm(t$0(0),f)}
    var
     delete$0=include$19[10][6][3],
     Alarm$0=[0,sexp_of_t$50,create$27,delete$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$157);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Async_gc$0);
    var
     Async_kernel_Async_gc=
      [0,
       Stat,
       Control,
       print_stat,
       allocated_bytes,
       keep_alive,
       Allocation_policy,
       tune,
       disable_compaction,
       For_testing,
       Stable,
       add_finalizer$0,
       add_finalizer_exn$0,
       add_finalizer_last$0,
       add_finalizer_last_exn$0,
       Alarm$0];
    caml_register_global(1190,Async_kernel_Async_gc,"Async_kernel__Async_gc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Async_invaria);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$158);
    caml_call1(Expect_test_collector[5][1],cst_src_async_invariant_intf_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$159,cst$54);
    var Async=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$160);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Async_invaria$0);
    var Async_kernel_Async_invariant_i=[0,Async];
    caml_register_global
     (1191,
      Async_kernel_Async_invariant_i,
      "Async_kernel__Async_invariant_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel_Async_invaria$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$161);
    caml_call1(Expect_test_collector[5][1],cst_src_async_invariant_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$162,cst$55);
    var _l$_=include$5[1],_ma_=include$5[2];
    function invariant$23(here,t,sexp_of_t,f)
     {function _ms_(param)
       {if(0 === param[0])return 0;
        var
         exn=param[1],
         _mu_=[0,caml_call1(sexp_of_t,t),0],
         _mv_=[0,[1,[0,_mb_,[0,caml_call1(Core[537],exn),0]]],_mu_],
         _mw_=[0,caml_call1(Core_Source_code_position[1],here),_mv_],
         _mx_=
          [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_invariant_failed),_mw_]];
        return caml_call1(Core[253],_mx_)}
      var _mt_=try_with(0,0,0,_me_,_md_,_mc_,f);
      return caml_call2(include$24[4][3],_mt_,_ms_)}
    function check_field(t,f,wait_for_previous,field)
     {function _ml_(param)
       {function _mm_(param)
         {if(0 === param[0])return 0;
          var
           exn=param[1],
           _mo_=[0,[1,[0,_mf_,[0,caml_call1(Core[537],exn),0]]],0],
           _mp_=caml_call1(Base_Field[2],field),
           _mq_=[0,[1,[0,_mg_,[0,caml_call1(Core[471],_mp_),0]]],_mo_],
           _mr_=
            [1,
             [0,caml_call1(Sexplib0_Sexp_conv[7],cst_problem_with_field),_mq_]];
          return caml_call1(Core[253],_mr_)}
        var
         _mn_=
          try_with
           (0,
            0,
            0,
            _mj_,
            _mi_,
            _mh_,
            function(param)
             {return caml_call1(f,caml_call2(Base_Field[3],field,t))});
        return caml_call2(include$24[4][3],_mn_,_mm_)}
      return caml_call2(include$24[4][2],wait_for_previous,_ml_)}
    var Async$0=[0,invariant$23,check_field];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$163);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel_Async_invaria$2);
    var Async_kernel_Async_invariant=[0,_l$_,_ma_,Async$0];
    caml_register_global
     (1192,Async_kernel_Async_invariant,"Async_kernel__Async_invariant");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_kernel);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_kernel$164);
    caml_call1(Expect_test_collector[5][1],cst_src_async_kernel_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$165,cst$56);
    var
     after$5=Async_kernel_Clock_ns[4],
     at$7=Async_kernel_Clock_ns[3],
     every$3=Async_kernel_Clock_ns[10],
     with_timeout$1=Async_kernel_Clock_ns[5],
     symbol$8=_jI_[3],
     return$6=include$24[1],
     symbol_bind$3=include$24[2],
     symbol_map$2=include$24[3],
     Let_syntax$1=include$24[4],
     Async_kernel_private=[0];
    function _mk_(param)
     {var expect=runtime.core_gc_minor_words(0);
      caml_call1(return$6,0);
      return$0(0);
      caml_call1(include$24[1],0);
      caml_call1(include$24[4][1],0);
      var
       got=runtime.core_gc_minor_words(0),
       sexpifier=Core[356],
       equal=0,
       message=0,
       here=0;
      function comparator(a_001,b_002)
       {return caml_call2(Core[352],a_001,b_002)}
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$6,
        sexpifier,
        comparator,
        here,
        message,
        equal,
        expect,
        got);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_return_does_not_allocate,
      0,
      cst_src_async_kernel_ml$0,
      87,
      0,
      443,
      _mk_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$166);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_kernel$0);
    var
     Async_kernel$0=
      [0,
       after$5,
       at$7,
       catch$0,
       choice,
       choose,
       don_t_wait_for,
       every$3,
       never,
       _i2_,
       _i1_,
       try_with,
       upon$1,
       with_timeout$1,
       _iZ_,
       _iY_,
       symbol$8,
       symbol_bind$1,
       _jy_,
       return$6,
       symbol_bind$3,
       symbol_map$2,
       Let_syntax$1,
       Async_kernel_private];
    caml_register_global(1194,Async_kernel$0,"Async_kernel");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
