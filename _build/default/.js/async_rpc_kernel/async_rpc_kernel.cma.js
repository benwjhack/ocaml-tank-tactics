// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_t=caml_string_of_jsbytes("t"),
     cst_Async_rpc_kernel_Nat0=
      caml_string_of_jsbytes("Async_rpc_kernel__Nat0"),
     cst_async_rpc_kernel=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_nat0_ml=caml_string_of_jsbytes("src/nat0.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$0=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_899e2f4a_490a_11e6_b68f_bb=
      caml_string_of_jsbytes("899e2f4a-490a-11e6-b68f-bbd62472516c"),
     cst_async_rpc_kernel$1=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Nat0$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Nat0"),
     cst_src_writer_with_length_ml$0=
      caml_string_of_jsbytes("src/writer_with_length.ml"),
     cst_for_len_0_to_Int_pow_2_10_=
      caml_string_of_jsbytes
       ("<<for len = 0 to Int.pow 2 10 do test len done;[...]>>"),
     cst_Async_rpc_kernel_Writer_wi=
      caml_string_of_jsbytes("Async_rpc_kernel__Writer_with_length"),
     cst_async_rpc_kernel$2=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_writer_with_length_ml=
      caml_string_of_jsbytes("src/writer_with_length.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$3=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_writer_with_length_ml$1=
      caml_string_of_jsbytes("src/writer_with_length.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$4=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Writer_wi$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Writer_with_length"),
     descriptions=
      [0,
       [0,caml_string_of_jsbytes("foo"),1],
       [0,
        [0,caml_string_of_jsbytes("foo"),2],
        [0,[0,caml_string_of_jsbytes("bar"),5],0]]],
     cst_src_description_ml$0=caml_string_of_jsbytes("src/description.ml"),
     cst_name$0=caml_string_of_jsbytes("name"),
     cst_version$0=caml_string_of_jsbytes("version"),
     cst_version$1=caml_string_of_jsbytes("version"),
     cst_name$1=caml_string_of_jsbytes("name"),
     cst_src_description_ml_Stable_=
      caml_string_of_jsbytes("src/description.ml.Stable.V1.t"),
     cst_Async_rpc_kernel_Descripti=
      caml_string_of_jsbytes("Async_rpc_kernel__Description"),
     cst_async_rpc_kernel$5=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_description_ml=caml_string_of_jsbytes("src/description.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$6=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_version=caml_string_of_jsbytes("version"),
     cst_name=caml_string_of_jsbytes("name"),
     cst_t$0=caml_string_of_jsbytes("t"),
     cst_src_description_ml_5_4=
      caml_string_of_jsbytes("src/description.ml:5:4"),
     cst_t$1=caml_string_of_jsbytes("t"),
     error_source_017=caml_string_of_jsbytes("src/description.ml.Stable.V1.t"),
     cst_src_description_ml$1=caml_string_of_jsbytes("src/description.ml"),
     cst_src_description_ml$2=caml_string_of_jsbytes("src/description.ml"),
     cst_src_description_ml$3=caml_string_of_jsbytes("src/description.ml"),
     cst_src_description_ml$4=caml_string_of_jsbytes("src/description.ml"),
     cst_b6967e9300452808c88c1ab863=
      caml_string_of_jsbytes("b6967e9300452808c88c1ab863052889"),
     cst_async_rpc_kernel$7=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Descripti$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Description"),
     cst_src_protocol_ml_Message_ne=
      caml_string_of_jsbytes("src/protocol.ml.Message.needs_length"),
     cst_needs_length$8=caml_string_of_jsbytes("needs_length"),
     err$0=
      [2,
       caml_string_of_jsbytes
        ("src/protocol.ml.Stream_response_data.needs_length")],
     cst_needs_length$6=caml_string_of_jsbytes("needs_length"),
     cst_src_protocol_ml_Stream_ini=
      caml_string_of_jsbytes("src/protocol.ml.Stream_initial_message.t"),
     cst_t$9=caml_string_of_jsbytes("t"),
     err=
      [2,caml_string_of_jsbytes("src/protocol.ml.Stream_query.needs_length")],
     cst_needs_length$4=caml_string_of_jsbytes("needs_length"),
     cst_src_protocol_ml_Response_n=
      caml_string_of_jsbytes("src/protocol.ml.Response.needs_length"),
     cst_needs_length$2=caml_string_of_jsbytes("needs_length"),
     cst_src_protocol_ml_Query_need=
      caml_string_of_jsbytes("src/protocol.ml.Query.needs_length"),
     cst_needs_length$0=caml_string_of_jsbytes("needs_length"),
     cst_t$7=caml_string_of_jsbytes("t"),
     cst_src_protocol_ml$0=caml_string_of_jsbytes("src/protocol.ml"),
     cst_bin_io_exn=caml_string_of_jsbytes("bin_io_exn"),
     cst_Bin_io_exn$0=caml_string_of_jsbytes("Bin_io_exn"),
     cst_Connection_closed=caml_string_of_jsbytes("Connection_closed"),
     cst_Uncaught_exn$0=caml_string_of_jsbytes("Uncaught_exn"),
     cst_Unimplemented_rpc$0=caml_string_of_jsbytes("Unimplemented_rpc"),
     cst_Unknown_query_id$0=caml_string_of_jsbytes("Unknown_query_id"),
     cst_Write_error$0=caml_string_of_jsbytes("Write_error"),
     cst_connection_closed=caml_string_of_jsbytes("connection_closed"),
     cst_uncaught_exn=caml_string_of_jsbytes("uncaught_exn"),
     cst_unimplemented_rpc=caml_string_of_jsbytes("unimplemented_rpc"),
     cst_unknown_query_id=caml_string_of_jsbytes("unknown_query_id"),
     cst_write_error=caml_string_of_jsbytes("write_error"),
     cst_bin_io_exn$0=caml_string_of_jsbytes("bin_io_exn"),
     cst_Bin_io_exn$1=caml_string_of_jsbytes("Bin_io_exn"),
     cst_Connection_closed$0=caml_string_of_jsbytes("Connection_closed"),
     cst_Uncaught_exn$1=caml_string_of_jsbytes("Uncaught_exn"),
     cst_Unimplemented_rpc$1=caml_string_of_jsbytes("Unimplemented_rpc"),
     cst_Unknown_query_id$1=caml_string_of_jsbytes("Unknown_query_id"),
     cst_Write_error$1=caml_string_of_jsbytes("Write_error"),
     cst_connection_closed$0=caml_string_of_jsbytes("connection_closed"),
     cst_uncaught_exn$0=caml_string_of_jsbytes("uncaught_exn"),
     cst_unimplemented_rpc$0=caml_string_of_jsbytes("unimplemented_rpc"),
     cst_unknown_query_id$0=caml_string_of_jsbytes("unknown_query_id"),
     cst_write_error$0=caml_string_of_jsbytes("write_error"),
     cst_Version$0=caml_string_of_jsbytes("Version"),
     cst_Version$1=caml_string_of_jsbytes("Version"),
     cst_src_protocol_ml_Rpc_error_$0=
      caml_string_of_jsbytes("src/protocol.ml.Rpc_error.T.t"),
     cst_src_protocol_ml_Rpc_error_=
      caml_string_of_jsbytes("src/protocol.ml.Rpc_error.T.t"),
     cst_Async_rpc_kernel_Protocol=
      caml_string_of_jsbytes("Async_rpc_kernel__Protocol"),
     cst_async_rpc_kernel$8=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_protocol_ml=caml_string_of_jsbytes("src/protocol.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$9=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_t$2=caml_string_of_jsbytes("t"),
     cst_src_protocol_ml_15_2=caml_string_of_jsbytes("src/protocol.ml:15:2"),
     cst_t$3=caml_string_of_jsbytes("t"),
     cst_Unknown_query_id=caml_string_of_jsbytes("Unknown_query_id"),
     cst_Version=caml_string_of_jsbytes("Version"),
     cst_src_protocol_ml_40_41=caml_string_of_jsbytes("src/protocol.ml:40:41"),
     cst_Unimplemented_rpc=caml_string_of_jsbytes("Unimplemented_rpc"),
     cst_Uncaught_exn=caml_string_of_jsbytes("Uncaught_exn"),
     cst_Write_error=caml_string_of_jsbytes("Write_error"),
     cst_Bin_io_exn=caml_string_of_jsbytes("Bin_io_exn"),
     cst_t$4=caml_string_of_jsbytes("t"),
     cst_src_protocol_ml_35_4=caml_string_of_jsbytes("src/protocol.ml:35:4"),
     cst_t$5=caml_string_of_jsbytes("t"),
     error_source_003=caml_string_of_jsbytes("src/protocol.ml.Rpc_error.T.t"),
     cst_src_protocol_ml$1=caml_string_of_jsbytes("src/protocol.ml"),
     cst_src_protocol_ml$2=caml_string_of_jsbytes("src/protocol.ml"),
     cst_src_protocol_ml$3=caml_string_of_jsbytes("src/protocol.ml"),
     cst_src_protocol_ml$4=caml_string_of_jsbytes("src/protocol.ml"),
     cst_9646af08ec00dfff90ef7f2563=
      caml_string_of_jsbytes("9646af08ec00dfff90ef7f2563707348"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_src_protocol_ml_55_15=caml_string_of_jsbytes("src/protocol.ml:55:15"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_t$6=caml_string_of_jsbytes("t"),
     cst_src_protocol_ml_55_2=caml_string_of_jsbytes("src/protocol.ml:55:2"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_src_protocol_ml_65_13=caml_string_of_jsbytes("src/protocol.ml:65:13"),
     cst_data=caml_string_of_jsbytes("data"),
     cst_id=caml_string_of_jsbytes("id"),
     cst_version$2=caml_string_of_jsbytes("version"),
     cst_tag=caml_string_of_jsbytes("tag"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_needs_length=caml_string_of_jsbytes("needs_length"),
     cst_src_protocol_ml_61_2=caml_string_of_jsbytes("src/protocol.ml:61:2"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_src_protocol_ml_75_13=caml_string_of_jsbytes("src/protocol.ml:75:13"),
     cst_data$0=caml_string_of_jsbytes("data"),
     cst_id$0=caml_string_of_jsbytes("id"),
     cst_a$4=caml_string_of_jsbytes("a"),
     cst_needs_length$1=caml_string_of_jsbytes("needs_length"),
     cst_src_protocol_ml_73_2=caml_string_of_jsbytes("src/protocol.ml:73:2"),
     cst_Abort=caml_string_of_jsbytes("Abort"),
     cst_a$5=caml_string_of_jsbytes("a"),
     cst_src_protocol_ml_84_16=caml_string_of_jsbytes("src/protocol.ml:84:16"),
     cst_Query=caml_string_of_jsbytes("Query"),
     cst_src_protocol_ml_84_4=caml_string_of_jsbytes("src/protocol.ml:84:4"),
     cst_a$6=caml_string_of_jsbytes("a"),
     cst_needs_length$3=caml_string_of_jsbytes("needs_length"),
     cst_src_protocol_ml_83_2=caml_string_of_jsbytes("src/protocol.ml:83:2"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_src_protocol_ml_96_28=caml_string_of_jsbytes("src/protocol.ml:96:28"),
     cst_response=caml_string_of_jsbytes("response"),
     cst_src_protocol_ml_96_17=caml_string_of_jsbytes("src/protocol.ml:96:17"),
     cst_initial=caml_string_of_jsbytes("initial"),
     cst_unused_query_id=caml_string_of_jsbytes("unused_query_id"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_response$0=caml_string_of_jsbytes("response"),
     cst_t$8=caml_string_of_jsbytes("t"),
     cst_src_protocol_ml_94_2=caml_string_of_jsbytes("src/protocol.ml:94:2"),
     cst_Eof=caml_string_of_jsbytes("Eof"),
     cst_a$7=caml_string_of_jsbytes("a"),
     cst_src_protocol_ml_103_13=
      caml_string_of_jsbytes("src/protocol.ml:103:13"),
     cst_Ok=caml_string_of_jsbytes("Ok"),
     cst_src_protocol_ml_103_4=caml_string_of_jsbytes("src/protocol.ml:103:4"),
     cst_a$8=caml_string_of_jsbytes("a"),
     cst_needs_length$5=caml_string_of_jsbytes("needs_length"),
     cst_src_protocol_ml_102_2=caml_string_of_jsbytes("src/protocol.ml:102:2"),
     cst_a$9=caml_string_of_jsbytes("a"),
     cst_src_protocol_ml_116_18=
      caml_string_of_jsbytes("src/protocol.ml:116:18"),
     cst_Response=caml_string_of_jsbytes("Response"),
     cst_a$10=caml_string_of_jsbytes("a"),
     cst_src_protocol_ml_115_15=
      caml_string_of_jsbytes("src/protocol.ml:115:15"),
     cst_Query$0=caml_string_of_jsbytes("Query"),
     cst_a$11=caml_string_of_jsbytes("a"),
     cst_needs_length$7=caml_string_of_jsbytes("needs_length"),
     cst_src_protocol_ml_113_2=caml_string_of_jsbytes("src/protocol.ml:113:2"),
     cst_async_rpc_kernel$10=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Protocol$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Protocol"),
     cst_Async_rpc_kernel_Transport=
      caml_string_of_jsbytes("Async_rpc_kernel__Transport_intf"),
     cst_async_rpc_kernel$11=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_transport_intf_ml=caml_string_of_jsbytes("src/transport_intf.ml"),
     cst$4=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$12=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_async_rpc_kernel$13=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Transport$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Transport_intf"),
     cst_Async_rpc_kernel_Transport$1=
      caml_string_of_jsbytes("Async_rpc_kernel__Transport"),
     cst_async_rpc_kernel$14=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_transport_ml=caml_string_of_jsbytes("src/transport.ml"),
     cst$5=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$15=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_async_rpc_kernel$16=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Transport$2=
      caml_string_of_jsbytes("Async_rpc_kernel__Transport"),
     cst_Async_rpc_kernel_Implement=
      caml_string_of_jsbytes("Async_rpc_kernel__Implementation_types"),
     cst_async_rpc_kernel$17=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_implementation_types_m=
      caml_string_of_jsbytes("src/implementation_types.ml"),
     cst$6=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$18=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_async_rpc_kernel$19=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Implement$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Implementation_types"),
     cst_Async_rpc_kernel_On_except=
      caml_string_of_jsbytes("Async_rpc_kernel__On_exception"),
     cst_async_rpc_kernel$20=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_on_exception_ml=caml_string_of_jsbytes("src/on_exception.ml"),
     cst$7=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$21=caml_string_of_jsbytes("async_rpc_kernel"),
     close_connection=[0,0,1],
     continue$0=[0,0,0],
     cst_async_rpc_kernel$22=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_On_except$0=
      caml_string_of_jsbytes("Async_rpc_kernel__On_exception"),
     cst_streaming_rpc=caml_string_of_jsbytes("streaming-rpc"),
     cst_one_way=caml_string_of_jsbytes("one-way"),
     cst_rpc=caml_string_of_jsbytes("rpc"),
     cst_Async_rpc_kernel_Implement$1=
      caml_string_of_jsbytes("Async_rpc_kernel__Implementation"),
     cst_async_rpc_kernel$23=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_implementation_ml=caml_string_of_jsbytes("src/implementation.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$24=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_async_rpc_kernel$25=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Implement$2=
      caml_string_of_jsbytes("Async_rpc_kernel__Implementation"),
     cst_Async_rpc_kernel_Rpc_error=
      caml_string_of_jsbytes("Async_rpc_kernel__Rpc_error"),
     cst_async_rpc_kernel$26=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_rpc_error_ml=caml_string_of_jsbytes("src/rpc_error.ml"),
     cst$9=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$27=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Rpc_error$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Rpc_error.Rpc"),
     cst_async_rpc_kernel$28=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Rpc_error$1=
      caml_string_of_jsbytes("Async_rpc_kernel__Rpc_error"),
     cst_Async_rpc_kernel_Rpc_resul=
      caml_string_of_jsbytes("Async_rpc_kernel__Rpc_result"),
     cst_async_rpc_kernel$29=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_rpc_result_ml=caml_string_of_jsbytes("src/rpc_result.ml"),
     cst$10=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$30=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_a$12=caml_string_of_jsbytes("a"),
     cst_src_rpc_result_ml_4_13=
      caml_string_of_jsbytes("src/rpc_result.ml:4:13"),
     cst_a$13=caml_string_of_jsbytes("a"),
     cst_t$10=caml_string_of_jsbytes("t"),
     cst_src_rpc_result_ml_4_0=caml_string_of_jsbytes("src/rpc_result.ml:4:0"),
     cst_async_rpc_kernel$31=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Rpc_resul$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Rpc_result"),
     cst_Async_rpc_kernel_Util=
      caml_string_of_jsbytes("Async_rpc_kernel__Util"),
     cst_async_rpc_kernel$32=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_util_ml=caml_string_of_jsbytes("src/util.ml"),
     cst$11=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$33=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_async_rpc_kernel$34=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Util$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Util"),
     cst_server_side_raw_rpc_comput=
      caml_string_of_jsbytes("server-side raw rpc computation"),
     cst_Already_responded=caml_string_of_jsbytes("Already responded"),
     cst_Message_cannot_be_sent=
      caml_string_of_jsbytes("Message cannot be sent"),
     cst_server_side_pipe_rpc_compu=
      caml_string_of_jsbytes("server-side pipe_rpc computation"),
     cst_Expert_implementation_did_=
      caml_string_of_jsbytes("Expert implementation did not reply"),
     cst_server_side_rpc_expert_com=
      caml_string_of_jsbytes("server-side rpc expert computation"),
     cst_server_side_one_way_rpc_me=
      caml_string_of_jsbytes("server-side one-way rpc message un-bin-io'ing"),
     cst_server_side_one_way_rpc_co=
      caml_string_of_jsbytes("server-side one-way rpc computation"),
     cst_server_side_one_way_rpc_ex=
      caml_string_of_jsbytes("server-side one-way rpc expert computation"),
     cst_server_side_rpc_query_un_b=
      caml_string_of_jsbytes("server-side rpc query un-bin-io'ing"),
     cst_server_side_rpc_computatio=
      caml_string_of_jsbytes("server-side rpc computation"),
     cst_server_side_blocking_rpc_c=
      caml_string_of_jsbytes("server-side blocking rpc computation"),
     cst_server_side_pipe_rpc_strea=
      caml_string_of_jsbytes
       ("server-side pipe_rpc stream_query un-bin-io'ing"),
     cst_streaming_rpc_server_side_=
      caml_string_of_jsbytes("streaming_rpc server-side query un-bin-io'ing"),
     cst_attempted_to_start_writer_=
      caml_string_of_jsbytes
       ("attempted to start writer which was already started"),
     v=[0,17724,0],
     cst_Failed_to_send_write_error=
      caml_string_of_jsbytes("Failed to send write error to client"),
     arg_018=[0,caml_string_of_jsbytes("_")],
     cst_Async_rpc_kernel_Implement$3=
      caml_string_of_jsbytes("Async_rpc_kernel__Implementations"),
     cst_async_rpc_kernel$35=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_implementations_ml=
      caml_string_of_jsbytes("src/implementations.ml"),
     cst$12=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$36=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_implementations_ml$0=
      caml_string_of_jsbytes("src/implementations.ml"),
     cst_stream_response_constants_=
      caml_string_of_jsbytes("stream_response_* constants are correct"),
     cst_Async_rpc_kernel_Implement$4=
      caml_string_of_jsbytes
       ("Async_rpc_kernel__Implementations.Duplicate_implementations"),
     cst_async_rpc_kernel$37=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Implement$5=
      caml_string_of_jsbytes("Async_rpc_kernel__Implementations"),
     cst_Rpc_Connection_close=caml_string_of_jsbytes("Rpc.Connection.close"),
     cst_Rpc_Connection_with_close_=
      caml_string_of_jsbytes("Rpc.Connection.with_close finished"),
     cst_RPC_transport_stopped=caml_string_of_jsbytes("RPC transport stopped"),
     cst_created_directly=caml_string_of_jsbytes("<created-directly>"),
     cst_Handshake_timeout=caml_string_of_jsbytes("Handshake timeout"),
     cst_Reader_read_one_message_bi=
      caml_string_of_jsbytes("[Reader.read_one_message_bin_prot] raised"),
     cst_EOF_or_connection_closed=
      caml_string_of_jsbytes("EOF or connection closed"),
     cst_exn_raised_in_RPC_connecti=
      caml_string_of_jsbytes("exn raised in RPC connection "),
     cst_Uncaught_exception_in_impl=
      caml_string_of_jsbytes("Uncaught exception in implementation"),
     cst_Writer_t=caml_string_of_jsbytes("Writer.t"),
     cst_loop=caml_string_of_jsbytes("loop"),
     cst_No_heartbeats_received_for=
      caml_string_of_jsbytes
       ("No heartbeats received for %{sexp:Time_ns.Span.t}."),
     cst_No_heartbeats_received_for$0=
      caml_string_of_jsbytes("No heartbeats received for "),
     cst_Connection_on_message_resu=
      caml_string_of_jsbytes
       ("Connection.on_message resulted in Connection_closed error. This is weird."),
     msg=caml_string_of_jsbytes("Rpc message handling loop stopped"),
     cst_RPC_connection_got_closed_=
      caml_string_of_jsbytes("RPC connection got closed writer"),
     cst_Message_cannot_be_sent$0=
      caml_string_of_jsbytes("Message cannot be sent"),
     cst_src_connection_ml_Heartbea=
      caml_string_of_jsbytes("src/connection.ml.Heartbeat_config.t"),
     cst_send_every=caml_string_of_jsbytes("send_every"),
     cst_timeout$1=caml_string_of_jsbytes("timeout"),
     cst_send_every$0=caml_string_of_jsbytes("send_every"),
     cst_timeout$2=caml_string_of_jsbytes("timeout"),
     cst_eof=caml_string_of_jsbytes("eof"),
     cst_Eof$0=caml_string_of_jsbytes("Eof"),
     cst_Negotiated_unexpected_vers=
      caml_string_of_jsbytes("Negotiated_unexpected_version"),
     cst_Negotiation_failed=caml_string_of_jsbytes("Negotiation_failed"),
     cst_Reading_header_failed=caml_string_of_jsbytes("Reading_header_failed"),
     cst_Timeout=caml_string_of_jsbytes("Timeout"),
     cst_Transport_closed=caml_string_of_jsbytes("Transport_closed"),
     cst_negotiated_unexpected_vers=
      caml_string_of_jsbytes("negotiated_unexpected_version"),
     cst_negotiation_failed=caml_string_of_jsbytes("negotiation_failed"),
     cst_reading_header_failed=caml_string_of_jsbytes("reading_header_failed"),
     cst_timeout=caml_string_of_jsbytes("timeout"),
     cst_transport_closed=caml_string_of_jsbytes("transport_closed"),
     cst_eof$0=caml_string_of_jsbytes("eof"),
     cst_Eof$1=caml_string_of_jsbytes("Eof"),
     cst_Negotiated_unexpected_vers$0=
      caml_string_of_jsbytes("Negotiated_unexpected_version"),
     cst_Negotiation_failed$0=caml_string_of_jsbytes("Negotiation_failed"),
     cst_Reading_header_failed$0=
      caml_string_of_jsbytes("Reading_header_failed"),
     cst_Timeout$0=caml_string_of_jsbytes("Timeout"),
     cst_Transport_closed$0=caml_string_of_jsbytes("Transport_closed"),
     cst_negotiated_unexpected_vers$0=
      caml_string_of_jsbytes("negotiated_unexpected_version"),
     cst_negotiation_failed$0=caml_string_of_jsbytes("negotiation_failed"),
     cst_reading_header_failed$0=
      caml_string_of_jsbytes("reading_header_failed"),
     cst_timeout$0=caml_string_of_jsbytes("timeout"),
     cst_transport_closed$0=caml_string_of_jsbytes("transport_closed"),
     cst_Async_rpc_kernel_Connectio=
      caml_string_of_jsbytes("Async_rpc_kernel__Connection"),
     cst_async_rpc_kernel$38=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_connection_ml=caml_string_of_jsbytes("src/connection.ml"),
     cst$13=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$39=caml_string_of_jsbytes("async_rpc_kernel"),
     error_source_003$0=
      caml_string_of_jsbytes("src/connection.ml.Handshake_error.T.t"),
     cst_Async_rpc_kernel_Connectio$0=
      caml_string_of_jsbytes
       ("Async_rpc_kernel__Connection.Handshake_error.Handshake_error"),
     error_source_046=
      caml_string_of_jsbytes("src/connection.ml.Heartbeat_config.t"),
     cst_send_every$1=caml_string_of_jsbytes("send_every"),
     cst_timeout$3=caml_string_of_jsbytes("timeout"),
     cst_t$11=caml_string_of_jsbytes("t"),
     cst_src_connection_ml_41_2=
      caml_string_of_jsbytes("src/connection.ml:41:2"),
     cst_t$12=caml_string_of_jsbytes("t"),
     cst_async_rpc_kernel$40=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Connectio$1=
      caml_string_of_jsbytes("Async_rpc_kernel__Connection"),
     cst_Async_rpc_kernel_Connectio$2=
      caml_string_of_jsbytes("Async_rpc_kernel__Connection_intf"),
     cst_async_rpc_kernel$41=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_connection_intf_ml=
      caml_string_of_jsbytes("src/connection_intf.ml"),
     cst$14=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$42=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_async_rpc_kernel$43=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Connectio$3=
      caml_string_of_jsbytes("Async_rpc_kernel__Connection_intf"),
     cst_update=caml_string_of_jsbytes("update"),
     cst_state=caml_string_of_jsbytes("state"),
     cst_Rpc_Pipe_rpc_Direct_stream$0=
      caml_string_of_jsbytes
       ("Rpc.Pipe_rpc.Direct_stream_writer.Group.add_exn: cannot add a closed direct stream writer"),
     cst_Rpc_Pipe_rpc_Direct_stream$1=
      caml_string_of_jsbytes
       ("Rpc.Pipe_rpc.Direct_stream_writer.Group.add_exn: trying to add a direct stream writer that is already present in the group"),
     cst_Rpc_Pipe_rpc_Direct_stream$2=
      caml_string_of_jsbytes
       ("Rpc.Pipe_rpc.Direct_stream_writer.Group.add: cannot add a direct stream writer with a different bin_writer"),
     cst_Rpc_Pipe_rpc_Direct_stream=
      caml_string_of_jsbytes
       ("Rpc.Pipe_rpc.Direct_stream_writer.Group.Buffer.create got negative buffer size"),
     cst_response$2=caml_string_of_jsbytes("response"),
     cst$25=caml_string_of_jsbytes(""),
     cst_client_side_streaming_rpc_=
      caml_string_of_jsbytes
       ("client-side streaming_rpc initial_response un-bin-io'ing"),
     cst_client_side_streaming_rpc_$0=
      caml_string_of_jsbytes
       ("client-side streaming_rpc response un-bin-io'ing"),
     cst_client_side_streaming_rpc_$1=
      caml_string_of_jsbytes
       ("client-side streaming_rpc response un-bin-io'ing"),
     cst_error$5=caml_string_of_jsbytes("error"),
     cst_update_response=caml_string_of_jsbytes("update-response"),
     cst_initial_response=caml_string_of_jsbytes("initial-response"),
     cst_query$0=caml_string_of_jsbytes("query"),
     cst$19=caml_string_of_jsbytes(""),
     cst$20=caml_string_of_jsbytes(":"),
     cst$21=caml_string_of_jsbytes(""),
     cst$22=caml_string_of_jsbytes(":"),
     cst$23=caml_string_of_jsbytes(""),
     cst$24=caml_string_of_jsbytes(""),
     cst_Closed_locally$1=caml_string_of_jsbytes("Closed_locally"),
     cst_Closed_remotely$1=caml_string_of_jsbytes("Closed_remotely"),
     cst_Error$3=caml_string_of_jsbytes("Error"),
     cst_closed_locally$1=caml_string_of_jsbytes("closed_locally"),
     cst_closed_remotely$1=caml_string_of_jsbytes("closed_remotely"),
     cst_error$3=caml_string_of_jsbytes("error"),
     cst_Closed_locally$2=caml_string_of_jsbytes("Closed_locally"),
     cst_Closed_remotely$2=caml_string_of_jsbytes("Closed_remotely"),
     cst_Error$4=caml_string_of_jsbytes("Error"),
     cst_closed_locally$2=caml_string_of_jsbytes("closed_locally"),
     cst_closed_remotely$2=caml_string_of_jsbytes("closed_remotely"),
     cst_error$4=caml_string_of_jsbytes("error"),
     cst_src_rpc_ml_Pipe_close_reas$0=
      caml_string_of_jsbytes("src/rpc.ml.Pipe_close_reason.Stable.V1.t"),
     cst_Closed_locally=caml_string_of_jsbytes("Closed_locally"),
     cst_Closed_remotely=caml_string_of_jsbytes("Closed_remotely"),
     cst_Error$0=caml_string_of_jsbytes("Error"),
     cst_closed_locally=caml_string_of_jsbytes("closed_locally"),
     cst_closed_remotely=caml_string_of_jsbytes("closed_remotely"),
     cst_error$1=caml_string_of_jsbytes("error"),
     cst_Closed_locally$0=caml_string_of_jsbytes("Closed_locally"),
     cst_Closed_remotely$0=caml_string_of_jsbytes("Closed_remotely"),
     cst_Error$1=caml_string_of_jsbytes("Error"),
     cst_closed_locally$0=caml_string_of_jsbytes("closed_locally"),
     cst_closed_remotely$0=caml_string_of_jsbytes("closed_remotely"),
     cst_error$2=caml_string_of_jsbytes("error"),
     cst_src_rpc_ml_Pipe_close_reas=
      caml_string_of_jsbytes("src/rpc.ml.Pipe_close_reason.t"),
     cst_msg=caml_string_of_jsbytes("msg"),
     cst$18=caml_string_of_jsbytes(""),
     cst_client_side_rpc_response_u=
      caml_string_of_jsbytes("client-side rpc response un-bin-io'ing"),
     cst_response$1=caml_string_of_jsbytes("response"),
     cst_query=caml_string_of_jsbytes("query"),
     cst$16=caml_string_of_jsbytes(""),
     cst$17=caml_string_of_jsbytes(""),
     cst_Async_rpc_kernel_Rpc=caml_string_of_jsbytes("Async_rpc_kernel__Rpc"),
     cst_async_rpc_kernel$44=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_rpc_ml=caml_string_of_jsbytes("src/rpc.ml"),
     cst$15=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$45=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Error=caml_string_of_jsbytes("Error"),
     cst_t$13=caml_string_of_jsbytes("t"),
     cst_src_rpc_ml_399_2=caml_string_of_jsbytes("src/rpc.ml:399:2"),
     cst_t$14=caml_string_of_jsbytes("t"),
     error_source_009=caml_string_of_jsbytes("src/rpc.ml.Pipe_close_reason.t"),
     cst_Error$2=caml_string_of_jsbytes("Error"),
     cst_t$15=caml_string_of_jsbytes("t"),
     cst_src_rpc_ml_407_6=caml_string_of_jsbytes("src/rpc.ml:407:6"),
     cst_t$16=caml_string_of_jsbytes("t"),
     error_source_024=
      caml_string_of_jsbytes("src/rpc.ml.Pipe_close_reason.Stable.V1.t"),
     cst_Async_rpc_kernel_Rpc_Pipe_=
      caml_string_of_jsbytes("Async_rpc_kernel__Rpc.Pipe_rpc.Pipe_rpc_failed"),
     cst_async_rpc_kernel$46=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Rpc$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Rpc"),
     cst_src_versioned_rpc_ml$15=
      caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_Int_Set_equal_Caller_versi$4=
      caml_string_of_jsbytes
       ("<<Int.Set.equal (Caller.versions ()) (Callee.ve[...]>>"),
     cst_src_versioned_rpc_ml$14=
      caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_Int_Set_equal_Caller_versi$3=
      caml_string_of_jsbytes
       ("<<Int.Set.equal (Caller.versions ()) (Callee.ve[...]>>"),
     cst_src_versioned_rpc_ml$13=
      caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_Int_Set_equal_Caller_versi$2=
      caml_string_of_jsbytes
       ("<<Int.Set.equal (Caller.versions ()) (Callee.ve[...]>>"),
     cst_src_versioned_rpc_ml$12=
      caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_Int_Set_equal_Caller_versi$1=
      caml_string_of_jsbytes
       ("<<Int.Set.equal (Caller.versions ()) (Callee.ve[...]>>"),
     cst_src_versioned_rpc_ml$11=
      caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_Int_Set_equal_Caller_versi$0=
      caml_string_of_jsbytes
       ("<<Int.Set.equal (Caller.versions ()) (Callee.ve[...]>>"),
     cst_src_versioned_rpc_ml$10=
      caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_Int_Set_equal_Caller_versi=
      caml_string_of_jsbytes
       ("<<Int.Set.equal (Caller.versions ()) (Callee.ve[...]>>"),
     cst_Cannot_use_Direct_with_Reg=
      caml_string_of_jsbytes("Cannot use Direct with Register_raw"),
     the_rpc=caml_string_of_jsbytes("the-rpc"),
     not_the_rpc=caml_string_of_jsbytes("other-rpc"),
     cst_src_versioned_rpc_ml$5=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     rpc_name=caml_string_of_jsbytes("the-rpc"),
     cst_src_versioned_rpc_ml$0=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_caller_and_callee_share_no=
      caml_string_of_jsbytes
       ("caller and callee share no common versions for rpc"),
     cst_cannot_use_direct_interfac=
      caml_string_of_jsbytes("cannot use direct interface with Register_raw"),
     cst_Rpc_names_don_t_agree=caml_string_of_jsbytes("Rpc names don't agree"),
     cst_Version_already_exists=
      caml_string_of_jsbytes("Version already exists"),
     cst_unknown_rpc_version=caml_string_of_jsbytes("unknown rpc version"),
     cst_multiple_rpc_registrations=
      caml_string_of_jsbytes("multiple rpc registrations"),
     cst_type_conversion_failure=
      caml_string_of_jsbytes("type conversion failure"),
     cst_Async_rpc_kernel_Versioned=
      caml_string_of_jsbytes("Async_rpc_kernel__Versioned_rpc"),
     cst_async_rpc_kernel$47=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_versioned_rpc_ml=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst$26=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$48=caml_string_of_jsbytes("async_rpc_kernel"),
     name$4=caml_string_of_jsbytes("__Versioned_rpc.Menu"),
     cst_query$1=caml_string_of_jsbytes("query"),
     cst_src_versioned_rpc_ml_642_6=
      caml_string_of_jsbytes("src/versioned_rpc.ml:642:6"),
     cst_query$2=caml_string_of_jsbytes("query"),
     cst_response$3=caml_string_of_jsbytes("response"),
     cst_src_versioned_rpc_ml_643_6=
      caml_string_of_jsbytes("src/versioned_rpc.ml:643:6"),
     cst_response$4=caml_string_of_jsbytes("response"),
     cst_src_versioned_rpc_ml$1=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_src_versioned_rpc_ml$2=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_src_versioned_rpc_ml$3=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_src_versioned_rpc_ml$4=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_167b6f40dad59162efca5d754f=
      caml_string_of_jsbytes("167b6f40dad59162efca5d754f967885"),
     cst_src_versioned_rpc_ml$6=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_src_versioned_rpc_ml$7=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_src_versioned_rpc_ml$8=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_src_versioned_rpc_ml$9=caml_string_of_jsbytes("src/versioned_rpc.ml"),
     cst_167b6f40dad59162efca5d754f$0=
      caml_string_of_jsbytes("167b6f40dad59162efca5d754f967885"),
     cst_async_rpc_kernel$49=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Versioned$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Versioned_rpc"),
     cst_FOOBAR123$0=caml_string_of_jsbytes("FOOBAR123"),
     cst$29=caml_string_of_jsbytes(""),
     cst_src_pipe_transport_ml_Benc=
      caml_string_of_jsbytes("src/pipe_transport.ml.Bench_reader"),
     cst_src_pipe_transport_ml$9=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_write_1_msg_1_chu$0=
      caml_string_of_jsbytes("run_test write_1_msg_1_chunk"),
     cst_write_1_msg_1_chunk=caml_string_of_jsbytes("write_1_msg_1_chunk"),
     cst_src_pipe_transport_ml_Benc$0=
      caml_string_of_jsbytes("src/pipe_transport.ml.Bench_reader"),
     cst_src_pipe_transport_ml$10=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_let_f_write_write_1_msg_1_=
      caml_string_of_jsbytes
       ("let f write = write_1_msg_1_chunk write; write_1_msg_1_chunk write in\nrun_test f"),
     cst_write_2_msg_1_chunk=caml_string_of_jsbytes("write_2_msg_1_chunk"),
     cst_src_pipe_transport_ml_Benc$1=
      caml_string_of_jsbytes("src/pipe_transport.ml.Bench_reader"),
     cst_src_pipe_transport_ml$11=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_write_1_msg_3_chu$0=
      caml_string_of_jsbytes("run_test write_1_msg_3_chunk"),
     cst_write_1_msg_3_chunk=caml_string_of_jsbytes("write_1_msg_3_chunk"),
     cst_src_pipe_transport_ml_Benc$2=
      caml_string_of_jsbytes("src/pipe_transport.ml.Bench_reader"),
     cst_src_pipe_transport_ml$12=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_write_2_msg_1_chu$0=
      caml_string_of_jsbytes("run_test write_2_msg_1_chunk"),
     cst_write_2_msg_1_chunk$0=caml_string_of_jsbytes("write_2_msg_1_chunk"),
     cst_src_pipe_transport_ml_Benc$3=
      caml_string_of_jsbytes("src/pipe_transport.ml.Bench_reader"),
     cst_src_pipe_transport_ml$13=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_write_2_msg_one_b$0=
      caml_string_of_jsbytes
       ("run_test write_2_msg_one_byte_at_a_time_34_chunk"),
     cst_write_2_msg_one_byte=caml_string_of_jsbytes("write_2_msg_one_byte"),
     cst_src_pipe_transport_ml_Benc$4=
      caml_string_of_jsbytes("src/pipe_transport.ml.Bench_reader"),
     cst_src_pipe_transport_ml$14=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_let_f_write_write_create_m=
      caml_string_of_jsbytes
       ("let f write =\n  write (create_message ());\n  write_1_msg_3_chunk write;\n  write_2_msg_1_chunk write;\n  write_2_msg_one_byte_at_a_time_34_chunk write;\n  write (create_message ()) in\nrun_test f"),
     cst_multi=caml_string_of_jsbytes("multi"),
     pos$3=caml_string_of_jsbytes("src/pipe_transport.ml:437:19"),
     pos$2=caml_string_of_jsbytes("src/pipe_transport.ml:415:21"),
     cst$28=caml_string_of_jsbytes(""),
     pos$1=caml_string_of_jsbytes("src/pipe_transport.ml:341:19"),
     pos$0=caml_string_of_jsbytes("src/pipe_transport.ml:340:19"),
     pos=caml_string_of_jsbytes("src/pipe_transport.ml:318:19"),
     cst_FOOBAR123=caml_string_of_jsbytes("FOOBAR123"),
     cst_src_pipe_transport_ml$0=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_write_1_msg_1_chu=
      caml_string_of_jsbytes("<<run_test write_1_msg_1_chunk (verify 1 1)>>"),
     cst_src_pipe_transport_ml$1=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_f_verify_2_1=
      caml_string_of_jsbytes("<<run_test f (verify 2 1)>>"),
     cst_src_pipe_transport_ml$2=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_write_1_msg_3_chu=
      caml_string_of_jsbytes("<<run_test write_1_msg_3_chunk (verify 1 3)>>"),
     cst_src_pipe_transport_ml$3=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_write_2_msg_1_chu=
      caml_string_of_jsbytes("<<run_test write_2_msg_1_chunk (verify 2 1)>>"),
     cst_src_pipe_transport_ml$4=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_write_2_msg_one_b=
      caml_string_of_jsbytes
       ("<<run_test write_2_msg_one_byte_at_a_time_34_ch[...]>>"),
     cst_src_pipe_transport_ml$5=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_run_test_f_verify_7_40=
      caml_string_of_jsbytes("<<run_test f (verify 7 40)>>"),
     cst_src_pipe_transport_ml$6=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_can_call_read_forever_mult=
      caml_string_of_jsbytes("can call read_forever multiple times"),
     cst_Async_rpc_kernel_Pipe_tran=
      caml_string_of_jsbytes("Async_rpc_kernel__Pipe_transport"),
     cst_async_rpc_kernel$50=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_pipe_transport_ml=caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst$27=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$51=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_pipe_transport_ml$7=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_Test_reader_string=caml_string_of_jsbytes("Test_reader_string"),
     cst_src_pipe_transport_ml$8=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_Test_reader_bigstring=caml_string_of_jsbytes("Test_reader_bigstring"),
     cst_src_pipe_transport_ml$15=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_src_pipe_transport_ml$16=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst$30=caml_string_of_jsbytes(""),
     cst_Test_reader_string$0=caml_string_of_jsbytes("Test_reader_string"),
     cst_src_pipe_transport_ml$17=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst_src_pipe_transport_ml$18=
      caml_string_of_jsbytes("src/pipe_transport.ml"),
     cst$31=caml_string_of_jsbytes(""),
     cst_Test_reader_bigstring$0=
      caml_string_of_jsbytes("Test_reader_bigstring"),
     cst_async_rpc_kernel$52=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Pipe_tran$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Pipe_transport"),
     cst_Async_rpc_kernel_Persisten=
      caml_string_of_jsbytes("Async_rpc_kernel__Persistent_connection"),
     cst_async_rpc_kernel$53=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_persistent_connection_=
      caml_string_of_jsbytes("src/persistent_connection.ml"),
     cst$32=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$54=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_async_rpc_kernel$55=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel_Persisten$0=
      caml_string_of_jsbytes("Async_rpc_kernel__Persistent_connection"),
     cst_Async_rpc_kernel=caml_string_of_jsbytes("Async_rpc_kernel"),
     cst_async_rpc_kernel$56=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_src_async_rpc_kernel_ml=
      caml_string_of_jsbytes("src/async_rpc_kernel.ml"),
     cst$33=caml_string_of_jsbytes(""),
     cst_async_rpc_kernel$57=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_async_rpc_kernel$58=caml_string_of_jsbytes("async_rpc_kernel"),
     cst_Async_rpc_kernel$0=caml_string_of_jsbytes("Async_rpc_kernel"),
     Bin_prot_Common=global_data.Bin_prot__Common,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Bin_prot_Type_class=global_data.Bin_prot__Type_class,
     Bin_prot_Size=global_data.Bin_prot__Size,
     Bin_prot_Write=global_data.Bin_prot__Write,
     Bin_prot_Read=global_data.Bin_prot__Read,
     Bin_prot_Nat0=global_data.Bin_prot__Nat0,
     Core_Int=global_data.Core__Int,
     Core_Bytes=global_data.Core__Bytes,
     Core_Bigstring=global_data.Core__Bigstring,
     Core=global_data.Core,
     Bin_prot_Utils=global_data.Bin_prot__Utils,
     Inline_test_config=global_data.Inline_test_config,
     Core_String=global_data.Core__String,
     Expect_test_common_File=global_data.Expect_test_common__File,
     Core_List=global_data.Core__List,
     Assert_failure=global_data.Assert_failure,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Base_Hash=global_data.Base__Hash,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     Core_Comparable=global_data.Core__Comparable,
     Core_Hashable=global_data.Core__Hashable,
     Expect_test_config=global_data.Expect_test_config,
     Core_Result=global_data.Core__Result,
     Sexplib_Std=global_data.Sexplib__Std,
     Bin_prot_Std=global_data.Bin_prot__Std,
     Stdlib=global_data.Stdlib,
     Core_Sexp=global_data.Core__Sexp,
     Core_Unique_id=global_data.Core__Unique_id,
     Async_kernel=global_data.Async_kernel,
     Async_kernel_Pipe=global_data.Async_kernel__Pipe,
     Async_kernel_Ivar=global_data.Async_kernel__Ivar,
     Core_Queue=global_data.Core__Queue,
     Async_kernel_Deferred=global_data.Async_kernel__Deferred,
     CamlinternalMod=global_data.CamlinternalMod,
     Core_Option=global_data.Core__Option,
     Async_kernel_Monitor=global_data.Async_kernel__Monitor,
     Core_Lazy=global_data.Core__Lazy,
     Core_Info=global_data.Core__Info,
     Core_Error=global_data.Core__Error,
     Core_Sexpable=global_data.Core__Sexpable,
     Base_Exn=global_data.Base__Exn,
     Core_Hashtbl=global_data.Core__Hashtbl,
     Core_Or_error=global_data.Core__Or_error,
     Core_Hash_set=global_data.Core__Hash_set,
     Base_Backtrace=global_data.Base__Backtrace,
     Core_Bag=global_data.Core__Bag,
     Async_kernel_Scheduler=global_data.Async_kernel__Scheduler,
     Base_Monad=global_data.Base__Monad,
     Async_kernel_Synchronous_time_=
      global_data.Async_kernel__Synchronous_time_source,
     Core_Set_once=global_data.Core__Set_once,
     Async_kernel_Time_source=global_data.Async_kernel__Time_source,
     Base_Staged=global_data.Base__Staged,
     Async_kernel_Async_stream=global_data.Async_kernel__Async_stream,
     Core_Time_ns=global_data.Core__Time_ns,
     Ppx_sexp_conv_lib=global_data.Ppx_sexp_conv_lib,
     Core_Time_ns_alternate_sexp=global_data.Core__Time_ns_alternate_sexp,
     Core_Array=global_data.Core__Array;
    global_data.Base__Field;
    var
     include$3=global_data.Protocol_version_header,
     Core_Unit=global_data.Core__Unit,
     Stdlib_String=global_data.Stdlib__String,
     Core_Type_equal=global_data.Core__Type_equal,
     Core_Set=global_data.Core__Set,
     Async_kernel_Deferred_or_error=
      global_data.Async_kernel__Deferred_or_error,
     Base_List=global_data.Base__List,
     Core_Memo=global_data.Core__Memo,
     Core_Map=global_data.Core__Map,
     Async_kernel_Deferred_result=global_data.Async_kernel__Deferred_result,
     Async_kernel_Async_kernel_sche=
      global_data.Async_kernel__Async_kernel_scheduler,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Core_Bigbuffer=global_data.Core__Bigbuffer,
     include$6=global_data.Persistent_connection_kernel,
     Async_rpc_kernel=[0];
    caml_register_global(792,Async_rpc_kernel,"Async_rpc_kernel__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Nat0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel);
    caml_call1(Expect_test_collector[5][1],cst_src_nat0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$0,cst);
    var
     _a_=caml_call1(Bin_prot_Shape[5][1],cst_899e2f4a_490a_11e6_b68f_bb),
     bin_shape_t=caml_call1(caml_call1(Bin_prot_Shape[16],_a_),0),
     _c_=Bin_prot_Size[11],
     _e_=Bin_prot_Write[7],
     _g_=Bin_prot_Read[7],
     _j_=
      [0,
       [11,caml_string_of_jsbytes("mismatch for length "),[4,0,0,0,0]],
       caml_string_of_jsbytes("mismatch for length %d")],
     _p_=[0,caml_string_of_jsbytes("version")],
     _q_=[0,caml_string_of_jsbytes("name")],
     _o_=[0,caml_string_of_jsbytes("src/description.ml"),5,4],
     _W_=[1,caml_string_of_jsbytes(" ((bar (5)) (foo (1 2))) ")],
     _X_=[0,caml_string_of_jsbytes("")],
     _bQ_=[0,caml_string_of_jsbytes("Heartbeat")],
     _bR_=[0,caml_string_of_jsbytes("Query")],
     _bS_=[0,caml_string_of_jsbytes("Response")],
     _bP_=[1,caml_string_of_jsbytes("src/protocol.ml.Message.needs_length")],
     _bq_=[0,caml_string_of_jsbytes("initial")],
     _br_=[0,caml_string_of_jsbytes("unused_query_id")],
     _a4_=[0,caml_string_of_jsbytes("data")],
     _a5_=[0,caml_string_of_jsbytes("id")],
     _aS_=[0,caml_string_of_jsbytes("data")],
     _aT_=[0,caml_string_of_jsbytes("id")],
     _aU_=[0,caml_string_of_jsbytes("version")],
     _aV_=[0,caml_string_of_jsbytes("tag")],
     _ao_=[0,caml_string_of_jsbytes("Connection_closed")],
     _ap_=[0,caml_string_of_jsbytes("Bin_io_exn")],
     _aq_=[0,caml_string_of_jsbytes("Write_error")],
     _ar_=[0,caml_string_of_jsbytes("Uncaught_exn")],
     _as_=[0,caml_string_of_jsbytes("Version")],
     _at_=[0,caml_string_of_jsbytes("Unimplemented_rpc")],
     _au_=[0,caml_string_of_jsbytes("Unknown_query_id")],
     _an_=[1,caml_string_of_jsbytes("src/protocol.ml.Rpc_error.T.t")],
     _ai_=[0,caml_string_of_jsbytes("Connection_closed"),0],
     _ax_=[1,caml_string_of_jsbytes(" 8cc766befa2cf565ea147d9fcd5eaaab ")],
     _ay_=[0,caml_string_of_jsbytes("")],
     _aA_=[0,caml_string_of_jsbytes("stable")],
     _bJ_=[0,caml_string_of_jsbytes("Heartbeat"),0],
     _bV_=[0,caml_string_of_jsbytes("Closed")],
     _bW_=[0,caml_string_of_jsbytes("Sent")],
     _bX_=[0,caml_string_of_jsbytes("Message_too_big")],
     _bT_=[0,caml_string_of_jsbytes("max_message_size")],
     _bU_=[0,caml_string_of_jsbytes("size")],
     _bZ_=[0,caml_string_of_jsbytes("writer")],
     _b0_=[0,caml_string_of_jsbytes("reader")],
     _bY_=
      [0,
       [11,
        caml_string_of_jsbytes("message length ("),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(") did not match expected length ("),
          [4,0,0,0,[12,41,0]]]]],
       caml_string_of_jsbytes
        ("message length (%d) did not match expected length (%d)")],
     _b3_=[0,caml_string_of_jsbytes("close_connection_if_no_return_value")],
     _b4_=[0,caml_string_of_jsbytes("callback")],
     _b5_=[0,[0,[0,[0,[0,[0]]]],[0,[0]]]],
     _b6_=[0,caml_string_of_jsbytes("src/implementation_types.ml"),88,2],
     _b7_=[0,[0,[0,[0]]]],
     _b8_=[0,caml_string_of_jsbytes("src/implementation_types.ml"),139,2],
     _b9_=[0,[0,[0,[0]],[0,[0]],[0,[0]]]],
     _b__=[0,caml_string_of_jsbytes("src/implementation_types.ml"),190,2],
     _b$_=[0,[0]],
     _ca_=[0,caml_string_of_jsbytes("src/implementation_types.ml"),199,2],
     _cb_=[0,[0,[0,[0,[0,[0]]]],[0,[0]]]],
     _cc_=[0,[0,[0,[0]]]],
     _cd_=[0,[0,[0,[0]],[0,[0]],[0,[0]]]],
     _ce_=[0,[0]],
     _cf_=[0,caml_string_of_jsbytes("close_connection_if_no_return_value")],
     _cg_=[0,caml_string_of_jsbytes("callback")],
     _ck_=[0,caml_string_of_jsbytes("on_exception")],
     _cl_=[0,caml_string_of_jsbytes("shapes")],
     _cm_=[0,caml_string_of_jsbytes("f")],
     _cn_=[0,caml_string_of_jsbytes("version")],
     _co_=[0,caml_string_of_jsbytes("tag")],
     _ch_=[0,caml_string_of_jsbytes("responded")],
     _ci_=[0,caml_string_of_jsbytes("writer")],
     _cj_=[0,caml_string_of_jsbytes("query_id")],
     _cY_=[0,caml_string_of_jsbytes("rpc_version")],
     _cZ_=[0,caml_string_of_jsbytes("rpc_name")],
     _c0_=[0,caml_string_of_jsbytes("connection_description")],
     _c1_=[0,caml_string_of_jsbytes("rpc_error")],
     _cX_=[0,caml_string_of_jsbytes("Connection_closed")],
     _cV_=[0,caml_string_of_jsbytes("src/rpc_error.ml.Rpc")],
     _cW_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _c9_=[0,caml_string_of_jsbytes("exn")],
     _c__=[0,caml_string_of_jsbytes("location")],
     _c$_=
      [0,
       [11,
        caml_string_of_jsbytes("message length ("),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(") did not match expected length ("),
          [4,0,0,0,[12,41,0]]]]],
       caml_string_of_jsbytes
        ("message length (%d) did not match expected length (%d)")],
     _dO_=[0,caml_string_of_jsbytes("src/implementations.ml"),945,32663,32690],
     _dM_=[0,caml_string_of_jsbytes("_")],
     _dN_=[0,caml_string_of_jsbytes("src/implementations.ml"),937,32490,32504],
     _dK_=
      [0,
       caml_string_of_jsbytes
        ("src/implementations.ml.Duplicate_implementations")],
     _dL_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _dI_=[0,10],
     _dG_=[0,10],
     _dH_=[0,10],
     _dF_=[0,[0,0]],
     _dD_=[0,[0,0]],
     _dE_=[0,[0,0]],
     _dC_=[0,caml_string_of_jsbytes("src/implementations.ml"),741,4],
     _dB_=[0,3456156],
     _dA_=[0,0],
     _dz_=[0,0],
     _dy_=[0,0],
     _dt_=[0,3903734],
     _du_=[0,caml_string_of_jsbytes("backtrace")],
     _dv_=[0,caml_string_of_jsbytes("exn")],
     _dw_=[0,caml_string_of_jsbytes("location")],
     _dx_=[0,3903734],
     _ds_=[0,3456156],
     _dr_=[0,caml_string_of_jsbytes("src/implementations.ml"),219,6],
     _dq_=[0,caml_string_of_jsbytes("src/implementations.ml"),220,6],
     _do_=[0,0],
     _dm_=[0,caml_string_of_jsbytes("reason")],
     _dn_=[0,caml_string_of_jsbytes("error")],
     _dd_=[0,caml_string_of_jsbytes("packed_self")],
     _de_=[0,caml_string_of_jsbytes("last_dispatched_implementation")],
     _df_=[0,caml_string_of_jsbytes("connection_close_started")],
     _dg_=[0,caml_string_of_jsbytes("connection_description")],
     _dh_=[0,caml_string_of_jsbytes("connection_state")],
     _di_=[0,caml_string_of_jsbytes("stopped")],
     _dj_=[0,caml_string_of_jsbytes("open_streaming_responses")],
     _dk_=[0,caml_string_of_jsbytes("writer")],
     _dl_=[0,caml_string_of_jsbytes("implementations")],
     _da_=[0,caml_string_of_jsbytes("_")],
     _db_=[0,caml_string_of_jsbytes("Pipe")],
     _dc_=[0,caml_string_of_jsbytes("Direct")],
     _eN_=[0,3804260],
     _eO_=[0,523273847],
     _eM_=[0,10],
     _eH_=[1,2],
     _eI_=[0,0],
     _eJ_=[1,0],
     _eK_=[1,1],
     _eF_=[0,3804260],
     _eG_=[0,3903734],
     _eL_=[1,1],
     _eD_=[0,caml_string_of_jsbytes("exn")],
     _eB_=[0,caml_string_of_jsbytes("src/connection.ml"),377,11616,11662],
     _eC_=[0,caml_string_of_jsbytes("RPC close connection monitor")],
     _eE_=[0,caml_string_of_jsbytes("RPC connection loop")],
     _eA_=[0,caml_string_of_jsbytes("src/connection.ml"),365,11213,11250],
     _ey_=[12,46,0],
     _ez_=[0,0],
     _ex_=[0,caml_string_of_jsbytes("src/connection.ml"),202,6037,6100],
     _eu_=[1,-1025106484],
     _et_=[0,0],
     _er_=[0,caml_string_of_jsbytes("_")],
     _ep_=[0,caml_string_of_jsbytes("src/connection.ml"),117,3256,3276],
     _eq_=[0,caml_string_of_jsbytes("connection")],
     _es_=[0,caml_string_of_jsbytes("reason")],
     _eo_=[1,-1025106484],
     _em_=[0,caml_string_of_jsbytes("writer")],
     _en_=[0,caml_string_of_jsbytes("description")],
     _ea_=[0,caml_string_of_jsbytes("heartbeat_event")],
     _eb_=[0,caml_string_of_jsbytes("time_source")],
     _ec_=[0,caml_string_of_jsbytes("implementations_instance")],
     _ed_=[0,caml_string_of_jsbytes("close_finished")],
     _ee_=[0,caml_string_of_jsbytes("close_started")],
     _ef_=[0,caml_string_of_jsbytes("open_queries")],
     _eg_=[0,caml_string_of_jsbytes("writer")],
     _eh_=[0,caml_string_of_jsbytes("reader")],
     _ei_=[0,caml_string_of_jsbytes("last_seen_alive")],
     _ej_=[0,caml_string_of_jsbytes("heartbeat_callbacks")],
     _ek_=[0,caml_string_of_jsbytes("heartbeat_config")],
     _el_=[0,caml_string_of_jsbytes("description")],
     _d__=[0,caml_string_of_jsbytes("send_every")],
     _d$_=[0,caml_string_of_jsbytes("timeout")],
     _d4_=[0,caml_string_of_jsbytes("send_every")],
     _d5_=[0,caml_string_of_jsbytes("timeout")],
     _d3_=[0,caml_string_of_jsbytes("src/connection.ml"),41,2],
     _d1_=
      [0,
       caml_string_of_jsbytes
        ("src/connection.ml.Handshake_error.Handshake_error")],
     _d2_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _dT_=[0,caml_string_of_jsbytes("Eof")],
     _dU_=[0,caml_string_of_jsbytes("Transport_closed")],
     _dV_=[0,caml_string_of_jsbytes("Timeout")],
     _dW_=[0,caml_string_of_jsbytes("Reading_header_failed")],
     _dX_=[0,caml_string_of_jsbytes("Negotiation_failed")],
     _dY_=[0,caml_string_of_jsbytes("Negotiated_unexpected_version")],
     _dS_=[0,1,0],
     _fo_=[0,caml_string_of_jsbytes("src/rpc.ml"),806,23714,23734],
     _fm_=[0,76061764,[0,0]],
     _fn_=[0,76061764,[0,0]],
     _fk_=[1,636790696],
     _fl_=[0,76061764,[0,0]],
     _fi_=[0,caml_string_of_jsbytes(":query"),0],
     _fj_=[0,caml_string_of_jsbytes(":error"),0],
     _ff_=[0,caml_string_of_jsbytes("Closed_remotely")],
     _fg_=[0,caml_string_of_jsbytes("Closed_locally")],
     _fh_=[0,caml_string_of_jsbytes("Error")],
     _fe_=
      [1,caml_string_of_jsbytes("src/rpc.ml.Pipe_close_reason.Stable.V1.t")],
     _e7_=[0,caml_string_of_jsbytes("Closed_remotely")],
     _e8_=[0,caml_string_of_jsbytes("Closed_locally")],
     _e9_=[0,caml_string_of_jsbytes("Error")],
     _e6_=[1,caml_string_of_jsbytes("src/rpc.ml.Pipe_close_reason.t")],
     _eZ_=[0,caml_string_of_jsbytes(":msg"),0],
     _eY_=[0,caml_string_of_jsbytes("Unknown")],
     _eX_=[0,caml_string_of_jsbytes("Unknown")],
     _eV_=[0,76061764,[0,0]],
     _eW_=[0,76061764,[0,0]],
     _eU_=[0,76061764,[0,0]],
     _eS_=[0,caml_string_of_jsbytes(":query"),0],
     _eT_=[0,caml_string_of_jsbytes(":response"),0],
     _eQ_=[0,0],
     _eR_=[1,0],
     _e0_=[0,caml_string_of_jsbytes("Closed_remotely"),0],
     _e1_=[0,caml_string_of_jsbytes("Closed_locally"),0],
     _e__=[0,caml_string_of_jsbytes("Closed_remotely"),0],
     _e$_=[0,caml_string_of_jsbytes("Closed_locally"),0],
     _gp_=[0,1],
     _go_=[0,1],
     _gn_=[0,0],
     _gm_=[0,1],
     _gl_=[0,1],
     _gd_=[0,1,[0,2,[0,3,0]]],
     _f5_=[0,2,0],
     _f6_=[0,1,[0,2,[0,3,0]]],
     _f0_=[0,caml_string_of_jsbytes("callee_menu")],
     _f1_=[0,caml_string_of_jsbytes("callee_versions")],
     _f2_=[0,caml_string_of_jsbytes("caller_versions")],
     _f3_=[0,caml_string_of_jsbytes("rpc_name")],
     _fL_=[0,1],
     _fK_=[0,1],
     _fJ_=[0,0],
     _fI_=[0,1],
     _fH_=[0,1],
     _fF_=[0,caml_string_of_jsbytes("Rpc")],
     _fG_=[0,caml_string_of_jsbytes("Version")],
     _fx_=[0,caml_string_of_jsbytes("Update")],
     _fA_=[0,caml_string_of_jsbytes("State")],
     _fB_=[0,caml_string_of_jsbytes("Error")],
     _fC_=[0,caml_string_of_jsbytes("Msg")],
     _fD_=[0,caml_string_of_jsbytes("Response")],
     _fE_=[0,caml_string_of_jsbytes("Query")],
     _fy_=[0,caml_string_of_jsbytes("Rpc")],
     _fz_=[0,caml_string_of_jsbytes("Version")],
     _f8_=[1,caml_string_of_jsbytes(" (Ok 2) ")],
     _f9_=[0,caml_string_of_jsbytes("")],
     _f$_=
      [0,
       caml_string_of_jsbytes
        ("highest version number is taken in most_recent_common_version")],
     _gf_=
      [1,
       caml_string_of_jsbytes
        ('\n      (Error\n       ("caller and callee share no common versions for rpc" (rpc_name the-rpc)\n        (caller_versions (1 2 3)) (callee_versions ())\n        (callee_menu ((other-rpc (1 2))))))')],
     _gg_=[0,caml_string_of_jsbytes("")],
     _gi_=
      [0,
       caml_string_of_jsbytes
        ("error from most_recent_common_version looks reasonable")],
     _gL_=[0,caml_string_of_jsbytes("src/pipe_transport.ml"),434,7],
     _gM_=[0,caml_string_of_jsbytes("src/pipe_transport.ml"),427,7],
     _gK_=[0,0],
     _gJ_=[0,1],
     _gH_=[0,caml_string_of_jsbytes("monitor")],
     _gI_=[0,caml_string_of_jsbytes("pipe")],
     _gE_=[0,caml_string_of_jsbytes("src/pipe_transport.ml"),111,12],
     _gF_=[0,caml_string_of_jsbytes("src/pipe_transport.ml"),105,16],
     _gG_=[1,3456156],
     _gC_=[0,caml_string_of_jsbytes("buffer")],
     _gD_=[0,caml_string_of_jsbytes("pipe")],
     _b_=Bin_prot_Type_class[47],
     _d_=Bin_prot_Type_class[44],
     _f_=Bin_prot_Type_class[45];
    function bin_read_t(buf,pos_ref,vnat0)
     {return caml_call2(Bin_prot_Common[19],cst_t,pos_ref[1])}
    var _h_=Bin_prot_Nat0[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Nat0$0);
    var
     Async_rpc_kernel_Nat0=
      [0,_c_,_e_,_g_,bin_read_t,bin_shape_t,_d_,_f_,_b_,_h_];
    caml_register_global(804,Async_rpc_kernel_Nat0,"Async_rpc_kernel__Nat0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Writer_wi);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$2);
    caml_call1(Expect_test_collector[5][1],cst_src_writer_with_length_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$3,cst$0);
    function of_writer(param)
     {var write=param[2],size=param[1];
      function write$0(buf,pos,a)
       {var
         len=caml_call1(_h_,caml_call1(size,a)),
         pos$0=caml_call3(_e_,buf,pos,len);
        return caml_call3(write,buf,pos$0,a)}
      function size$0(a)
       {var len=caml_call1(_h_,caml_call1(size,a));
        return caml_call1(_c_,len) + len | 0}
      return [0,size$0,write$0]}
    function of_type_class(bin_a){return of_writer(bin_a[2])}
    function _i_(param)
     {function test(len)
       {var
         s=caml_call1(Core_Bytes[39],len),
         bigstring=caml_call3(Bin_prot_Utils[4],0,Core_Bytes[6],s),
         bigstring_version=
          caml_call3(Bin_prot_Utils[4],0,Core_Bigstring[125][1][6],bigstring),
         writer_with_length=of_writer(Core_Bytes[6]),
         with_length_version=
          caml_call3(Bin_prot_Utils[4],0,writer_with_length,s),
         _uX_=caml_call3(Core_Bigstring[16],0,0,with_length_version),
         _uY_=
          caml_string_notequal
           (caml_call3(Core_Bigstring[16],0,0,bigstring_version),_uX_);
        return _uY_?caml_call3(Core[234],_j_,len,0):_uY_}
      function _uS_(param)
       {var _uU_=caml_call2(Core_Int[23],2,10),_uT_=0;
        if(_uU_ >= 0)
         {var len=_uT_;
          for(;;)
           {test(len);
            var _uW_=len + 1 | 0;
            if(_uU_ !== len){var len=_uW_;continue}
            break}}
        var pow=10;
        for(;;)
         {var x=caml_call2(Core_Int[23],2,pow);
          test(x - 1 | 0);
          test(x);
          test(x + 1 | 0);
          var _uV_=pow + 1 | 0;
          if(20 === pow)return 0;
          var pow=_uV_}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_for_len_0_to_Int_pow_2_10_,
        0,
        cst_src_writer_with_length_ml$0,
        39,
        4,
        218,
        _uS_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$1,
      0,
      cst_src_writer_with_length_ml$1,
      19,
      0,
      921,
      _i_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Writer_wi$0);
    var Async_rpc_kernel_Writer_with_l=[0,of_writer,of_type_class];
    caml_register_global
     (811,
      Async_rpc_kernel_Writer_with_l,
      "Async_rpc_kernel__Writer_with_length");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Descripti);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$5);
    caml_call1(Expect_test_collector[5][1],cst_src_description_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$6,cst$2);
    var
     _k_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,[0,cst_name,Core[459]],[0,[0,cst_version,Core[344]],0]]),
     _l_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$0),0,_k_],0],
     _m_=caml_call1(Bin_prot_Shape[4][1],cst_src_description_ml_5_4),
     group=caml_call2(Bin_prot_Shape[6],_m_,_l_),
     _n_=caml_call1(Bin_prot_Shape[2][1],cst_t$1),
     bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group,_n_),0);
    function bin_size_t(param)
     {var
       v2=param[2],
       v1=param[1],
       _uQ_=caml_call1(Core[460],v1),
       size=caml_call2(Bin_prot_Common[23],0,_uQ_),
       _uR_=caml_call1(Core[345],v2);
      return caml_call2(Bin_prot_Common[23],size,_uR_)}
    function bin_write_t(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Core[461],buf,pos,v1);
      return caml_call3(Core[346],buf,pos$0,v2)}
    var bin_writer_t=[0,bin_size_t,bin_write_t];
    function bin_read_t$0(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_description_ml_Stable_,pos_ref[1])}
    function bin_read_t$1(buf,pos_ref)
     {var
       v_name=caml_call2(Core[463],buf,pos_ref),
       v_version=caml_call2(Core[348],buf,pos_ref);
      return [0,v_name,v_version]}
    var
     bin_reader_t=[0,bin_read_t$1,bin_read_t$0],
     bin_t=[0,bin_shape_t$0,bin_writer_t,bin_reader_t];
    function compare(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(Core[467],a_001[1],b_002[1]);
      return 0 === n?caml_call2(Core[352],a_001[2],b_002[2]):n}
    function hash_fold_t(hsv,arg)
     {var hsv$0=caml_call2(Core[469],hsv,arg[1]);
      return caml_call2(Core[354],hsv$0,arg[2])}
    function hash(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_uP_=hash_fold_t(hsv,x);
      return caml_call1(Base_Hash[9],_uP_)}
    function t_of_sexp(sexp_004)
     {if(0 === sexp_004[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_017,sexp_004);
      var
       field_sexps_005=sexp_004[1],
       name_006=[0,0],
       version_008=[0,0],
       duplicates_010=[0,0],
       extra_011=[0,0],
       param=field_sexps_005;
      for(;;)
       {if(param)
         {var _uH_=param[1];
          if(1 === _uH_[0])
           {var _uI_=_uH_[1];
            if(_uI_)
             {var _uJ_=_uI_[1];
              if(0 === _uJ_[0])
               {var _uK_=_uI_[2],_uL_=_uJ_[1],switch$0=0;
                if(! _uK_ || ! _uK_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_019=param[2],
                   field_sexp_013$2=
                    function(_uO_)
                     {function field_sexp_013(param)
                       {if(! _uO_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_017,sexp_004);
                        if(_uO_[2])throw [0,Assert_failure,_o_];
                        var x_020=_uO_[1];
                        return x_020}
                      return field_sexp_013},
                   field_sexp_013=field_sexp_013$2(_uK_);
                  if(caml_string_notequal(_uL_,cst_name$0))
                   if(caml_string_notequal(_uL_,cst_version$0))
                    {if(Sexplib0_Sexp_conv[26][1])
                      extra_011[1] = [0,_uL_,extra_011[1]]}
                   else
                    if(version_008[1])
                     duplicates_010[1] = [0,_uL_,duplicates_010[1]];
                    else
                     {var
                       field_sexp_013$0=field_sexp_013(0),
                       fvalue_015=caml_call1(Core[357],field_sexp_013$0);
                      version_008[1] = [0,fvalue_015]}
                  else
                   if(name_006[1])
                    duplicates_010[1] = [0,_uL_,duplicates_010[1]];
                   else
                    {var
                      field_sexp_013$1=field_sexp_013(0),
                      fvalue_016=caml_call1(Core[472],field_sexp_013$1);
                     name_006[1] = [0,fvalue_016]}
                  var param=tail_019;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_017,_uH_)}
        if(duplicates_010[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_017,
                  duplicates_010[1],
                  sexp_004);
        if(extra_011[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_017,
                  extra_011[1],
                  sexp_004);
        var _uM_=name_006[1],_uN_=version_008[1];
        if(_uM_ && _uN_)
         {var version_009=_uN_[1],name_007=_uM_[1];
          return [0,name_007,version_009]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_017,
                 sexp_004,
                 [0,
                  [0,0 === name_006[1]?1:0,cst_name$1],
                  [0,[0,0 === version_008[1]?1:0,cst_version$1],0]])}}
    function sexp_of_t(param)
     {var
       version_024=param[2],
       name_022=param[1],
       arg_025=caml_call1(Core[356],version_024),
       bnds_021=[0,[1,[0,_p_,[0,arg_025,0]]],0],
       arg_023=caml_call1(Core[471],name_022),
       bnds_021$0=[0,[1,[0,_q_,[0,arg_023,0]]],bnds_021];
      return [1,bnds_021$0]}
    var
     _r_=caml_call1(Core_Comparable[11],[0,compare,t_of_sexp,sexp_of_t]),
     _s_=_r_[1],
     _t_=_r_[2],
     _u_=_r_[3],
     _v_=_r_[4],
     _w_=_r_[5],
     _x_=_r_[6],
     _y_=_r_[7],
     _z_=_r_[9],
     _A_=_r_[10],
     _B_=_r_[11],
     _C_=_r_[12],
     _D_=_r_[13],
     _E_=_r_[14],
     _F_=_r_[15],
     _G_=_r_[16],
     _H_=_r_[17],
     _I_=_r_[18],
     _J_=_r_[19],
     _K_=_r_[20],
     _L_=_r_[21],
     _M_=_r_[22],
     include=
      caml_call1
       (Core_Hashable[3],[0,hash_fold_t,t_of_sexp,compare,sexp_of_t,hash]),
     _N_=include[1],
     _O_=include[2],
     _P_=include[3],
     _Q_=include[4],
     _R_=include[5],
     _S_=include[6],
     _T_=include[7];
    function summarize(ts)
     {var _uD_=Core_Int[102][18],_uE_=Core_Int[102][54];
      function _uF_(param)
       {var version=param[2],name=param[1];return [0,name,version]}
      var _uG_=caml_call2(Core_List[72],ts,_uF_);
      return caml_call3(Core_String[140][11],_uG_,_uE_,_uD_)}
    var
     Expect_test_collector$0=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _U_(param)
     {var
       x_026=summarize(descriptions),
       _uB_=caml_call2(Core_String[140][107],Core_Int[102][75],x_026);
      caml_call2(Core[248],0,_uB_);
      var
       _uC_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_description_ml$0),
         31,
         667,
         671,
         677];
      return caml_call1(Expect_test_collector$0[1],_uC_)}
    var
     _V_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_description_ml$1),
       31,
       667,
       678,
       707],
     _Y_=
      [0,
       [0,
        _X_,
        _W_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_description_ml$2),
         31,
         667,
         671,
         677],
        _V_],
       0],
     _Z_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_description_ml$4),
       22,
       411,
       411,
       708],
     ___=
      caml_call1(Expect_test_common_File[4][3],cst_b6967e9300452808c88c1ab863);
    caml_call9
     (Expect_test_collector$0[3],
      ___,
      _Z_,
      cst_src_description_ml$3,
      0,
      0,
      _Y_,
      0,
      Inline_test_config,
      _U_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Descripti$0);
    var
     _$_=
      [0,
       [0,
        compare,
        t_of_sexp,
        sexp_of_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$1,
        bin_read_t$0,
        bin_shape_t$0,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        hash_fold_t,
        hash]],
     Async_rpc_kernel_Description=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t$1,
       bin_read_t$0,
       bin_shape_t$0,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       sexp_of_t,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       summarize,
       _$_];
    caml_register_global
     (823,Async_rpc_kernel_Description,"Async_rpc_kernel__Description");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Protocol);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$8);
    caml_call1(Expect_test_collector[5][1],cst_src_protocol_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$9,cst$3);
    var
     Rpc_tag=
      [0,
       Core_String[107],
       Core_String[108],
       Core_String[109],
       Core_String[110],
       Core_String[111],
       Core_String[112],
       Core_String[113],
       Core_String[114],
       Core_String[115],
       Core_String[116],
       Core_String[117],
       Core_String[118],
       Core_String[119],
       Core_String[120],
       Core_String[121],
       Core_String[122],
       Core_String[123],
       Core_String[124],
       Core_String[125],
       Core_String[126],
       Core_String[127],
       Core_String[128],
       Core_String[129],
       Core_String[130],
       Core_String[131],
       Core_String[132],
       Core_String[133],
       Core_String[134],
       Core_String[135],
       Core_String[136],
       Core_String[137],
       Core_String[138],
       Core_String[139],
       Core_String[140],
       Core_String[141],
       Core_String[142],
       Core_String[143],
       Core_String[144],
       Core_String[145],
       Core_String[146],
       Core_String[147]],
     Query_id=caml_call1(Core_Unique_id[2],[0]),
     _aa_=Query_id[5],
     _ab_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$2),0,_aa_],0],
     _ac_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_15_2),
     group$0=caml_call2(Bin_prot_Shape[6],_ac_,_ab_),
     _ad_=caml_call1(Bin_prot_Shape[2][1],cst_t$3),
     bin_shape_t$1=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_ad_),0),
     bin_size_t$0=Query_id[1],
     bin_write_t$0=Query_id[2],
     bin_writer_t$0=[0,bin_size_t$0,bin_write_t$0],
     bin_read_t$2=Query_id[4],
     bin_read_t$3=Query_id[3],
     bin_reader_t$0=[0,bin_read_t$3,bin_read_t$2],
     bin_t$0=[0,bin_shape_t$1,bin_writer_t$0,bin_reader_t$0],
     sexp_of_t$0=Query_id[10],
     t=caml_call1(Query_id[45],0),
     Unused_query_id=
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$3,
       bin_read_t$2,
       bin_shape_t$1,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       sexp_of_t$0,
       t],
     _ae_=[0,[0,cst_Unknown_query_id,[0,Query_id[5],0]],0],
     _af_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Version,[0,Core_Int[123][1][5]]),0],
     _ag_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_40_41),
     _ah_=[0,caml_call2(Bin_prot_Shape[12],_ag_,_af_),0],
     _aj_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_Bin_io_exn,[0,Core_Sexp[5],0]],
         [0,
          _ai_,
          [0,
           [0,cst_Write_error,[0,Core_Sexp[5],0]],
           [0,
            [0,cst_Uncaught_exn,[0,Core_Sexp[5],0]],
            [0,[0,cst_Unimplemented_rpc,[0,Rpc_tag[5],_ah_]],_ae_]]]]]),
     _ak_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$4),0,_aj_],0],
     _al_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_35_4),
     group$1=caml_call2(Bin_prot_Shape[6],_al_,_ak_),
     _am_=caml_call1(Bin_prot_Shape[2][1],cst_t$5),
     bin_shape_t$2=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_am_),0);
    function bin_size_t$1(param)
     {if(typeof param === "number")return 1;
      switch(param[0])
       {case 0:
         var v1=param[1],_uv_=caml_call1(Core_Sexp[1],v1);
         return caml_call2(Bin_prot_Common[23],1,_uv_);
        case 1:
         var v1$0=param[1],_uw_=caml_call1(Core_Sexp[1],v1$0);
         return caml_call2(Bin_prot_Common[23],1,_uw_);
        case 2:
         var v1$1=param[1],_ux_=caml_call1(Core_Sexp[1],v1$1);
         return caml_call2(Bin_prot_Common[23],1,_ux_);
        case 3:
         var
          v2=param[2],
          v1$2=param[1],
          _uy_=caml_call1(Rpc_tag[1],v1$2),
          size=caml_call2(Bin_prot_Common[23],1,_uy_),
          args=v2[2],
          size_args=caml_call1(Core_Int[123][1][1],args),
          _uz_=caml_call2(Bin_prot_Common[23],size_args,4);
         return caml_call2(Bin_prot_Common[23],size,_uz_);
        default:
         var v1$3=param[1],_uA_=caml_call1(Query_id[1],v1$3);
         return caml_call2(Bin_prot_Common[23],1,_uA_)}}
    function bin_write_t$1(buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[31],buf,pos,1);
      switch(param[0])
       {case 0:
         var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
         return caml_call3(Core_Sexp[2],buf,pos$0,v1);
        case 1:
         var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,2);
         return caml_call3(Core_Sexp[2],buf,pos$1,v1$0);
        case 2:
         var v1$1=param[1],pos$2=caml_call3(Bin_prot_Write[31],buf,pos,3);
         return caml_call3(Core_Sexp[2],buf,pos$2,v1$1);
        case 3:
         var
          v2=param[2],
          v1$2=param[1],
          pos$3=caml_call3(Bin_prot_Write[31],buf,pos,4),
          pos$4=caml_call3(Rpc_tag[2],buf,pos$3,v1$2),
          args=v2[2],
          pos$5=caml_call3(Bin_prot_Write[30],buf,pos$4,-901574920);
         return caml_call3(Core_Int[123][1][2],buf,pos$5,args);
        default:
         var v1$3=param[1],pos$6=caml_call3(Bin_prot_Write[31],buf,pos,5);
         return caml_call3(Query_id[2],buf,pos$6,v1$3)}}
    var bin_writer_t$1=[0,bin_size_t$1,bin_write_t$1];
    function bin_read_t$4(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_protocol_ml_Rpc_error_,pos_ref[1])}
    function bin_read_t$5(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(5 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_an_,pos_ref[1]);
      switch(match)
       {case 0:
         var arg_1=caml_call2(Core_Sexp[3],buf,pos_ref);return [0,arg_1];
        case 1:return 0;
        case 2:
         var arg_1$0=caml_call2(Core_Sexp[3],buf,pos_ref);return [1,arg_1$0];
        case 3:
         var arg_1$1=caml_call2(Core_Sexp[3],buf,pos_ref);return [2,arg_1$1];
        case 4:
         var
          arg_1$2=caml_call2(Rpc_tag[3],buf,pos_ref),
          vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
         try
          {if(-901574920 !== vint)throw Bin_prot_Common[13];
           var
            arg_1$3=caml_call2(Core_Int[123][1][3],buf,pos_ref),
            _ut_=[0,-901574920,arg_1$3],
            arg_2=_ut_}
         catch(_uu_)
          {_uu_ = caml_wrap_exception(_uu_);
           if(_uu_ !== Bin_prot_Common[13])throw _uu_;
           var
            arg_2=
             caml_call2
              (Bin_prot_Common[19],
               cst_src_protocol_ml_Rpc_error_$0,
               pos_ref[1])}
         return [3,arg_1$2,arg_2];
        default:
         var arg_1$4=caml_call2(Query_id[3],buf,pos_ref);return [4,arg_1$4]}}
    var
     bin_reader_t$1=[0,bin_read_t$5,bin_read_t$4],
     bin_t$1=[0,bin_shape_t$2,bin_writer_t$1,bin_reader_t$1];
    function t_of_sexp$0(sexp_005)
     {if(0 === sexp_005[0])
       {var
         _ud_=sexp_005[1],
         _ue_=caml_string_compare(_ud_,cst_bin_io_exn),
         switch$0=0;
        if(0 <= _ue_)
         if(0 < _ue_)
          if(caml_string_notequal(_ud_,cst_connection_closed))
           if(caml_string_notequal(_ud_,cst_uncaught_exn))
            if(caml_string_notequal(_ud_,cst_unimplemented_rpc))
             if(caml_string_notequal(_ud_,cst_unknown_query_id))
              {if(! caml_string_notequal(_ud_,cst_write_error))switch$0 = 3}
             else
              switch$0 = 6;
            else
             switch$0 = 5;
           else
            switch$0 = 4;
          else
           switch$0 = 1;
         else
          switch$0 = 2;
        else
         if(caml_string_notequal(_ud_,cst_Bin_io_exn$0))
          if(caml_string_notequal(_ud_,cst_Connection_closed))
           if(caml_string_notequal(_ud_,cst_Uncaught_exn$0))
            if(caml_string_notequal(_ud_,cst_Unimplemented_rpc$0))
             if(caml_string_notequal(_ud_,cst_Unknown_query_id$0))
              {if(! caml_string_notequal(_ud_,cst_Write_error$0))switch$0 = 3}
             else
              switch$0 = 6;
            else
             switch$0 = 5;
           else
            switch$0 = 4;
          else
           switch$0 = 1;
         else
          switch$0 = 2;
        switch(switch$0)
         {case 1:return 0;
          case 2:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_003,sexp_005);
          case 3:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_003,sexp_005);
          case 4:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_003,sexp_005);
          case 5:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_003,sexp_005);
          case 6:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_003,sexp_005)
          }}
      else
       {var _uf_=sexp_005[1];
        if(! _uf_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_003,sexp_005);
        var _ug_=_uf_[1];
        if(0 !== _ug_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_003,sexp_005);
        var
         _uh_=_ug_[1],
         _ui_=caml_string_compare(_uh_,cst_bin_io_exn$0),
         switch$1=0;
        if(0 <= _ui_)
         if(0 < _ui_)
          if(caml_string_notequal(_uh_,cst_connection_closed$0))
           if(caml_string_notequal(_uh_,cst_uncaught_exn$0))
            if(caml_string_notequal(_uh_,cst_unimplemented_rpc$0))
             if(caml_string_notequal(_uh_,cst_unknown_query_id$0))
              {if(! caml_string_notequal(_uh_,cst_write_error$0))switch$1 = 2}
             else
              switch$1 = 5;
            else
             switch$1 = 4;
           else
            switch$1 = 3;
          else
           switch$1 = 6;
         else
          switch$1 = 1;
        else
         if(caml_string_notequal(_uh_,cst_Bin_io_exn$1))
          if(caml_string_notequal(_uh_,cst_Connection_closed$0))
           if(caml_string_notequal(_uh_,cst_Uncaught_exn$1))
            if(caml_string_notequal(_uh_,cst_Unimplemented_rpc$1))
             if(caml_string_notequal(_uh_,cst_Unknown_query_id$1))
              {if(! caml_string_notequal(_uh_,cst_Write_error$1))switch$1 = 2}
             else
              switch$1 = 5;
            else
             switch$1 = 4;
           else
            switch$1 = 3;
          else
           switch$1 = 6;
         else
          switch$1 = 1;
        switch(switch$1)
         {case 1:
           var sexp_args_007=_uf_[2];
           if(sexp_args_007 && ! sexp_args_007[2])
            {var
              arg0_008=sexp_args_007[1],
              res0_009=caml_call1(Core_Sexp[91],arg0_008);
             return [0,res0_009]}
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],error_source_003,_uh_,sexp_005);
          case 2:
           var sexp_args_012=_uf_[2];
           if(sexp_args_012 && ! sexp_args_012[2])
            {var
              arg0_013=sexp_args_012[1],
              res0_014=caml_call1(Core_Sexp[91],arg0_013);
             return [1,res0_014]}
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],error_source_003,_uh_,sexp_005);
          case 3:
           var sexp_args_017=_uf_[2];
           if(sexp_args_017 && ! sexp_args_017[2])
            {var
              arg0_018=sexp_args_017[1],
              res0_019=caml_call1(Core_Sexp[91],arg0_018);
             return [2,res0_019]}
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],error_source_003,_uh_,sexp_005);
          case 4:
           var sexp_args_022=_uf_[2];
           if(sexp_args_022)
            {var _uj_=sexp_args_022[2];
             if(_uj_ && ! _uj_[2])
              {var
                arg1_033=_uj_[1],
                arg0_032=sexp_args_022[1],
                res0_034=caml_call1(Rpc_tag[9],arg0_032);
               try
                {if(0 === arg1_033[0])
                  var
                   atom_024=arg1_033[1],
                   _uk_=
                    caml_string_notequal(atom_024,cst_Version$0)
                     ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                     :caml_call2
                       (Sexplib0_Sexp_conv_error[23],error_source_003,arg1_033),
                   _ul_=_uk_;
                 else
                  {var _um_=arg1_033[1];
                   if(_um_)
                    {var _un_=_um_[1];
                     if(0 === _un_[0])
                      {var sexp_args_027=_um_[2],atom_024$0=_un_[1];
                       if(caml_string_notequal(atom_024$0,cst_Version$1))
                        var _uo_=caml_call1(Sexplib0_Sexp_conv_error[19],0);
                       else
                        {var switch$2=0;
                         if(sexp_args_027 && ! sexp_args_027[2])
                          {var
                            arg0_029=sexp_args_027[1],
                            res0_030=caml_call1(Core_Int[123][1][10],arg0_029),
                            _ur_=[0,-901574920,res0_030];
                           switch$2 = 1}
                         if(! switch$2)
                          var
                           _ur_=
                            caml_call3
                             (Sexplib0_Sexp_conv_error[22],
                              error_source_003,
                              atom_024$0,
                              arg1_033);
                         var _uo_=_ur_}
                       var _up_=_uo_}
                     else
                      var
                       _up_=
                        caml_call2
                         (Sexplib0_Sexp_conv_error[24],error_source_003,arg1_033);
                     var _uq_=_up_}
                   else
                    var
                     _uq_=
                      caml_call2
                       (Sexplib0_Sexp_conv_error[25],error_source_003,arg1_033);
                   var _ul_=_uq_}
                 var res1_035=_ul_}
               catch(_us_)
                {_us_ = caml_wrap_exception(_us_);
                 if(_us_ !== Sexplib0_Sexp_conv_error[18])throw _us_;
                 var
                  res1_035=
                   caml_call2
                    (Sexplib0_Sexp_conv_error[20],error_source_003,arg1_033)}
               return [3,res0_034,res1_035]}}
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],error_source_003,_uh_,sexp_005);
          case 5:
           var sexp_args_038=_uf_[2];
           if(sexp_args_038 && ! sexp_args_038[2])
            {var
              arg0_039=sexp_args_038[1],
              res0_040=caml_call1(Query_id[9],arg0_039);
             return [4,res0_040]}
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],error_source_003,_uh_,sexp_005);
          case 6:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003,sexp_005)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_003,sexp_005)}
    function sexp_of_t$1(param)
     {if(typeof param === "number")return _ao_;
      switch(param[0])
       {case 0:
         var arg0_041=param[1],res0_042=caml_call1(Core_Sexp[90],arg0_041);
         return [1,[0,_ap_,[0,res0_042,0]]];
        case 1:
         var arg0_043=param[1],res0_044=caml_call1(Core_Sexp[90],arg0_043);
         return [1,[0,_aq_,[0,res0_044,0]]];
        case 2:
         var arg0_045=param[1],res0_046=caml_call1(Core_Sexp[90],arg0_045);
         return [1,[0,_ar_,[0,res0_046,0]]];
        case 3:
         var
          arg1_049=param[2],
          arg0_048=param[1],
          res0_050=caml_call1(Rpc_tag[10],arg0_048),
          v_047=arg1_049[2],
          res1_051=[1,[0,_as_,[0,caml_call1(Core_Int[123][1][11],v_047),0]]];
         return [1,[0,_at_,[0,res0_050,[0,res1_051,0]]]];
        default:
         var arg0_052=param[1],res0_053=caml_call1(Query_id[10],arg0_052);
         return [1,[0,_au_,[0,res0_053,0]]]}}
    function compare$0(a_054,b_055)
     {if(caml_call2(Ppx_compare_lib[1],a_054,b_055))return 0;
      var switch$0=0;
      if(typeof a_054 === "number")
       {if(typeof b_055 === "number")return 0;if(0 !== b_055[0])return -1}
      else
       switch(a_054[0])
        {case 0:
          var _t9_=a_054[1];
          if(typeof b_055 !== "number" && 0 === b_055[0])
           {var b_057=b_055[1];return caml_call2(Core_Sexp[35],_t9_,b_057)}
          return -1;
         case 1:
          var _t__=a_054[1];
          if(typeof b_055 === "number")
           switch$0 = 1;
          else
           switch(b_055[0])
            {case 0:break;
             case 1:
              var b_059=b_055[1];return caml_call2(Core_Sexp[35],_t__,b_059);
             default:return -1}
          break;
         case 2:
          var _t$_=a_054[1];
          if(typeof b_055 === "number")
           switch$0 = 1;
          else
           switch(b_055[0])
            {case 0:break;
             case 1:switch$0 = 2;break;
             case 2:
              var b_061=b_055[1];return caml_call2(Core_Sexp[35],_t$_,b_061);
             default:return -1}
          break;
         case 3:
          var _ua_=a_054[2],_ub_=a_054[1];
          if(typeof b_055 === "number")
           switch$0 = 1;
          else
           switch(b_055[0])
            {case 0:break;
             case 1:switch$0 = 2;break;
             case 2:switch$0 = 3;break;
             case 3:
              var
               b_065=b_055[2],
               b_063=b_055[1],
               n=caml_call2(Rpc_tag[21],_ub_,b_063);
              if(0 !== n)return n;
              if(caml_call2(Ppx_compare_lib[1],_ua_,b_065))return 0;
              var right_067=b_065[2],left_066=_ua_[2];
              return caml_call2(Core_Int[123][1][9],left_066,right_067);
             default:return -1}
          break;
         default:
          var _uc_=a_054[1];
          if(typeof b_055 === "number")
           switch$0 = 1;
          else
           switch(b_055[0])
            {case 0:break;
             case 1:switch$0 = 2;break;
             case 2:switch$0 = 3;break;
             case 3:return 1;
             default:
              var b_069=b_055[1];return caml_call2(Query_id[20],_uc_,b_069)}}
      switch(switch$0)
       {case 0:return 1;case 1:return 1;case 2:return 1;default:return 1}}
    var
     Expect_test_collector$1=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _av_(param)
     {var
       _t6_=caml_call1(Bin_prot_Shape[21],bin_shape_t$2),
       _t7_=caml_call1(Bin_prot_Shape[18][4],_t6_);
      caml_call1(Stdlib[46],_t7_);
      var
       _t8_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_protocol_ml$0),
         46,
         1163,
         1171,
         1177];
      return caml_call1(Expect_test_collector$1[1],_t8_)}
    var
     _aw_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_protocol_ml$1),
       46,
       1163,
       1178,
       1216],
     _az_=
      [0,
       [0,
        _ay_,
        _ax_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_protocol_ml$2),
         46,
         1163,
         1171,
         1177],
        _aw_],
       0],
     _aB_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_protocol_ml$4),
       44,
       1094,
       1098,
       1217],
     _aC_=
      caml_call1(Expect_test_common_File[4][3],cst_9646af08ec00dfff90ef7f2563);
    caml_call9
     (Expect_test_collector$1[3],
      _aC_,
      _aB_,
      cst_src_protocol_ml$3,
      _aA_,
      0,
      _az_,
      0,
      Inline_test_config,
      _av_);
    var
     include$0=
      caml_call1(Core_Comparable[11],[0,compare$0,t_of_sexp$0,sexp_of_t$1]),
     symbol=include$0[1],
     symbol$0=include$0[2],
     symbol$1=include$0[3],
     symbol$2=include$0[4],
     symbol$3=include$0[5],
     symbol$4=include$0[6],
     equal=include$0[7],
     compare$1=include$0[8],
     min=include$0[9],
     max=include$0[10],
     ascending=include$0[11],
     descending=include$0[12],
     between=include$0[13],
     clamp_exn=include$0[14],
     clamp=include$0[15],
     comparator=include$0[16],
     validate_lbound=include$0[17],
     validate_ubound=include$0[18],
     validate_bound=include$0[19],
     Replace_polymorphic_compare=include$0[20],
     Map=include$0[21],
     Set=include$0[22],
     Rpc_error=
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$5,
       bin_read_t$4,
       bin_shape_t$2,
       bin_writer_t$1,
       bin_reader_t$1,
       bin_t$1,
       t_of_sexp$0,
       sexp_of_t$1,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$1,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set],
     _aD_=Rpc_error[5],
     _aE_=caml_call1(Bin_prot_Shape[3][1],cst_a),
     _aF_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_55_15),
     _aG_=caml_call2(Bin_prot_Shape[15],_aF_,_aE_),
     _aH_=caml_call1(caml_call1(Core_Result[1],_aG_),_aD_),
     _aI_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$0),0],
     _aJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$6),_aI_,_aH_],0],
     _aK_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_55_2),
     group$2=caml_call2(Bin_prot_Shape[6],_aK_,_aJ_);
    function bin_shape_t$3(a)
     {var _t5_=caml_call1(Bin_prot_Shape[2][1],cst_t$7);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_t5_),[0,a,0])}
    function bin_size_t$2(size_of_a,v)
     {return caml_call3(Core_Result[2],size_of_a,Rpc_error[1],v)}
    function bin_write_t$2(write_a,buf,pos,v)
     {return caml_call3
              (caml_call2(Core_Result[3],write_a,Rpc_error[2]),buf,pos,v)}
    function bin_writer_t$2(bin_writer_a)
     {function _t1_(v)
       {var _t2_=bin_writer_a[2];
        return function(_t3_,_t4_){return bin_write_t$2(_t2_,v,_t3_,_t4_)}}
      return [0,function(v){return bin_size_t$2(bin_writer_a[1],v)},_t1_]}
    function bin_read_t$6(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(Core_Result[5],of_a,Rpc_error[3]),buf,pos_ref,vint)}
    function bin_read_t$7(of_a,buf,pos_ref)
     {return caml_call2
              (caml_call2(Core_Result[4],of_a,Rpc_error[3]),buf,pos_ref)}
    function bin_reader_t$2(bin_reader_a)
     {function _t0_(buf,pos_ref,vtag)
       {return bin_read_t$6(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$7(bin_reader_a[1],buf,pos_ref)},
              _t0_]}
    function bin_t$2(bin_a)
     {var _tY_=bin_reader_t$2(bin_a[3]),_tZ_=bin_writer_t$2(bin_a[2]);
      return [0,bin_shape_t$3(bin_a[1]),_tZ_,_tY_]}
    function sexp_of_t$2(of_a_070,x_071)
     {return caml_call3(Core_Result[10],of_a_070,Rpc_error[10],x_071)}
    var
     Rpc_result=
      [0,
       bin_shape_t$3,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$2,
       bin_read_t$6,
       bin_read_t$7,
       bin_reader_t$2,
       bin_t$2,
       sexp_of_t$2],
     _aL_=caml_call1(Bin_prot_Shape[3][1],cst_a$1),
     _aM_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_65_13),
     _aN_=[0,[0,cst_data,caml_call2(Bin_prot_Shape[15],_aM_,_aL_)],0],
     _aO_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_tag,Rpc_tag[5]],
         [0,
          [0,cst_version$2,Bin_prot_Std[81]],
          [0,[0,cst_id,Query_id[5]],_aN_]]]),
     _aP_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$2),0],
     _aQ_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_needs_length),_aP_,_aO_],0],
     _aR_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_61_2),
     group$3=caml_call2(Bin_prot_Shape[6],_aR_,_aQ_);
    function bin_shape_needs_length(a)
     {var _tX_=caml_call1(Bin_prot_Shape[2][1],cst_needs_length$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$3,_tX_),[0,a,0])}
    function bin_size_needs_length(size_of_a,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _tT_=caml_call1(Rpc_tag[1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_tT_),
       _tU_=caml_call1(Bin_prot_Std[6],v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_tU_),
       _tV_=caml_call1(Query_id[1],v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_tV_),
       _tW_=caml_call1(size_of_a,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_tW_)}
    function bin_write_needs_length(write_a,buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Rpc_tag[2],buf,pos,v1),
       pos$1=caml_call3(Bin_prot_Std[83],buf,pos$0,v2),
       pos$2=caml_call3(Query_id[2],buf,pos$1,v3);
      return caml_call3(write_a,buf,pos$2,v4)}
    function bin_writer_needs_length(bin_writer_a)
     {function _tP_(v)
       {var _tQ_=bin_writer_a[2];
        return function(_tR_,_tS_)
         {return bin_write_needs_length(_tQ_,v,_tR_,_tS_)}}
      return [0,
              function(v){return bin_size_needs_length(bin_writer_a[1],v)},
              _tP_]}
    function bin_read_needs_length(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_protocol_ml_Query_need,pos_ref[1])}
    function bin_read_needs_length$0(of_a,buf,pos_ref)
     {var
       v_tag=caml_call2(Rpc_tag[3],buf,pos_ref),
       v_version=caml_call2(Bin_prot_Std[85],buf,pos_ref),
       v_id=caml_call2(Query_id[3],buf,pos_ref),
       v_data=caml_call2(of_a,buf,pos_ref);
      return [0,v_tag,v_version,v_id,v_data]}
    function bin_reader_needs_length(bin_reader_a)
     {function _tO_(buf,pos_ref,vtag)
       {return bin_read_needs_length(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_needs_length$0(bin_reader_a[1],buf,pos_ref)},
              _tO_]}
    function bin_needs_length(bin_a)
     {var
       _tM_=bin_reader_needs_length(bin_a[3]),
       _tN_=bin_writer_needs_length(bin_a[2]);
      return [0,bin_shape_needs_length(bin_a[1]),_tN_,_tM_]}
    function sexp_of_needs_length(of_a_072,param)
     {var
       data_080=param[4],
       id_078=param[3],
       version_076=param[2],
       tag_074=param[1],
       arg_081=caml_call1(of_a_072,data_080),
       bnds_073=[0,[1,[0,_aS_,[0,arg_081,0]]],0],
       arg_079=caml_call1(Query_id[10],id_078),
       bnds_073$0=[0,[1,[0,_aT_,[0,arg_079,0]]],bnds_073],
       arg_077=caml_call1(Sexplib_Std[15],version_076),
       bnds_073$1=[0,[1,[0,_aU_,[0,arg_077,0]]],bnds_073$0],
       arg_075=caml_call1(Rpc_tag[10],tag_074),
       bnds_073$2=[0,[1,[0,_aV_,[0,arg_075,0]]],bnds_073$1];
      return [1,bnds_073$2]}
    function bin_read_t$8(of_a,buf,pos_ref,vint)
     {return bin_read_needs_length(of_a,buf,pos_ref,vint)}
    function bin_read_t$9(of_a,buf,pos_ref)
     {return bin_read_needs_length$0(of_a,buf,pos_ref)}
    function bin_reader_t$3(bin_reader_a)
     {function _tL_(buf,pos_ref,vtag)
       {return bin_read_t$8(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$9(bin_reader_a[1],buf,pos_ref)},
              _tL_]}
    var
     Query=
      [0,
       bin_shape_needs_length,
       bin_size_needs_length,
       bin_write_needs_length,
       bin_writer_needs_length,
       bin_read_needs_length,
       bin_read_needs_length$0,
       bin_reader_needs_length,
       bin_needs_length,
       sexp_of_needs_length,
       bin_read_t$8,
       bin_read_t$9,
       bin_reader_t$3],
     _aW_=caml_call1(Bin_prot_Shape[3][1],cst_a$3),
     _aX_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_75_13),
     _aY_=caml_call2(Bin_prot_Shape[15],_aX_,_aW_),
     _aZ_=[0,[0,cst_data$0,caml_call1(Rpc_result[1],_aY_)],0],
     _a0_=caml_call1(Bin_prot_Shape[8],[0,[0,cst_id$0,Query_id[5]],_aZ_]),
     _a1_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$4),0],
     _a2_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_needs_length$1),_a1_,_a0_],0],
     _a3_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_73_2),
     group$4=caml_call2(Bin_prot_Shape[6],_a3_,_a2_);
    function bin_shape_needs_length$0(a)
     {var _tK_=caml_call1(Bin_prot_Shape[2][1],cst_needs_length$2);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$4,_tK_),[0,a,0])}
    function bin_size_needs_length$0(size_of_a,param)
     {var
       v2=param[2],
       v1=param[1],
       _tI_=caml_call1(Query_id[1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_tI_),
       _tJ_=caml_call2(Rpc_result[2],size_of_a,v2);
      return caml_call2(Bin_prot_Common[23],size,_tJ_)}
    function bin_write_needs_length$0(write_a,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Query_id[2],buf,pos,v1);
      return caml_call3(caml_call1(Rpc_result[3],write_a),buf,pos$0,v2)}
    function bin_writer_needs_length$0(bin_writer_a)
     {function _tE_(v)
       {var _tF_=bin_writer_a[2];
        return function(_tG_,_tH_)
         {return bin_write_needs_length$0(_tF_,v,_tG_,_tH_)}}
      return [0,
              function(v){return bin_size_needs_length$0(bin_writer_a[1],v)},
              _tE_]}
    function bin_read_needs_length$1(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_protocol_ml_Response_n,pos_ref[1])}
    function bin_read_needs_length$2(of_a,buf,pos_ref)
     {var
       v_id=caml_call2(Query_id[3],buf,pos_ref),
       v_data=caml_call2(caml_call1(Rpc_result[6],of_a),buf,pos_ref);
      return [0,v_id,v_data]}
    function bin_reader_needs_length$0(bin_reader_a)
     {function _tD_(buf,pos_ref,vtag)
       {return bin_read_needs_length$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_needs_length$2(bin_reader_a[1],buf,pos_ref)},
              _tD_]}
    function bin_needs_length$0(bin_a)
     {var
       _tB_=bin_reader_needs_length$0(bin_a[3]),
       _tC_=bin_writer_needs_length$0(bin_a[2]);
      return [0,bin_shape_needs_length$0(bin_a[1]),_tC_,_tB_]}
    function sexp_of_needs_length$0(of_a_082,param)
     {var
       data_086=param[2],
       id_084=param[1],
       arg_087=caml_call2(Rpc_result[9],of_a_082,data_086),
       bnds_083=[0,[1,[0,_a4_,[0,arg_087,0]]],0],
       arg_085=caml_call1(Query_id[10],id_084),
       bnds_083$0=[0,[1,[0,_a5_,[0,arg_085,0]]],bnds_083];
      return [1,bnds_083$0]}
    function bin_read_t$10(of_a,buf,pos_ref,vint)
     {return bin_read_needs_length$1(of_a,buf,pos_ref,vint)}
    function bin_read_t$11(of_a,buf,pos_ref)
     {return bin_read_needs_length$2(of_a,buf,pos_ref)}
    function bin_reader_t$4(bin_reader_a)
     {function _tA_(buf,pos_ref,vtag)
       {return bin_read_t$10(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$11(bin_reader_a[1],buf,pos_ref)},
              _tA_]}
    var
     Response=
      [0,
       bin_shape_needs_length$0,
       bin_size_needs_length$0,
       bin_write_needs_length$0,
       bin_writer_needs_length$0,
       bin_read_needs_length$1,
       bin_read_needs_length$2,
       bin_reader_needs_length$0,
       bin_needs_length$0,
       sexp_of_needs_length$0,
       bin_read_t$10,
       bin_read_t$11,
       bin_reader_t$4],
     _a6_=[0,caml_call2(Bin_prot_Shape[10],cst_Abort,0),0],
     _a7_=caml_call1(Bin_prot_Shape[3][1],cst_a$5),
     _a8_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_84_16),
     _a9_=[0,caml_call2(Bin_prot_Shape[15],_a8_,_a7_)],
     _a__=[0,caml_call2(Bin_prot_Shape[10],cst_Query,_a9_),_a6_],
     _a$_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_84_4),
     _ba_=caml_call2(Bin_prot_Shape[12],_a$_,_a__),
     _bb_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$6),0],
     _bc_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_needs_length$3),_bb_,_ba_],0],
     _bd_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_83_2),
     group$5=caml_call2(Bin_prot_Shape[6],_bd_,_bc_);
    function bin_shape_needs_length$1(a)
     {var _tz_=caml_call1(Bin_prot_Shape[2][1],cst_needs_length$4);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$5,_tz_),[0,a,0])}
    function bin_size_needs_length$1(size_of_a,param)
     {if(typeof param !== "number" && -250086680 === param[1])
       {var args=param[2],size_args=caml_call1(size_of_a,args);
        return caml_call2(Bin_prot_Common[23],size_args,4)}
      return 4}
    function bin_write_needs_length$1(write_a,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[30],buf,pos,774323088);
      var
       args=param[2],
       pos$0=caml_call3(Bin_prot_Write[30],buf,pos,-250086680);
      return caml_call3(write_a,buf,pos$0,args)}
    function bin_writer_needs_length$1(bin_writer_a)
     {function _tv_(v)
       {var _tw_=bin_writer_a[2];
        return function(_tx_,_ty_)
         {return bin_write_needs_length$1(_tw_,v,_tx_,_ty_)}}
      return [0,
              function(v){return bin_size_needs_length$1(bin_writer_a[1],v)},
              _tv_]}
    function bin_read_needs_length$3(of_a,buf,pos_ref,vint)
     {if(-250086680 === vint)
       {var arg_1=caml_call2(of_a,buf,pos_ref);return [0,-250086680,arg_1]}
      if(774323088 === vint)return 774323088;
      throw Bin_prot_Common[13]}
    function bin_read_needs_length$4(of_a,buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {var
         _tq_=
          function(_ts_,_tt_,_tu_)
            {return bin_read_needs_length$3(of_a,_ts_,_tt_,_tu_)}
           (buf,pos_ref,vint);
        return _tq_}
      catch(_tr_)
       {_tr_ = caml_wrap_exception(_tr_);
        if(_tr_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err,pos_ref[1]);
        throw _tr_}}
    function bin_reader_needs_length$1(bin_reader_a)
     {function _tp_(buf,pos_ref,vtag)
       {return bin_read_needs_length$3(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_needs_length$4(bin_reader_a[1],buf,pos_ref)},
              _tp_]}
    function bin_needs_length$1(bin_a)
     {var
       _tn_=bin_reader_needs_length$1(bin_a[3]),
       _to_=bin_writer_needs_length$1(bin_a[2]);
      return [0,bin_shape_needs_length$1(bin_a[1]),_to_,_tn_]}
    function bin_read_t$12(of_a,buf,pos_ref,vint)
     {return bin_read_needs_length$3(of_a,buf,pos_ref,vint)}
    function bin_read_t$13(of_a,buf,pos_ref)
     {return bin_read_needs_length$4(of_a,buf,pos_ref)}
    function bin_reader_t$5(bin_reader_a)
     {function _tm_(buf,pos_ref,vtag)
       {return bin_read_t$12(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$13(bin_reader_a[1],buf,pos_ref)},
              _tm_]}
    function bin_read_nat0_t(buf,pos_ref,vint)
     {return bin_read_needs_length$3(_g_,buf,pos_ref,vint)}
    function bin_read_nat0_t$0(buf,pos_ref)
     {return bin_read_needs_length$4(_g_,buf,pos_ref)}
    var bin_reader_nat0_t=[0,bin_read_nat0_t$0,bin_read_nat0_t];
    function bin_size_nat0_t(v){return bin_size_needs_length$1(_c_,v)}
    function bin_write_nat0_t(buf,pos,v)
     {return bin_write_needs_length$1(_e_,buf,pos,v)}
    var
     bin_writer_nat0_t=[0,bin_size_nat0_t,bin_write_nat0_t],
     Stream_query=
      [0,
       bin_shape_needs_length$1,
       bin_size_needs_length$1,
       bin_write_needs_length$1,
       bin_writer_needs_length$1,
       bin_read_needs_length$3,
       bin_read_needs_length$4,
       bin_reader_needs_length$1,
       bin_needs_length$1,
       bin_read_t$12,
       bin_read_t$13,
       bin_reader_t$5,
       bin_read_nat0_t,
       bin_read_nat0_t$0,
       bin_reader_nat0_t,
       bin_size_nat0_t,
       bin_write_nat0_t,
       bin_writer_nat0_t],
     _be_=caml_call1(Bin_prot_Shape[3][1],cst_error),
     _bf_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_96_28),
     _bg_=caml_call2(Bin_prot_Shape[15],_bf_,_be_),
     _bh_=caml_call1(Bin_prot_Shape[3][1],cst_response),
     _bi_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_96_17),
     _bj_=caml_call2(Bin_prot_Shape[15],_bi_,_bh_),
     _bk_=
      [0,[0,cst_initial,caml_call1(caml_call1(Core_Result[1],_bj_),_bg_)],0],
     _bl_=
      caml_call1
       (Bin_prot_Shape[8],[0,[0,cst_unused_query_id,Unused_query_id[5]],_bk_]),
     _bm_=[0,caml_call1(Bin_prot_Shape[3][1],cst_error$0),0],
     _bn_=[0,caml_call1(Bin_prot_Shape[3][1],cst_response$0),_bm_],
     _bo_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$8),_bn_,_bl_],0],
     _bp_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_94_2),
     group$6=caml_call2(Bin_prot_Shape[6],_bp_,_bo_);
    function bin_shape_t$4(response,error)
     {var _tl_=caml_call1(Bin_prot_Shape[2][1],cst_t$9);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$6,_tl_),
               [0,response,[0,error,0]])}
    function bin_size_t$3(size_of_response,size_of_error,param)
     {var
       v2=param[2],
       v1=param[1],
       _tj_=caml_call1(Unused_query_id[1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_tj_),
       _tk_=caml_call3(Core_Result[2],size_of_response,size_of_error,v2);
      return caml_call2(Bin_prot_Common[23],size,_tk_)}
    function bin_write_t$3(write_response,write_error,buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Unused_query_id[2],buf,pos,v1);
      return caml_call3
              (caml_call2(Core_Result[3],write_response,write_error),
               buf,
               pos$0,
               v2)}
    function bin_writer_t$3(bin_writer_response,bin_writer_error)
     {function _te_(v)
       {var _tf_=bin_writer_error[2],_tg_=bin_writer_response[2];
        return function(_th_,_ti_)
         {return bin_write_t$3(_tg_,_tf_,v,_th_,_ti_)}}
      return [0,
              function(v)
               {return bin_size_t$3
                        (bin_writer_response[1],bin_writer_error[1],v)},
              _te_]}
    function bin_read_t$14(of_response,of_error,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_protocol_ml_Stream_ini,pos_ref[1])}
    function bin_read_t$15(of_response,of_error,buf,pos_ref)
     {var
       v_unused_query_id=caml_call2(Unused_query_id[3],buf,pos_ref),
       v_initial=
        caml_call2
         (caml_call2(Core_Result[4],of_response,of_error),buf,pos_ref);
      return [0,v_unused_query_id,v_initial]}
    function bin_reader_t$6(bin_reader_response,bin_reader_error)
     {function _td_(buf,pos_ref,vtag)
       {return bin_read_t$14
                (bin_reader_response[1],bin_reader_error[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$15
                        (bin_reader_response[1],bin_reader_error[1],buf,pos_ref)},
              _td_]}
    function bin_t$3(bin_response,bin_error)
     {var
       _tb_=bin_reader_t$6(bin_response[3],bin_error[3]),
       _tc_=bin_writer_t$3(bin_response[2],bin_error[2]);
      return [0,bin_shape_t$4(bin_response[1],bin_error[1]),_tc_,_tb_]}
    function sexp_of_t$3(of_response_088,of_error_089,param)
     {var
       initial_093=param[2],
       unused_query_id_091=param[1],
       arg_094=
        caml_call3(Core_Result[10],of_response_088,of_error_089,initial_093),
       bnds_090=[0,[1,[0,_bq_,[0,arg_094,0]]],0],
       arg_092=caml_call1(Unused_query_id[9],unused_query_id_091),
       bnds_090$0=[0,[1,[0,_br_,[0,arg_092,0]]],bnds_090];
      return [1,bnds_090$0]}
    var
     Stream_initial_message=
      [0,
       bin_shape_t$4,
       bin_size_t$3,
       bin_write_t$3,
       bin_writer_t$3,
       bin_read_t$14,
       bin_read_t$15,
       bin_reader_t$6,
       bin_t$3,
       sexp_of_t$3],
     _bs_=[0,caml_call2(Bin_prot_Shape[10],cst_Eof,0),0],
     _bt_=caml_call1(Bin_prot_Shape[3][1],cst_a$7),
     _bu_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_103_13),
     _bv_=[0,caml_call2(Bin_prot_Shape[15],_bu_,_bt_)],
     _bw_=[0,caml_call2(Bin_prot_Shape[10],cst_Ok,_bv_),_bs_],
     _bx_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_103_4),
     _by_=caml_call2(Bin_prot_Shape[12],_bx_,_bw_),
     _bz_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$8),0],
     _bA_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_needs_length$5),_bz_,_by_],0],
     _bB_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_102_2),
     group$7=caml_call2(Bin_prot_Shape[6],_bB_,_bA_);
    function bin_shape_needs_length$2(a)
     {var _ta_=caml_call1(Bin_prot_Shape[2][1],cst_needs_length$6);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$7,_ta_),[0,a,0])}
    function bin_size_needs_length$2(size_of_a,param)
     {if(typeof param !== "number" && 17724 === param[1])
       {var args=param[2],size_args=caml_call1(size_of_a,args);
        return caml_call2(Bin_prot_Common[23],size_args,4)}
      return 4}
    function bin_write_needs_length$2(write_a,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[30],buf,pos,3456156);
      var args=param[2],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,17724);
      return caml_call3(write_a,buf,pos$0,args)}
    function bin_writer_needs_length$2(bin_writer_a)
     {function _s8_(v)
       {var _s9_=bin_writer_a[2];
        return function(_s__,_s$_)
         {return bin_write_needs_length$2(_s9_,v,_s__,_s$_)}}
      return [0,
              function(v){return bin_size_needs_length$2(bin_writer_a[1],v)},
              _s8_]}
    function bin_read_needs_length$5(of_a,buf,pos_ref,vint)
     {if(17724 === vint)
       {var arg_1=caml_call2(of_a,buf,pos_ref);return [0,17724,arg_1]}
      if(3456156 === vint)return 3456156;
      throw Bin_prot_Common[13]}
    function bin_read_needs_length$6(of_a,buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {var
         _s3_=
          function(_s5_,_s6_,_s7_)
            {return bin_read_needs_length$5(of_a,_s5_,_s6_,_s7_)}
           (buf,pos_ref,vint);
        return _s3_}
      catch(_s4_)
       {_s4_ = caml_wrap_exception(_s4_);
        if(_s4_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$0,pos_ref[1]);
        throw _s4_}}
    function bin_reader_needs_length$2(bin_reader_a)
     {function _s2_(buf,pos_ref,vtag)
       {return bin_read_needs_length$5(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_needs_length$6(bin_reader_a[1],buf,pos_ref)},
              _s2_]}
    function bin_needs_length$2(bin_a)
     {var
       _s0_=bin_reader_needs_length$2(bin_a[3]),
       _s1_=bin_writer_needs_length$2(bin_a[2]);
      return [0,bin_shape_needs_length$2(bin_a[1]),_s1_,_s0_]}
    function bin_read_t$16(of_a,buf,pos_ref,vint)
     {return bin_read_needs_length$5(of_a,buf,pos_ref,vint)}
    function bin_read_t$17(of_a,buf,pos_ref)
     {return bin_read_needs_length$6(of_a,buf,pos_ref)}
    function bin_reader_t$7(bin_reader_a)
     {function _sZ_(buf,pos_ref,vtag)
       {return bin_read_t$16(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$17(bin_reader_a[1],buf,pos_ref)},
              _sZ_]}
    function bin_read_nat0_t$1(buf,pos_ref,vint)
     {return bin_read_needs_length$5(_g_,buf,pos_ref,vint)}
    function bin_read_nat0_t$2(buf,pos_ref)
     {return bin_read_needs_length$6(_g_,buf,pos_ref)}
    var bin_reader_nat0_t$0=[0,bin_read_nat0_t$2,bin_read_nat0_t$1];
    function bin_size_nat0_t$0(v){return bin_size_needs_length$2(_c_,v)}
    function bin_write_nat0_t$0(buf,pos,v)
     {return bin_write_needs_length$2(_e_,buf,pos,v)}
    var
     bin_writer_nat0_t$0=[0,bin_size_nat0_t$0,bin_write_nat0_t$0],
     Stream_response_data=
      [0,
       bin_shape_needs_length$2,
       bin_size_needs_length$2,
       bin_write_needs_length$2,
       bin_writer_needs_length$2,
       bin_read_needs_length$5,
       bin_read_needs_length$6,
       bin_reader_needs_length$2,
       bin_needs_length$2,
       bin_read_t$16,
       bin_read_t$17,
       bin_reader_t$7,
       bin_read_nat0_t$1,
       bin_read_nat0_t$2,
       bin_reader_nat0_t$0,
       bin_size_nat0_t$0,
       bin_write_nat0_t$0,
       bin_writer_nat0_t$0],
     _bC_=caml_call1(Bin_prot_Shape[3][1],cst_a$9),
     _bD_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_116_18),
     _bE_=caml_call2(Bin_prot_Shape[15],_bD_,_bC_),
     _bF_=[0,[0,cst_Response,[0,caml_call1(Response[1],_bE_),0]],0],
     _bG_=caml_call1(Bin_prot_Shape[3][1],cst_a$10),
     _bH_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_115_15),
     _bI_=caml_call2(Bin_prot_Shape[15],_bH_,_bG_),
     _bK_=[0,_bJ_,[0,[0,cst_Query$0,[0,caml_call1(Query[1],_bI_),0]],_bF_]],
     _bL_=caml_call1(Bin_prot_Shape[9],_bK_),
     _bM_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$11),0],
     _bN_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_needs_length$7),_bM_,_bL_],0],
     _bO_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_ml_113_2),
     group$8=caml_call2(Bin_prot_Shape[6],_bO_,_bN_);
    function bin_shape_needs_length$3(a)
     {var _sY_=caml_call1(Bin_prot_Shape[2][1],cst_needs_length$8);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$8,_sY_),[0,a,0])}
    function bin_size_needs_length$3(size_of_a,param)
     {if(typeof param === "number")return 1;
      if(0 === param[0])
       {var v1=param[1],_sW_=caml_call2(Query[2],size_of_a,v1);
        return caml_call2(Bin_prot_Common[23],1,_sW_)}
      var v1$0=param[1],_sX_=caml_call2(Response[2],size_of_a,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_sX_)}
    function bin_write_needs_length$3(write_a,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[31],buf,pos,0);
      if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,1);
        return caml_call3(caml_call1(Query[3],write_a),buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,2);
      return caml_call3(caml_call1(Response[3],write_a),buf,pos$1,v1$0)}
    function bin_writer_needs_length$3(bin_writer_a)
     {function _sS_(v)
       {var _sT_=bin_writer_a[2];
        return function(_sU_,_sV_)
         {return bin_write_needs_length$3(_sT_,v,_sU_,_sV_)}}
      return [0,
              function(v){return bin_size_needs_length$3(bin_writer_a[1],v)},
              _sS_]}
    function bin_read_needs_length$7(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_protocol_ml_Message_ne,pos_ref[1])}
    function bin_read_needs_length$8(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_bP_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:
         var arg_1=caml_call2(caml_call1(Query[6],of_a),buf,pos_ref);
         return [0,arg_1];
        default:
         var arg_1$0=caml_call2(caml_call1(Response[6],of_a),buf,pos_ref);
         return [1,arg_1$0]}}
    function bin_reader_needs_length$3(bin_reader_a)
     {function _sR_(buf,pos_ref,vtag)
       {return bin_read_needs_length$7(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_needs_length$8(bin_reader_a[1],buf,pos_ref)},
              _sR_]}
    function bin_needs_length$3(bin_a)
     {var
       _sP_=bin_reader_needs_length$3(bin_a[3]),
       _sQ_=bin_writer_needs_length$3(bin_a[2]);
      return [0,bin_shape_needs_length$3(bin_a[1]),_sQ_,_sP_]}
    function sexp_of_t$4(of_a_095,param)
     {if(typeof param === "number")return _bQ_;
      if(0 === param[0])
       {var arg0_096=param[1],res0_097=caml_call2(Query[9],of_a_095,arg0_096);
        return [1,[0,_bR_,[0,res0_097,0]]]}
      var
       arg0_098=param[1],
       res0_099=caml_call2(Response[9],of_a_095,arg0_098);
      return [1,[0,_bS_,[0,res0_099,0]]]}
    function bin_read_t$18(of_a,buf,pos_ref,vint)
     {return bin_read_needs_length$7(of_a,buf,pos_ref,vint)}
    function bin_read_t$19(of_a,buf,pos_ref)
     {return bin_read_needs_length$8(of_a,buf,pos_ref)}
    function bin_reader_t$8(bin_reader_a)
     {function _sO_(buf,pos_ref,vtag)
       {return bin_read_t$18(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$19(bin_reader_a[1],buf,pos_ref)},
              _sO_]}
    function bin_read_nat0_t$3(buf,pos_ref,vint)
     {return bin_read_needs_length$7(_g_,buf,pos_ref,vint)}
    function bin_read_nat0_t$4(buf,pos_ref)
     {return bin_read_needs_length$8(_g_,buf,pos_ref)}
    var bin_reader_nat0_t$1=[0,bin_read_nat0_t$4,bin_read_nat0_t$3];
    function bin_size_nat0_t$1(v){return bin_size_needs_length$3(_c_,v)}
    function bin_write_nat0_t$1(buf,pos,v)
     {return bin_write_needs_length$3(_e_,buf,pos,v)}
    var
     bin_writer_nat0_t$1=[0,bin_size_nat0_t$1,bin_write_nat0_t$1],
     Message=
      [0,
       bin_shape_needs_length$3,
       bin_size_needs_length$3,
       bin_write_needs_length$3,
       bin_writer_needs_length$3,
       bin_read_needs_length$7,
       bin_read_needs_length$8,
       bin_reader_needs_length$3,
       bin_needs_length$3,
       sexp_of_t$4,
       bin_read_t$18,
       bin_read_t$19,
       bin_reader_t$8,
       sexp_of_t$4,
       bin_read_nat0_t$3,
       bin_read_nat0_t$4,
       bin_reader_nat0_t$1,
       bin_size_nat0_t$1,
       bin_write_nat0_t$1,
       bin_writer_nat0_t$1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Protocol$0);
    var
     Async_rpc_kernel_Protocol=
      [0,
       Rpc_tag,
       Query_id,
       Unused_query_id,
       Rpc_error,
       Rpc_result,
       Query,
       Response,
       Stream_query,
       Stream_initial_message,
       Stream_response_data,
       Message];
    caml_register_global
     (830,Async_rpc_kernel_Protocol,"Async_rpc_kernel__Protocol");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Transport);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$11);
    caml_call1(Expect_test_collector[5][1],cst_src_transport_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$12,cst$4);
    var Handler_result=[0];
    function sexp_of_message_too_big(param)
     {var
       max_message_size_004=param[2],
       size_002=param[1],
       arg_005=caml_call1(Core[356],max_message_size_004),
       bnds_001=[0,[1,[0,_bT_,[0,arg_005,0]]],0],
       arg_003=caml_call1(Core[356],size_002),
       bnds_001$0=[0,[1,[0,_bU_,[0,arg_003,0]]],bnds_001];
      return [1,bnds_001$0]}
    function sexp_of_t$5(of_a_006,param)
     {if(typeof param === "number")return _bV_;
      if(0 === param[0])
       {var arg0_007=param[1],res0_008=caml_call1(of_a_006,arg0_007);
        return [1,[0,_bW_,[0,res0_008,0]]]}
      var arg0_009=param[1],res0_010=sexp_of_message_too_big(arg0_009);
      return [1,[0,_bX_,[0,res0_010,0]]]}
    var Send_result=[0,sexp_of_message_too_big,sexp_of_t$5];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Transport$0);
    var Async_rpc_kernel_Transport_int=[0,Handler_result,Send_result];
    caml_register_global
     (831,Async_rpc_kernel_Transport_int,"Async_rpc_kernel__Transport_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Transport$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$14);
    caml_call1(Expect_test_collector[5][1],cst_src_transport_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$15,cst$5);
    var length=8;
    function unsafe_get_payload_length(buf,pos)
     {return caml_call2(Core_Bigstring[82],buf,pos)}
    function unsafe_set_payload_length(buf,pos,payload_len)
     {return caml_call3(Core_Bigstring[86],buf,pos,payload_len)}
    var Header=[0,length,unsafe_get_payload_length,unsafe_set_payload_length];
    function pack(m,t){return [0,m,t]}
    function sexp_of_t$6(param)
     {var t=param[2],M=param[1];return caml_call1(M[1],t)}
    function close(param){var t=param[2],M=param[1];return caml_call1(M[2],t)}
    function is_closed(param)
     {var t=param[2],M=param[1];return caml_call1(M[3],t)}
    function read_forever(param)
     {var t=param[2],M=param[1];
      return function(on_message,on_end_of_batch)
       {return caml_call3(M[4],t,on_message,on_end_of_batch)}}
    function read_one_message_bin_prot(t,bin_reader)
     {function _sL_(_sN_){return 0}
      function _sM_(buf,pos,len)
       {var pos_ref=[0,pos],x=caml_call2(bin_reader[1],buf,pos_ref);
        return caml_call2(Core[93],pos_ref[1],pos + len | 0)
                ?caml_call4(Core[234],_bY_,pos_ref[1] - pos | 0,len,0)
                :[0,x]}
      return caml_call2(read_forever(t),_sM_,_sL_)}
    function pack$0(M)
     {return function(t){return [0,[0,M,t,caml_call1(M[6],t)]]}}
    function sexp_of_t$7(param)
     {var match=param[1],t=match[2],M=match[1];return caml_call1(M[1],t)}
    function close$0(param)
     {var match=param[1],t=match[2],M=match[1];return caml_call1(M[2],t)}
    function is_closed$0(param)
     {var match=param[1],t=match[2],M=match[1];return caml_call1(M[3],t)}
    function monitor(param)
     {var match=param[1],t=match[2],M=match[1];return caml_call1(M[4],t)}
    function bytes_to_write(param)
     {var match=param[1],t=match[2],M=match[1];return caml_call1(M[5],t)}
    function flushed(param)
     {var match=param[1],t=match[2],M=match[1];return caml_call1(M[7],t)}
    function ready_to_write(param)
     {var match=param[1],t=match[2],M=match[1];return caml_call1(M[8],t)}
    function send_bin_prot(param)
     {var match=param[1],t=match[2],M=match[1];
      return function(bin_writer,x){return caml_call3(M[9],t,bin_writer,x)}}
    function send_bin_prot_and_bigstring(param)
     {var match=param[1],t=match[2],M=match[1];
      return function(bin_writer,x,buf,pos,len)
       {return caml_call6(M[10],t,bin_writer,x,buf,pos,len)}}
    function send_bin_prot_and_bigstring_no(param)
     {var match=param[1],t=match[2],M=match[1];
      return function(bin_writer,x,buf,pos,len)
       {return caml_call6(M[11],t,bin_writer,x,buf,pos,len)}}
    function stopped(param)
     {var match=param[1],stopped=match[3];return stopped}
    function can_send(param)
     {var
       match=param[1],
       stopped=match[3],
       t=match[2],
       M=match[1],
       _sJ_=caml_call1(M[3],t),
       _sK_=_sJ_ || caml_call1(Async_kernel_Deferred[7],stopped);
      return 1 - _sK_}
    function transfer(t,opt,pipe,f)
     {if(opt)
       var sth=opt[1],max_num_values_per_read=sth;
      else
       var max_num_values_per_read=1000;
      function _sy_(param)
       {function _sH_(param){return 17724}
        var _sI_=flushed(t);
        return caml_call2(Async_kernel[22][3],_sI_,_sH_)}
      var consumer=caml_call2(Async_kernel_Pipe[22],pipe,_sy_);
      function _sz_(ivar)
       {function iter(param)
         {var _sD_=can_send(t);
          if(! _sD_)return _sD_;
          var
           match=
            caml_call3
             (Async_kernel_Pipe[37],
              [0,consumer],
              [0,max_num_values_per_read],
              pipe);
          if(typeof match !== "number")
           {var q=match[2];
            caml_call2(Core_Queue[16],q,f);
            caml_call1(Async_kernel_Pipe[21][1],consumer);
            var _sG_=ready_to_write(t);
            return caml_call2(Async_kernel[16],_sG_,iter)}
          if(3456156 <= match)return caml_call2(Async_kernel_Ivar[14],ivar,0);
          function _sE_(param){return iter(0)}
          var _sF_=caml_call1(Async_kernel_Pipe[42],pipe);
          return caml_call2(Async_kernel[16],_sF_,_sE_)}
        return iter(0)}
      var end_of_pipe=caml_call1(Async_kernel_Deferred[3],_sz_);
      function _sA_(param){return caml_call1(Async_kernel_Pipe[15],pipe)}
      var
       _sB_=[0,end_of_pipe,[0,stopped(t),0]],
       _sC_=caml_call1(Async_kernel_Deferred[23],_sB_);
      return caml_call2(Async_kernel[22][3],_sC_,_sA_)}
    function sexp_of_t$8(param)
     {var
       writer_006=param[2],
       reader_004=param[1],
       arg_007=sexp_of_t$7(writer_006),
       bnds_003=[0,[1,[0,_bZ_,[0,arg_007,0]]],0],
       arg_005=sexp_of_t$6(reader_004),
       bnds_003$0=[0,[1,[0,_b0_,[0,arg_005,0]]],bnds_003];
      return [1,bnds_003$0]}
    function close$1(t)
     {function _sw_(param){return close(t[1])}
      var _sx_=close$0(t[2]);
      return caml_call2(Async_kernel[22][2],_sx_,_sw_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$16);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Transport$2);
    var
     _b1_=
      [0,
       sexp_of_t$7,
       close$0,
       is_closed$0,
       monitor,
       bytes_to_write,
       stopped,
       flushed,
       ready_to_write,
       send_bin_prot,
       send_bin_prot_and_bigstring,
       send_bin_prot_and_bigstring_no,
       pack$0,
       can_send,
       transfer],
     _b2_=
      [0,
       sexp_of_t$6,
       close,
       is_closed,
       read_forever,
       pack,
       read_one_message_bin_prot],
     Async_rpc_kernel_Transport=[0,Header,_b2_,_b1_,sexp_of_t$8,close$1];
    caml_register_global
     (837,Async_rpc_kernel_Transport,"Async_rpc_kernel__Transport");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Implement);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$17);
    caml_call1(Expect_test_collector[5][1],cst_src_implementation_types_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$18,cst$6);
    var Direct_stream_writer_id=caml_call1(Core_Unique_id[2],[0]);
    function sexp_of_t$9(param)
     {var
       close_connection_if_no_return_=param[2],
       callback_002=param[1],
       arg_005=caml_call1(Core[305],close_connection_if_no_return_),
       bnds_001=[0,[1,[0,_b3_,[0,arg_005,0]]],0];
      function _st_(param)
       {function _su_(_sv_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_su_)}
      var arg_003=caml_call2(Core[454],_st_,callback_002),switch$0=0;
      if(1 === arg_003[0] && ! arg_003[1])
       {var bnds_001$0=bnds_001;switch$0 = 1}
      if(! switch$0)var bnds_001$0=[0,[1,[0,_b4_,[0,arg_003,0]]],bnds_001];
      return [1,bnds_001$0]}
    var
     On_exception=[0,sexp_of_t$9],
     Implementation=caml_call2(CamlinternalMod[1],_b6_,_b5_),
     Implementations=caml_call2(CamlinternalMod[1],_b8_,_b7_),
     Direct_stream_writer=caml_call2(CamlinternalMod[1],_b__,_b9_),
     Cached_stream_writer=caml_call2(CamlinternalMod[1],_ca_,_b$_);
    caml_call3(CamlinternalMod[2],_cb_,Implementation,Implementation);
    caml_call3(CamlinternalMod[2],_cc_,Implementations,Implementations);
    caml_call3
     (CamlinternalMod[2],_cd_,Direct_stream_writer,Direct_stream_writer);
    caml_call3
     (CamlinternalMod[2],_ce_,Cached_stream_writer,Cached_stream_writer);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$19);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Implement$0);
    var
     Async_rpc_kernel_Implementatio=
      [0,
       Direct_stream_writer_id,
       On_exception,
       Implementation,
       Implementations,
       Direct_stream_writer,
       Cached_stream_writer];
    caml_register_global
     (839,
      Async_rpc_kernel_Implementatio,
      "Async_rpc_kernel__Implementation_types");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_On_except);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$20);
    caml_call1(Expect_test_collector[5][1],cst_src_on_exception_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$21,cst$7);
    function sexp_of_t$10(param)
     {var
       close_connection_if_no_return_=param[2],
       callback_002=param[1],
       arg_005=caml_call1(Core[305],close_connection_if_no_return_),
       bnds_001=[0,[1,[0,_cf_,[0,arg_005,0]]],0];
      function _sq_(param)
       {function _sr_(_ss_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_sr_)}
      var arg_003=caml_call2(Core[454],_sq_,callback_002),switch$0=0;
      if(1 === arg_003[0] && ! arg_003[1])
       {var bnds_001$0=bnds_001;switch$0 = 1}
      if(! switch$0)var bnds_001$0=[0,[1,[0,_cg_,[0,arg_003,0]]],bnds_001];
      return [1,bnds_001$0]}
    function handle_exn(param,close_connection_monitor,exn)
     {var close_connection_if_no_return_=param[2],callback=param[1];
      function _sp_(callback){return caml_call1(callback,exn)}
      caml_call2(Core_Option[41],callback,_sp_);
      return close_connection_if_no_return_
              ?caml_call3
                (Async_kernel_Monitor[15],close_connection_monitor,0,exn)
              :close_connection_if_no_return_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$22);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_On_except$0);
    var
     Async_rpc_kernel_On_exception=
      [0,sexp_of_t$10,close_connection,continue$0,handle_exn];
    caml_register_global
     (842,Async_rpc_kernel_On_exception,"Async_rpc_kernel__On_exception");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Implement$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$23);
    caml_call1(Expect_test_collector[5][1],cst_src_implementation_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$24,cst$8);
    function sexp_of_t$11(param)
     {var
       writer_004=param[2],
       query_id_002=param[1],
       responded_006=param[3],
       arg_007=caml_call1(Core[305],responded_006),
       bnds_001=[0,[1,[0,_ch_,[0,arg_007,0]]],0],
       arg_005=caml_call1(_b1_[1],writer_004),
       bnds_001$0=[0,[1,[0,_ci_,[0,arg_005,0]]],bnds_001],
       arg_003=caml_call1(Query_id[10],query_id_002),
       bnds_001$1=[0,[1,[0,_cj_,[0,arg_003,0]]],bnds_001$0];
      return [1,bnds_001$1]}
    function create(query_id,writer){return [0,query_id,writer,0]}
    var Responder=[0,sexp_of_t$11,create],Expert=[0,Responder];
    function lift(t,f)
     {switch(t[0])
       {case 0:
         var impl=t[2],bin_msg=t[1];
         return [0,
                 bin_msg,
                 function(state,str)
                  {return caml_call2(impl,caml_call1(f,state),str)}];
        case 1:
         var impl$0=t[1];
         return [1,
                 function(state,buf,pos,len)
                  {return caml_call4(impl$0,caml_call1(f,state),buf,pos,len)}];
        case 2:
         var result_mode=t[4],impl$1=t[3],bin_response=t[2],bin_query=t[1];
         return [2,
                 bin_query,
                 bin_response,
                 function(state,q)
                  {return caml_call2(impl$1,caml_call1(f,state),q)},
                 result_mode];
        case 3:
         var result_mode$0=t[2],impl$2=t[1];
         return [3,
                 function(state,resp,buf,pos,len)
                  {return caml_call5
                           (impl$2,caml_call1(f,state),resp,buf,pos,len)},
                 result_mode$0];
        default:
         var impl$3=t[4],bin_u=t[3],bin_i=t[2],bin_q=t[1];
         if(0 === impl$3[0])
          var
           impl$4=impl$3[1],
           impl$5=
            [0,
             function(state,q)
              {return caml_call2(impl$4,caml_call1(f,state),q)}];
         else
          var
           impl$6=impl$3[1],
           impl$5=
            [1,
             function(state,q,w)
              {return caml_call3(impl$6,caml_call1(f,state),q,w)}];
         return [4,bin_q,bin_i,bin_u,impl$5]}}
    function sexp_of_t$12(of_connection_state_008,param)
     {var
       on_exception_018=param[5],
       shapes_016=param[4],
       f_014=param[3],
       version_012=param[2],
       tag_010=param[1],
       arg_019=sexp_of_t$10(on_exception_018),
       bnds_009=[0,[1,[0,_ck_,[0,arg_019,0]]],0],
       arg_017=caml_call2(Core_Lazy[18],Core_Sexp[90],shapes_016),
       bnds_009$0=[0,[1,[0,_cl_,[0,arg_017,0]]],bnds_009];
      switch(f_014[0])
       {case 4:
         var arg_015=caml_call1(Sexplib0_Sexp_conv[7],cst_streaming_rpc);
         break;
        case 0:
        case 1:
         var arg_015=caml_call1(Sexplib0_Sexp_conv[7],cst_one_way);break;
        default:var arg_015=caml_call1(Sexplib0_Sexp_conv[7],cst_rpc)}
      var
       bnds_009$1=[0,[1,[0,_cm_,[0,arg_015,0]]],bnds_009$0],
       arg_013=caml_call1(Core[356],version_012),
       bnds_009$2=[0,[1,[0,_cn_,[0,arg_013,0]]],bnds_009$1],
       arg_011=caml_call1(Rpc_tag[10],tag_010),
       bnds_009$3=[0,[1,[0,_co_,[0,arg_011,0]]],bnds_009$2];
      return [1,bnds_009$3]}
    function description(t)
     {var _so_=t[2];return [0,caml_call1(Rpc_tag[12],t[1]),_so_]}
    function lift$0(init,f)
     {var _sl_=init[5],_sm_=init[4],_sn_=lift(init[3],f);
      return [0,init[1],init[2],_sn_,_sm_,_sl_]}
    function update_on_exception(init,f)
     {var _sk_=caml_call1(f,init[5]);
      return [0,init[1],init[2],init[3],init[4],_sk_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$25);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Implement$2);
    var
     Async_rpc_kernel_Implementatio$0=
      [0,Expert,[0,lift],sexp_of_t$12,description,lift$0,update_on_exception];
    caml_register_global
     (844,Async_rpc_kernel_Implementatio$0,"Async_rpc_kernel__Implementation");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Rpc_error);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$26);
    caml_call1(Expect_test_collector[5][1],cst_src_rpc_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$27,cst$9);
    var
     _ct_=Rpc_error[5],
     _cy_=Rpc_error[10],
     _cp_=Rpc_error[1],
     _cq_=Rpc_error[2],
     _cr_=Rpc_error[3],
     _cs_=Rpc_error[4],
     _cu_=Rpc_error[6],
     _cv_=Rpc_error[7],
     _cw_=Rpc_error[8],
     _cx_=Rpc_error[9],
     _cz_=Rpc_error[11],
     _cA_=Rpc_error[12],
     _cB_=Rpc_error[13],
     _cC_=Rpc_error[14],
     _cD_=Rpc_error[15],
     _cE_=Rpc_error[16],
     _cF_=Rpc_error[17],
     _cG_=Rpc_error[18],
     _cH_=Rpc_error[19],
     _cI_=Rpc_error[20],
     _cJ_=Rpc_error[21],
     _cK_=Rpc_error[22],
     _cL_=Rpc_error[23],
     _cM_=Rpc_error[24],
     _cN_=Rpc_error[25],
     _cO_=Rpc_error[26],
     _cP_=Rpc_error[27],
     _cQ_=Rpc_error[28],
     _cR_=Rpc_error[29],
     include$1=caml_call1(Core_Sexpable[1],[0,Rpc_error[9],Rpc_error[10]]),
     Rpc=[248,cst_Async_rpc_kernel_Rpc_error$0,caml_fresh_oo_id(0)],
     _cS_=include$1[1],
     _cT_=include$1[2];
    function _cU_(param)
     {if(param[1] !== Rpc)throw [0,Assert_failure,_cW_];
      var
       arg1_002=param[3],
       arg0_001=param[2],
       res0_003=caml_call1(_cy_,arg0_001),
       res1_004=caml_call1(Core_Info[6],arg1_002);
      return [1,[0,_cV_,[0,res0_003,[0,res1_004,0]]]]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Rpc,_cU_);
    function raise(t,connection_description)
     {throw [0,Rpc,t,connection_description]}
    function sexp_of_t$13(t,get_connection_close_reason)
     {if(typeof t !== "number")return caml_call1(_cy_,t);
      var _sj_=caml_call1(get_connection_close_reason,0);
      return [1,[0,_cX_,[0,caml_call1(Core_Sexp[90],_sj_),0]]]}
    function to_error(t,param,connection_description,connection_close_started)
     {var
       rpc_version=param[2],
       rpc_name=param[1],
       rpc_error=
        sexp_of_t$13
         (t,
          function(param)
           {var
             x_005=
              caml_call1(Async_kernel_Deferred[5],connection_close_started);
            return caml_call2(Core[454],Core_Info[6],x_005)}),
       _sf_=[0,[1,[0,_cY_,[0,caml_call1(Core[356],rpc_version),0]]],0],
       _sg_=[0,[1,[0,_cZ_,[0,caml_call1(Core[471],rpc_name),0]]],_sf_],
       _sh_=
        [0,
         [1,[0,_c0_,[0,caml_call1(Core_Info[6],connection_description),0]]],
         _sg_],
       _si_=
        [1,[0,[1,[0,_c1_,[0,caml_call1(Core_Sexp[90],rpc_error),0]]],_sh_]];
      return caml_call1(Core_Error[18],_si_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$28);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Rpc_error$1);
    var
     Async_rpc_kernel_Rpc_error=
      [0,
       _cp_,
       _cq_,
       _cr_,
       _cs_,
       _ct_,
       _cu_,
       _cv_,
       _cw_,
       _cx_,
       _cz_,
       _cA_,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       _cF_,
       _cG_,
       _cH_,
       _cI_,
       _cJ_,
       _cK_,
       _cL_,
       _cM_,
       _cN_,
       _cO_,
       _cP_,
       _cQ_,
       _cR_,
       sexp_of_t$13,
       _cS_,
       _cT_,
       Rpc,
       raise,
       to_error];
    caml_register_global
     (848,Async_rpc_kernel_Rpc_error,"Async_rpc_kernel__Rpc_error");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Rpc_resul);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$29);
    caml_call1(Expect_test_collector[5][1],cst_src_rpc_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$30,cst$10);
    var
     _c2_=caml_call1(Bin_prot_Shape[3][1],cst_a$12),
     _c3_=caml_call1(Bin_prot_Shape[4][1],cst_src_rpc_result_ml_4_13),
     _c4_=caml_call2(Bin_prot_Shape[15],_c3_,_c2_),
     _c5_=caml_call1(caml_call1(Core_Result[1],_c4_),_ct_),
     _c6_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$13),0],
     _c7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$10),_c6_,_c5_],0],
     _c8_=caml_call1(Bin_prot_Shape[4][1],cst_src_rpc_result_ml_4_0);
    caml_call2(Bin_prot_Shape[6],_c8_,_c7_);
    function sexp_of_located_error(param)
     {var
       exn_004=param[2],
       location_002=param[1],
       arg_005=caml_call1(Base_Exn[1],exn_004),
       bnds_001=[0,[1,[0,_c9_,[0,arg_005,0]]],0],
       arg_003=caml_call1(Core[471],location_002),
       bnds_001$0=[0,[1,[0,_c__,[0,arg_003,0]]],bnds_001];
      return [1,bnds_001$0]}
    function uncaught_exn(location,exn)
     {return [1,[2,sexp_of_located_error([0,location,exn])]]}
    function bin_io_exn(location,exn)
     {return [1,[0,sexp_of_located_error([0,location,exn])]]}
    function try_with(on_background_exception,run,location,f)
     {if(on_background_exception)
       var callback=on_background_exception[1],rest=[0,747848894,callback];
      else
       var rest=3804260;
      var
       _sd_=[0,caml_call2(Core_Option[34],run,523273847)],
       x=caml_call7(Async_kernel_Monitor[16],0,0,0,0,_sd_,[0,rest],f);
      function join(param)
       {if(0 === param[0]){var x=param[1];return x}
        var exn=param[1];
        return uncaught_exn(location,exn)}
      var match=caml_call1(Async_kernel_Deferred[5],x);
      if(! match)return caml_call2(Async_kernel[21],x,join);
      var x$0=match[1],_se_=join(x$0);
      return caml_call1(Async_kernel[19],_se_)}
    function or_error
     (rpc_description,connection_description,connection_close_started)
     {var func=Core_Result[39];
      function _sa_(_sc_)
       {return to_error
                (_sc_,
                 rpc_description,
                 connection_description,
                 connection_close_started)}
      return function(_sb_){return caml_call2(func,_sb_,_sa_)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$31);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Rpc_resul$0);
    var
     Async_rpc_kernel_Rpc_result=
      [0,uncaught_exn,bin_io_exn,try_with,or_error];
    caml_register_global
     (850,Async_rpc_kernel_Rpc_result,"Async_rpc_kernel__Rpc_result");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Util);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$32);
    caml_call1(Expect_test_collector[5][1],cst_src_util_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$33,cst$11);
    function bin_read_from_bigstring
     (bin_reader_t,add_len,buf,pos_ref,len,location)
     {try
       {var init_pos=pos_ref[1],data=caml_call2(bin_reader_t[1],buf,pos_ref);
        if(add_len)
         var add_len$0=add_len[1],add_len$1=caml_call1(add_len$0,data);
        else
         var add_len$1=0;
        if
         (caml_call2(Core[93],(pos_ref[1] - init_pos | 0) + add_len$1 | 0,len))
         caml_call4(Core[234],_c$_,pos_ref[1] - init_pos | 0,len,0);
        var _r$_=[0,data];
        return _r$_}
      catch(e){e = caml_wrap_exception(e);return bin_io_exn(location,e)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$34);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Util$0);
    var Async_rpc_kernel_Util=[0,bin_read_from_bigstring];
    caml_register_global(851,Async_rpc_kernel_Util,"Async_rpc_kernel__Util");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Implement$3);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$35);
    caml_call1(Expect_test_collector[5][1],cst_src_implementations_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$36,cst$12);
    var symbol$5=Core_Result[16];
    function defer_result(err)
     {if(0 !== err[0])return caml_call1(Async_kernel[19],err);
      var d=err[1],match=caml_call1(Async_kernel_Deferred[5],d);
      if(match){var d$0=match[1];return caml_call1(Async_kernel[19],[0,d$0])}
      function _r__(x){return [0,x]}
      return caml_call2(Async_kernel[22][3],d,_r__)}
    var return$0=Async_kernel[19];
    function bind(d,f)
     {var match=caml_call1(Async_kernel_Deferred[5],d);
      if(! match)return caml_call2(Async_kernel[20],d,f);
      var x=match[1];
      return caml_call1(f,x)}
    var
     map=
      [0,
       -198771759,
       function(d,f)
        {var match=caml_call1(Async_kernel_Deferred[5],d);
         if(! match)return caml_call2(Async_kernel[21],d,f);
         var x=match[1];
         return caml_call1(return$0,caml_call1(f,x))}],
     Deferred_immediate=caml_call1(Base_Monad[1],[0,bind,return$0,map]);
    function descriptions$0(t){return caml_call1(Core_Hashtbl[64],t[1])}
    function sexp_of_streaming_response(param)
     {if(0 === param[0])
       {var
         arg0_002=param[1],
         _r9_=function(param){return _da_},
         res0_003=caml_call2(Async_kernel_Pipe[4][1],_r9_,arg0_002);
        return [1,[0,_db_,[0,res0_003,0]]]}
      var
       arg0_004=param[1],
       res0_005=caml_call1(Sexplib0_Sexp_conv[23],arg0_004);
      return [1,[0,_dc_,[0,res0_005,0]]]}
    function sexp_of_t$14(param)
     {var
       t=param[1],
       open_streaming_responses_013=t[3],
       writer_011=t[2],
       implementations_009=t[1],
       stopped_015=t[4],
       connection_close_started_021=t[7],
       connection_description_019=t[6],
       last_dispatched_implementation=t[8],
       packed_self_029=t[9],
       arg_030=caml_call1(Sexplib0_Sexp_conv[23],packed_self_029),
       bnds_008=[0,[1,[0,_dd_,[0,arg_030,0]]],0];
      function _r8_(param)
       {var
         arg1_026=param[2],
         arg0_025=param[1],
         res0_027=sexp_of_t(arg0_025),
         res1_028=caml_call1(Sexplib0_Sexp_conv[23],arg1_026);
        return [1,[0,res0_027,[0,res1_028,0]]]}
      var
       arg_024=caml_call2(Core[454],_r8_,last_dispatched_implementation),
       bnds_008$0=[0,[1,[0,_de_,[0,arg_024,0]]],bnds_008],
       arg_022=
        caml_call2
         (Async_kernel_Deferred[1],Core_Info[6],connection_close_started_021),
       bnds_008$1=[0,[1,[0,_df_,[0,arg_022,0]]],bnds_008$0],
       arg_020=caml_call1(Core_Info[6],connection_description_019),
       bnds_008$2=[0,[1,[0,_dg_,[0,arg_020,0]]],bnds_008$1],
       bnds_008$3=[0,[1,[0,_dh_,[0,arg_018,0]]],bnds_008$2],
       arg_016=caml_call1(Core[305],stopped_015),
       bnds_008$4=[0,[1,[0,_di_,[0,arg_016,0]]],bnds_008$3],
       arg_014=
        caml_call3
         (Core_Hashtbl[3],
          Query_id[10],
          sexp_of_streaming_response,
          open_streaming_responses_013),
       bnds_008$5=[0,[1,[0,_dj_,[0,arg_014,0]]],bnds_008$4],
       arg_012=caml_call1(_b1_[1],writer_011),
       bnds_008$6=[0,[1,[0,_dk_,[0,arg_012,0]]],bnds_008$5],
       arg_010=caml_call1(Sexplib0_Sexp_conv[23],implementations_009),
       bnds_008$7=[0,[1,[0,_dl_,[0,arg_010,0]]],bnds_008$6];
      return [1,bnds_008$7]}
    function handle_send_result(t,id,result)
     {if(typeof result === "number")return 0;
      if(0 === result[0])return 0;
      var
       sexp=caml_call2(Send_result[2],Core[518],result),
       data=[1,[0,id,[1,[1,sexp]]]],
       x_034=caml_call3(_b1_[9],t[2],Message[19],data);
      if(typeof x_034 !== "number" && 1 === x_034[0])
       {var
         _r5_=
          [0,[1,[0,_dm_,[0,caml_call2(Send_result[2],Core[518],x_034),0]]],0],
         _r6_=
          [0,[1,[0,[1,[0,_dn_,[0,caml_call1(Core_Sexp[90],sexp),0]]],_r5_]],0],
         _r7_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Failed_to_send_write_error),
            _r6_]];
        return caml_call1(Core[253],_r7_)}
      return 0}
    function write_message(t,id,bin_writer,x)
     {var _r4_=1 - t[4];
      return _r4_
              ?handle_send_result(t,id,caml_call3(_b1_[9],t[2],bin_writer,x))
              :_r4_}
    function write_response(t,id,bin_writer_data,data)
     {var
       _r3_=of_writer(bin_writer_data),
       bin_writer=caml_call1(Message[4],_r3_);
      return write_message(t,id,bin_writer,[1,[0,id,data]])}
    function bin_write_void(buf,pos,param){return pos}
    var buf=caml_call2(Core_Bigstring[115],0,32);
    function create$0(id,bin_writer)
     {var
       v=[1,[0,id,_do_]],
       len=caml_call3(caml_call1(Message[3],bin_write_void),buf,0,v),
       header_prefix=caml_call3(Core_Bigstring[28][4],buf,0,len);
      return [0,header_prefix,caml_call1(_h_,0),bin_writer]}
    var stream_response_data_header_as=35449;
    function _dp_(param)
     {var
       len=
        caml_call3(caml_call1(Stream_response_data[3],bin_write_void),buf,0,v);
      if(len !== 4)throw [0,Assert_failure,_dr_];
      if
       (runtime.caml_equal
         (caml_call2(Core_Bigstring[100],buf,0),
          stream_response_data_header_as))
       return 0;
      throw [0,Assert_failure,_dq_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_stream_response_constants_,
      0,
      cst_src_implementations_ml$0,
      212,
      4,
      391,
      _dp_);
    function bin_write_string_no_length(buf,pos,str)
     {var str_len=caml_ml_string_length(str);
      caml_call1(Bin_prot_Common[3],pos);
      var next=pos + str_len | 0;
      caml_call2(Bin_prot_Common[5],buf,next);
      runtime.bin_prot_blit_string_buf_stub(0,str,pos,buf,str_len);
      return next}
    function bin_size_nat0_header(param)
     {var
       header_prefix=param[1],
       data_len=param[2],
       stream_response_data_nat0_len=4 + caml_call1(_c_,data_len) | 0,
       stream_response_data_len=stream_response_data_nat0_len + data_len | 0;
      return (caml_ml_string_length(header_prefix)
              +
              caml_call1(_c_,caml_call1(_h_,stream_response_data_len))
              |
              0)
             +
             stream_response_data_nat0_len
             |
             0}
    function bin_write_nat0_header(buf,pos,param)
     {var
       header_prefix=param[1],
       data_len=param[2],
       pos$0=bin_write_string_no_length(buf,pos,header_prefix),
       stream_response_data_len=
        (4 + caml_call1(_c_,data_len) | 0)
        +
        data_len
        |
        0,
       pos$1=
        caml_call3(_e_,buf,pos$0,caml_call1(_h_,stream_response_data_len)),
       next=pos$1 + 4 | 0;
      caml_call2(Bin_prot_Common[5],buf,next);
      caml_call3(Core_Bigstring[102],buf,pos$1,stream_response_data_header_as);
      return caml_call3(_e_,buf,next,data_len)}
    var bin_writer=[0,bin_size_nat0_header,bin_write_nat0_header];
    function bin_size_message(param)
     {var t=param[1],_r2_=t[2];return bin_size_nat0_header(t) + _r2_ | 0}
    function bin_write_message(buf,pos,param)
     {var data=param[2],t=param[1],pos$0=bin_write_nat0_header(buf,pos,t);
      return caml_call3(t[3][2],buf,pos$0,data)}
    var bin_writer_message=[0,bin_size_message,bin_write_message];
    function bin_size_message_as_string(param)
     {var t=param[1],_r1_=t[2];return bin_size_nat0_header(t) + _r1_ | 0}
    function bin_write_message_as_string(buf,pos,param)
     {var str=param[2],t=param[1],pos$0=bin_write_nat0_header(buf,pos,t);
      return bin_write_string_no_length(buf,pos$0,str)}
    var
     bin_writer_message_as_string=
      [0,bin_size_message_as_string,bin_write_message_as_string];
    function write(t,param,id,data)
     {var instance=param[1];
      t[2] = caml_call1(_h_,caml_call1(t[3][1],data));
      return write_message(instance,id,bin_writer_message,[0,t,data])}
    function is_closed$1(t){return caml_call1(Async_kernel_Ivar[17],t[3])}
    function closed(t){return caml_call1(Async_kernel_Ivar[18],t[3])}
    function flushed$0(t)
     {var match=t[4],instance=match[1];return caml_call1(_b1_[7],instance[2])}
    function bin_writer$0(t){return t[6][3]}
    function write_eof(param)
     {var query_id=param[5],match=param[4],instance=match[1];
      return write_response(instance,query_id,Stream_response_data[17],_ds_)}
    function write_message$0(param,x)
     {var stream_writer=param[6],query_id=param[5],instance=param[4];
      return write(stream_writer,instance,query_id,x)}
    function close_without_removing_from_in(t)
     {var _rZ_=1 - caml_call1(Async_kernel_Ivar[17],t[3]);
      if(! _rZ_)return _rZ_;
      caml_call2(Async_kernel_Ivar[14],t[3],0);
      var groups=t[7];
      if(1 - caml_call1(Core_Bag[6],groups))
       {var
         _r0_=
          function(param)
           {var match=caml_call1(Core_Bag[28],groups);
            if(! match)return 0;
            var match$0=match[1],element_in_group=match$0[2],group=match$0[1];
            caml_call2(Core_Bag[26],group[1],element_in_group);
            caml_call2(Core_Hashtbl[31],group[2],t[1]);
            return 1};
        caml_call1(Async_kernel_Scheduler[70][2],_r0_)}
      return t[2]?0:write_eof(t)}
    function close$2(t)
     {var query_id=t[5],match=t[4],instance=match[1];
      close_without_removing_from_in(t);
      return caml_call2(Core_Hashtbl[31],instance[3],query_id)}
    function write_without_pushback(t,x)
     {if(caml_call1(Async_kernel_Ivar[17],t[3]))return -1025106484;
      var _rY_=t[2];
      if(_rY_)
       {var q=_rY_[1];caml_call2(Core_Queue[41],q,[0,x])}
      else
       write_message$0(t,x);
      return 17724}
    function write$0(t,x)
     {var match=t[4],instance=match[1],match$0=write_without_pushback(t,x);
      return 17724 <= match$0
              ?[0,933108739,caml_call1(_b1_[7],instance[2])]
              :-1025106484}
    function write_without_pushback$0(t,buf,pos,len)
     {if(caml_call1(Async_kernel_Ivar[17],t[3]))return -1025106484;
      var _rW_=t[2];
      if(_rW_)
       {var q=_rW_[1],_rX_=[1,caml_call3(Core_Bigstring[28][4],buf,pos,len)];
        caml_call2(Core_Queue[41],q,_rX_)}
      else
       {var
         stream_writer=t[6],
         query_id=t[5],
         instance$0=t[4],
         instance=instance$0[1];
        stream_writer[2] = caml_call1(_h_,len);
        if(1 - instance[4])
         handle_send_result
          (instance,
           query_id,
           caml_call6
            (_b1_[10],instance[2],bin_writer,stream_writer,buf,pos,len))}
      return 17724}
    function write$1(t,buf,pos,len)
     {var
       match=t[4],
       instance=match[1],
       match$0=write_without_pushback$0(t,buf,pos,len);
      return 17724 <= match$0
              ?[0,933108739,caml_call1(_b1_[7],instance[2])]
              :-1025106484}
    function maybe_dispatch_on_exception
     (result,on_exception,close_connection_monitor)
     {if(1 === result[0])
       {var _rV_=result[1];
        if(typeof _rV_ !== "number" && 2 === _rV_[0])
         {var sexp=_rV_[1];
          return handle_exn
                  (on_exception,
                   close_connection_monitor,
                   caml_call1(Base_Exn[5],sexp))}}
      return 0}
    function apply_implementation
     (t,
      implementation,
      query,
      read_buffer,
      read_buffer_pos_ref,
      close_connection_monitor,
      on_exception)
     {var id=query[3];
      switch(implementation[0])
       {case 0:
         var
          f=implementation[2],
          bin_query_reader=implementation[1],
          query_contents=
           bin_read_from_bigstring
            (bin_query_reader,
             0,
             read_buffer,
             read_buffer_pos_ref,
             query[4],
             cst_server_side_one_way_rpc_me);
         if(0 !== query_contents[0])return [0,query_contents];
         var q=query_contents[1];
         try
          {caml_call2(f,t[5],q);var _q9_=0;return _q9_}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           handle_exn(on_exception,close_connection_monitor,exn);
           return on_exception[2]
                   ?[0,uncaught_exn(cst_server_side_one_way_rpc_co,exn)]
                   :0}
        case 1:
         var f$0=implementation[1];
         try
          {var len=query[4];
           caml_call4(f$0,t[5],read_buffer,read_buffer_pos_ref[1],len);
           read_buffer_pos_ref[1] = read_buffer_pos_ref[1] + len | 0;
           var _q__=0;
           return _q__}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           handle_exn(on_exception,close_connection_monitor,exn);
           return on_exception[2]
                   ?[0,uncaught_exn(cst_server_side_one_way_rpc_ex,exn)]
                   :0}
        case 2:
         var
          result_mode=implementation[4],
          f$1=implementation[3],
          bin_response_writer=implementation[2],
          bin_query_reader$0=implementation[1],
          query_contents$0=
           bin_read_from_bigstring
            (bin_query_reader$0,
             0,
             read_buffer,
             read_buffer_pos_ref,
             query[4],
             cst_server_side_rpc_query_un_b);
         if(result_mode)
          {var
            _q$_=
             function(param)
              {return defer_result
                       (caml_call2(symbol$5,query_contents$0,caml_call1(f$1,t[5])))},
            data=
             try_with
              (on_exception[1],_dt_,cst_server_side_rpc_computatio,_q$_),
            match=caml_call1(Async_kernel_Deferred[5],data);
           if(match)
            {var data$0=match[1];
             write_response(t,id,bin_response_writer,data$0);
             maybe_dispatch_on_exception
              (data$0,on_exception,close_connection_monitor)}
           else
            {var
              _ra_=
               function(data)
                {write_response(t,id,bin_response_writer,data);
                 return maybe_dispatch_on_exception
                         (data,on_exception,close_connection_monitor)};
             caml_call2(Async_kernel[16],data,_ra_)}}
         else
          try
           {write_response
             (t,
              id,
              bin_response_writer,
              caml_call2(symbol$5,query_contents$0,caml_call1(f$1,t[5])))}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var
             backtrace=caml_call1(Base_Backtrace[6][4],0),
             _rb_=
              [0,[1,[0,_du_,[0,caml_call1(Base_Backtrace[1],backtrace),0]]],0],
             _rc_=[0,[1,[0,_dv_,[0,caml_call1(Core[537],exn),0]]],_rb_],
             sexp=
              [1,
               [0,
                [1,
                 [0,
                  _dw_,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_server_side_blocking_rpc_c),
                   0]]],
                _rc_]];
            write_response(t,id,bin_response_writer,[1,[2,sexp]]);
            handle_exn(on_exception,close_connection_monitor,exn)}
         return 0;
        case 3:
         var
          result_mode$0=implementation[2],
          f$2=implementation[1],
          responder=caml_call2(Expert[1][2],query[3],t[2]),
          _rd_=on_exception[1];
         if(_rd_)
          var callback=_rd_[1],rest=[0,747848894,callback];
         else
          var rest=3804260;
         var
          _re_=
           function(param)
            {var
              len=query[4],
              result=
               caml_call5
                (f$2,t[5],responder,read_buffer,read_buffer_pos_ref[1],len);
             return result_mode$0
                     ?result
                     :caml_call1(Async_kernel_Deferred[12],result)},
          d=caml_call7(Async_kernel_Monitor[16],0,0,0,0,_dx_,[0,rest],_re_),
          handle_exn$0=
           function(is_uncaught_exn,exn)
            {var
              result=uncaught_exn(cst_server_side_rpc_expert_com,exn),
              result$0=
               responder[3]
                ?result
                :(write_response(t,id,Core[509],result),_dy_);
             if(is_uncaught_exn)
              handle_exn(on_exception,close_connection_monitor,exn);
             return result$0},
          check_responded=
           function(param)
            {return responder[3]
                     ?_dz_
                     :handle_exn$0
                       (0,[0,Stdlib[7],cst_Expert_implementation_did_])},
          _rf_=
           function(param)
            {if(0 !== param[0]){var exn=param[1];return handle_exn$0(1,exn)}
             var result=param[1];
             if(result)
              var d=result[1],d$0=d;
             else
              var d$0=Async_kernel_Deferred[18];
             if(caml_call1(Async_kernel_Deferred[7],d$0))
              return check_responded(0);
             function _ry_(param)
              {var
                _rz_=check_responded(0),
                _rA_=t[7],
                _rB_=t[6],
                _rC_=query[2],
                _rD_=
                 caml_call1
                  (or_error
                    ([0,caml_call1(Rpc_tag[12],query[1]),_rC_],_rB_,_rA_),
                   _rz_);
               return caml_call1(Core[245],_rD_)}
             caml_call2(Async_kernel[12],d$0,_ry_);
             return _dA_},
          d$0=caml_call2(Deferred_immediate[11][4][3],d,_rf_),
          match$0=caml_call1(Async_kernel_Deferred[5],d$0);
         if(match$0)
          {var result=match$0[1];return 0 === result[0]?0:[0,result]}
         var
          _rg_=
           function(r)
            {var
              _ru_=t[7],
              _rv_=t[6],
              _rw_=query[2],
              _rx_=
               caml_call1
                (or_error([0,caml_call1(Rpc_tag[12],query[1]),_rw_],_rv_,_ru_),
                 r);
             return caml_call1(Core[245],_rx_)};
         return [1,caml_call2(Async_kernel[22][3],d$0,_rg_)];
        default:
         var
          impl=implementation[4],
          bin_update_writer=implementation[3],
          bin_init_writer=implementation[2],
          bin_query_reader$1=implementation[1],
          _rh_=query[4],
          _ri_=
           [0,
            function(param)
             {if(typeof param === "number")return 0;
              var len=param[2];
              return len}],
          stream_query=
           bin_read_from_bigstring
            (Stream_query[14],
             _ri_,
             read_buffer,
             read_buffer_pos_ref,
             _rh_,
             cst_server_side_pipe_rpc_strea);
         if(0 === stream_query[0])
          {var _rj_=stream_query[1];
           if(typeof _rj_ === "number")
            {var
              _rk_=
               function(param)
                {if(0 === param[0])
                  {var pipe=param[1];
                   return caml_call1(Async_kernel_Pipe[15],pipe)}
                 var w=param[1];
                 return close$2(w)},
              _rl_=caml_call2(Core_Hashtbl[53],t[3],query[3]);
             caml_call2(Core_Option[41],_rl_,_rk_)}
           else
            {var
              len$0=_rj_[2],
              data$1=
               bin_read_from_bigstring
                (bin_query_reader$1,
                 0,
                 read_buffer,
                 read_buffer_pos_ref,
                 len$0,
                 cst_streaming_rpc_server_side_),
              stream_writer=create$0(id,bin_update_writer);
             if(0 === impl[0])
              var f$3=impl[1],impl_with_state=[0,892411982,f$3];
             else
              {var
                f$6=impl[1],
                _rq_=caml_call1(Core_Bag[22],0),
                _rr_=t[9],
                _rs_=caml_call1(Async_kernel_Ivar[12],0),
                _rt_=[0,caml_call2(Core_Queue[61],0,0)],
                writer$0=
                 [0,
                  caml_call1(Direct_stream_writer_id[45],0),
                  _rt_,
                  _rs_,
                  _rr_,
                  id,
                  stream_writer,
                  _rq_];
               caml_call3(Core_Hashtbl[34],t[3],query[3],[1,writer$0]);
               var impl_with_state=[0,-251740343,[0,f$6,writer$0]]}
             var
              run_impl=
               function(impl,split_ok,handle_ok)
                {function _rQ_(param)
                  {if(0 === param[0])
                    {var _rT_=param[1];
                     if(0 === _rT_[0])
                      {var
                        ok=_rT_[1],
                        match=caml_call1(split_ok,ok),
                        rest=match[2],
                        initial=match[1];
                       write_response(t,id,bin_init_writer,[0,initial]);
                       return caml_call1(handle_ok,rest)}
                     var err=_rT_[1];
                     caml_call2(Core_Hashtbl[31],t[3],id);
                     return write_response(t,id,bin_init_writer,[0,err])}
                   var _rU_=param[1];
                   if(typeof _rU_ !== "number" && 2 === _rU_[0])
                    {var sexp=_rU_[1];
                     caml_call2(Core_Hashtbl[31],t[3],id);
                     write_response(t,id,bin_init_writer,[1,_rU_]);
                     return handle_exn
                             (on_exception,
                              close_connection_monitor,
                              caml_call1(Base_Exn[5],sexp))}
                   caml_call2(Core_Hashtbl[31],t[3],id);
                   return write_response(t,id,bin_init_writer,[1,_rU_])}
                 function _rR_(param)
                  {return defer_result(caml_call2(symbol$5,data$1,impl))}
                 var
                  _rS_=
                   try_with
                    (on_exception[1],0,cst_server_side_pipe_rpc_compu,_rR_);
                 return caml_call2(Async_kernel[16],_rS_,_rQ_)};
             if(892411982 <= impl_with_state[1])
              {var
                f$4=impl_with_state[2],
                _rm_=
                 function(pipe_r)
                  {caml_call3(Core_Hashtbl[34],t[3],id,[0,pipe_r]);
                   var _rF_=t[9];
                   function _rG_(_rM_)
                    {return write(stream_writer,_rF_,id,_rM_)}
                   var _rH_=caml_call4(_b1_[14],t[2],0,pipe_r,_rG_);
                   caml_call1(Async_kernel[6],_rH_);
                   function _rI_(param)
                    {function _rK_(param)
                      {write_response(t,id,Stream_response_data[17],_dB_);
                       return caml_call2(Core_Hashtbl[31],t[3],id)}
                     var _rL_=caml_call1(Async_kernel_Pipe[19],pipe_r);
                     return caml_call2(Async_kernel[16],_rL_,_rK_)}
                   var _rJ_=caml_call1(Async_kernel_Pipe[17],pipe_r);
                   return caml_call2(Async_kernel[16],_rJ_,_rI_)},
                _rn_=function(_rE_){return _rE_};
               run_impl
                (function(data){return caml_call2(f$4,t[5],data)},_rn_,_rm_)}
             else
              {var
                match$1=impl_with_state[2],
                writer=match$1[2],
                f$5=match$1[1],
                _ro_=
                 function(param)
                  {var _rN_=writer[2];
                   if(! _rN_)
                    return caml_call1(Core[6],cst_attempted_to_start_writer_);
                   var q=_rN_[1];
                   writer[2] = 0;
                   function _rO_(param)
                    {if(0 === param[0])
                      {var x=param[1];return write_message$0(writer,x)}
                     var
                      x$0=param[1],
                      stream_writer=writer[6],
                      query_id=writer[5],
                      instance$0=writer[4],
                      instance=instance$0[1];
                     stream_writer[2]
                     =
                     caml_call1(_h_,caml_ml_string_length(x$0));
                     return write_message
                             (instance,
                              query_id,
                              bin_writer_message_as_string,
                              [0,stream_writer,x$0])}
                   caml_call2(Core_Queue[16],q,_rO_);
                   var _rP_=caml_call1(Async_kernel_Ivar[17],writer[3]);
                   return _rP_?write_eof(writer):_rP_},
                _rp_=function(x){return [0,x,0]};
               run_impl
                (function(data){return caml_call3(f$5,t[5],data,writer)},
                 _rp_,
                 _ro_)}}}
         return 0}}
    function flush(param)
     {var t=param[1];
      if(t[4])throw [0,Assert_failure,_dC_];
      function _q7_(param,data,acc)
       {if(0 !== data[0])return acc;
        var pipe=data[1],_q8_=caml_call1(Async_kernel_Pipe[19],pipe);
        return [0,caml_call1(Async_kernel_Deferred[15],_q8_),acc]}
      var producers_flushed=caml_call3(Core_Hashtbl[18],t[3],0,_q7_);
      return caml_call1(Async_kernel_Deferred[22],producers_flushed)}
    function stop(param)
     {var t=param[1];
      t[4] = 1;
      function _q6_(param)
       {if(0 === param[0])return 0;
        var writer=param[1];
        return close_without_removing_from_in(writer)}
      caml_call2(Core_Hashtbl[20],t[3],_q6_);
      return caml_call1(Core_Hashtbl[16],t[3])}
    function handle_query
     (param,query,read_buffer,read_buffer_pos_ref,close_connection_monitor)
     {var t=param[1];
      if(! t[4] && ! caml_call1(_b1_[3],t[2]))
       {var
         match$0=t[1],
         on_unknown_rpc=match$0[2],
         implementations=match$0[1],
         _q2_=query[2],
         description=[0,caml_call1(Rpc_tag[12],query[1]),_q2_],
         _q3_=t[8];
        if(_q3_)
         {var match$1=_q3_[1],implementation=match$1[2],last_desc=match$1[1];
          if(caml_call2(_y_,last_desc,description))
           return apply_implementation
                   (t,
                    implementation[3],
                    query,
                    read_buffer,
                    read_buffer_pos_ref,
                    close_connection_monitor,
                    implementation[5])}
        var match$2=caml_call2(Core_Hashtbl[53],implementations,description);
        if(match$2)
         {var implementation$0=match$2[1];
          t[8] = [0,[0,description,implementation$0]];
          return apply_implementation
                  (t,
                   implementation$0[3],
                   query,
                   read_buffer,
                   read_buffer_pos_ref,
                   close_connection_monitor,
                   implementation$0[5])}
        if
         (typeof on_unknown_rpc !== "number" && 747848894 > on_unknown_rpc[1])
         {var
           impl=on_unknown_rpc[2],
           len=query[4],
           id=query[3],
           version=query[2],
           tag=query[1],
           responder=caml_call2(Expert[1][2],id,t[2]),
           _q4_=read_buffer_pos_ref[1],
           _q5_=caml_call1(Rpc_tag[12],tag),
           d=caml_call7(impl,t[5],_q5_,version,responder,read_buffer,_q4_,len);
          return caml_call1(Async_kernel_Deferred[7],d)?0:[1,d]}
        var error=[3,query[1],[0,-901574920,query[2]]];
        write_response(t,query[3],Message[19],[1,error]);
        if(typeof on_unknown_rpc === "number")
         return -146189108 === on_unknown_rpc
                 ?raise(error,t[6])
                 :192584839 <= on_unknown_rpc?0:_dD_;
        var
         f=on_unknown_rpc[2],
         _q0_=query[2],
         _q1_=caml_call1(Rpc_tag[12],query[1]),
         match=caml_call3(f,t[5],_q1_,_q0_);
        return 192584839 <= match?0:_dE_}
      return _dF_}
    function create$1(i_s,on_unknown_rpc)
     {var
       implementations=caml_call3(_R_[4],0,_dG_,0),
       dups=caml_call3(_S_[3],0,_dH_,0);
      function _qY_(i)
       {var
         _qZ_=i[2],
         description=[0,caml_call1(Rpc_tag[12],i[1]),_qZ_],
         match=caml_call3(Core_Hashtbl[35],implementations,description,i);
        return 17724 <= match?0:caml_call2(Core_Hash_set[22],dups,description)}
      caml_call2(Core_List[9],i_s,_qY_);
      return caml_call1(Core_Hash_set[5],dups)
              ?[0,[0,implementations,on_unknown_rpc]]
              :[1,[0,-965860371,caml_call1(Core_Hash_set[16],dups)]]}
    function instantiate
     (t,
      connection_description,
      connection_close_started,
      connection_state,
      writer)
     {var unpacked=[];
      runtime.caml_update_dummy
       (unpacked,
        [0,
         t,
         writer,
         caml_call3(Core_Hashtbl[85][14],0,_dI_,0),
         0,
         connection_state,
         connection_description,
         connection_close_started,
         0,
         [0,unpacked]]);
      return unpacked[9]}
    var
     Duplicate_implementations=
      [248,cst_Async_rpc_kernel_Implement$4,caml_fresh_oo_id(0)];
    function _dJ_(param)
     {if(param[1] !== Duplicate_implementations)throw [0,Assert_failure,_dL_];
      var arg0_037=param[2],res0_038=caml_call2(Core[421],sexp_of_t,arg0_037);
      return [1,[0,_dK_,[0,res0_038,0]]]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Duplicate_implementations,_dJ_);
    function create_exn(implementations,on_unknown_rpc)
     {var match=create$1(implementations,on_unknown_rpc);
      if(0 === match[0]){var x=match[1];return x}
      var match$0=match[1],dups=match$0[2];
      throw [0,Duplicate_implementations,dups]}
    function null$0(param){return create_exn(0,-146189108)}
    function add_exn(t,implementation)
     {var
       _qX_=implementation[2],
       desc=[0,caml_call1(Rpc_tag[12],implementation[1]),_qX_],
       implementations=caml_call1(Core_Hashtbl[17],t[1]),
       match=caml_call3(Core_Hashtbl[35],implementations,desc,implementation);
      if(17724 <= match)return [0,implementations,t[2]];
      throw [0,Duplicate_implementations,[0,desc,0]]}
    function add(t,implementation)
     {function _qW_(param){return add_exn(t,implementation)}
      return caml_call2(Core_Or_error[33],0,_qW_)}
    function lift$1(param,f)
     {var on_unknown_rpc=param[2],implementations=param[1];
      function _qT_(_qV_){return lift$0(_qV_,f)}
      var implementations$0=caml_call2(Core_Hashtbl[40],implementations,_qT_);
      if(typeof on_unknown_rpc === "number")
       var on_unknown_rpc$0=on_unknown_rpc;
      else
       {if(747848894 <= on_unknown_rpc[1])
         var
          call=on_unknown_rpc[2],
          _qU_=
           [0,
            747848894,
            function(state){return caml_call1(call,caml_call1(f,state))}];
        else
         var
          expert=on_unknown_rpc[2],
          _qU_=
           [0,
            -116756726,
            function(state){return caml_call1(expert,caml_call1(f,state))}];
        var on_unknown_rpc$0=_qU_}
      return [0,implementations$0,on_unknown_rpc$0]}
    function cannot_send(r)
     {function _qR_(x_039)
       {function _qS_(param){return _dM_}
        return caml_call2(Send_result[2],_qS_,x_039)}
      return caml_call5(Core[236],0,_dN_,cst_Message_cannot_be_sent,r,_qR_)}
    function mark_responded(t)
     {if(t[3])
       caml_call5(Core[236],0,_dO_,cst_Already_responded,t,Expert[1][1]);
      t[3] = 1;
      return 0}
    function schedule(t,buf,pos,len)
     {mark_responded(t);
      var
       _qQ_=[0,caml_call1(_h_,len)],
       header=[1,[0,t[1],_qQ_]],
       r=caml_call6(_b1_[11],t[2],Message[19],header,buf,pos,len);
      if(typeof r === "number")return 179911373;
      if(0 !== r[0])return cannot_send(r);
      var d=r[1];
      return [0,933108739,d]}
    function handle_send_result$0(r)
     {if(typeof r !== "number" && 1 === r[0])return cannot_send(r);return 0}
    function write_bigstring(t,buf,pos,len)
     {mark_responded(t);
      var _qP_=[0,caml_call1(_h_,len)],header=[1,[0,t[1],_qP_]];
      return handle_send_result$0
              (caml_call6(_b1_[10],t[2],Message[19],header,buf,pos,len))}
    function write_error(t,error)
     {mark_responded(t);
      var
       data=
        uncaught_exn
         (cst_server_side_raw_rpc_comput,caml_call1(Core_Error[26],error));
      return handle_send_result$0
              (caml_call3(_b1_[9],t[2],Message[19],[1,[0,t[1],data]]))}
    function write_bin_prot(t,bin_writer_a,a)
     {mark_responded(t);
      var
       _qM_=[1,[0,t[1],[0,a]]],
       _qN_=of_writer(bin_writer_a),
       _qO_=caml_call1(Message[4],_qN_);
      return handle_send_result$0(caml_call3(_b1_[9],t[2],_qO_,_qM_))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$37);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Implement$5);
    var
     _dP_=
      [0,[0,schedule,write_bigstring,write_bin_prot,write_error],create_exn],
     _dQ_=[0,sexp_of_t$14,handle_query,flush,stop],
     include$2=
      [0,
       close$2,
       closed,
       is_closed$1,
       write$0,
       write_without_pushback,
       flushed$0,
       bin_writer$0,
       [0,write$1,write_without_pushback$0]],
     Async_rpc_kernel_Implementatio$1=
      [0,
       create$1,
       null$0,
       lift$1,
       include$2,
       _dQ_,
       instantiate,
       create_exn,
       add,
       add_exn,
       descriptions$0,
       _dP_];
    caml_register_global
     (859,
      Async_rpc_kernel_Implementatio$1,
      "Async_rpc_kernel__Implementations");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Connectio);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$38);
    caml_call1(Expect_test_collector[5][1],cst_src_connection_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$39,cst$13);
    var
     _dR_=include$3[8],
     negotiate=caml_call1(include$3[12],1),
     v1=caml_call2(include$3[11],2,_dS_);
    function t_of_sexp$1(sexp_005)
     {if(0 === sexp_005[0])
       {var
         _qG_=sexp_005[1],
         _qH_=caml_string_compare(_qG_,cst_eof),
         switch$0=0;
        if(0 <= _qH_)
         if(0 < _qH_)
          if(caml_string_notequal(_qG_,cst_negotiated_unexpected_vers))
           if(caml_string_notequal(_qG_,cst_negotiation_failed))
            if(caml_string_notequal(_qG_,cst_reading_header_failed))
             if(caml_string_notequal(_qG_,cst_timeout))
              {if(! caml_string_notequal(_qG_,cst_transport_closed))
                switch$0 = 2}
             else
              switch$0 = 3;
            else
             switch$0 = 4;
           else
            switch$0 = 5;
          else
           switch$0 = 6;
         else
          switch$0 = 1;
        else
         if(caml_string_notequal(_qG_,cst_Eof$0))
          if(caml_string_notequal(_qG_,cst_Negotiated_unexpected_vers))
           if(caml_string_notequal(_qG_,cst_Negotiation_failed))
            if(caml_string_notequal(_qG_,cst_Reading_header_failed))
             if(caml_string_notequal(_qG_,cst_Timeout))
              {if(! caml_string_notequal(_qG_,cst_Transport_closed))
                switch$0 = 2}
             else
              switch$0 = 3;
            else
             switch$0 = 4;
           else
            switch$0 = 5;
          else
           switch$0 = 6;
         else
          switch$0 = 1;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_003$0,sexp_005);
          case 5:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_003$0,sexp_005);
          case 6:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_003$0,sexp_005)
          }}
      else
       {var _qI_=sexp_005[1];
        if(! _qI_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_003$0,sexp_005);
        var _qJ_=_qI_[1];
        if(0 !== _qJ_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_003$0,sexp_005);
        var _qK_=_qJ_[1],_qL_=caml_string_compare(_qK_,cst_eof$0),switch$1=0;
        if(0 <= _qL_)
         if(0 < _qL_)
          if(caml_string_notequal(_qK_,cst_negotiated_unexpected_vers$0))
           if(caml_string_notequal(_qK_,cst_negotiation_failed$0))
            if(caml_string_notequal(_qK_,cst_reading_header_failed$0))
             if(caml_string_notequal(_qK_,cst_timeout$0))
              {if(! caml_string_notequal(_qK_,cst_transport_closed$0))
                switch$1 = 5}
             else
              switch$1 = 6;
            else
             switch$1 = 1;
           else
            switch$1 = 2;
          else
           switch$1 = 3;
         else
          switch$1 = 4;
        else
         if(caml_string_notequal(_qK_,cst_Eof$1))
          if(caml_string_notequal(_qK_,cst_Negotiated_unexpected_vers$0))
           if(caml_string_notequal(_qK_,cst_Negotiation_failed$0))
            if(caml_string_notequal(_qK_,cst_Reading_header_failed$0))
             if(caml_string_notequal(_qK_,cst_Timeout$0))
              {if(! caml_string_notequal(_qK_,cst_Transport_closed$0))
                switch$1 = 5}
             else
              switch$1 = 6;
            else
             switch$1 = 1;
           else
            switch$1 = 2;
          else
           switch$1 = 3;
         else
          switch$1 = 4;
        switch(switch$1)
         {case 1:
           var sexp_args_007=_qI_[2];
           if(sexp_args_007 && ! sexp_args_007[2])
            {var
              arg0_008=sexp_args_007[1],
              res0_009=caml_call1(Core_Error[5],arg0_008);
             return [0,res0_009]}
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_003$0,
                    _qK_,
                    sexp_005);
          case 2:
           var sexp_args_012=_qI_[2];
           if(sexp_args_012 && ! sexp_args_012[2])
            {var
              arg0_013=sexp_args_012[1],
              res0_014=caml_call1(Core_Error[5],arg0_013);
             return [1,res0_014]}
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_003$0,
                    _qK_,
                    sexp_005);
          case 3:
           var sexp_args_017=_qI_[2];
           if(sexp_args_017 && ! sexp_args_017[2])
            {var
              arg0_018=sexp_args_017[1],
              res0_019=caml_call1(Core[357],arg0_018);
             return [2,res0_019]}
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_003$0,
                    _qK_,
                    sexp_005);
          case 4:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_005);
          case 5:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_005);
          case 6:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_005)
          }}
      return caml_call2
              (Sexplib0_Sexp_conv_error[8],error_source_003$0,sexp_005)}
    function sexp_of_t$15(param)
     {if(typeof param === "number")
       switch(param)
        {case 0:return _dT_;case 1:return _dU_;default:return _dV_}
      switch(param[0])
       {case 0:
         var arg0_020=param[1],res0_021=caml_call1(Core_Error[6],arg0_020);
         return [1,[0,_dW_,[0,res0_021,0]]];
        case 1:
         var arg0_022=param[1],res0_023=caml_call1(Core_Error[6],arg0_022);
         return [1,[0,_dX_,[0,res0_023,0]]];
        default:
         var arg0_024=param[1],res0_025=caml_call1(Core[356],arg0_024);
         return [1,[0,_dY_,[0,res0_025,0]]]}}
    var T=[0,t_of_sexp$1,sexp_of_t$15],_dZ_=T[2];
    caml_call1(Core_Sexpable[1],T);
    var
     Handshake_error=
      [248,cst_Async_rpc_kernel_Connectio$0,caml_fresh_oo_id(0)];
    function _d0_(param)
     {if(param[1] !== Handshake_error)throw [0,Assert_failure,_d2_];
      var
       arg0_030=param[2],
       arg1_027=arg0_030[2],
       arg0_026=arg0_030[1],
       res0_028=caml_call1(_dZ_,arg0_026),
       res1_029=caml_call1(Core_Info[6],arg1_027),
       res0_031=[1,[0,res0_028,[0,res1_029,0]]];
      return [1,[0,_d1_,[0,res0_031,0]]]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Handshake_error,_d0_);
    function t_of_sexp$2(sexp_033)
     {if(0 === sexp_033[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_046,sexp_033);
      var
       field_sexps_034=sexp_033[1],
       timeout_035=[0,0],
       send_every_037=[0,0],
       duplicates_039=[0,0],
       extra_040=[0,0],
       param=field_sexps_034;
      for(;;)
       {if(param)
         {var _qy_=param[1];
          if(1 === _qy_[0])
           {var _qz_=_qy_[1];
            if(_qz_)
             {var _qA_=_qz_[1];
              if(0 === _qA_[0])
               {var _qB_=_qz_[2],_qC_=_qA_[1],switch$0=0;
                if(! _qB_ || ! _qB_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_048=param[2],
                   field_sexp_042$2=
                    function(_qF_)
                     {function field_sexp_042(param)
                       {if(! _qF_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_046,sexp_033);
                        if(_qF_[2])throw [0,Assert_failure,_d3_];
                        var x_049=_qF_[1];
                        return x_049}
                      return field_sexp_042},
                   field_sexp_042=field_sexp_042$2(_qB_);
                  if(caml_string_notequal(_qC_,cst_send_every))
                   if(caml_string_notequal(_qC_,cst_timeout$1))
                    {if(Sexplib0_Sexp_conv[26][1])
                      extra_040[1] = [0,_qC_,extra_040[1]]}
                   else
                    if(timeout_035[1])
                     duplicates_039[1] = [0,_qC_,duplicates_039[1]];
                    else
                     {var
                       field_sexp_042$0=field_sexp_042(0),
                       fvalue_045=caml_call1(Core_Time_ns[1][9],field_sexp_042$0);
                      timeout_035[1] = [0,fvalue_045]}
                  else
                   if(send_every_037[1])
                    duplicates_039[1] = [0,_qC_,duplicates_039[1]];
                   else
                    {var
                      field_sexp_042$1=field_sexp_042(0),
                      fvalue_044=caml_call1(Core_Time_ns[1][9],field_sexp_042$1);
                     send_every_037[1] = [0,fvalue_044]}
                  var param=tail_048;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_046,_qy_)}
        if(duplicates_039[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_046,
                  duplicates_039[1],
                  sexp_033);
        if(extra_040[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_046,
                  extra_040[1],
                  sexp_033);
        var _qD_=timeout_035[1],_qE_=send_every_037[1];
        if(_qD_ && _qE_)
         {var send_every_038=_qE_[1],timeout_036=_qD_[1];
          return [0,timeout_036,send_every_038]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_046,
                 sexp_033,
                 [0,
                  [0,0 === timeout_035[1]?1:0,cst_timeout$2],
                  [0,[0,0 === send_every_037[1]?1:0,cst_send_every$0],0]])}}
    function sexp_of_t$16(param)
     {var
       send_every_053=param[2],
       timeout_051=param[1],
       arg_054=caml_call1(Core_Time_ns[1][10],send_every_053),
       bnds_050=[0,[1,[0,_d4_,[0,arg_054,0]]],0],
       arg_052=caml_call1(Core_Time_ns[1][10],timeout_051),
       bnds_050$0=[0,[1,[0,_d5_,[0,arg_052,0]]],bnds_050];
      return [1,bnds_050$0]}
    var
     _d6_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_timeout$3,Core_Time_ns[1][5]],
         [0,[0,cst_send_every$1,Core_Time_ns[1][5]],0]]),
     _d7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$11),0,_d6_],0],
     _d8_=caml_call1(Bin_prot_Shape[4][1],cst_src_connection_ml_41_2),
     group$9=caml_call2(Bin_prot_Shape[6],_d8_,_d7_),
     _d9_=caml_call1(Bin_prot_Shape[2][1],cst_t$12),
     bin_shape_t$5=caml_call1(caml_call2(Bin_prot_Shape[14],group$9,_d9_),0);
    function bin_size_t$4(param)
     {var
       v2=param[2],
       v1=param[1],
       _qw_=caml_call1(Core_Time_ns[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_qw_),
       _qx_=caml_call1(Core_Time_ns[1][1],v2);
      return caml_call2(Bin_prot_Common[23],size,_qx_)}
    function bin_write_t$4(buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Core_Time_ns[1][2],buf,pos,v1);
      return caml_call3(Core_Time_ns[1][2],buf,pos$0,v2)}
    var bin_writer_t$4=[0,bin_size_t$4,bin_write_t$4];
    function bin_read_t$20(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_connection_ml_Heartbea,pos_ref[1])}
    function bin_read_t$21(buf,pos_ref)
     {var
       v_timeout=caml_call2(Core_Time_ns[1][3],buf,pos_ref),
       v_send_every=caml_call2(Core_Time_ns[1][3],buf,pos_ref);
      return [0,v_timeout,v_send_every]}
    var
     bin_reader_t$9=[0,bin_read_t$21,bin_read_t$20],
     bin_t$4=[0,bin_shape_t$5,bin_writer_t$4,bin_reader_t$9];
    function send_every(r){return r[2]}
    function timeout(r){return r[1]}
    function create$2(opt,_qv_,param)
     {if(opt)
       var sth=opt[1],timeout=sth;
      else
       var timeout=caml_call1(Core_Time_ns[1][81],30.);
      if(_qv_)
       var sth$0=_qv_[1],send_every=sth$0;
      else
       var send_every=caml_call1(Core_Time_ns[1][81],10.);
      return [0,timeout,send_every]}
    function sexp_of_t$17(param)
     {var
       heartbeat_config_063=param[2],
       description_061=param[1],
       heartbeat_callbacks_065=param[3],
       last_seen_alive_067=param[4],
       heartbeat_event_083=param[12],
       time_source_081=param[11],
       implementations_instance_079=param[10],
       close_finished_077=param[9],
       close_started_075=param[8],
       open_queries_073=param[7],
       writer_071=param[6],
       reader_069=param[5],
       arg_084=
        caml_call2
         (Core_Set_once[1],
          Async_kernel_Synchronous_time_[19][1],
          heartbeat_event_083),
       bnds_060=[0,[1,[0,_ea_,[0,arg_084,0]]],0],
       arg_082=caml_call1(Async_kernel_Synchronous_time_[4],time_source_081),
       bnds_060$0=[0,[1,[0,_eb_,[0,arg_082,0]]],bnds_060],
       arg_080=
        caml_call2(Core_Set_once[1],_dQ_[1],implementations_instance_079),
       bnds_060$1=[0,[1,[0,_ec_,[0,arg_080,0]]],bnds_060$0],
       arg_078=caml_call2(Async_kernel_Ivar[9],Core[518],close_finished_077),
       bnds_060$2=[0,[1,[0,_ed_,[0,arg_078,0]]],bnds_060$1],
       arg_076=caml_call2(Async_kernel_Ivar[9],Core_Info[6],close_started_075),
       bnds_060$3=[0,[1,[0,_ee_,[0,arg_076,0]]],bnds_060$2],
       arg_074=
        caml_call3
         (Core_Hashtbl[3],
          Query_id[10],
          Sexplib0_Sexp_conv[23],
          open_queries_073),
       bnds_060$4=[0,[1,[0,_ef_,[0,arg_074,0]]],bnds_060$3],
       arg_072=caml_call1(_b1_[1],writer_071),
       bnds_060$5=[0,[1,[0,_eg_,[0,arg_072,0]]],bnds_060$4],
       arg_070=caml_call1(_b2_[1],reader_069),
       bnds_060$6=[0,[1,[0,_eh_,[0,arg_070,0]]],bnds_060$5],
       arg_068=caml_call1(Core_Time_ns_alternate_sexp[92],last_seen_alive_067),
       bnds_060$7=[0,[1,[0,_ei_,[0,arg_068,0]]],bnds_060$6];
      function _qs_(param)
       {function _qt_(_qu_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_qt_)}
      var
       arg_066=caml_call2(Core[288],_qs_,heartbeat_callbacks_065),
       bnds_060$8=[0,[1,[0,_ej_,[0,arg_066,0]]],bnds_060$7],
       timeout_056=heartbeat_config_063[1],
       send_every_058=heartbeat_config_063[2],
       arg_059=caml_call1(Core_Time_ns[1][10],send_every_058),
       bnds_055=[0,[1,[0,_d__,[0,arg_059,0]]],0],
       arg_057=caml_call1(Core_Time_ns[1][10],timeout_056),
       bnds_055$0=[0,[1,[0,_d$_,[0,arg_057,0]]],bnds_055],
       arg_064=[1,bnds_055$0],
       bnds_060$9=[0,[1,[0,_ek_,[0,arg_064,0]]],bnds_060$8],
       arg_062=caml_call1(Core_Info[6],description_061),
       bnds_060$10=[0,[1,[0,_el_,[0,arg_062,0]]],bnds_060$9];
      return [1,bnds_060$10]}
    function sexp_of_t_hum_writer(t)
     {var _qr_=[0,[1,[0,_em_,[0,caml_call1(_b1_[1],t[6]),0]]],0];
      return [1,[0,[1,[0,_en_,[0,caml_call1(Core_Info[6],t[1]),0]]],_qr_]]}
    function description$0(t){return t[1]}
    function is_closed$2(t){return caml_call1(Async_kernel_Ivar[17],t[8])}
    function writer(t)
     {if(! is_closed$2(t) && caml_call1(_b1_[13],t[6]))return [0,t[6]];
      return _eo_}
    function bytes_to_write$0(t){return caml_call1(_b1_[5],t[6])}
    function flushed$1(t){return caml_call1(_b1_[7],t[6])}
    function handle_send_result$1(t,r)
     {if(typeof r === "number")
       return caml_call5
               (Core[236],
                0,
                _ep_,
                cst_RPC_connection_got_closed_,
                t,
                sexp_of_t_hum_writer);
      if(0 === r[0]){var x=r[1];return x}
      var _ql_=0,_qm_=[0,[1,[0,_eq_,[0,sexp_of_t_hum_writer(t),0]]],0],_qn_=0;
      function _qo_(param){return _er_}
      var
       _qp_=
        [0,
         [1,[0,[1,[0,_es_,[0,caml_call2(Send_result[2],_qo_,r),_qn_]]],_qm_]],
         _ql_],
       _qq_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_Message_cannot_be_sent$0),
          _qp_]];
      return caml_call1(Core[253],_qq_)}
    function dispatch(t,response_handler,bin_writer_query,query)
     {var r=writer(t);
      if(0 !== r[0])return r;
      var writer$0=r[1];
      function _qi_(response_handler)
       {return caml_call3(Core_Hashtbl[34],t[7],query[3],response_handler)}
      caml_call2(Core_Option[41],response_handler,_qi_);
      var _qj_=of_writer(bin_writer_query),_qk_=caml_call1(Message[4],_qj_);
      handle_send_result$1(t,caml_call3(_b1_[9],writer$0,_qk_,[0,query]));
      return _et_}
    function make_dispatch_bigstring
     (do_send,t,tag,version,buf,pos,len,response_handler)
     {var match=writer(t);
      if(0 !== match[0])return _eu_;
      var
       writer$0=match[1],
       id=caml_call1(Query_id[45],0),
       header=[0,[0,tag,version,id,caml_call1(_h_,len)]];
      function _qh_(response_handler)
       {return caml_call3(Core_Hashtbl[34],t[7],id,response_handler)}
      caml_call2(Core_Option[41],response_handler,_qh_);
      var
       result=
        handle_send_result$1
         (t,caml_call6(do_send,writer$0,Message[19],header,buf,pos,len));
      return [0,result]}
    var _ev_=_b1_[10];
    function dispatch_bigstring(_qa_,_qb_,_qc_,_qd_,_qe_,_qf_,_qg_)
     {return make_dispatch_bigstring(_ev_,_qa_,_qb_,_qc_,_qd_,_qe_,_qf_,_qg_)}
    var _ew_=_b1_[11];
    function schedule_dispatch_bigstring(_p5_,_p6_,_p7_,_p8_,_p9_,_p__,_p$_)
     {return make_dispatch_bigstring(_ew_,_p5_,_p6_,_p7_,_p8_,_p9_,_p__,_p$_)}
    function close_reason(t,on_close)
     {var reason=caml_call1(Async_kernel_Ivar[18],t[8]);
      if(890972481 <= on_close)return reason;
      function _p3_(param){return reason}
      var _p4_=caml_call1(Async_kernel_Ivar[18],t[9]);
      return caml_call2(Async_kernel[22][2],_p4_,_p3_)}
    function close_finished(t){return caml_call1(Async_kernel_Ivar[18],t[9])}
    function add_heartbeat_callback(t,f)
     {t[3] = caml_call2(Core_Array[43],[0,f],t[3]);return 0}
    function reset_heartbeat_timeout(t,timeout)
     {t[2][1] = timeout;
      t[4] = caml_call1(Async_kernel_Synchronous_time_[12],t[11]);
      return 0}
    function last_seen_alive(t){return t[4]}
    function close$3(opt,reason,t)
     {if(opt)
       var sth=opt[1],streaming_responses_flush_time=sth;
      else
       var streaming_responses_flush_time=caml_call1(Core_Time_ns[1][82],5);
      if(1 - is_closed$2(t))
       {var
         _pQ_=
          function(event)
           {var
             match=
              caml_call2(Async_kernel_Synchronous_time_[19][8],t[11],event);
            if(1 !== match)return 0;
            function _p2_(param)
             {return caml_call2
                      (Async_kernel_Synchronous_time_[19][9],t[11],event)}
            return caml_call3
                    (Async_kernel_Synchronous_time_[15],
                     t[11],
                     Core_Time_ns[1][75],
                     _p2_)},
         _pR_=caml_call1(Core_Set_once[7],t[12]);
        caml_call2(Core_Option[41],_pR_,_pQ_);
        caml_call2(Async_kernel_Ivar[14],t[8],reason);
        var
         _pS_=
          function(param)
           {function _pY_(param)
             {function _p0_(param)
               {return caml_call2(Async_kernel_Ivar[14],t[9],0)}
              var _p1_=caml_call1(_b2_[2],t[5]);
              return caml_call2(Async_kernel[16],_p1_,_p0_)}
            var _pZ_=caml_call1(_b1_[2],t[6]);
            return caml_call2(Async_kernel[16],_pZ_,_pY_)},
         match=caml_call1(Core_Set_once[7],t[10]);
        if(match)
         {var instance=match[1],flushed=caml_call1(_dQ_[3],instance);
          if(caml_call1(Async_kernel_Deferred[7],flushed))
           {caml_call1(_dQ_[4],instance);var flushed$0=flushed}
          else
           var
            _pT_=function(param){return caml_call1(_dQ_[4],instance)},
            _pU_=caml_call1(Async_kernel_Time_source[39],t[11]),
            _pV_=
             [0,
              caml_call2
               (Async_kernel_Time_source[29],
                _pU_,
                streaming_responses_flush_time),
              0],
            _pW_=[0,flushed,[0,caml_call1(_b1_[6],t[6]),_pV_]],
            _pX_=caml_call1(Async_kernel_Deferred[24],_pW_),
            flushed$0=caml_call2(Async_kernel[22][3],_pX_,_pT_);
          var flushed$1=flushed$0}
        else
         var flushed$1=Async_kernel_Deferred[18];
        caml_call2(Async_kernel[16],flushed$1,_pS_)}
      return close_finished(t)}
    var default_handshake_timeout=caml_call1(Core_Time_ns[1][81],30.);
    function cleanup(t,reason,exn)
     {var _pM_=close$3(0,reason,t);
      caml_call1(Async_kernel[6],_pM_);
      var _pN_=1 - caml_call1(Core_Hashtbl[29],t[7]);
      if(_pN_)
       {if(exn[1] === Rpc)
         var error=exn[2],error$0=error;
        else
         var error$0=[2,caml_call1(Base_Exn[1],exn)];
        var
         dummy_buffer=caml_call2(Core_Bigstring[115],0,1),
         dummy_ref=[0,0],
         _pO_=
          function(query_id,response_handler)
           {caml_call3
             (response_handler,
              [0,query_id,[1,error$0]],
              dummy_buffer,
              dummy_ref);
            return 0};
        caml_call2(Core_Hashtbl[21],t[7],_pO_);
        caml_call1(Core_Hashtbl[16],t[7]);
        var _pP_=runtime.bigstring_destroy_stub(dummy_buffer)}
      else
       var _pP_=_pN_;
      return _pP_}
    var contains_magic_prefix=caml_call1(include$3[13],2);
    function create$3
     (implementations,connection_state,opt,_oR_,_oQ_,_oP_,param)
     {if(opt)
       var sth=opt[1],handshake_timeout=sth;
      else
       var handshake_timeout=default_handshake_timeout;
      if(_oR_)
       var sth$0=_oR_[1],heartbeat_config=sth$0;
      else
       var heartbeat_config=create$2(0,0,0);
      if(_oQ_)
       var sth$1=_oQ_[1],description=sth$1;
      else
       var description=caml_call1(Core_Info[12],cst_created_directly);
      if(_oP_)
       var sth$2=_oP_[1],time_source=sth$2;
      else
       var time_source=caml_call1(Async_kernel_Synchronous_time_[21],0);
      var writer$1=param[2],reader=param[1];
      if(implementations)
       var s=implementations[1],implementations$0=s;
      else
       var implementations$0=null$0(0);
      var
       _oS_=caml_call1(Core_Set_once[3],0),
       _oT_=caml_call1(Core_Set_once[3],0),
       _oU_=caml_call1(Async_kernel_Ivar[12],0),
       _oV_=caml_call1(Async_kernel_Ivar[12],0),
       _oW_=caml_call3(Core_Hashtbl[85][14],0,_eM_,0),
       _oX_=caml_call1(Async_kernel_Synchronous_time_[12],time_source),
       send_every=heartbeat_config[2],
       timeout=heartbeat_config[1],
       t=
        [0,
         description,
         [0,timeout,send_every],
         [0],
         _oX_,
         reader,
         writer$1,
         _oW_,
         _oV_,
         _oU_,
         _oT_,
         time_source,
         _oS_],
       _oY_=caml_call1(_b1_[4],writer$1),
       writer_monitor_exns=caml_call1(Async_kernel_Monitor[9],_oY_);
      function _oZ_(param)
       {var
         _pL_=
          close$3(0,caml_call1(Core_Info[12],cst_RPC_transport_stopped),t);
        return caml_call1(Async_kernel[6],_pL_)}
      var _o0_=caml_call1(_b1_[6],writer$1);
      caml_call2(Async_kernel[12],_o0_,_oZ_);
      function _o1_(param)
       {if(0 === param[0])
         {var
           _o8_=t[6],
           _o9_=caml_call1(connection_state,t),
           _o__=caml_call1(Async_kernel_Ivar[18],t[8]),
           instance=instantiate(implementations$0,t[1],_o__,_o9_,_o8_);
          caml_call3(Core_Set_once[5],t[10],_eB_,instance);
          var
           close_connection_monitor=
            caml_call4(Async_kernel_Monitor[3],0,0,_eC_,0),
           _o$_=
            function(exn)
             {var
               _pI_=[0,[1,[0,_eD_,[0,caml_call1(Base_Exn[1],exn),0]]],0],
               _pJ_=
                [1,
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7],cst_Uncaught_exception_in_impl),
                  _pI_]],
               reason=caml_call1(Core_Info[18],_pJ_),
               _pK_=close$3(0,reason,t);
              return caml_call1(Async_kernel[6],_pK_)};
          caml_call2(Async_kernel_Monitor[7],close_connection_monitor,_o$_);
          var
           monitor=caml_call4(Async_kernel_Monitor[3],0,0,_eE_,0),
           reason=
            function(name,exn)
             {var
               _pG_=caml_call2(Core[18],cst_exn_raised_in_RPC_connecti,name),
               _pH_=caml_call2(Core_Info[25],0,exn);
              return [0,exn,caml_call2(Core_Info[20],_pH_,_pG_)]},
           _pa_=
            function(param)
             {var reason=param[2],exn=param[1];return cleanup(t,reason,exn)},
           _pb_=0,
           _pc_=function(_pF_){return reason(cst_Writer_t,_pF_)},
           _pd_=
            [0,
             caml_call2
              (Async_kernel_Async_stream[25],writer_monitor_exns,_pc_),
             _pb_],
           _pe_=function(_pE_){return reason(cst_loop,_pE_)},
           _pf_=caml_call1(Async_kernel_Monitor[9],monitor),
           _pg_=[0,caml_call2(Async_kernel_Async_stream[25],_pf_,_pe_),_pd_],
           _ph_=caml_call1(Async_kernel_Async_stream[5],_pg_),
           _pi_=caml_call1(Async_kernel_Async_stream[31],_ph_);
          caml_call2(Async_kernel_Async_stream[18],_pi_,_pa_);
          var
           _pj_=
            function(param)
             {t[4] = caml_call1(Async_kernel_Synchronous_time_[12],t[11]);
              function _pl_(param)
               {var
                 _py_=t[4],
                 _pz_=caml_call1(Async_kernel_Synchronous_time_[12],t[11]),
                 since_last_heartbeat=
                  caml_call2(Core_Time_ns_alternate_sexp[57],_pz_,_py_);
                if
                 (caml_call2(Core_Time_ns[1][18],since_last_heartbeat,t[2][1]))
                 {var
                   reason=
                    function(param)
                     {var
                       _pB_=t[2][1],
                       _pC_=
                        [0,
                         [11,
                          cst_No_heartbeats_received_for$0,
                          [24,
                           _ez_,
                           function(param,custom_printf_088)
                            {var _pD_=caml_call1(Core_Time_ns[1][10],custom_printf_088);
                             return caml_call2(Ppx_sexp_conv_lib[1][13],0,_pD_)},
                           _ey_]],
                         cst_No_heartbeats_received_for];
                      return caml_call2(Core[257],_pC_,_pB_)},
                   _pA_=close$3(0,caml_call1(Core_Info[15],reason),t);
                  return caml_call1(Async_kernel[6],_pA_)}
                var match=writer(t);
                if(0 !== match[0])return 0;
                var writer$0=match[1];
                return handle_send_result$1
                        (t,caml_call3(_b1_[9],writer$0,Message[19],0))}
              var
               heartbeat_from_now_on=
                caml_call3
                 (Async_kernel_Synchronous_time_[19][6],t[11],t[2][2],_pl_);
              caml_call3(Core_Set_once[5],t[12],_eA_,heartbeat_from_now_on);
              function _pm_(param)
               {if(0 === param[0])
                 {var reason=param[1];return cleanup(t,reason,[0,Rpc,0,t[1]])}
                var _px_=[0,Rpc,0,t[1]];
                return cleanup
                        (t,
                         caml_call1(Core_Info[12],cst_EOF_or_connection_closed),
                         _px_)}
              function _pn_(param)
               {t[4] = caml_call1(Async_kernel_Synchronous_time_[12],t[11]);
                return 0}
              function f(buf,pos,param)
               {var
                 read_buffer_pos_ref=[0,pos],
                 msg$0=caml_call2(Message[15],buf,read_buffer_pos_ref);
                if(typeof msg$0 === "number")
                 {var _pr_=function(f){return caml_call1(f,0)};
                  caml_call2(Core_Array[22],t[3],_pr_);
                  var res=0}
                else
                 if(0 === msg$0[0])
                  var
                   query=msg$0[1],
                   instance=caml_call2(Core_Set_once[8],t[10],_ex_),
                   res=
                    caml_call5
                     (_dQ_[2],
                      instance,
                      query,
                      buf,
                      read_buffer_pos_ref,
                      close_connection_monitor);
                 else
                  {var
                    response=msg$0[1],
                    match=caml_call2(Core_Hashtbl[53],t[7],response[1]);
                   if(match)
                    {var
                      response_handler=match[1],
                      match$0=
                       caml_call3
                        (response_handler,response,buf,read_buffer_pos_ref);
                     if(typeof match$0 === "number")
                      var _ps_=0;
                     else
                      {var _pq_=match$0[1];
                       if(-286555464 === _pq_)
                        {var wait=match$0[2];
                         caml_call2(Core_Hashtbl[31],t[7],response[1]);
                         var _ps_=[1,wait]}
                       else
                        if(76061764 <= _pq_)
                         {var removal_circumstances=match$0[2];
                          caml_call2(Core_Hashtbl[31],t[7],response[1]);
                          if(0 === removal_circumstances[0])
                           var _ps_=0;
                          else
                           {var e=removal_circumstances[1],switch$0=0;
                            if(typeof e === "number" || ! (3 === e[0]))
                             switch$0 = 1;
                            else
                             var _ps_=0;
                            if(switch$0)var _ps_=[0,[1,e]]}}
                        else
                         var wait$0=match$0[2],_ps_=[1,wait$0]}}
                   else
                    var _ps_=[0,[1,[4,response[1]]]];
                   var res=_ps_}
                if(typeof res === "number")return 0;
                if(0 !== res[0])return res;
                var result=res[1];
                if(0 === result[0])
                 var reason=caml_call1(Core_Info[12],msg);
                else
                 var
                  e$0=result[1],
                  _pu_=
                   function(param)
                    {return caml_call1
                             (Sexplib0_Sexp_conv[7],cst_Connection_on_message_resu)},
                  _pv_=function(_pw_){return sexp_of_t$13(_pw_,_pu_)},
                  reason=caml_call5(Core_Info[17],0,0,msg,e$0,_pv_);
                var _pt_=close$3(0,reason,t);
                caml_call1(Async_kernel[6],_pt_);
                return [0,reason]}
              var
               _pk_=caml_call1(Base_Staged[1],f),
               _po_=caml_call1(Base_Staged[2],_pk_),
               _pp_=caml_call3(_b2_[4],t[5],_po_,_pn_);
              return caml_call2(Async_kernel[16],_pp_,_pm_)};
          caml_call3(Async_kernel[14],[0,monitor],0,_pj_);
          return [0,t]}
        var error=param[1];
        return [1,[0,Handshake_error,[0,error,description]]]}
      var match=writer(t);
      if(0 === match[0])
       {var writer$0=match[1];
        handle_send_result$1(t,caml_call3(_b1_[9],writer$0,_dR_[2],v1));
        var
         _oL_=function(param){return caml_call2(_b2_[6],t[5],_dR_[3])},
         result=caml_call7(Async_kernel_Monitor[16],0,0,0,0,_eG_,_eF_,_oL_),
         _oM_=
          function(param)
           {if(typeof param === "number")
             {var
               _o3_=
                close$3(0,caml_call1(Core_Info[12],cst_Handshake_timeout),t);
              caml_call1(Async_kernel[6],_o3_);
              return _eH_}
            var _o4_=param[2];
            if(0 !== _o4_[0])
             {var
               exn=_o4_[1],
               reason=caml_call1(Core_Info[12],cst_Reader_read_one_message_bi),
               _o7_=close$3(0,reason,t);
              caml_call1(Async_kernel[6],_o7_);
              return [1,[0,caml_call2(Core_Error[25],0,exn)]]}
            var _o5_=_o4_[1];
            if(0 !== _o5_[0])return 3456156 <= _o5_[1]?_eJ_:_eK_;
            var peer=_o5_[1],match=caml_call2(negotiate,v1,peer);
            if(0 === match[0])
             {var _o6_=match[1];return 1 === _o6_?_eI_:[1,[2,_o6_]]}
            var e=match[1];
            return [1,[1,e]]},
         _oN_=caml_call1(Async_kernel_Time_source[39],t[11]),
         _oO_=
          caml_call3
           (Async_kernel_Time_source[30],_oN_,handshake_timeout,result),
         _o2_=caml_call2(Async_kernel[22][3],_oO_,_oM_)}
      else
       var _o2_=caml_call1(Async_kernel[19],_eL_);
      return caml_call2(Async_kernel[22][3],_o2_,_o1_)}
    function with_close
     (implementations,
      handshake_timeout,
      heartbeat_config,
      description,
      time_source,
      connection_state,
      transport,
      dispatch_queries,
      on_handshake_error)
     {if(typeof on_handshake_error === "number")
       var handle_handshake_error=function(_oK_){throw _oK_};
      else
       var f=on_handshake_error[2],handle_handshake_error=f;
      function _oA_(t)
       {if(0 === t[0])
         {var
           t$0=t[1],
           _oC_=
            function(param)
             {return close$3
                      (0,
                       caml_call1(Core_Info[12],cst_Rpc_Connection_with_close_),
                       t$0)},
           _oD_=
            function(param)
             {function _oG_(result)
               {function _oI_(param){return result}
                var
                 _oJ_=
                  implementations
                   ?close_finished(t$0)
                   :Async_kernel_Deferred[18];
                return caml_call2(Async_kernel[22][3],_oJ_,_oI_)}
              var _oH_=caml_call1(dispatch_queries,t$0);
              return caml_call2(Async_kernel[22][2],_oH_,_oG_)};
          return caml_call8
                  (Async_kernel_Monitor[23],0,0,0,0,_eO_,_eN_,_oD_,_oC_)}
        var e=t[1];
        function _oE_(param){return caml_call1(handle_handshake_error,e)}
        var _oF_=close$1(transport);
        return caml_call2(Async_kernel[22][2],_oF_,_oE_)}
      var
       _oB_=
        create$3
         (implementations,
          connection_state,
          handshake_timeout,
          heartbeat_config,
          description,
          time_source,
          transport);
      return caml_call2(Async_kernel[22][2],_oB_,_oA_)}
    function server_with_close
     (handshake_timeout,
      heartbeat_config,
      description,
      time_source,
      transport,
      implementations,
      connection_state,
      on_handshake_error)
     {if(typeof on_handshake_error === "number")
       var
        on_handshake_error$0=
         -146189108 <= on_handshake_error
          ?-146189108
          :[0,747848894,function(param){return Async_kernel_Deferred[18]}];
      else
       var f=on_handshake_error[2],on_handshake_error$0=[0,747848894,f];
      return with_close
              ([0,implementations],
               handshake_timeout,
               heartbeat_config,
               description,
               time_source,
               connection_state,
               transport,
               function(param){return Async_kernel_Deferred[18]},
               on_handshake_error$0)}
    function close$4(streaming_responses_flush_time,opt,t)
     {if(opt)
       var sth=opt[1],reason=sth;
      else
       var reason=caml_call1(Core_Info[12],cst_Rpc_Connection_close);
      return close$3(streaming_responses_flush_time,reason,t)}
    function null$1(param)
     {var _oz_=null$0(0);return [0,function(param){return 0},_oz_]}
    var Client_implementations=[0,null$1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$40);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Connectio$1);
    var
     _eP_=
      [0,
       t_of_sexp$2,
       sexp_of_t$16,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$21,
       bin_read_t$20,
       bin_shape_t$5,
       bin_writer_t$4,
       bin_reader_t$9,
       bin_t$4,
       create$2,
       timeout,
       send_every],
     Async_rpc_kernel_Connection=
      [0,
       sexp_of_t$17,
       _eP_,
       Client_implementations,
       create$3,
       contains_magic_prefix,
       description$0,
       add_heartbeat_callback,
       reset_heartbeat_timeout,
       last_seen_alive,
       close$4,
       close_finished,
       close_reason,
       is_closed$2,
       bytes_to_write$0,
       flushed$1,
       with_close,
       server_with_close,
       dispatch,
       dispatch_bigstring,
       schedule_dispatch_bigstring,
       default_handshake_timeout];
    caml_register_global
     (871,Async_rpc_kernel_Connection,"Async_rpc_kernel__Connection");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Connectio$2);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$41);
    caml_call1(Expect_test_collector[5][1],cst_src_connection_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$42,cst$14);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$43);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Connectio$3);
    var Async_rpc_kernel_Connection_in=[0];
    caml_register_global
     (872,Async_rpc_kernel_Connection_in,"Async_rpc_kernel__Connection_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Rpc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$44);
    caml_call1(Expect_test_collector[5][1],cst_src_rpc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$45,cst$15);
    var symbol$6=Core_Result[15],symbol$7=Core_Result[16];
    function dispatch_raw
     (conn,tag,version,bin_writer_query,query,query_id,response_handler)
     {var
       query$0=[0,tag,version,query_id,query],
       match=dispatch(conn,response_handler,bin_writer_query,query$0);
      return 0 === match[0]?_eQ_:_eR_}
    function dispatch_raw$0
     (conn,tag,version,bin_writer_query,query,query_id,f)
     {var
       response_ivar=caml_call1(Async_kernel_Ivar[12],0),
       e=
        dispatch_raw
         (conn,
          tag,
          version,
          bin_writer_query,
          query,
          query_id,
          [0,caml_call1(f,response_ivar)]);
      if(0 !== e[0])caml_call2(Async_kernel_Ivar[14],response_ivar,e);
      return caml_call1(Async_kernel_Ivar[18],response_ivar)}
    function shapes(lst)
     {function _ow_(param)
       {var
         shape=param[2],
         name=param[1],
         _ox_=caml_call1(Bin_prot_Shape[22],shape),
         _oy_=[0,caml_call1(Core[471],_ox_),0];
        return [1,[0,caml_call1(Core[471],name),_oy_]]}
      return [1,caml_call2(Core_List[72],lst,_ow_)]}
    function create$4(name,version,bin_query,bin_response)
     {var
       _os_=Core[150],
       _ot_=caml_call2(Stdlib_String[6],cst$16,[0,name,_eS_]),
       query_type_id=caml_call2(Core_Type_equal[8][3],_ot_,_os_),
       _ou_=Core[150],
       _ov_=caml_call2(Stdlib_String[6],cst$17,[0,name,_eT_]),
       response_type_id=caml_call2(Core_Type_equal[8][3],_ov_,_ou_);
      return [0,
              caml_call1(Rpc_tag[11],name),
              version,
              bin_query,
              bin_response,
              query_type_id,
              response_type_id]}
    function name(t){return caml_call1(Rpc_tag[12],t[1])}
    function version(t){return t[2]}
    function description$1(t){var _or_=t[2];return [0,name(t),_or_]}
    function query_type_id(t){return t[5]}
    function response_type_id(t){return t[6]}
    function bin_query(t){return t[3]}
    function bin_response(t){return t[4]}
    function shapes$0(t)
     {return shapes
              ([0,[0,cst_query,t[3][1]],[0,[0,cst_response$1,t[4][1]],0]])}
    function implement(opt,t,f)
     {if(opt)var sth=opt[1],on_exception=sth;else var on_exception=continue$0;
      var _op_=[246,function(_oq_){return shapes$0(t)}];
      return [0,t[1],t[2],[2,t[3][3],t[4][2],f,1],_op_,on_exception]}
    function implement$0(opt,t,f)
     {if(opt)var sth=opt[1],on_exception=sth;else var on_exception=continue$0;
      var _on_=[246,function(_oo_){return shapes$0(t)}];
      return [0,t[1],t[2],[2,t[3][3],t[4][2],f,0],_on_,on_exception]}
    function dispatch$0(t,conn,query)
     {function response_handler(ivar,response,read_buffer,read_buffer_pos_ref)
       {function _om_(len)
         {return bin_read_from_bigstring
                  (t[4][3],
                   0,
                   read_buffer,
                   read_buffer_pos_ref,
                   len,
                   cst_client_side_rpc_response_u)}
        var response$0=caml_call2(symbol$6,response[2],_om_);
        caml_call2(Async_kernel_Ivar[14],ivar,response$0);
        return _eU_}
      var query_id=caml_call1(Query_id[45],0);
      return dispatch_raw$0
              (conn,t[1],t[2],t[3][2],query,query_id,response_handler)}
    function rpc_result_to_or_error(t,conn,result)
     {var _ok_=close_reason(conn,890972481),_ol_=conn[1];
      return caml_call1(or_error(description$1(t),_ol_,_ok_),result)}
    function dispatch$1(t,conn,query)
     {function _oi_(result){return rpc_result_to_or_error(t,conn,result)}
      var _oj_=dispatch$0(t,conn,query);
      return caml_call2(Async_kernel[22][3],_oj_,_oi_)}
    function dispatch_exn(t,conn,query)
     {var _og_=Core_Or_error[36],_oh_=dispatch$1(t,conn,query);
      return caml_call2(Async_kernel[21],_oh_,_og_)}
    function make_dispatch
     (do_dispatch,
      conn,
      rpc_tag,
      version,
      buf,
      pos,
      len,
      handle_response,
      handle_error)
     {function response_handler(response,read_buffer,read_buffer_pos_ref)
       {var _od_=response[2];
        if(0 === _od_[0])
         {var
           len=_od_[1],
           d=
            caml_call3(handle_response,read_buffer,read_buffer_pos_ref[1],len);
          read_buffer_pos_ref[1] = read_buffer_pos_ref[1] + len | 0;
          return caml_call1(Async_kernel_Deferred[7],d)?_eV_:[0,-286555464,d]}
        var
         e=_od_[1],
         _oe_=
          sexp_of_t$13
           (e,
            function(param)
             {var
               _of_=close_reason(conn,890972481),
               x_002=caml_call1(Async_kernel_Deferred[5],_of_);
              return caml_call2(Core[454],Core_Info[6],x_002)});
        caml_call1(handle_error,caml_call1(Core_Error[5],_oe_));
        return _eW_}
      return caml_call7
              (do_dispatch,
               conn,
               caml_call1(Rpc_tag[11],rpc_tag),
               version,
               buf,
               pos,
               len,
               [0,response_handler])}
    function dispatch$2
     (conn,rpc_tag,version,buf,pos,len,handle_response,handle_error)
     {var
       match=
        make_dispatch
         (dispatch_bigstring,
          conn,
          rpc_tag,
          version,
          buf,
          pos,
          len,
          handle_response,
          handle_error);
      return 0 === match[0]?17724:179911373}
    function schedule_dispatch
     (conn,rpc_tag,version,buf,pos,len,handle_response,handle_error)
     {var
       match=
        make_dispatch
         (schedule_dispatch_bigstring,
          conn,
          rpc_tag,
          version,
          buf,
          pos,
          len,
          handle_response,
          handle_error);
      if(0 !== match[0])return 179911373;
      var d=match[1];
      return [0,933108739,d]}
    function implement$1(opt,t,f)
     {if(opt)var sth=opt[1],on_exception=sth;else var on_exception=continue$0;
      var _ob_=[246,function(_oc_){return shapes$0(t)}];
      return [0,t[1],t[2],[3,f,1],_ob_,on_exception]}
    function implement$2(opt,t,f)
     {if(opt)var sth=opt[1],on_exception=sth;else var on_exception=continue$0;
      var _n$_=[246,function(_oa_){return shapes$0(t)}];
      return [0,t[1],t[2],[3,f,0],_n$_,on_exception]}
    function implement_for_tag_and_version(opt,rpc_tag,version,f)
     {if(opt)var sth=opt[1],on_exception=sth;else var on_exception=continue$0;
      var _n9_=[246,function(_n__){return _eX_}];
      return [0,
              caml_call1(Rpc_tag[11],rpc_tag),
              version,
              [3,f,1],
              _n9_,
              on_exception]}
    function implement_for_tag_and_version$0(opt,rpc_tag,version,f)
     {if(opt)var sth=opt[1],on_exception=sth;else var on_exception=continue$0;
      var _n7_=[246,function(_n8_){return _eY_}];
      return [0,
              caml_call1(Rpc_tag[11],rpc_tag),
              version,
              [3,f,0],
              _n7_,
              on_exception]}
    function bin_msg(r){return r[3]}
    function version$0(r){return r[2]}
    function name$0(t){return caml_call1(Rpc_tag[12],t[1])}
    function create$5(name,version,bin_msg)
     {var
       _n5_=Core[150],
       _n6_=caml_call2(Stdlib_String[6],cst$18,[0,name,_eZ_]),
       msg_type_id=caml_call2(Core_Type_equal[8][3],_n6_,_n5_);
      return [0,caml_call1(Rpc_tag[11],name),version,bin_msg,msg_type_id]}
    function shapes$1(t){return shapes([0,[0,cst_msg,t[3][1]],0])}
    function description$2(t){var _n4_=t[2];return [0,name$0(t),_n4_]}
    function msg_type_id(t){return t[4]}
    function implement$3(opt,t,f)
     {if(opt)
       var sth=opt[1],on_exception=sth;
      else
       var on_exception=close_connection;
      var _n2_=[246,function(_n3_){return shapes$1(t)}];
      return [0,t[1],t[2],[0,t[3][3],f],_n2_,on_exception]}
    function dispatch$3(t,conn,query)
     {var query_id=caml_call1(Query_id[45],0);
      return dispatch_raw(conn,t[1],t[2],t[3][2],query,query_id,0)}
    function rpc_result_to_or_error$0(t,conn,result)
     {var _n0_=close_reason(conn,890972481),_n1_=conn[1];
      return caml_call1(or_error(description$2(t),_n1_,_n0_),result)}
    function dispatch$4(t,conn,query)
     {var result=dispatch$3(t,conn,query);
      return rpc_result_to_or_error$0(t,conn,result)}
    function dispatch_exn$0(t,conn,query)
     {var _nZ_=dispatch$4(t,conn,query);
      return caml_call1(Core_Or_error[36],_nZ_)}
    function implement$4(opt,t,f)
     {if(opt)
       var sth=opt[1],on_exception=sth;
      else
       var on_exception=close_connection;
      var _nX_=[246,function(_nY_){return shapes$1(t)}];
      return [0,t[1],t[2],[1,f],_nX_,on_exception]}
    function dispatch$5(param,conn,buf,pos,len)
     {var
       version=param[2],
       tag=param[1],
       match=dispatch_bigstring(conn,tag,version,buf,pos,len,0);
      return 0 === match[0]?17724:179911373}
    function schedule_dispatch$0(param,conn,buf,pos,len)
     {var
       version=param[2],
       tag=param[1],
       match=schedule_dispatch_bigstring(conn,tag,version,buf,pos,len,0);
      if(0 !== match[0])return 179911373;
      var flushed=match[1];
      return [0,933108739,flushed]}
    var
     Expert$0=[0,implement$4,dispatch$5,schedule_dispatch$0],
     _e2_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,_e1_,[0,_e0_,[0,[0,cst_Error,[0,Core_Error[36],0]],0]]]),
     _e3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$13),0,_e2_],0],
     _e4_=caml_call1(Bin_prot_Shape[4][1],cst_src_rpc_ml_399_2),
     group$10=caml_call2(Bin_prot_Shape[6],_e4_,_e3_),
     _e5_=caml_call1(Bin_prot_Shape[2][1],cst_t$14),
     bin_shape_t$6=caml_call1(caml_call2(Bin_prot_Shape[14],group$10,_e5_),0);
    function bin_size_t$5(param)
     {if(typeof param === "number")return 1;
      var v1=param[1],_nW_=caml_call1(Core_Error[32],v1);
      return caml_call2(Bin_prot_Common[23],1,_nW_)}
    function bin_write_t$5(buf,pos,param)
     {if(typeof param === "number")
       return param
               ?caml_call3(Bin_prot_Write[31],buf,pos,1)
               :caml_call3(Bin_prot_Write[31],buf,pos,0);
      var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,2);
      return caml_call3(Core_Error[33],buf,pos$0,v1)}
    var bin_writer_t$5=[0,bin_size_t$5,bin_write_t$5];
    function bin_read_t$22(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_rpc_ml_Pipe_close_reas,pos_ref[1])}
    function bin_read_t$23(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_e6_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        default:
         var arg_1=caml_call2(Core_Error[34],buf,pos_ref);return [0,arg_1]}}
    var
     bin_reader_t$10=[0,bin_read_t$23,bin_read_t$22],
     bin_t$5=[0,bin_shape_t$6,bin_writer_t$5,bin_reader_t$10];
    function compare$2(a_003,b_004)
     {if(caml_call2(Ppx_compare_lib[1],a_003,b_004))return 0;
      if(typeof a_003 === "number")
       {if(! a_003)
         {if(typeof b_004 === "number" && ! b_004)return 0;return -1}
        if(typeof b_004 !== "number")return -1;
        if(b_004)return 0}
      else
       {var _nV_=a_003[1];
        if(typeof b_004 !== "number")
         {var b_006=b_004[1];return caml_call2(Core_Error[1],_nV_,b_006)}
        if(b_004)return 1}
      return 1}
    function t_of_sexp$3(sexp_011)
     {if(0 === sexp_011[0])
       {var _nR_=sexp_011[1],switch$0=0;
        if(caml_string_notequal(_nR_,cst_Closed_locally))
         {var switch$1=0;
          if(caml_string_notequal(_nR_,cst_Closed_remotely))
           {var switch$2=0;
            if(caml_string_notequal(_nR_,cst_Error$0))
             if(caml_string_notequal(_nR_,cst_closed_locally))
              if(caml_string_notequal(_nR_,cst_closed_remotely))
               {if(caml_string_notequal(_nR_,cst_error$1))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_009,sexp_011)}
          if(! switch$1)return 1}
        if(! switch$0)return 0}
      else
       {var _nS_=sexp_011[1];
        if(! _nS_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_009,sexp_011);
        var _nT_=_nS_[1];
        if(0 !== _nT_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_009,sexp_011);
        var _nU_=_nT_[1],switch$3=0;
        if(caml_string_notequal(_nU_,cst_Closed_locally$0))
         {var switch$4=0;
          if(caml_string_notequal(_nU_,cst_Closed_remotely$0))
           {var switch$5=0;
            if(caml_string_notequal(_nU_,cst_Error$1))
             if(caml_string_notequal(_nU_,cst_closed_locally$0))
              if(caml_string_notequal(_nU_,cst_closed_remotely$0))
               {if(caml_string_notequal(_nU_,cst_error$2))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             {var sexp_args_013=_nS_[2];
              if(sexp_args_013 && ! sexp_args_013[2])
               {var
                 arg0_014=sexp_args_013[1],
                 res0_015=caml_call1(Core_Error[5],arg0_014);
                return [0,res0_015]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],error_source_009,_nU_,sexp_011)}}
          if(! switch$4)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_009,sexp_011)}
        if(! switch$3)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_009,sexp_011)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_009,sexp_011)}
    function sexp_of_t$18(param)
     {if(typeof param === "number")return param?_e7_:_e8_;
      var arg0_016=param[1],res0_017=caml_call1(Core_Error[6],arg0_016);
      return [1,[0,_e9_,[0,res0_017,0]]]}
    var
     _fa_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,_e$_,[0,_e__,[0,[0,cst_Error$2,[0,Core_Error[40][2][7],0]],0]]]),
     _fb_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$15),0,_fa_],0],
     _fc_=caml_call1(Bin_prot_Shape[4][1],cst_src_rpc_ml_407_6),
     group$11=caml_call2(Bin_prot_Shape[6],_fc_,_fb_),
     _fd_=caml_call1(Bin_prot_Shape[2][1],cst_t$16),
     bin_shape_t$7=caml_call1(caml_call2(Bin_prot_Shape[14],group$11,_fd_),0);
    function bin_size_t$6(param)
     {if(typeof param === "number")return 1;
      var v1=param[1],_nQ_=caml_call1(Core_Error[40][2][3],v1);
      return caml_call2(Bin_prot_Common[23],1,_nQ_)}
    function bin_write_t$6(buf,pos,param)
     {if(typeof param === "number")
       return param
               ?caml_call3(Bin_prot_Write[31],buf,pos,1)
               :caml_call3(Bin_prot_Write[31],buf,pos,0);
      var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,2);
      return caml_call3(Core_Error[40][2][4],buf,pos$0,v1)}
    var bin_writer_t$6=[0,bin_size_t$6,bin_write_t$6];
    function bin_read_t$24(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_rpc_ml_Pipe_close_reas$0,
               pos_ref[1])}
    function bin_read_t$25(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_fe_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        default:
         var arg_1=caml_call2(Core_Error[40][2][5],buf,pos_ref);
         return [0,arg_1]}}
    var
     bin_reader_t$11=[0,bin_read_t$25,bin_read_t$24],
     bin_t$6=[0,bin_shape_t$7,bin_writer_t$6,bin_reader_t$11];
    function compare$3(a_018,b_019)
     {if(caml_call2(Ppx_compare_lib[1],a_018,b_019))return 0;
      if(typeof a_018 === "number")
       {if(! a_018)
         {if(typeof b_019 === "number" && ! b_019)return 0;return -1}
        if(typeof b_019 !== "number")return -1;
        if(b_019)return 0}
      else
       {var _nP_=a_018[1];
        if(typeof b_019 !== "number")
         {var b_021=b_019[1];
          return caml_call2(Core_Error[40][2][11],_nP_,b_021)}
        if(b_019)return 1}
      return 1}
    function t_of_sexp$4(sexp_026)
     {if(0 === sexp_026[0])
       {var _nL_=sexp_026[1],switch$0=0;
        if(caml_string_notequal(_nL_,cst_Closed_locally$1))
         {var switch$1=0;
          if(caml_string_notequal(_nL_,cst_Closed_remotely$1))
           {var switch$2=0;
            if(caml_string_notequal(_nL_,cst_Error$3))
             if(caml_string_notequal(_nL_,cst_closed_locally$1))
              if(caml_string_notequal(_nL_,cst_closed_remotely$1))
               {if(caml_string_notequal(_nL_,cst_error$3))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_024,sexp_026)}
          if(! switch$1)return 1}
        if(! switch$0)return 0}
      else
       {var _nM_=sexp_026[1];
        if(! _nM_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_024,sexp_026);
        var _nN_=_nM_[1];
        if(0 !== _nN_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_024,sexp_026);
        var _nO_=_nN_[1],switch$3=0;
        if(caml_string_notequal(_nO_,cst_Closed_locally$2))
         {var switch$4=0;
          if(caml_string_notequal(_nO_,cst_Closed_remotely$2))
           {var switch$5=0;
            if(caml_string_notequal(_nO_,cst_Error$4))
             if(caml_string_notequal(_nO_,cst_closed_locally$2))
              if(caml_string_notequal(_nO_,cst_closed_remotely$2))
               {if(caml_string_notequal(_nO_,cst_error$4))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             {var sexp_args_028=_nM_[2];
              if(sexp_args_028 && ! sexp_args_028[2])
               {var
                 arg0_029=sexp_args_028[1],
                 res0_030=caml_call1(Core_Error[40][2][12],arg0_029);
                return [0,res0_030]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],error_source_024,_nO_,sexp_026)}}
          if(! switch$4)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_024,sexp_026)}
        if(! switch$3)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_024,sexp_026)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_024,sexp_026)}
    function sexp_of_t$19(param)
     {if(typeof param === "number")return param?_ff_:_fg_;
      var
       arg0_031=param[1],
       res0_032=caml_call1(Core_Error[40][2][13],arg0_031);
      return [1,[0,_fh_,[0,res0_032,0]]]}
    function create$6
     (client_pushes_back,
      name,
      version,
      bin_query,
      bin_initial_response,
      bin_update_response,
      bin_error,
      alias_for_initial_response,
      alias_for_update_response,
      param)
     {var
       client_pushes_back$0=client_pushes_back?1:0,
       _nD_=Core[150],
       _nE_=caml_call2(Stdlib_String[6],cst$19,[0,name,_fi_]),
       query_type_id=caml_call2(Core_Type_equal[8][3],_nE_,_nD_),
       _nF_=Core[150],
       _nG_=
        caml_call2
         (Stdlib_String[6],
          cst$21,
          [0,name,[0,cst$20,[0,alias_for_initial_response,0]]]),
       initial_response_type_id=caml_call2(Core_Type_equal[8][3],_nG_,_nF_),
       _nH_=Core[150],
       _nI_=
        caml_call2
         (Stdlib_String[6],
          cst$23,
          [0,name,[0,cst$22,[0,alias_for_update_response,0]]]),
       update_response_type_id=caml_call2(Core_Type_equal[8][3],_nI_,_nH_),
       _nJ_=Core[150],
       _nK_=caml_call2(Stdlib_String[6],cst$24,[0,name,_fj_]),
       error_response_type_id=caml_call2(Core_Type_equal[8][3],_nK_,_nJ_);
      return [0,
              caml_call1(Rpc_tag[11],name),
              version,
              bin_query,
              bin_initial_response,
              bin_update_response,
              bin_error,
              client_pushes_back$0,
              query_type_id,
              initial_response_type_id,
              update_response_type_id,
              error_response_type_id]}
    function make_initial_message(x){return [0,Unused_query_id[10],x]}
    function implement_gen(t,opt,impl)
     {if(opt)var sth=opt[1],on_exception=sth;else var on_exception=continue$0;
      var
       bin_init_writer=caml_call2(Stream_initial_message[4],t[4][2],t[6][2]),
       _nB_=
        [246,
         function(_nC_)
          {return shapes
                   ([0,
                     [0,cst_query$0,t[3][1]],
                     [0,
                      [0,cst_initial_response,t[4][1]],
                      [0,
                       [0,cst_update_response,t[5][1]],
                       [0,[0,cst_error$5,t[6][1]],0]]]])}];
      return [0,
              t[1],
              t[2],
              [4,t[3][3],bin_init_writer,t[5][2],impl],
              _nB_,
              on_exception]}
    function implement$5(on_exception,t,f)
     {function f$0(c,query)
       {function _nz_(param)
         {if(0 === param[0])
           {var match=param[1],pipe=match[2],initial=match[1];
            return [0,[0,make_initial_message([0,initial]),pipe]]}
          var err=param[1];
          return [1,make_initial_message([1,err])]}
        var _nA_=caml_call2(f,c,query);
        return caml_call2(Async_kernel[22][3],_nA_,_nz_)}
      return implement_gen(t,on_exception,[0,f$0])}
    function abort(t,conn,id)
     {var query=[0,t[1],t[2],id,774323088];
      dispatch(conn,0,Stream_query[17],query);
      return 0}
    var Pipe_message=[0],Pipe_response=[0];
    function id(t){return t[1]}
    function close_reason$0(t){return t[2]}
    function read_error(get_connection_close_reason,handler,err)
     {var
       _ny_=sexp_of_t$13(err,get_connection_close_reason),
       core_err=caml_call1(Core_Error[5],_ny_);
      caml_call1(handler,[1,[0,106380200,core_err]]);
      return [0,76061764,[1,err]]}
    function dispatch_gen(t,conn,query,make_update_handler)
     {var
       _nk_=of_type_class(t[3]),
       bin_writer_query=caml_call1(Stream_query[4],_nk_),
       query$0=[0,-250086680,query],
       query_id=caml_call1(Query_id[45],0),
       _nl_=close_reason(conn,890972481),
       _nm_=conn[1],
       _nn_=t[2],
       _no_=or_error([0,caml_call1(Rpc_tag[12],t[1]),_nn_],_nm_,_nl_);
      function _np_(ivar)
       {var initial_state=[0,t,query_id,make_update_handler,ivar,conn];
        function get_connection_close_reason(param)
         {var
           _nx_=close_reason(conn,890972481),
           x_033=caml_call1(Async_kernel_Deferred[5],_nx_);
          return caml_call2(Core[454],Core_Info[6],x_033)}
        var state=[0,[0,initial_state]];
        return function(response,read_buffer,read_buffer_pos_ref)
         {var _nr_=state[1];
          if(0 === _nr_[0])
           {var
             initial_handler=_nr_[1],
             error=
              function(err)
               {caml_call2(Async_kernel_Ivar[14],initial_handler[4],[1,err]);
                return _fm_},
             _ns_=response[2];
            if(0 !== _ns_[0]){var err$1=_ns_[1];return error(err$1)}
            var
             len=_ns_[1],
             initial=
              bin_read_from_bigstring
               (caml_call2
                 (Stream_initial_message[7],
                  initial_handler[1][4][3],
                  initial_handler[1][6][3]),
                0,
                read_buffer,
                read_buffer_pos_ref,
                len,
                cst_client_side_streaming_rpc_);
            if(0 !== initial[0]){var err$0=initial[1];return error(err$0)}
            var initial_msg=initial[1],_nt_=initial_msg[2];
            if(0 === _nt_[0])
             {var
               initial$0=_nt_[1],
               match=caml_call1(initial_handler[3],0),
               handler=match[2],
               extra=match[1];
              caml_call2
               (Async_kernel_Ivar[14],
                initial_handler[4],
                [0,[0,[0,initial_handler[2],initial$0,extra]]]);
              state[1] = [1,initial_handler[1][5][3],handler];
              return -955854715}
            var err=_nt_[1];
            caml_call2(Async_kernel_Ivar[14],initial_handler[4],[0,[1,err]]);
            return _fn_}
          var handler$0=_nr_[2],bin_reader_update=_nr_[1],_nu_=response[2];
          if(0 !== _nu_[0])
           {var err$4=_nu_[1];
            return read_error(get_connection_close_reason,handler$0,err$4)}
          var
           len$0=_nu_[1],
           _nv_=
            [0,
             function(param)
              {if(typeof param === "number")return 0;
               var len=param[2];
               return len}],
           data=
            bin_read_from_bigstring
             (Stream_response_data[14],
              _nv_,
              read_buffer,
              read_buffer_pos_ref,
              len$0,
              cst_client_side_streaming_rpc_$0);
          if(0 !== data[0])
           {var err$3=data[1];
            return read_error(get_connection_close_reason,handler$0,err$3)}
          var _nw_=data[1];
          if(typeof _nw_ === "number"){caml_call1(handler$0,_fk_);return _fl_}
          var
           len$1=_nw_[2],
           data$0=
            bin_read_from_bigstring
             (bin_reader_update,
              0,
              read_buffer,
              read_buffer_pos_ref,
              len$1,
              cst_client_side_streaming_rpc_$1);
          if(0 !== data$0[0])
           {var err$2=data$0[1];
            return read_error(get_connection_close_reason,handler$0,err$2)}
          var data$1=data$0[1],match$0=caml_call1(handler$0,[0,data$1]);
          if(! match$0)return -955854715;
          var d=match$0[1];
          return [0,-822977931,d]}}
      var
       _nq_=
        dispatch_raw$0(conn,t[1],t[2],bin_writer_query,query$0,query_id,_np_);
      return caml_call2(Async_kernel[21],_nq_,_no_)}
    function dispatch$6(t,conn,query)
     {function _m__(e)
       {if(0 === e[0])
         {var _nf_=e[1];
          if(0 === _nf_[0])
           {var
             _ng_=_nf_[1],
             match=_ng_[3],
             close_reason=match[2],
             pipe_r=match[1],
             init=_ng_[2],
             id=_ng_[1],
             _nh_=
              function(param)
               {var _nj_=1 - caml_call1(Async_kernel_Ivar[17],close_reason);
                return _nj_
                        ?(abort(t,conn,id),
                          caml_call2(Async_kernel_Ivar[15],close_reason,0))
                        :_nj_},
             _ni_=caml_call1(Async_kernel_Pipe[17],pipe_r);
            caml_call2(Async_kernel[12],_ni_,_nh_);
            var
             pipe_metadata=
              [0,id,caml_call1(Async_kernel_Ivar[18],close_reason)];
            return [0,[0,[0,pipe_metadata,init,pipe_r]]]}}
        return e}
      var
       _m$_=
        dispatch_gen
         (t,
          conn,
          query,
          function(param)
           {var
             match=caml_call3(Async_kernel_Pipe[7],0,0,0),
             pipe_w=match[2],
             pipe_r=match[1];
            caml_call2(Async_kernel_Pipe[79],pipe_w,100);
            var close_reason=caml_call1(Async_kernel_Ivar[12],0);
            function f(param)
             {if(0 !== param[0])
               {var reason=param[1];
                if(typeof reason === "number")
                 var _ne_=1;
                else
                 var err=reason[2],_ne_=[0,err];
                caml_call2(Async_kernel_Ivar[15],close_reason,_ne_);
                caml_call1(Async_kernel_Pipe[14],pipe_w);
                return 0}
              var data=param[1];
              if(caml_call1(Async_kernel_Pipe[16],pipe_w))return 0;
              caml_call2(Async_kernel_Pipe[27],pipe_w,data);
              if(t[7])
               {var
                 _na_=caml_call1(Async_kernel_Pipe[78],pipe_w),
                 _nb_=caml_call1(Async_kernel_Pipe[23],pipe_w);
                if(caml_call2(Core[88],_nb_,_na_))
                 {var
                   _nc_=function(param){return 0},
                   _nd_=caml_call1(Async_kernel_Pipe[20],pipe_w);
                  return [0,caml_call2(Async_kernel[22][3],_nd_,_nc_)]}}
              return 0}
            return [0,[0,pipe_r,close_reason],f]});
      return caml_call2(Async_kernel[22][3],_m$_,_m__)}
    function create$7
     (client_pushes_back,name,version,bin_query,bin_response,bin_error,param)
     {return create$6
              (client_pushes_back,
               name,
               version,
               bin_query,
               Core_Unit[13],
               bin_response,
               bin_error,
               cst$25,
               cst_response$2,
               0)}
    function bin_query$0(t){return t[3]}
    function bin_response$0(t){return t[5]}
    function bin_error(t){return t[6]}
    function client_pushes_back(t){return t[7]}
    function implement$6(on_exception,t,f)
     {return implement$5
              (on_exception,
               t,
               function(a,query)
                {function _m8_(x)
                  {return caml_call2(symbol$7,x,function(x){return [0,0,x]})}
                 var _m9_=caml_call2(f,a,query);
                 return caml_call2(Async_kernel[22][3],_m9_,_m8_)})}
    var
     close$5=include$2[1],
     closed$0=include$2[2],
     is_closed$3=include$2[3],
     write$2=include$2[4],
     write_without_pushback$1=include$2[5],
     flushed$2=include$2[6],
     bin_writer$1=include$2[7],
     Expert$1=include$2[8];
    function create$8(opt,param)
     {if(opt)var sth=opt[1],initial_size=sth;else var initial_size=4096;
      if(caml_call2(Core[92],initial_size,0))
       caml_call5
        (Core[236],
         0,
         _fo_,
         cst_Rpc_Pipe_rpc_Direct_stream,
         initial_size,
         Core_Int[80]);
      return [0,caml_call2(Core_Bigstring[115],0,initial_size)]}
    var Buffer=[0,create$8];
    function create$9(buffer,param)
     {if(buffer)
       var b=buffer[1],buffer$0=b;
      else
       var buffer$0=caml_call2(Buffer[1],0,0);
      var _m7_=caml_call3(Direct_stream_writer_id[38][4],0,0,0);
      return [0,caml_call1(Core_Bag[22],0),_m7_,buffer$0]}
    function length$0(t){return caml_call1(Core_Bag[5],t[1])}
    function add_exn$0(t,writer)
     {if(caml_call1(is_closed$3,writer))
       caml_call1(Core[6],cst_Rpc_Pipe_rpc_Direct_stream$0);
      if(caml_call2(Core_Hashtbl[30],t[2],writer[1]))
       caml_call1(Core[6],cst_Rpc_Pipe_rpc_Direct_stream$1);
      var match=caml_call1(Core_Bag[27],t[1]);
      if(match)
       {var
         one=match[1],
         one$0=caml_call1(Core_Bag[1][3],one),
         _m5_=caml_call1(bin_writer$1,writer),
         _m6_=caml_call1(bin_writer$1,one$0);
        if(1 - caml_call2(Core[246],_m6_,_m5_))
         caml_call1(Core[6],cst_Rpc_Pipe_rpc_Direct_stream$2)}
      var
       writer_element_in_group=caml_call2(Core_Bag[23],t[1],writer),
       group_element_in_writer=
        caml_call2(Core_Bag[23],writer[7],[0,t,writer_element_in_group]);
      return caml_call3
              (Core_Hashtbl[36],
               t[2],
               writer[1],
               [0,writer_element_in_group,group_element_in_writer])}
    function remove(t,writer)
     {var match=caml_call2(Core_Hashtbl[61],t[2],writer[1]);
      if(! match)return 0;
      var
       match$0=match[1],
       group_element_in_writer=match$0[2],
       writer_element_in_group=match$0[1];
      caml_call2(Core_Bag[26],t[1],writer_element_in_group);
      return caml_call2(Core_Bag[26],writer[7],group_element_in_writer)}
    function to_list(t){return caml_call1(Core_Bag[17],t[1])}
    function flushed_or_closed(t)
     {function _m0_(t)
       {var
         _m3_=[0,caml_call1(closed$0,t),0],
         _m4_=[0,caml_call1(flushed$2,t),_m3_];
        return caml_call1(Async_kernel_Deferred[24],_m4_)}
      var _m1_=to_list(t),_m2_=caml_call2(Core_List[72],_m1_,_m0_);
      return caml_call1(Async_kernel_Deferred[22],_m2_)}
    function flushed$3(t){return flushed_or_closed(t)}
    function write_without_pushback$2(t,buf,pos,len)
     {function _mZ_(direct_stream_writer)
       {caml_call4(Expert$1[2],direct_stream_writer,buf,pos,len);return 0}
      return caml_call2(Core_Bag[7],t[1],_mZ_)}
    function write$3(t,buf,pos,len)
     {write_without_pushback$2(t,buf,pos,len);return flushed_or_closed(t)}
    function write_without_pushback$3(t,x)
     {var match=caml_call1(Core_Bag[27],t[1]);
      if(! match)return 0;
      var
       one=match[1],
       one$0=caml_call1(Core_Bag[1][3],one),
       match$0=caml_call1(bin_writer$1,one$0),
       write=match$0[2],
       size=match$0[1],
       buffer=t[3][1];
      try
       {var len$1=caml_call3(write,buffer,0,x)}
      catch(_mY_)
       {var len=caml_call1(size,x);
        runtime.bigstring_destroy_stub(buffer);
        var
         _mX_=caml_call1(Core_Int[44],len),
         buffer$0=caml_call2(Core_Bigstring[115],0,_mX_);
        t[3][1] = buffer$0;
        var len$0=caml_call3(write,buffer$0,0,x);
        return write_without_pushback$2(t,buffer$0,0,len$0)}
      return write_without_pushback$2(t,buffer,0,len$1)}
    function write$4(t,x)
     {write_without_pushback$3(t,x);return flushed_or_closed(t)}
    function implement_direct(t,f$0)
     {var on_exception=0;
      function f(c,query,writer)
       {function _mV_(x)
         {return 0 === x[0]
                  ?[0,make_initial_message(x)]
                  :[1,make_initial_message(x)]}
        var _mW_=caml_call3(f$0,c,query,writer);
        return caml_call2(Async_kernel[22][3],_mW_,_mV_)}
      return implement_gen(t,on_exception,[1,f])}
    function dispatch$7(t,conn,query)
     {function _mT_(response)
       {return caml_call2
                (symbol$7,
                 response,
                 function(x)
                  {return caml_call2
                           (symbol$7,
                            x,
                            function(param)
                             {var pipe_r=param[3],metadata=param[1];
                              return [0,pipe_r,metadata]})})}
      var _mU_=dispatch$6(t,conn,query);
      return caml_call2(Async_kernel[22][3],_mU_,_mT_)}
    var
     Pipe_rpc_failed=
      [248,cst_Async_rpc_kernel_Rpc_Pipe_,caml_fresh_oo_id(0)];
    function dispatch_exn$1(t,conn,query)
     {function _mQ_(result)
       {if(0 !== result[0])
         {var rpc_error=result[1];throw caml_call1(Core_Error[26],rpc_error)}
        var _mS_=result[1];
        if(0 !== _mS_[0])throw Pipe_rpc_failed;
        var pipe_and_id=_mS_[1];
        return pipe_and_id}
      var _mR_=dispatch$7(t,conn,query);
      return caml_call2(Async_kernel[22][3],_mR_,_mQ_)}
    function dispatch_iter(t,conn,query,f)
     {function _mO_(response)
       {return caml_call2
                (symbol$7,
                 response,
                 function(x)
                  {return caml_call2
                           (symbol$7,x,function(param){var id=param[1];return id})})}
      function _mL_(e)
       {if(0 === e[0])
         {var _mP_=e[1];
          if(0 === _mP_[0])
           {var match=_mP_[1],init=match[2],id=match[1];
            return [0,[0,[0,id,init]]]}}
        return e}
      var
       _mM_=dispatch_gen(t,conn,query,function(param){return [0,0,f]}),
       _mN_=caml_call2(Async_kernel[22][3],_mM_,_mL_);
      return caml_call2(Async_kernel[22][3],_mN_,_mO_)}
    function name$1(t){return caml_call1(Rpc_tag[12],t[1])}
    function version$1(t){return t[2]}
    function description$3(t){var _mK_=t[2];return [0,name$1(t),_mK_]}
    function query_type_id$0(t){return t[8]}
    function error_type_id(t){return t[11]}
    function response_type_id$0(t){return t[10]}
    function create$10
     (client_pushes_back,
      name,
      version,
      bin_query,
      bin_state,
      bin_update,
      bin_error,
      param)
     {return create$6
              (client_pushes_back,
               name,
               version,
               bin_query,
               bin_state,
               bin_update,
               bin_error,
               cst_state,
               cst_update,
               0)}
    function bin_query$1(t){return t[3]}
    function bin_state(t){return t[4]}
    function bin_update(t){return t[5]}
    function bin_error$0(t){return t[6]}
    function dispatch$8(t,conn,query)
     {function _mI_(response)
       {return caml_call2
                (symbol$7,
                 response,
                 function(x)
                  {return caml_call2
                           (symbol$7,
                            x,
                            function(param)
                             {var update_r=param[3],state=param[2],metadata=param[1];
                              return [0,state,update_r,metadata]})})}
      var _mJ_=dispatch$6(t,conn,query);
      return caml_call2(Async_kernel[22][3],_mJ_,_mI_)}
    function client_pushes_back$0(t){return t[7]}
    function name$2(t){return caml_call1(Rpc_tag[12],t[1])}
    function version$2(t){return t[2]}
    function description$4(t){var _mH_=t[2];return [0,name$2(t),_mH_]}
    function query_type_id$1(t){return t[8]}
    function state_type_id(t){return t[9]}
    function update_type_id(t){return t[10]}
    function error_type_id$0(t){return t[11]}
    function description$5(param)
     {switch(param[0])
       {case 0:var rpc=param[1];return description$1(rpc);
        case 1:var rpc$0=param[1];return description$3(rpc$0);
        case 2:var rpc$1=param[1];return description$4(rpc$1);
        default:var rpc$2=param[1];return description$2(rpc$2)}}
    var Any=[0,description$5];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$46);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Rpc$0);
    var
     _fp_=
      [0,
       create$5,
       name$0,
       version$0,
       description$2,
       msg_type_id,
       bin_msg,
       implement$3,
       dispatch$3,
       rpc_result_to_or_error$0,
       dispatch$4,
       dispatch_exn$0,
       Expert$0],
     _fq_=
      [0,
       [0],
       [0,id],
       create$10,
       bin_query$1,
       bin_state,
       bin_update,
       bin_error$0,
       implement$5,
       dispatch$8,
       abort,
       close_reason$0,
       client_pushes_back$0,
       name$2,
       version$2,
       description$4,
       query_type_id$1,
       state_type_id,
       update_type_id,
       error_type_id$0],
     _fr_=
      [0,
       [0],
       [0,id],
       create$7,
       bin_query$0,
       bin_response$0,
       bin_error,
       implement$6,
       [0,
        write$2,
        write_without_pushback$1,
        close$5,
        closed$0,
        flushed$2,
        is_closed$3,
        Expert$1,
        [0,
         Buffer,
         create$9,
         flushed_or_closed,
         flushed$3,
         add_exn$0,
         remove,
         write$4,
         write_without_pushback$3,
         to_list,
         length$0,
         [0,write$3,write_without_pushback$2]]],
       implement_direct,
       dispatch$7,
       dispatch_exn$1,
       Pipe_message,
       Pipe_response,
       dispatch_iter,
       abort,
       close_reason$0,
       client_pushes_back,
       name$1,
       version$1,
       description$3,
       query_type_id$0,
       response_type_id$0,
       error_type_id],
     _fs_=
      [0,
       create$4,
       name,
       version,
       description$1,
       query_type_id,
       response_type_id,
       bin_query,
       bin_response,
       implement,
       implement$0,
       dispatch$0,
       rpc_result_to_or_error,
       dispatch$1,
       dispatch_exn,
       [0,
        _dP_[1],
        schedule_dispatch,
        dispatch$2,
        implement$1,
        implement$2,
        implement_for_tag_and_version,
        implement_for_tag_and_version$0]],
     _ft_=
      [0,
       sexp_of_t$17,
       _eP_,
       Client_implementations,
       create$3,
       contains_magic_prefix,
       description$0,
       add_heartbeat_callback,
       reset_heartbeat_timeout,
       last_seen_alive,
       close$4,
       close_finished,
       close_reason,
       is_closed$2,
       bytes_to_write$0,
       flushed$1,
       with_close,
       server_with_close],
     _fu_=[0,sexp_of_t$12,description,lift$0,update_on_exception],
     _fv_=_M_[1],
     _fw_=_L_[1],
     Async_rpc_kernel_Rpc=
      [0,
       [0,
        sexp_of_t,
        _s_,
        _t_,
        _u_,
        _v_,
        _w_,
        _x_,
        _y_,
        _z_,
        _A_,
        _B_,
        _C_,
        _D_,
        _E_,
        _F_,
        _G_,
        _H_,
        _I_,
        _J_,
        _K_,
        [0,
         [0,_fw_[2],_fw_[3]],
         _L_[2],
         _L_[107],
         _L_[3],
         _L_[4],
         _L_[5],
         _L_[6],
         _L_[7],
         _L_[8],
         _L_[9],
         _L_[10],
         _L_[11],
         _L_[12],
         _L_[13],
         _L_[14],
         _L_[15],
         _L_[16],
         _L_[17],
         _L_[18],
         _L_[19],
         _L_[20],
         _L_[21],
         _L_[22],
         _L_[23],
         _L_[24],
         _L_[25],
         _L_[26],
         _L_[27],
         _L_[28],
         _L_[29],
         _L_[30],
         _L_[31],
         _L_[32],
         _L_[33],
         _L_[34],
         _L_[35],
         _L_[36],
         _L_[37],
         _L_[38],
         _L_[39],
         _L_[40],
         _L_[41],
         _L_[42],
         _L_[43],
         _L_[44],
         _L_[45],
         _L_[46],
         _L_[47],
         _L_[48],
         _L_[49],
         _L_[50],
         _L_[51],
         _L_[52],
         _L_[53],
         _L_[54],
         _L_[55],
         _L_[56],
         _L_[57],
         _L_[58],
         _L_[59],
         _L_[60],
         _L_[61],
         _L_[62],
         _L_[63],
         _L_[64],
         _L_[65],
         _L_[66],
         _L_[67],
         _L_[68],
         _L_[69],
         _L_[70],
         _L_[71],
         _L_[72],
         _L_[73],
         _L_[74],
         _L_[75],
         _L_[76],
         _L_[77],
         _L_[78],
         _L_[79],
         _L_[80],
         _L_[81],
         _L_[82],
         _L_[83],
         _L_[84],
         _L_[85],
         _L_[86],
         _L_[87],
         _L_[88],
         _L_[89],
         _L_[90],
         _L_[91],
         _L_[92],
         _L_[93],
         _L_[94],
         _L_[95],
         _L_[96],
         _L_[97],
         _L_[98],
         _L_[99],
         _L_[100],
         _L_[101],
         _L_[102],
         _L_[103],
         _L_[104],
         _L_[105]],
        [0,
         [0,_fv_[2],_fv_[3]],
         _M_[2],
         _M_[75],
         _M_[3],
         _M_[4],
         _M_[5],
         _M_[6],
         _M_[7],
         _M_[8],
         _M_[9],
         _M_[10],
         _M_[11],
         _M_[12],
         _M_[13],
         _M_[14],
         _M_[15],
         _M_[16],
         _M_[17],
         _M_[18],
         _M_[19],
         _M_[20],
         _M_[21],
         _M_[22],
         _M_[23],
         _M_[24],
         _M_[25],
         _M_[26],
         _M_[27],
         _M_[28],
         _M_[29],
         _M_[30],
         _M_[31],
         _M_[32],
         _M_[33],
         _M_[34],
         _M_[35],
         _M_[36],
         _M_[37],
         _M_[38],
         _M_[39],
         _M_[40],
         _M_[41],
         _M_[42],
         _M_[43],
         _M_[44],
         _M_[45],
         _M_[46],
         _M_[47],
         _M_[48],
         _M_[49],
         _M_[50],
         _M_[51],
         _M_[52],
         _M_[53],
         _M_[54],
         _M_[55],
         _M_[56],
         _M_[57],
         _M_[58],
         _M_[59],
         _M_[60],
         _M_[61],
         _M_[62],
         _M_[63],
         _M_[64],
         _M_[65],
         _M_[66],
         _M_[67],
         _M_[68],
         _M_[69],
         _M_[70],
         _M_[71],
         _M_[72],
         _M_[73]],
        _N_,
        _O_,
        _P_,
        _Q_,
        [0,
         _R_[1],
         _R_[2],
         _R_[3],
         _R_[4],
         _R_[5],
         _R_[6],
         _R_[7],
         _R_[8],
         _R_[9],
         _R_[10],
         _R_[11],
         _R_[12],
         _R_[13],
         _R_[14],
         _R_[15],
         _R_[16],
         _R_[17],
         _R_[18],
         _R_[19],
         _R_[20],
         _R_[21],
         _R_[22],
         _R_[23],
         _R_[24],
         _R_[25],
         _R_[26],
         _R_[27],
         _R_[28],
         _R_[29],
         _R_[30],
         _R_[31],
         _R_[32],
         _R_[33],
         _R_[34],
         _R_[35],
         _R_[36],
         _R_[37],
         _R_[38],
         _R_[39],
         _R_[40],
         _R_[41],
         _R_[42],
         _R_[43],
         _R_[44],
         _R_[45],
         _R_[46],
         _R_[47],
         _R_[48],
         _R_[49],
         _R_[50],
         _R_[51],
         _R_[52],
         _R_[53],
         _R_[54],
         _R_[55],
         _R_[56],
         _R_[57],
         _R_[58],
         _R_[59],
         _R_[60],
         _R_[61],
         _R_[62],
         _R_[63],
         _R_[64],
         _R_[65],
         _R_[66],
         _R_[67],
         _R_[68],
         _R_[69],
         _R_[70],
         _R_[71],
         _R_[72],
         _R_[73],
         _R_[74],
         _R_[75],
         _R_[76],
         _R_[77],
         _R_[78],
         _R_[79],
         _R_[80],
         _R_[81],
         _R_[82],
         _R_[83]],
        [0,_S_[1],_S_[2],_S_[3],_S_[4],_S_[5],_S_[6]],
        _T_,
        summarize,
        _$_],
       [0,close_connection,continue$0],
       _fu_,
       [0,
        null$0,
        lift$1,
        create$1,
        create_exn,
        add,
        add_exn,
        descriptions$0,
        [0,[0],_dP_[2]]],
       _ft_,
       _fs_,
       [0,
        bin_size_t$5,
        bin_write_t$5,
        bin_read_t$23,
        bin_read_t$22,
        bin_shape_t$6,
        bin_writer_t$5,
        bin_reader_t$10,
        bin_t$5,
        compare$2,
        t_of_sexp$3,
        sexp_of_t$18,
        [0,
         [0,
          bin_size_t$6,
          bin_write_t$6,
          bin_read_t$25,
          bin_read_t$24,
          bin_shape_t$7,
          bin_writer_t$6,
          bin_reader_t$11,
          bin_t$6,
          compare$3,
          t_of_sexp$4,
          sexp_of_t$19]]],
       _fr_,
       _fq_,
       _fp_,
       Any,
       [0,
        [0,create$4,description$1,bin_query,bin_response],
        [0,create$7,description$3,bin_query$0,bin_response$0,bin_error],
        [0,
         create$10,
         description$4,
         bin_query$1,
         bin_state,
         bin_update,
         bin_error$0],
        [0,create$5,description$2,bin_msg]]];
    caml_register_global(876,Async_rpc_kernel_Rpc,"Async_rpc_kernel__Rpc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Versioned);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$47);
    caml_call1(Expect_test_collector[5][1],cst_src_versioned_rpc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$48,cst$26);
    function write$5(param,input)
     {var writer=param[2],convert=param[1],_mG_=caml_call1(convert,input);
      return caml_call2(_fr_[8][1],writer,_mG_)}
    function write_without_pushback$4(param,input)
     {var writer=param[2],convert=param[1],_mF_=caml_call1(convert,input);
      return caml_call2(_fr_[8][2],writer,_mF_)}
    function close$6(param)
     {var writer=param[2];return caml_call1(_fr_[8][3],writer)}
    function is_closed$4(param)
     {var writer=param[2];return caml_call1(_fr_[8][6],writer)}
    function closed$1(param)
     {var writer=param[2];return caml_call1(_fr_[8][4],writer)}
    function failed_conversion(x)
     {function _mE_(param)
       {var
         arg3_006=param[4],
         arg2_005=param[3],
         arg1_004=param[2],
         arg0_003=param[1],
         res0_007=
          3854881 <= arg0_003
           ?389604849 <= arg0_003
             ?999946793 <= arg0_003?_fx_:_fA_
             :106380200 <= arg0_003?_fB_:_fC_
           :-71406943 <= arg0_003?_fD_:_fE_,
         v_001=arg1_004[2],
         res1_008=[1,[0,_fy_,[0,caml_call1(Core[471],v_001),0]]],
         v_002=arg2_005[2],
         res2_009=[1,[0,_fz_,[0,caml_call1(Core[356],v_002),0]]],
         res3_010=caml_call1(Core[537],arg3_006);
        return [1,[0,res0_007,[0,res1_008,[0,res2_009,[0,res3_010,0]]]]]}
      return caml_call5(Core_Error[17],0,0,cst_type_conversion_failure,x,_mE_)}
    function multiple_registrations(x)
     {function _mD_(param)
       {var
         arg1_014=param[2],
         arg0_013=param[1],
         v_011=arg0_013[2],
         res0_015=[1,[0,_fF_,[0,caml_call1(Core[471],v_011),0]]],
         v_012=arg1_014[2],
         res1_016=[1,[0,_fG_,[0,caml_call1(Core[356],v_012),0]]];
        return [1,[0,res0_015,[0,res1_016,0]]]}
      return caml_call5
              (Core_Error[17],0,0,cst_multiple_rpc_registrations,x,_mD_)}
    function name$3(r){return r[1]}
    function create$11(name){return [0,name,Core_Int[101][3]]}
    function add$0(param,rpc,adapter)
     {var adapters=param[2],name=param[1],_mz_=caml_call1(_fs_[2],rpc);
      if(caml_call2(Core_String[125],name,_mz_))
       {var
         _mA_=
          function(param)
           {var
             arg1_022=param[2],
             arg0_021=param[1],
             res0_023=caml_call1(Core[471],arg0_021),
             res1_024=caml_call1(Core[471],arg1_022);
            return [1,[0,res0_023,[0,res1_024,0]]]},
         _mB_=[0,name,caml_call1(_fs_[2],rpc)];
        return caml_call5
                (Core_Or_error[39],0,0,cst_Rpc_names_don_t_agree,_mB_,_mA_)}
      var
       version=caml_call1(_fs_[3],rpc),
       match=caml_call2(Core_Map[38],adapters,version);
      if(match)
       {var
         _mC_=
          function(param)
           {var
             arg1_026=param[2],
             arg0_025=param[1],
             res0_027=caml_call1(Core[471],arg0_025),
             res1_028=caml_call1(Core[356],arg1_026);
            return [1,[0,res0_027,[0,res1_028,0]]]};
        return caml_call5
                (Core_Or_error[39],
                 0,
                 0,
                 cst_Version_already_exists,
                 [0,name,version],
                 _mC_)}
      var adapters$0=caml_call3(Core_Map[32],adapters,version,adapter);
      return [0,[0,name,adapters$0]]}
    function add_rpc_version(t,old_rpc,upgrade,downgrade)
     {function adapt(fn)
       {function adapted(state,old_query)
         {function _mx_(result){return caml_call1(downgrade,result)}
          var _my_=caml_call2(fn,state,caml_call1(upgrade,old_query));
          return caml_call2(Async_kernel[22][3],_my_,_mx_)}
        return caml_call3(_fs_[9],0,old_rpc,adapted)}
      return add$0(t,old_rpc,[0,adapt])}
    function add_rpc_version_with_failure
     (t,old_rpc,upgrade_or_error,downgrade_or_error)
     {function adapt(fn)
       {function _mo_(state,old_query)
         {function _mp_(param)
           {if(0 === param[0]){var value=param[1];return [0,value]}
            var error=param[1];
            return [1,caml_call1(Core_Error[9],error)]}
          function _mq_(query)
           {function _mu_(response)
             {var _mw_=caml_call1(downgrade_or_error,response);
              return caml_call1(Async_kernel_Deferred[12],_mw_)}
            var _mv_=caml_call2(fn,state,query);
            return caml_call2(Async_kernel_Deferred_result[3][4][2],_mv_,_mu_)}
          var
           _mr_=caml_call1(upgrade_or_error,old_query),
           _ms_=caml_call1(Async_kernel_Deferred[12],_mr_),
           _mt_=caml_call2(Async_kernel_Deferred_result[3][4][2],_ms_,_mq_);
          return caml_call2(Async_kernel[22][3],_mt_,_mp_)}
        return caml_call3(_fs_[9],0,old_rpc,_mo_)}
      return add$0(t,old_rpc,[0,adapt])}
    function add_version(t,version,bin_query,bin_response,upgrade,downgrade)
     {var rpc=caml_call4(_fs_[1],t[1],version,bin_query,bin_response);
      return add_rpc_version(t,rpc,upgrade,downgrade)}
    function add_version_with_failure
     (t,version,bin_query,bin_response,upgrade,downgrade)
     {var rpc=caml_call4(_fs_[1],t[1],version,bin_query,bin_response);
      return add_rpc_version_with_failure(t,rpc,upgrade,downgrade)}
    function implement$7(t,fn)
     {function _mm_(param){var adapt=param[1];return caml_call1(adapt,fn)}
      var _mn_=caml_call1(Core_Map[73],t[2]);
      return caml_call2(Core_List[72],_mn_,_mm_)}
    function Make(_l7_)
     {var _l8_=_l7_[1],registry=caml_call3(Core_Int[106][4],0,_fH_,0);
      function implement_multi(log_not_previously_seen_versio,f)
       {if(log_not_previously_seen_versio)
         var
          f$0=log_not_previously_seen_versio[1],
          _mi_=caml_call1(f$0,_l8_),
          log_version=caml_call3(Core_Memo[1],0,0,_mi_);
        else
         var log_version=function(_ml_){return 0};
        function _mj_(param)
         {var i=param[1];return caml_call2(i[1],log_version,f)}
        var _mk_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_mk_,_mj_)}
      function rpcs(param)
       {function _mg_(param){var rpc=param[2];return rpc}
        var _mh_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_mh_,_mg_)}
      function versions(param)
       {var _mf_=caml_call1(Core_Hashtbl[64],registry);
        return caml_call1(Core_Int[102][57],_mf_)}
      function Register(Version_i)
       {var
         rpc=
          caml_call4(_fs_[1],_l8_,Version_i[17],Version_i[8],Version_i[16]);
        function implement(log_version,f)
         {function _l__(s,q)
           {caml_call1(log_version,Version_i[17]);
            function _l$_(param){return caml_call1(Version_i[18],q)}
            var match=caml_call1(Core_Result[47],_l$_);
            if(0 === match[0])
             {var
               q$0=match[1],
               _ma_=
                function(r)
                 {function _md_(param){return caml_call1(Version_i[19],r)}
                  var match=caml_call1(Core_Result[47],_md_);
                  if(0 === match[0]){var r$0=match[1];return r$0}
                  var
                   exn=match[1],
                   _me_=
                    failed_conversion
                     ([0,
                       -71406943,
                       [0,4102853,_l8_],
                       [0,-901574920,Version_i[17]],
                       exn]);
                  return caml_call1(Core_Error[28],_me_)},
               _mb_=caml_call3(f,s,Version_i[17],q$0);
              return caml_call2(Async_kernel[22][3],_mb_,_ma_)}
            var
             exn=match[1],
             _mc_=
              failed_conversion
               ([0,
                 -250086680,
                 [0,4102853,_l8_],
                 [0,-901574920,Version_i[17]],
                 exn]);
            return caml_call1(Core_Error[28],_mc_)}
          return caml_call3(_fs_[9],0,rpc,_l__)}
        var match=caml_call2(Core_Hashtbl[53],registry,Version_i[17]);
        if(match)
         {var
           _l9_=
            multiple_registrations
             ([0,[0,4102853,_l8_],[0,-901574920,Version_i[17]]]);
          caml_call1(Core_Error[28],_l9_)}
        else
         caml_call3
          (Core_Hashtbl[34],registry,Version_i[17],[0,[0,implement],[0,rpc]]);
        return [0,rpc]}
      return [0,_l8_,registry,implement_multi,rpcs,versions,Register]}
    function Make$0(_lD_)
     {var _lE_=_lD_[1],registry=caml_call3(Core_Int[106][4],0,_fI_,0);
      function implement_multi_gen(log_not_previously_seen_versio,impl)
       {if(log_not_previously_seen_versio)
         var
          f=log_not_previously_seen_versio[1],
          _l3_=caml_call1(f,_lE_),
          log_version=caml_call3(Core_Memo[1],0,0,_l3_);
        else
         var log_version=function(_l6_){return 0};
        function _l4_(param)
         {var i=param[1];return caml_call2(i[1],log_version,impl)}
        var _l5_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_l5_,_l4_)}
      function implement_multi(log_not_previously_seen_versio,f)
       {return implement_multi_gen(log_not_previously_seen_versio,[0,f])}
      function implement_direct_multi(log_not_previously_seen_versio,f)
       {return implement_multi_gen(log_not_previously_seen_versio,[1,f])}
      function rpcs(param)
       {function _l1_(param){var rpc=param[2];return rpc}
        var _l2_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_l2_,_l1_)}
      function versions(param)
       {var _l0_=caml_call1(Core_Int[106][64],registry);
        return caml_call1(Core_Int[102][57],_l0_)}
      function Make_shared(Version_i,Convert)
       {var
         _lF_=Version_i[24],
         _lG_=Version_i[16],
         _lH_=Version_i[8],
         _lI_=Version_i[25],
         _lJ_=caml_call2(Core_Option[55],Version_i[28],0),
         rpc=caml_call7(_fr_[3],_lJ_,_lE_,_lI_,_lH_,_lG_,_lF_,0);
        function wrapped_model_of_query(q)
         {try
           {var q$0=caml_call1(Version_i[26],q);return q$0}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var
             _lZ_=
              failed_conversion
               ([0,
                 -71406943,
                 [0,4102853,_lE_],
                 [0,-901574920,Version_i[25]],
                 exn]);
            return caml_call1(Core_Error[28],_lZ_)}}
        function wrapped_error_of_model(error)
         {try
           {var error$0=caml_call1(Version_i[27],error)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var
             _lY_=
              failed_conversion
               ([0,
                 106380200,
                 [0,4102853,_lE_],
                 [0,-901574920,Version_i[25]],
                 exn]);
            return caml_call1(Core_Error[28],_lY_)}
          return [1,error$0]}
        function implement(log_version,impl)
         {if(0 === impl[0])
           {var
             f=impl[1],
             _lL_=
              function(s,q)
               {caml_call1(log_version,Version_i[25]);
                function _lQ_(param)
                 {if(0 === param[0])
                   {var
                     pipe=param[1],
                     _lT_=
                      function(exn)
                       {var
                         _lX_=
                          failed_conversion
                           ([0,
                             -71406943,
                             [0,4102853,_lE_],
                             [0,-901574920,Version_i[25]],
                             exn]);
                        return caml_call1(Core_Error[28],_lX_)},
                     _lU_=
                      function(param)
                       {var _lW_=[0,caml_call1(Convert[2],pipe)];
                        return caml_call1(Async_kernel[19],_lW_)};
                    return caml_call5(Async_kernel_Monitor[19],0,0,0,_lU_,_lT_)}
                  var error=param[1],_lV_=wrapped_error_of_model(error);
                  return caml_call1(Async_kernel[19],_lV_)}
                var
                 _lR_=wrapped_model_of_query(q),
                 _lS_=caml_call3(f,s,Version_i[25],_lR_);
                return caml_call2(Async_kernel[22][2],_lS_,_lQ_)};
            return caml_call3(_fr_[7],0,rpc,_lL_)}
          var
           f$0=impl[1],
           convert_elt=caml_call1(Core_Or_error[36],Convert[1]);
          function _lM_(s,q,dsw)
           {var writer=[0,convert_elt,dsw];
            function _lN_(param)
             {if(0 === param[0])return _fJ_;
              var error=param[1];
              return wrapped_error_of_model(error)}
            var
             _lO_=wrapped_model_of_query(q),
             _lP_=caml_call4(f$0,s,Version_i[25],_lO_,writer);
            return caml_call2(Async_kernel[22][3],_lP_,_lN_)}
          return caml_call2(_fr_[9],rpc,_lM_)}
        var match=caml_call2(Core_Hashtbl[53],registry,Version_i[25]);
        if(match)
         {var
           _lK_=
            multiple_registrations
             ([0,[0,4102853,_lE_],[0,-901574920,Version_i[25]]]);
          caml_call1(Core_Error[28],_lK_)}
        else
         caml_call3
          (Core_Hashtbl[34],registry,Version_i[25],[0,[0,implement],[1,rpc]]);
        return [0,rpc,wrapped_model_of_query,wrapped_error_of_model,implement]}
      function Register_raw(Version_i)
       {var
         convert_elt=
          caml_call1(Core_Or_error[41],cst_cannot_use_direct_interfac),
         convert_pipe=Version_i[29];
        return Make_shared
                ([0,
                  Version_i[1],
                  Version_i[2],
                  Version_i[3],
                  Version_i[4],
                  Version_i[5],
                  Version_i[6],
                  Version_i[7],
                  Version_i[8],
                  Version_i[9],
                  Version_i[10],
                  Version_i[11],
                  Version_i[12],
                  Version_i[13],
                  Version_i[14],
                  Version_i[15],
                  Version_i[16],
                  Version_i[17],
                  Version_i[18],
                  Version_i[19],
                  Version_i[20],
                  Version_i[21],
                  Version_i[22],
                  Version_i[23],
                  Version_i[24],
                  Version_i[25],
                  Version_i[26],
                  Version_i[27],
                  Version_i[28]],
                 [0,convert_elt,convert_pipe])}
      function Register(Version_i)
       {var convert_elt=[0,Version_i[29]];
        function convert_pipe(pipe)
         {return caml_call2(Async_kernel_Pipe[56],pipe,Version_i[29])}
        return Make_shared
                ([0,
                  Version_i[1],
                  Version_i[2],
                  Version_i[3],
                  Version_i[4],
                  Version_i[5],
                  Version_i[6],
                  Version_i[7],
                  Version_i[8],
                  Version_i[9],
                  Version_i[10],
                  Version_i[11],
                  Version_i[12],
                  Version_i[13],
                  Version_i[14],
                  Version_i[15],
                  Version_i[16],
                  Version_i[17],
                  Version_i[18],
                  Version_i[19],
                  Version_i[20],
                  Version_i[21],
                  Version_i[22],
                  Version_i[23],
                  Version_i[24],
                  Version_i[25],
                  Version_i[26],
                  Version_i[27],
                  Version_i[28]],
                 [0,convert_elt,convert_pipe])}
      return [0,
              _lE_,
              registry,
              implement_multi_gen,
              implement_multi,
              implement_direct_multi,
              rpcs,
              versions,
              Make_shared,
              Register_raw,
              Register]}
    function Make$1(_lb_)
     {var _lc_=_lb_[1],registry=caml_call3(Core_Int[106][4],0,_fK_,0);
      function implement_multi(log_not_previously_seen_versio,f)
       {if(log_not_previously_seen_versio)
         var
          f$0=log_not_previously_seen_versio[1],
          _lz_=caml_call1(f$0,_lc_),
          log_version=caml_call3(Core_Memo[1],0,0,_lz_);
        else
         var log_version=function(_lC_){return 0};
        function _lA_(param)
         {var i=param[1];return caml_call2(i[1],log_version,f)}
        var _lB_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_lB_,_lA_)}
      function rpcs(param)
       {function _lx_(param){var rpc=param[2];return rpc}
        var _ly_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_ly_,_lx_)}
      function versions(param)
       {var _lw_=caml_call1(Core_Int[106][64],registry);
        return caml_call1(Core_Int[102][57],_lw_)}
      function Register_raw(Version_i)
       {var
         _le_=Version_i[32],
         _lf_=Version_i[24],
         _lg_=Version_i[16],
         _lh_=Version_i[8],
         _li_=Version_i[33],
         _lj_=caml_call2(Core_Option[55],Version_i[37],0),
         rpc=caml_call8(_fq_[3],_lj_,_lc_,_li_,_lh_,_lg_,_lf_,_le_,0);
        function implement(log_version,f)
         {function _ll_(s,q)
           {caml_call1(log_version,Version_i[33]);
            try
             {var q$0=caml_call1(Version_i[34],q)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              var
               _lm_=
                failed_conversion
                 ([0,
                   -71406943,
                   [0,4102853,_lc_],
                   [0,-901574920,Version_i[33]],
                   exn]);
              return caml_call1(Core_Error[28],_lm_)}
            function _ln_(param)
             {if(0 === param[0])
               {var match=param[1],pipe=match[2],model_state=match[1];
                try
                 {var
                   state$0=caml_call1(Version_i[35],model_state),
                   state=state$0}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  var
                   _lp_=
                    failed_conversion
                     ([0,
                       389604849,
                       [0,4102853,_lc_],
                       [0,-901574920,Version_i[33]],
                       exn]),
                   state=caml_call1(Core_Error[28],_lp_)}
                var
                 _lq_=
                  function(exn)
                   {var
                     _lv_=
                      failed_conversion
                       ([0,
                         999946793,
                         [0,4102853,_lc_],
                         [0,-901574920,Version_i[33]],
                         exn]);
                    return caml_call1(Core_Error[28],_lv_)},
                 _lr_=
                  function(param)
                   {var
                     _lu_=
                      [0,[0,state,caml_call2(Version_i[38],model_state,pipe)]];
                    return caml_call1(Async_kernel[19],_lu_)};
                return caml_call5(Async_kernel_Monitor[19],0,0,0,_lr_,_lq_)}
              var error=param[1];
              try
               {var switch$0=0,error$0=caml_call1(Version_i[36],error);
                switch$0 = 1}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                var
                 _ls_=
                  failed_conversion
                   ([0,
                     106380200,
                     [0,4102853,_lc_],
                     [0,-901574920,Version_i[33]],
                     exn]),
                 _lt_=caml_call1(Core_Error[28],_ls_)}
              if(switch$0)var _lt_=[1,error$0];
              return caml_call1(Async_kernel[19],_lt_)}
            var _lo_=caml_call3(f,s,Version_i[33],q$0);
            return caml_call2(Async_kernel[22][2],_lo_,_ln_)}
          return caml_call3(_fq_[8],0,rpc,_ll_)}
        var match=caml_call2(Core_Hashtbl[53],registry,Version_i[33]);
        if(match)
         {var
           _lk_=
            multiple_registrations
             ([0,[0,4102853,_lc_],[0,-901574920,Version_i[33]]]);
          caml_call1(Core_Error[28],_lk_)}
        else
         caml_call3
          (Core_Hashtbl[34],registry,Version_i[33],[0,[0,implement],[2,rpc]]);
        return [0,rpc]}
      function Register(Version_i)
       {var
         bin_shape_query=Version_i[1],
         bin_size_query=Version_i[2],
         bin_write_query=Version_i[3],
         bin_writer_query=Version_i[4],
         bin_read_query=Version_i[5],
         bin_read_query$0=Version_i[6],
         bin_reader_query=Version_i[7],
         bin_query=Version_i[8],
         bin_shape_state=Version_i[9],
         bin_size_state=Version_i[10],
         bin_write_state=Version_i[11],
         bin_writer_state=Version_i[12],
         bin_read_state=Version_i[13],
         bin_read_state$0=Version_i[14],
         bin_reader_state=Version_i[15],
         bin_state=Version_i[16],
         bin_shape_update=Version_i[17],
         bin_size_update=Version_i[18],
         bin_write_update=Version_i[19],
         bin_writer_update=Version_i[20],
         bin_read_update=Version_i[21],
         bin_read_update$0=Version_i[22],
         bin_reader_update=Version_i[23],
         bin_update=Version_i[24],
         bin_shape_error=Version_i[25],
         bin_size_error=Version_i[26],
         bin_write_error=Version_i[27],
         bin_writer_error=Version_i[28],
         bin_read_error=Version_i[29],
         bin_read_error$0=Version_i[30],
         bin_reader_error=Version_i[31],
         bin_error=Version_i[32],
         version=Version_i[33],
         model_of_query=Version_i[34],
         state_of_model=Version_i[35],
         error_of_model=Version_i[36],
         client_pushes_back=Version_i[37],
         _ld_=Version_i[38];
        function update_of_model(state,pipe)
         {return caml_call2(Async_kernel_Pipe[56],pipe,_ld_)}
        var
         include=
          Register_raw
           ([0,
             bin_shape_query,
             bin_size_query,
             bin_write_query,
             bin_writer_query,
             bin_read_query,
             bin_read_query$0,
             bin_reader_query,
             bin_query,
             bin_shape_state,
             bin_size_state,
             bin_write_state,
             bin_writer_state,
             bin_read_state,
             bin_read_state$0,
             bin_reader_state,
             bin_state,
             bin_shape_update,
             bin_size_update,
             bin_write_update,
             bin_writer_update,
             bin_read_update,
             bin_read_update$0,
             bin_reader_update,
             bin_update,
             bin_shape_error,
             bin_size_error,
             bin_write_error,
             bin_writer_error,
             bin_read_error,
             bin_read_error$0,
             bin_reader_error,
             bin_error,
             version,
             model_of_query,
             state_of_model,
             error_of_model,
             client_pushes_back,
             update_of_model]),
         rpc=include[1];
        return [0,rpc]}
      return [0,
              _lc_,
              registry,
              implement_multi,
              rpcs,
              versions,
              Register_raw,
              Register]}
    function Make$2(_k0_)
     {var _k1_=_k0_[1],registry=caml_call3(Core_Int[106][4],0,_fL_,0);
      function implement_multi(log_not_previously_seen_versio,f)
       {if(log_not_previously_seen_versio)
         var
          f$0=log_not_previously_seen_versio[1],
          _k9_=caml_call1(f$0,_k1_),
          log_version=caml_call3(Core_Memo[1],0,0,_k9_);
        else
         var log_version=function(_la_){return 0};
        function _k__(param)
         {var i=param[1];return caml_call2(i[1],log_version,f)}
        var _k$_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_k$_,_k__)}
      function rpcs(param)
       {function _k7_(param){var rpc=param[2];return rpc}
        var _k8_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_k8_,_k7_)}
      function versions(param)
       {var _k6_=caml_call1(Core_Hashtbl[64],registry);
        return caml_call1(Core_Int[102][57],_k6_)}
      function Register(Version_i)
       {var rpc=caml_call3(_fp_[1],_k1_,Version_i[9],Version_i[8]);
        function implement(log_version,f)
         {function _k3_(s,q)
           {caml_call1(log_version,Version_i[9]);
            function _k4_(param){return caml_call1(Version_i[10],q)}
            var match=caml_call1(Core_Result[47],_k4_);
            if(0 === match[0])
             {var q$0=match[1];return caml_call3(f,s,Version_i[9],q$0)}
            var
             exn=match[1],
             _k5_=
              failed_conversion
               ([0,3854881,[0,4102853,_k1_],[0,-901574920,Version_i[9]],exn]);
            return caml_call1(Core_Error[28],_k5_)}
          return caml_call3(_fp_[7],0,rpc,_k3_)}
        var match=caml_call2(Core_Hashtbl[53],registry,Version_i[9]);
        if(match)
         {var
           _k2_=
            multiple_registrations
             ([0,[0,4102853,_k1_],[0,-901574920,Version_i[9]]]);
          caml_call1(Core_Error[28],_k2_)}
        else
         caml_call3
          (Core_Hashtbl[34],registry,Version_i[9],[0,[0,implement],[3,rpc]]);
        return [0,rpc]}
      return [0,_k1_,registry,implement_multi,rpcs,versions,Register]}
    var
     Model=[0,name$4],
     include$4=Make(Model),
     _fM_=include$4[3],
     _fN_=include$4[6],
     _fO_=Model[1],
     _fP_=Core[506],
     _fQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_query$1),0,_fP_],0],
     _fR_=caml_call1(Bin_prot_Shape[4][1],cst_src_versioned_rpc_ml_642_6),
     group$12=caml_call2(Bin_prot_Shape[6],_fR_,_fQ_),
     _fS_=caml_call1(Bin_prot_Shape[2][1],cst_query$2),
     bin_shape_query=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$12,_fS_),0),
     bin_size_query=Core[507],
     bin_write_query=Core[508],
     bin_writer_query=[0,bin_size_query,bin_write_query],
     bin_read_query=Core[511],
     bin_read_query$0=Core[510],
     bin_reader_query=[0,bin_read_query$0,bin_read_query],
     bin_query$2=[0,bin_shape_query,bin_writer_query,bin_reader_query],
     _fT_=caml_call1(Bin_prot_Shape[7],[0,Core[459],[0,Core[344],0]]),
     _fU_=caml_call1(Core[410],_fT_),
     _fV_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_response$3),0,_fU_],0],
     _fW_=caml_call1(Bin_prot_Shape[4][1],cst_src_versioned_rpc_ml_643_6),
     group$13=caml_call2(Bin_prot_Shape[6],_fW_,_fV_),
     _fX_=caml_call1(Bin_prot_Shape[2][1],cst_response$4),
     bin_shape_response=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$13,_fX_),0),
     version$3=1;
    function bin_size_response(v)
     {function _kX_(param)
       {var
         v2=param[2],
         v1=param[1],
         _kY_=caml_call1(Core[460],v1),
         size=caml_call2(Bin_prot_Common[23],0,_kY_),
         _kZ_=caml_call1(Core[345],v2);
        return caml_call2(Bin_prot_Common[23],size,_kZ_)}
      return caml_call2(Core[411],_kX_,v)}
    function bin_write_response(buf,pos,v)
     {function _kW_(buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(Core[461],buf,pos,v1);
        return caml_call3(Core[346],buf,pos$0,v2)}
      return caml_call3(caml_call1(Core[412],_kW_),buf,pos,v)}
    var bin_writer_response=[0,bin_size_response,bin_write_response];
    function bin_read_response(buf,pos_ref,vint)
     {function _kV_(buf,pos_ref)
       {var
         v1=caml_call2(Core[463],buf,pos_ref),
         v2=caml_call2(Core[348],buf,pos_ref);
        return [0,v1,v2]}
      return caml_call3(caml_call1(Core[415],_kV_),buf,pos_ref,vint)}
    function bin_read_response$0(buf,pos_ref)
     {function _kU_(buf,pos_ref)
       {var
         v1=caml_call2(Core[463],buf,pos_ref),
         v2=caml_call2(Core[348],buf,pos_ref);
        return [0,v1,v2]}
      return caml_call2(caml_call1(Core[414],_kU_),buf,pos_ref)}
    var
     bin_reader_response=[0,bin_read_response$0,bin_read_response],
     bin_response$1=
      [0,bin_shape_response,bin_writer_response,bin_reader_response];
    function model_of_query(q){return q}
    var _fY_=Core_List[72];
    function _fZ_(param)
     {var version=param[2],name=param[1];return [0,name,version]}
    function response_of_model(_kT_){return caml_call2(_fY_,_kT_,_fZ_)}
    var
     include$5=
      caml_call1
       (_fN_,
        [0,
         bin_shape_query,
         bin_size_query,
         bin_write_query,
         bin_writer_query,
         bin_read_query$0,
         bin_read_query,
         bin_reader_query,
         bin_query$2,
         bin_shape_response,
         bin_size_response,
         bin_write_response,
         bin_writer_response,
         bin_read_response$0,
         bin_read_response,
         bin_reader_response,
         bin_response$1,
         version$3,
         model_of_query,
         response_of_model]),
     rpc=include$5[1];
    function add$1(impls)
     {var
       menu=caml_call2(Core_List[72],impls,_fu_[2]),
       menu_impls=
        caml_call2
         (_fM_,
          0,
          function(param,_kS_,_kR_){return caml_call1(Async_kernel[19],menu)});
      return caml_call2(Core[157],impls,menu_impls)}
    function supported_rpcs(t)
     {function _kN_(param)
       {var versions=param[2],name=param[1];
        function _kP_(version){return [0,name,version]}
        var _kQ_=caml_call1(Core_Int[102][14],versions);
        return caml_call2(Base_List[33][4][3],_kQ_,_kP_)}
      var _kO_=caml_call1(Core_String[145][75],t);
      return caml_call2(Base_List[33][4][2],_kO_,_kN_)}
    function supported_versions(t,rpc_name)
     {var _kL_=Core_Int[102][54],_kM_=caml_call2(Core_Hashtbl[53],t,rpc_name);
      return caml_call2(Core_Option[34],_kM_,_kL_)}
    function of_entries(entries)
     {var
       _kJ_=Core_Int[102][57],
       _kK_=caml_call3(Core_String[145][9],0,0,entries);
      return caml_call2(Core_Hashtbl[40],_kK_,_kJ_)}
    function request(conn)
     {function _kH_(result)
       {return caml_call2(Core_Result[38],result,of_entries)}
      var _kI_=caml_call3(_fs_[13],rpc,conn,0);
      return caml_call2(Async_kernel[22][3],_kI_,_kH_)}
    function create$12(descriptions)
     {function _kG_(param)
       {var version=param[2],name=param[1];return [0,name,version]}
      return of_entries(caml_call2(Core_List[72],descriptions,_kG_))}
    function menu(r){return r[2]}
    function connection(r){return r[1]}
    function create$13(connection)
     {function _kE_(menu){return [0,connection,menu]}
      var _kF_=request(connection);
      return caml_call2(Async_kernel_Deferred_or_error[19][4][3],_kF_,_kE_)}
    function create_directly(connection,menu){return [0,connection,menu]}
    function most_recent_common_version
     (rpc_name,caller_versions,callee_versions,callee_menu)
     {var
       _ky_=caml_call2(Core_Set[15],callee_versions,caller_versions),
       match=caml_call1(Core_Set[59],_ky_);
      if(match){var version=match[1];return [0,version]}
      var
       _kz_=
        [0,
         [1,
          [0,
           _f0_,
           [0,caml_call2(Core_String[145][1],Core_Int[102][75],callee_menu),0]]],
         0],
       _kA_=
        [0,
         [1,[0,_f1_,[0,caml_call1(Core_Int[102][75],callee_versions),0]]],
         _kz_],
       _kB_=
        [0,
         [1,[0,_f2_,[0,caml_call1(Core_Int[102][75],caller_versions),0]]],
         _kA_],
       _kC_=[0,[1,[0,_f3_,[0,caml_call1(Core[471],rpc_name),0]]],_kB_],
       _kD_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_caller_and_callee_share_no),
          _kC_]];
      return caml_call1(Core[233],_kD_)}
    var
     Expect_test_collector$2=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _f4_(param)
     {var
       menu=of_entries([0,[0,rpc_name,2],0]),
       _kv_=caml_call1(Core_Int[102][57],_f5_),
       x_038=
        most_recent_common_version
         (rpc_name,caml_call1(Core_Int[102][57],_f6_),_kv_,menu),
       _kw_=caml_call2(Core_Or_error[13],Core[356],x_038);
      caml_call2(Core[248],0,_kw_);
      var
       _kx_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_versioned_rpc_ml$0),
         733,
         23051,
         23057,
         23063];
      return caml_call1(Expect_test_collector$2[1],_kx_)}
    var
     _f7_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_versioned_rpc_ml$1),
       733,
       23051,
       23064,
       23076],
     _f__=
      [0,
       [0,
        _f9_,
        _f8_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_versioned_rpc_ml$2),
         733,
         23051,
         23057,
         23063],
        _f7_],
       0],
     _ga_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_versioned_rpc_ml$4),
       722,
       22633,
       22635,
       23077],
     _gb_=
      caml_call1(Expect_test_common_File[4][3],cst_167b6f40dad59162efca5d754f);
    caml_call9
     (Expect_test_collector$2[3],
      _gb_,
      _ga_,
      cst_src_versioned_rpc_ml$3,
      _f$_,
      0,
      _f__,
      0,
      Inline_test_config,
      _f4_);
    var
     Expect_test_collector$3=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _gc_(param)
     {var
       menu=of_entries([0,[0,not_the_rpc,1],[0,[0,not_the_rpc,2],0]]),
       _ks_=supported_versions(menu,the_rpc),
       x_039=
        most_recent_common_version
         (the_rpc,caml_call1(Core_Int[102][57],_gd_),_ks_,menu),
       _kt_=caml_call2(Core_Or_error[13],Core[356],x_039);
      caml_call2(Core[248],0,_kt_);
      var
       _ku_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_versioned_rpc_ml$5),
         748,
         23583,
         23589,
         23595];
      return caml_call1(Expect_test_collector$3[1],_ku_)}
    var
     _ge_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_versioned_rpc_ml$6),
       749,
       23596,
       23602,
       23798],
     _gh_=
      [0,
       [0,
        _gg_,
        _gf_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_versioned_rpc_ml$7),
         748,
         23583,
         23589,
         23595],
        _ge_],
       0],
     _gj_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_versioned_rpc_ml$9),
       736,
       23084,
       23086,
       23799],
     _gk_=
      caml_call1
       (Expect_test_common_File[4][3],cst_167b6f40dad59162efca5d754f$0);
    caml_call9
     (Expect_test_collector$3[3],
      _gk_,
      _gj_,
      cst_src_versioned_rpc_ml$8,
      _gi_,
      0,
      _gh_,
      0,
      Inline_test_config,
      _gc_);
    function Make$3(M)
     {function with_specific_version
       (version,connection,name,query,dispatcher,registry)
       {var match=caml_call2(Core_Hashtbl[53],registry,version);
        if(match)
         {var match$0=match[1],dispatch=match$0[1];
          return caml_call3(dispatcher,dispatch,connection,query)}
        var x=[0,name,version];
        function _kq_(param)
         {var
           arg1_018=param[2],
           arg0_017=param[1],
           res0_019=caml_call1(Core[471],arg0_017),
           res1_020=caml_call1(Core[356],arg1_018);
          return [1,[0,res0_019,[0,res1_020,0]]]}
        var
         _kr_=
          [1,caml_call5(Core_Error[17],0,0,cst_unknown_rpc_version,x,_kq_)];
        return caml_call1(M[5],_kr_)}
      function with_version_menu
       (param,query,name,versions,registry,dispatcher)
       {var
         menu=param[2],
         connection=param[1],
         callee_versions=supported_versions(menu,name),
         caller_versions=caml_call1(versions,0),
         match=
          most_recent_common_version
           (name,caller_versions,callee_versions,menu);
        if(0 === match[0])
         {var version=match[1];
          return with_specific_version
                  (version,connection,name,query,dispatcher,registry)}
        var e=match[1];
        return caml_call1(M[5],[1,e])}
      return [0,with_specific_version,with_version_menu]}
    var
     Async=
      Make$3
       ([0,
         Async_kernel_Deferred[8],
         Async_kernel_Deferred[9],
         Async_kernel_Deferred[10],
         Async_kernel_Deferred[11],
         Async_kernel_Deferred[12],
         Async_kernel_Deferred[13],
         Async_kernel_Deferred[14],
         Async_kernel_Deferred[15],
         Async_kernel_Deferred[21],
         Async_kernel_Deferred[22],
         Async_kernel_Deferred[16]]),
     Direct=Make$3(Base_Monad[9]);
    function Make$4(_kb_)
     {var _kc_=_kb_[1],registry=caml_call3(Core_Int[106][4],0,_gl_,0);
      function rpcs(param)
       {function _ko_(param){var rpc=param[2];return rpc}
        var _kp_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_kp_,_ko_)}
      function versions(param)
       {var _kn_=caml_call1(Core_Int[106][64],registry);
        return caml_call1(Core_Int[102][57],_kn_)}
      function dispatch_multi(conn_with_menu,query)
       {function _kl_(_km_){return _km_}
        return caml_call6
                (Async[2],conn_with_menu,query,_kc_,versions,registry,_kl_)}
      function Register(Version_i)
       {var
         rpc=
          caml_call4(_fs_[1],_kc_,Version_i[17],Version_i[8],Version_i[16]);
        function dispatch(conn,mq)
         {function _kf_(param){return caml_call1(Version_i[18],mq)}
          var match=caml_call1(Core_Result[47],_kf_);
          if(0 === match[0])
           {var
             q=match[1],
             _kg_=
              function(result)
               {function _kj_(r)
                 {function _kk_(param){return caml_call2(Version_i[19],mq,r)}
                  var match=caml_call1(Core_Result[47],_kk_);
                  if(0 === match[0]){var r$0=match[1];return [0,r$0]}
                  var exn=match[1];
                  return [1,
                          failed_conversion
                           ([0,
                             -71406943,
                             [0,4102853,_kc_],
                             [0,-901574920,Version_i[17]],
                             exn])]}
                return caml_call2(Core_Result[19],result,_kj_)},
             _kh_=caml_call3(_fs_[13],rpc,conn,q);
            return caml_call2(Async_kernel[22][3],_kh_,_kg_)}
          var
           exn=match[1],
           _ki_=
            [1,
             failed_conversion
              ([0,
                -250086680,
                [0,4102853,_kc_],
                [0,-901574920,Version_i[17]],
                exn])];
          return caml_call1(Async_kernel[19],_ki_)}
        var match=caml_call2(Core_Hashtbl[53],registry,Version_i[17]);
        if(match)
         {var
           _ke_=
            multiple_registrations
             ([0,[0,4102853,_kc_],[0,-901574920,Version_i[17]]]);
          caml_call1(Core_Error[28],_ke_)}
        else
         caml_call3
          (Core_Hashtbl[34],registry,Version_i[17],[0,dispatch,[0,rpc]]);
        return [0,rpc]}
      function Register$0(Version_i)
       {var
         bin_shape_query=Version_i[1],
         bin_size_query=Version_i[2],
         bin_write_query=Version_i[3],
         bin_writer_query=Version_i[4],
         bin_read_query=Version_i[5],
         bin_read_query$0=Version_i[6],
         bin_reader_query=Version_i[7],
         bin_query=Version_i[8],
         bin_shape_response=Version_i[9],
         bin_size_response=Version_i[10],
         bin_write_response=Version_i[11],
         bin_writer_response=Version_i[12],
         bin_read_response=Version_i[13],
         bin_read_response$0=Version_i[14],
         bin_reader_response=Version_i[15],
         bin_response=Version_i[16],
         version=Version_i[17],
         query_of_model=Version_i[18],
         _kd_=Version_i[19];
        function model_of_response(param,r){return caml_call1(_kd_,r)}
        return Register
                ([0,
                  bin_shape_query,
                  bin_size_query,
                  bin_write_query,
                  bin_writer_query,
                  bin_read_query,
                  bin_read_query$0,
                  bin_reader_query,
                  bin_query,
                  bin_shape_response,
                  bin_size_response,
                  bin_write_response,
                  bin_writer_response,
                  bin_read_response,
                  bin_read_response$0,
                  bin_reader_response,
                  bin_response,
                  version,
                  query_of_model,
                  model_of_response])}
      return [0,
              _kc_,
              registry,
              rpcs,
              versions,
              dispatch_multi,
              Register,
              Register$0]}
    function Make$5(_jL_)
     {var _jM_=_jL_[1],registry=caml_call3(Core_Int[106][4],0,_gm_,0);
      function rpcs(param)
       {function _j$_(param){var rpc=param[2];return rpc}
        var _ka_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_ka_,_j$_)}
      function versions(param)
       {var _j__=caml_call1(Core_Int[106][64],registry);
        return caml_call1(Core_Int[102][57],_j__)}
      function dispatch_iter_multi(conn_with_menu,query,f)
       {function _j9_(param,conn,query)
         {var dispatch_iter=param[3];
          return caml_call3(dispatch_iter,conn,query,f)}
        return caml_call6
                (Async[2],conn_with_menu,query,_jM_,versions,registry,_j9_)}
      function dispatch_multi(conn_with_menu,query)
       {function _j8_(param,conn,query)
         {var dispatch=param[2];return caml_call2(dispatch,conn,query)}
        return caml_call6
                (Async[2],conn_with_menu,query,_jM_,versions,registry,_j8_)}
      function abort_multi(conn_with_menu,id)
       {function _j7_(param,conn,id)
         {var abort=param[1];caml_call2(abort,conn,id);return _gn_}
        return caml_call6
                (Direct[2],conn_with_menu,id,_jM_,versions,registry,_j7_)}
      function Make_shared(Version_i,Convert)
       {var
         _jO_=Version_i[24],
         _jP_=Version_i[16],
         _jQ_=Version_i[8],
         _jR_=Version_i[25],
         _jS_=caml_call2(Core_Option[55],Version_i[28],0),
         rpc=caml_call7(_fr_[3],_jS_,_jM_,_jR_,_jQ_,_jP_,_jO_,0);
        function wrapped_query_of_model(q)
         {try
           {var q$0=caml_call1(Version_i[26],q)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var
             _j6_=
              [1,
               failed_conversion
                ([0,
                  -250086680,
                  [0,4102853,_jM_],
                  [0,-901574920,Version_i[25]],
                  exn])];
            return caml_call1(Async_kernel[19],_j6_)}
          return caml_call1(Async_kernel[19],[0,q$0])}
        function convert_result(result,convert_ok)
         {if(0 !== result[0])return result;
          var _j5_=result[1];
          if(0 === _j5_[0])
           {var ok=_j5_[1];return [0,[0,caml_call1(convert_ok,ok)]]}
          var e=_j5_[1];
          try
           {var e$0=caml_call1(Version_i[27],e)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            return [1,
                    failed_conversion
                     ([0,
                       106380200,
                       [0,4102853,_jM_],
                       [0,-901574920,Version_i[25]],
                       exn])]}
          return [0,[1,e$0]]}
        function dispatch(conn,q)
         {function _j1_(q)
           {function _j3_(result)
             {return convert_result
                      (result,
                       function(param)
                        {var id=param[2],pipe=param[1];
                         return [0,caml_call1(Convert[2],pipe),id]})}
            var _j4_=caml_call3(_fr_[10],rpc,conn,q);
            return caml_call2(Async_kernel[22][3],_j4_,_j3_)}
          var _j2_=wrapped_query_of_model(q);
          return caml_call2(Async_kernel[17],_j2_,_j1_)}
        function dispatch_iter(conn,q,f)
         {var convert_elt=caml_call1(Core_Or_error[36],Convert[1]);
          function _jU_(q)
           {function _jW_(result)
             {return convert_result(result,function(_j0_){return _j0_})}
            function _jX_(message)
             {if(0 === message[0])
               var u=message[1],_jZ_=[0,caml_call1(convert_elt,u)];
              else
               var _jZ_=message;
              return caml_call1(f,_jZ_)}
            var _jY_=caml_call4(_fr_[14],rpc,conn,q,_jX_);
            return caml_call2(Async_kernel[22][3],_jY_,_jW_)}
          var _jV_=wrapped_query_of_model(q);
          return caml_call2(Async_kernel[17],_jV_,_jU_)}
        function abort(conn,id){return caml_call3(_fr_[15],rpc,conn,id)}
        var match=caml_call2(Core_Hashtbl[53],registry,Version_i[25]);
        if(match)
         {var
           _jT_=
            multiple_registrations
             ([0,[0,4102853,_jM_],[0,-901574920,Version_i[25]]]);
          caml_call1(Core_Error[28],_jT_)}
        else
         caml_call3
          (Core_Hashtbl[34],
           registry,
           Version_i[25],
           [0,[0,abort,dispatch,dispatch_iter],[1,rpc]]);
        return [0,
                rpc,
                wrapped_query_of_model,
                convert_result,
                dispatch,
                dispatch_iter,
                abort]}
      function Register_raw(Version_i)
       {var
         convert_elt=
          caml_call1(Core_Or_error[41],cst_Cannot_use_Direct_with_Reg),
         convert_pipe=Version_i[29];
        return Make_shared
                ([0,
                  Version_i[1],
                  Version_i[2],
                  Version_i[3],
                  Version_i[4],
                  Version_i[5],
                  Version_i[6],
                  Version_i[7],
                  Version_i[8],
                  Version_i[9],
                  Version_i[10],
                  Version_i[11],
                  Version_i[12],
                  Version_i[13],
                  Version_i[14],
                  Version_i[15],
                  Version_i[16],
                  Version_i[17],
                  Version_i[18],
                  Version_i[19],
                  Version_i[20],
                  Version_i[21],
                  Version_i[22],
                  Version_i[23],
                  Version_i[24],
                  Version_i[25],
                  Version_i[26],
                  Version_i[27],
                  Version_i[28]],
                 [0,convert_elt,convert_pipe])}
      function Register(Version_i)
       {var convert_elt=[0,Version_i[29]];
        function convert_pipe(rs)
         {function _jN_(r)
           {try
             {var r$0=caml_call1(Version_i[29],r)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              return [1,
                      failed_conversion
                       ([0,
                         -71406943,
                         [0,4102853,_jM_],
                         [0,-901574920,Version_i[25]],
                         exn])]}
            return [0,r$0]}
          return caml_call2(Async_kernel_Pipe[56],rs,_jN_)}
        return Make_shared
                ([0,
                  Version_i[1],
                  Version_i[2],
                  Version_i[3],
                  Version_i[4],
                  Version_i[5],
                  Version_i[6],
                  Version_i[7],
                  Version_i[8],
                  Version_i[9],
                  Version_i[10],
                  Version_i[11],
                  Version_i[12],
                  Version_i[13],
                  Version_i[14],
                  Version_i[15],
                  Version_i[16],
                  Version_i[17],
                  Version_i[18],
                  Version_i[19],
                  Version_i[20],
                  Version_i[21],
                  Version_i[22],
                  Version_i[23],
                  Version_i[24],
                  Version_i[25],
                  Version_i[26],
                  Version_i[27],
                  Version_i[28]],
                 [0,convert_elt,convert_pipe])}
      return [0,
              _jM_,
              registry,
              rpcs,
              versions,
              dispatch_iter_multi,
              dispatch_multi,
              abort_multi,
              Make_shared,
              Register_raw,
              Register]}
    function Make$6(_js_)
     {var _jt_=_js_[1],registry=caml_call3(Core_Int[106][4],0,_go_,0);
      function rpcs(param)
       {function _jJ_(param){var rpc=param[2];return rpc}
        var _jK_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_jK_,_jJ_)}
      function versions(param)
       {var _jI_=caml_call1(Core_Int[106][64],registry);
        return caml_call1(Core_Int[102][57],_jI_)}
      function dispatch_multi(conn_with_menu,query)
       {function _jG_(_jH_){return _jH_}
        return caml_call6
                (Async[2],conn_with_menu,query,_jt_,versions,registry,_jG_)}
      function Register_raw(Version_i)
       {var
         _jv_=Version_i[32],
         _jw_=Version_i[24],
         _jx_=Version_i[16],
         _jy_=Version_i[8],
         _jz_=Version_i[33],
         _jA_=caml_call2(Core_Option[55],Version_i[37],0),
         rpc=caml_call8(_fq_[3],_jA_,_jt_,_jz_,_jy_,_jx_,_jw_,_jv_,0);
        function dispatch(conn,q)
         {try
           {var q$0=caml_call1(Version_i[34],q)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var
             _jC_=
              [1,
               failed_conversion
                ([0,
                  -250086680,
                  [0,4102853,_jt_],
                  [0,-901574920,Version_i[33]],
                  exn])];
            return caml_call1(Async_kernel[19],_jC_)}
          function _jD_(result)
           {if(0 !== result[0]){var exn=result[1];return [1,exn]}
            var _jF_=result[1];
            if(0 === _jF_[0])
             {var match=_jF_[1],id=match[3],pipe=match[2],state=match[1];
              try
               {var state$0=caml_call1(Version_i[35],state)}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                return [1,
                        failed_conversion
                         ([0,
                           389604849,
                           [0,4102853,_jt_],
                           [0,-901574920,Version_i[33]],
                           exn])]}
              return [0,[0,[0,state$0,caml_call1(Version_i[38],pipe),id]]]}
            var e=_jF_[1];
            try
             {var e$0=caml_call1(Version_i[36],e)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              return [1,
                      failed_conversion
                       ([0,
                         106380200,
                         [0,4102853,_jt_],
                         [0,-901574920,Version_i[33]],
                         exn])]}
            return [0,[1,e$0]]}
          var _jE_=caml_call3(_fq_[9],rpc,conn,q$0);
          return caml_call2(Async_kernel[22][3],_jE_,_jD_)}
        var match=caml_call2(Core_Hashtbl[53],registry,Version_i[33]);
        if(match)
         {var
           _jB_=
            multiple_registrations
             ([0,[0,4102853,_jt_],[0,-901574920,Version_i[33]]]);
          caml_call1(Core_Error[28],_jB_)}
        else
         caml_call3
          (Core_Hashtbl[34],registry,Version_i[33],[0,dispatch,[2,rpc]]);
        return [0,rpc]}
      function Register(Version_i)
       {var
         bin_shape_query=Version_i[1],
         bin_size_query=Version_i[2],
         bin_write_query=Version_i[3],
         bin_writer_query=Version_i[4],
         bin_read_query=Version_i[5],
         bin_read_query$0=Version_i[6],
         bin_reader_query=Version_i[7],
         bin_query=Version_i[8],
         bin_shape_state=Version_i[9],
         bin_size_state=Version_i[10],
         bin_write_state=Version_i[11],
         bin_writer_state=Version_i[12],
         bin_read_state=Version_i[13],
         bin_read_state$0=Version_i[14],
         bin_reader_state=Version_i[15],
         bin_state=Version_i[16],
         bin_shape_update=Version_i[17],
         bin_size_update=Version_i[18],
         bin_write_update=Version_i[19],
         bin_writer_update=Version_i[20],
         bin_read_update=Version_i[21],
         bin_read_update$0=Version_i[22],
         bin_reader_update=Version_i[23],
         bin_update=Version_i[24],
         bin_shape_error=Version_i[25],
         bin_size_error=Version_i[26],
         bin_write_error=Version_i[27],
         bin_writer_error=Version_i[28],
         bin_read_error=Version_i[29],
         bin_read_error$0=Version_i[30],
         bin_reader_error=Version_i[31],
         bin_error=Version_i[32],
         version=Version_i[33],
         query_of_model=Version_i[34],
         model_of_state=Version_i[35],
         model_of_error=Version_i[36],
         client_pushes_back=Version_i[37];
        function model_of_update(rs)
         {function _ju_(r)
           {try
             {var r$0=caml_call1(Version_i[38],r)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              return [1,
                      failed_conversion
                       ([0,999946793,[0,4102853,_jt_],[0,-901574920,version],exn])]}
            return [0,r$0]}
          return caml_call2(Async_kernel_Pipe[56],rs,_ju_)}
        var
         include=
          Register_raw
           ([0,
             bin_shape_query,
             bin_size_query,
             bin_write_query,
             bin_writer_query,
             bin_read_query,
             bin_read_query$0,
             bin_reader_query,
             bin_query,
             bin_shape_state,
             bin_size_state,
             bin_write_state,
             bin_writer_state,
             bin_read_state,
             bin_read_state$0,
             bin_reader_state,
             bin_state,
             bin_shape_update,
             bin_size_update,
             bin_write_update,
             bin_writer_update,
             bin_read_update,
             bin_read_update$0,
             bin_reader_update,
             bin_update,
             bin_shape_error,
             bin_size_error,
             bin_write_error,
             bin_writer_error,
             bin_read_error,
             bin_read_error$0,
             bin_reader_error,
             bin_error,
             version,
             query_of_model,
             model_of_state,
             model_of_error,
             client_pushes_back,
             model_of_update]),
         rpc=include[1];
        return [0,rpc]}
      return [0,
              _jt_,
              registry,
              rpcs,
              versions,
              dispatch_multi,
              Register_raw,
              Register]}
    function Make$7(_jj_)
     {var _jk_=_jj_[1],registry=caml_call3(Core_Int[106][4],0,_gp_,0);
      function rpcs(param)
       {function _jq_(param){var rpc=param[2];return rpc}
        var _jr_=caml_call1(Core_Hashtbl[65],registry);
        return caml_call2(Core_List[72],_jr_,_jq_)}
      function versions(param)
       {var _jp_=caml_call1(Core_Int[106][64],registry);
        return caml_call1(Core_Int[102][57],_jp_)}
      function dispatch_multi(conn_with_menu,msg)
       {function _jn_(_jo_){return _jo_}
        return caml_call6
                (Direct[2],conn_with_menu,msg,_jk_,versions,registry,_jn_)}
      function Register(Version_i)
       {var rpc=caml_call3(_fp_[1],_jk_,Version_i[9],Version_i[8]);
        function dispatch(conn,q)
         {function _jm_(param){return caml_call1(Version_i[10],q)}
          var match=caml_call1(Core_Result[47],_jm_);
          if(0 === match[0])
           {var q$0=match[1];return caml_call3(_fp_[10],rpc,conn,q$0)}
          var exn=match[1];
          return [1,
                  failed_conversion
                   ([0,
                     3854881,
                     [0,4102853,_jk_],
                     [0,-901574920,Version_i[9]],
                     exn])]}
        var match=caml_call2(Core_Hashtbl[53],registry,Version_i[9]);
        if(match)
         {var
           _jl_=
            multiple_registrations
             ([0,[0,4102853,_jk_],[0,-901574920,Version_i[9]]]);
          caml_call1(Core_Error[28],_jl_)}
        else
         caml_call3
          (Core_Hashtbl[34],registry,Version_i[9],[0,dispatch,[3,rpc]]);
        return [0,rpc]}
      return [0,_jk_,registry,rpcs,versions,dispatch_multi,Register]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$49);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Versioned$0);
    var
     _gq_=
      [0,
       function(Model)
        {var name=Model[1],Caller=Make$7([0,name]),Callee=Make$2([0,name]);
         function _jc_(param)
          {var _jh_=caml_call1(Callee[5],0),_ji_=caml_call1(Caller[4],0);
           return caml_call2(Core_Int[102][25],_ji_,_jh_)}
         caml_call8
          (Ppx_inline_test_lib_Runtime[4],
           Inline_test_config,
           cst_Int_Set_equal_Caller_versi$3,
           0,
           cst_src_versioned_rpc_ml$14,
           1730,
           6,
           74,
           _jc_);
         function Register(Version)
          {var
            version=Version[1],
            bin_shape_msg=Version[2],
            bin_size_msg=Version[3],
            bin_write_msg=Version[4],
            bin_writer_msg=Version[5],
            bin_read_msg=Version[6],
            bin_read_msg$0=Version[7],
            bin_reader_msg=Version[8],
            bin_msg=Version[9],
            callee_model_of_msg=Version[11];
           caml_call1
            (Callee[6],
             [0,
              bin_shape_msg,
              bin_size_msg,
              bin_write_msg,
              bin_writer_msg,
              bin_read_msg,
              bin_read_msg$0,
              bin_reader_msg,
              bin_msg,
              version,
              callee_model_of_msg]);
           var
            version$0=Version[1],
            bin_shape_msg$0=Version[2],
            bin_size_msg$0=Version[3],
            bin_write_msg$0=Version[4],
            bin_writer_msg$0=Version[5],
            bin_read_msg$1=Version[6],
            bin_read_msg$2=Version[7],
            bin_reader_msg$0=Version[8],
            bin_msg$0=Version[9],
            msg_of_caller_model=Version[10],
            include=
             caml_call1
              (Caller[6],
               [0,
                bin_shape_msg$0,
                bin_size_msg$0,
                bin_write_msg$0,
                bin_writer_msg$0,
                bin_read_msg$1,
                bin_read_msg$2,
                bin_reader_msg$0,
                bin_msg$0,
                version$0,
                msg_of_caller_model]),
            _jd_=include[1];
           function _je_(param)
            {var _jf_=caml_call1(Callee[5],0),_jg_=caml_call1(Caller[4],0);
             return caml_call2(Core_Int[102][25],_jg_,_jf_)}
           caml_call8
            (Ppx_inline_test_lib_Runtime[4],
             Inline_test_config,
             cst_Int_Set_equal_Caller_versi$4,
             0,
             cst_src_versioned_rpc_ml$15,
             1755,
             8,
             76,
             _je_);
           return [0,_jd_]}
         var dispatch_multi=Caller[5],implement_multi=Callee[3];
         function versions(param){return caml_call1(Caller[4],0)}
         function rpcs(param){return caml_call1(Caller[3],0)}
         return [0,Register,dispatch_multi,implement_multi,rpcs,versions,name]}],
     _gr_=
      [0,
       function(Model)
        {var name=Model[1],Caller=Make$6([0,name]),Callee=Make$1([0,name]);
         function _i$_(param)
          {var _ja_=caml_call1(Callee[5],0),_jb_=caml_call1(Caller[4],0);
           return caml_call2(Core_Int[102][25],_jb_,_ja_)}
         caml_call8
          (Ppx_inline_test_lib_Runtime[4],
           Inline_test_config,
           cst_Int_Set_equal_Caller_versi$2,
           0,
           cst_src_versioned_rpc_ml$13,
           1601,
           6,
           74,
           _i$_);
         function Register_raw(Version_i)
          {var
            version=Version_i[1],
            bin_shape_query=Version_i[2],
            bin_size_query=Version_i[3],
            bin_write_query=Version_i[4],
            bin_writer_query=Version_i[5],
            bin_read_query=Version_i[6],
            bin_read_query$0=Version_i[7],
            bin_reader_query=Version_i[8],
            bin_query=Version_i[9],
            bin_shape_state=Version_i[10],
            bin_size_state=Version_i[11],
            bin_write_state=Version_i[12],
            bin_writer_state=Version_i[13],
            bin_read_state=Version_i[14],
            bin_read_state$0=Version_i[15],
            bin_reader_state=Version_i[16],
            bin_state=Version_i[17],
            bin_shape_update=Version_i[18],
            bin_size_update=Version_i[19],
            bin_write_update=Version_i[20],
            bin_writer_update=Version_i[21],
            bin_read_update=Version_i[22],
            bin_read_update$0=Version_i[23],
            bin_reader_update=Version_i[24],
            bin_update=Version_i[25],
            bin_shape_error=Version_i[26],
            bin_size_error=Version_i[27],
            bin_write_error=Version_i[28],
            bin_writer_error=Version_i[29],
            bin_read_error=Version_i[30],
            bin_read_error$0=Version_i[31],
            bin_reader_error=Version_i[32],
            bin_error=Version_i[33],
            callee_model_of_query=Version_i[35],
            state_of_callee_model=Version_i[37],
            error_of_callee_model=Version_i[39],
            client_pushes_back=Version_i[40],
            update_of_callee_model=Version_i[42];
           caml_call1
            (Callee[6],
             [0,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query,
              bin_read_query$0,
              bin_reader_query,
              bin_query,
              bin_shape_state,
              bin_size_state,
              bin_write_state,
              bin_writer_state,
              bin_read_state,
              bin_read_state$0,
              bin_reader_state,
              bin_state,
              bin_shape_update,
              bin_size_update,
              bin_write_update,
              bin_writer_update,
              bin_read_update,
              bin_read_update$0,
              bin_reader_update,
              bin_update,
              bin_shape_error,
              bin_size_error,
              bin_write_error,
              bin_writer_error,
              bin_read_error,
              bin_read_error$0,
              bin_reader_error,
              bin_error,
              version,
              callee_model_of_query,
              state_of_callee_model,
              error_of_callee_model,
              client_pushes_back,
              update_of_callee_model]);
           var
            version$0=Version_i[1],
            bin_shape_query$0=Version_i[2],
            bin_size_query$0=Version_i[3],
            bin_write_query$0=Version_i[4],
            bin_writer_query$0=Version_i[5],
            bin_read_query$1=Version_i[6],
            bin_read_query$2=Version_i[7],
            bin_reader_query$0=Version_i[8],
            bin_query$0=Version_i[9],
            bin_shape_state$0=Version_i[10],
            bin_size_state$0=Version_i[11],
            bin_write_state$0=Version_i[12],
            bin_writer_state$0=Version_i[13],
            bin_read_state$1=Version_i[14],
            bin_read_state$2=Version_i[15],
            bin_reader_state$0=Version_i[16],
            bin_state$0=Version_i[17],
            bin_shape_update$0=Version_i[18],
            bin_size_update$0=Version_i[19],
            bin_write_update$0=Version_i[20],
            bin_writer_update$0=Version_i[21],
            bin_read_update$1=Version_i[22],
            bin_read_update$2=Version_i[23],
            bin_reader_update$0=Version_i[24],
            bin_update$0=Version_i[25],
            bin_shape_error$0=Version_i[26],
            bin_size_error$0=Version_i[27],
            bin_write_error$0=Version_i[28],
            bin_writer_error$0=Version_i[29],
            bin_read_error$1=Version_i[30],
            bin_read_error$2=Version_i[31],
            bin_reader_error$0=Version_i[32],
            bin_error$0=Version_i[33],
            query_of_caller_model=Version_i[34],
            caller_model_of_state=Version_i[36],
            caller_model_of_error=Version_i[38],
            client_pushes_back$0=Version_i[40],
            caller_model_of_update=Version_i[41],
            include=
             caml_call1
              (Caller[6],
               [0,
                bin_shape_query$0,
                bin_size_query$0,
                bin_write_query$0,
                bin_writer_query$0,
                bin_read_query$1,
                bin_read_query$2,
                bin_reader_query$0,
                bin_query$0,
                bin_shape_state$0,
                bin_size_state$0,
                bin_write_state$0,
                bin_writer_state$0,
                bin_read_state$1,
                bin_read_state$2,
                bin_reader_state$0,
                bin_state$0,
                bin_shape_update$0,
                bin_size_update$0,
                bin_write_update$0,
                bin_writer_update$0,
                bin_read_update$1,
                bin_read_update$2,
                bin_reader_update$0,
                bin_update$0,
                bin_shape_error$0,
                bin_size_error$0,
                bin_write_error$0,
                bin_writer_error$0,
                bin_read_error$1,
                bin_read_error$2,
                bin_reader_error$0,
                bin_error$0,
                version$0,
                query_of_caller_model,
                caller_model_of_state,
                caller_model_of_error,
                client_pushes_back$0,
                caller_model_of_update]),
            rpc=include[1];
           return [0,rpc]}
         function Register(Version_i)
          {var
            version=Version_i[1],
            bin_shape_query=Version_i[2],
            bin_size_query=Version_i[3],
            bin_write_query=Version_i[4],
            bin_writer_query=Version_i[5],
            bin_read_query=Version_i[6],
            bin_read_query$0=Version_i[7],
            bin_reader_query=Version_i[8],
            bin_query=Version_i[9],
            bin_shape_state=Version_i[10],
            bin_size_state=Version_i[11],
            bin_write_state=Version_i[12],
            bin_writer_state=Version_i[13],
            bin_read_state=Version_i[14],
            bin_read_state$0=Version_i[15],
            bin_reader_state=Version_i[16],
            bin_state=Version_i[17],
            bin_shape_update=Version_i[18],
            bin_size_update=Version_i[19],
            bin_write_update=Version_i[20],
            bin_writer_update=Version_i[21],
            bin_read_update=Version_i[22],
            bin_read_update$0=Version_i[23],
            bin_reader_update=Version_i[24],
            bin_update=Version_i[25],
            bin_shape_error=Version_i[26],
            bin_size_error=Version_i[27],
            bin_write_error=Version_i[28],
            bin_writer_error=Version_i[29],
            bin_read_error=Version_i[30],
            bin_read_error$0=Version_i[31],
            bin_reader_error=Version_i[32],
            bin_error=Version_i[33],
            callee_model_of_query=Version_i[35],
            state_of_callee_model=Version_i[37],
            error_of_callee_model=Version_i[39],
            client_pushes_back=Version_i[40],
            update_of_callee_model=Version_i[41];
           caml_call1
            (Callee[7],
             [0,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query,
              bin_read_query$0,
              bin_reader_query,
              bin_query,
              bin_shape_state,
              bin_size_state,
              bin_write_state,
              bin_writer_state,
              bin_read_state,
              bin_read_state$0,
              bin_reader_state,
              bin_state,
              bin_shape_update,
              bin_size_update,
              bin_write_update,
              bin_writer_update,
              bin_read_update,
              bin_read_update$0,
              bin_reader_update,
              bin_update,
              bin_shape_error,
              bin_size_error,
              bin_write_error,
              bin_writer_error,
              bin_read_error,
              bin_read_error$0,
              bin_reader_error,
              bin_error,
              version,
              callee_model_of_query,
              state_of_callee_model,
              error_of_callee_model,
              client_pushes_back,
              update_of_callee_model]);
           var
            version$0=Version_i[1],
            bin_shape_query$0=Version_i[2],
            bin_size_query$0=Version_i[3],
            bin_write_query$0=Version_i[4],
            bin_writer_query$0=Version_i[5],
            bin_read_query$1=Version_i[6],
            bin_read_query$2=Version_i[7],
            bin_reader_query$0=Version_i[8],
            bin_query$0=Version_i[9],
            bin_shape_state$0=Version_i[10],
            bin_size_state$0=Version_i[11],
            bin_write_state$0=Version_i[12],
            bin_writer_state$0=Version_i[13],
            bin_read_state$1=Version_i[14],
            bin_read_state$2=Version_i[15],
            bin_reader_state$0=Version_i[16],
            bin_state$0=Version_i[17],
            bin_shape_update$0=Version_i[18],
            bin_size_update$0=Version_i[19],
            bin_write_update$0=Version_i[20],
            bin_writer_update$0=Version_i[21],
            bin_read_update$1=Version_i[22],
            bin_read_update$2=Version_i[23],
            bin_reader_update$0=Version_i[24],
            bin_update$0=Version_i[25],
            bin_shape_error$0=Version_i[26],
            bin_size_error$0=Version_i[27],
            bin_write_error$0=Version_i[28],
            bin_writer_error$0=Version_i[29],
            bin_read_error$1=Version_i[30],
            bin_read_error$2=Version_i[31],
            bin_reader_error$0=Version_i[32],
            bin_error$0=Version_i[33],
            query_of_caller_model=Version_i[34],
            caller_model_of_state=Version_i[36],
            caller_model_of_error=Version_i[38],
            client_pushes_back$0=Version_i[40],
            caller_model_of_update=Version_i[42],
            include=
             caml_call1
              (Caller[7],
               [0,
                bin_shape_query$0,
                bin_size_query$0,
                bin_write_query$0,
                bin_writer_query$0,
                bin_read_query$1,
                bin_read_query$2,
                bin_reader_query$0,
                bin_query$0,
                bin_shape_state$0,
                bin_size_state$0,
                bin_write_state$0,
                bin_writer_state$0,
                bin_read_state$1,
                bin_read_state$2,
                bin_reader_state$0,
                bin_state$0,
                bin_shape_update$0,
                bin_size_update$0,
                bin_write_update$0,
                bin_writer_update$0,
                bin_read_update$1,
                bin_read_update$2,
                bin_reader_update$0,
                bin_update$0,
                bin_shape_error$0,
                bin_size_error$0,
                bin_write_error$0,
                bin_writer_error$0,
                bin_read_error$1,
                bin_read_error$2,
                bin_reader_error$0,
                bin_error$0,
                version$0,
                query_of_caller_model,
                caller_model_of_state,
                caller_model_of_error,
                client_pushes_back$0,
                caller_model_of_update]),
            rpc=include[1];
           return [0,rpc]}
         var dispatch_multi=Caller[5],implement_multi=Callee[3];
         function versions(param){return caml_call1(Caller[4],0)}
         function rpcs(param){return caml_call1(Caller[3],0)}
         return [0,
                 Register,
                 Register_raw,
                 dispatch_multi,
                 implement_multi,
                 rpcs,
                 versions,
                 name]}],
     _gs_=
      [0,
       function(Model)
        {var name=Model[1],Caller=Make$5([0,name]),Callee=Make$0([0,name]);
         function _i7_(param)
          {var _i9_=caml_call1(Callee[7],0),_i__=caml_call1(Caller[4],0);
           return caml_call2(Core_Int[102][25],_i__,_i9_)}
         caml_call8
          (Ppx_inline_test_lib_Runtime[4],
           Inline_test_config,
           cst_Int_Set_equal_Caller_versi$1,
           0,
           cst_src_versioned_rpc_ml$12,
           1454,
           6,
           74,
           _i7_);
         var
          dispatch_multi=Caller[6],
          dispatch_iter_multi=Caller[5],
          abort_multi=Caller[7],
          implement_multi=Callee[4],
          implement_direct_multi=Callee[5];
         function versions(param){return caml_call1(Caller[4],0)}
         function rpcs(param){return caml_call1(Caller[3],0)}
         function _i8_(Version_i)
          {var
            version=Version_i[1],
            bin_shape_query=Version_i[2],
            bin_size_query=Version_i[3],
            bin_write_query=Version_i[4],
            bin_writer_query=Version_i[5],
            bin_read_query=Version_i[6],
            bin_read_query$0=Version_i[7],
            bin_reader_query=Version_i[8],
            bin_query=Version_i[9],
            bin_shape_response=Version_i[10],
            bin_size_response=Version_i[11],
            bin_write_response=Version_i[12],
            bin_writer_response=Version_i[13],
            bin_read_response=Version_i[14],
            bin_read_response$0=Version_i[15],
            bin_reader_response=Version_i[16],
            bin_response=Version_i[17],
            bin_shape_error=Version_i[18],
            bin_size_error=Version_i[19],
            bin_write_error=Version_i[20],
            bin_writer_error=Version_i[21],
            bin_read_error=Version_i[22],
            bin_read_error$0=Version_i[23],
            bin_reader_error=Version_i[24],
            bin_error=Version_i[25],
            callee_model_of_query=Version_i[27],
            error_of_callee_model=Version_i[28],
            client_pushes_back=Version_i[30],
            response_of_callee_model=Version_i[31];
           caml_call1
            (Callee[9],
             [0,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query,
              bin_read_query$0,
              bin_reader_query,
              bin_query,
              bin_shape_response,
              bin_size_response,
              bin_write_response,
              bin_writer_response,
              bin_read_response,
              bin_read_response$0,
              bin_reader_response,
              bin_response,
              bin_shape_error,
              bin_size_error,
              bin_write_error,
              bin_writer_error,
              bin_read_error,
              bin_read_error$0,
              bin_reader_error,
              bin_error,
              version,
              callee_model_of_query,
              error_of_callee_model,
              client_pushes_back,
              response_of_callee_model]);
           var
            version$0=Version_i[1],
            bin_shape_query$0=Version_i[2],
            bin_size_query$0=Version_i[3],
            bin_write_query$0=Version_i[4],
            bin_writer_query$0=Version_i[5],
            bin_read_query$1=Version_i[6],
            bin_read_query$2=Version_i[7],
            bin_reader_query$0=Version_i[8],
            bin_query$0=Version_i[9],
            bin_shape_response$0=Version_i[10],
            bin_size_response$0=Version_i[11],
            bin_write_response$0=Version_i[12],
            bin_writer_response$0=Version_i[13],
            bin_read_response$1=Version_i[14],
            bin_read_response$2=Version_i[15],
            bin_reader_response$0=Version_i[16],
            bin_response$0=Version_i[17],
            bin_shape_error$0=Version_i[18],
            bin_size_error$0=Version_i[19],
            bin_write_error$0=Version_i[20],
            bin_writer_error$0=Version_i[21],
            bin_read_error$1=Version_i[22],
            bin_read_error$2=Version_i[23],
            bin_reader_error$0=Version_i[24],
            bin_error$0=Version_i[25],
            query_of_caller_model=Version_i[26],
            caller_model_of_error=Version_i[29],
            client_pushes_back$0=Version_i[30],
            caller_model_of_response=Version_i[32],
            include=
             caml_call1
              (Caller[9],
               [0,
                bin_shape_query$0,
                bin_size_query$0,
                bin_write_query$0,
                bin_writer_query$0,
                bin_read_query$1,
                bin_read_query$2,
                bin_reader_query$0,
                bin_query$0,
                bin_shape_response$0,
                bin_size_response$0,
                bin_write_response$0,
                bin_writer_response$0,
                bin_read_response$1,
                bin_read_response$2,
                bin_reader_response$0,
                bin_response$0,
                bin_shape_error$0,
                bin_size_error$0,
                bin_write_error$0,
                bin_writer_error$0,
                bin_read_error$1,
                bin_read_error$2,
                bin_reader_error$0,
                bin_error$0,
                version$0,
                query_of_caller_model,
                caller_model_of_error,
                client_pushes_back$0,
                caller_model_of_response]),
            rpc=include[1];
           return [0,rpc]}
         return [0,
                 function(Version_i)
                  {var
                    version=Version_i[1],
                    bin_shape_query=Version_i[2],
                    bin_size_query=Version_i[3],
                    bin_write_query=Version_i[4],
                    bin_writer_query=Version_i[5],
                    bin_read_query=Version_i[6],
                    bin_read_query$0=Version_i[7],
                    bin_reader_query=Version_i[8],
                    bin_query=Version_i[9],
                    bin_shape_response=Version_i[10],
                    bin_size_response=Version_i[11],
                    bin_write_response=Version_i[12],
                    bin_writer_response=Version_i[13],
                    bin_read_response=Version_i[14],
                    bin_read_response$0=Version_i[15],
                    bin_reader_response=Version_i[16],
                    bin_response=Version_i[17],
                    bin_shape_error=Version_i[18],
                    bin_size_error=Version_i[19],
                    bin_write_error=Version_i[20],
                    bin_writer_error=Version_i[21],
                    bin_read_error=Version_i[22],
                    bin_read_error$0=Version_i[23],
                    bin_reader_error=Version_i[24],
                    bin_error=Version_i[25],
                    callee_model_of_query=Version_i[27],
                    error_of_callee_model=Version_i[28],
                    client_pushes_back=Version_i[30],
                    response_of_callee_model=Version_i[31];
                   caml_call1
                    (Callee[10],
                     [0,
                      bin_shape_query,
                      bin_size_query,
                      bin_write_query,
                      bin_writer_query,
                      bin_read_query,
                      bin_read_query$0,
                      bin_reader_query,
                      bin_query,
                      bin_shape_response,
                      bin_size_response,
                      bin_write_response,
                      bin_writer_response,
                      bin_read_response,
                      bin_read_response$0,
                      bin_reader_response,
                      bin_response,
                      bin_shape_error,
                      bin_size_error,
                      bin_write_error,
                      bin_writer_error,
                      bin_read_error,
                      bin_read_error$0,
                      bin_reader_error,
                      bin_error,
                      version,
                      callee_model_of_query,
                      error_of_callee_model,
                      client_pushes_back,
                      response_of_callee_model]);
                   var
                    version$0=Version_i[1],
                    bin_shape_query$0=Version_i[2],
                    bin_size_query$0=Version_i[3],
                    bin_write_query$0=Version_i[4],
                    bin_writer_query$0=Version_i[5],
                    bin_read_query$1=Version_i[6],
                    bin_read_query$2=Version_i[7],
                    bin_reader_query$0=Version_i[8],
                    bin_query$0=Version_i[9],
                    bin_shape_response$0=Version_i[10],
                    bin_size_response$0=Version_i[11],
                    bin_write_response$0=Version_i[12],
                    bin_writer_response$0=Version_i[13],
                    bin_read_response$1=Version_i[14],
                    bin_read_response$2=Version_i[15],
                    bin_reader_response$0=Version_i[16],
                    bin_response$0=Version_i[17],
                    bin_shape_error$0=Version_i[18],
                    bin_size_error$0=Version_i[19],
                    bin_write_error$0=Version_i[20],
                    bin_writer_error$0=Version_i[21],
                    bin_read_error$1=Version_i[22],
                    bin_read_error$2=Version_i[23],
                    bin_reader_error$0=Version_i[24],
                    bin_error$0=Version_i[25],
                    query_of_caller_model=Version_i[26],
                    caller_model_of_error=Version_i[29],
                    client_pushes_back$0=Version_i[30],
                    caller_model_of_response=Version_i[32],
                    include=
                     caml_call1
                      (Caller[10],
                       [0,
                        bin_shape_query$0,
                        bin_size_query$0,
                        bin_write_query$0,
                        bin_writer_query$0,
                        bin_read_query$1,
                        bin_read_query$2,
                        bin_reader_query$0,
                        bin_query$0,
                        bin_shape_response$0,
                        bin_size_response$0,
                        bin_write_response$0,
                        bin_writer_response$0,
                        bin_read_response$1,
                        bin_read_response$2,
                        bin_reader_response$0,
                        bin_response$0,
                        bin_shape_error$0,
                        bin_size_error$0,
                        bin_write_error$0,
                        bin_writer_error$0,
                        bin_read_error$1,
                        bin_read_error$2,
                        bin_reader_error$0,
                        bin_error$0,
                        version$0,
                        query_of_caller_model,
                        caller_model_of_error,
                        client_pushes_back$0,
                        caller_model_of_response]),
                    rpc=include[1];
                   return [0,rpc]},
                 _i8_,
                 dispatch_multi,
                 dispatch_iter_multi,
                 abort_multi,
                 implement_multi,
                 implement_direct_multi,
                 rpcs,
                 versions,
                 name]}],
     _gt_=
      [0,
       [0,
        function(Model)
         {var name=Model[1],Caller=Make$4([0,name]),Callee=Make([0,name]);
          function _i0_(param)
           {var _i5_=caml_call1(Callee[5],0),_i6_=caml_call1(Caller[4],0);
            return caml_call2(Core_Int[102][25],_i6_,_i5_)}
          caml_call8
           (Ppx_inline_test_lib_Runtime[4],
            Inline_test_config,
            cst_Int_Set_equal_Caller_versi,
            0,
            cst_src_versioned_rpc_ml$10,
            1331,
            6,
            74,
            _i0_);
          function Register(Version)
           {var
             version=Version[1],
             bin_shape_query=Version[2],
             bin_size_query=Version[3],
             bin_write_query=Version[4],
             bin_writer_query=Version[5],
             bin_read_query=Version[6],
             bin_read_query$0=Version[7],
             bin_reader_query=Version[8],
             bin_query=Version[9],
             bin_shape_response=Version[10],
             bin_size_response=Version[11],
             bin_write_response=Version[12],
             bin_writer_response=Version[13],
             bin_read_response=Version[14],
             bin_read_response$0=Version[15],
             bin_reader_response=Version[16],
             bin_response=Version[17],
             callee_model_of_query=Version[19],
             response_of_callee_model=Version[20];
            caml_call1
             (Callee[6],
              [0,
               bin_shape_query,
               bin_size_query,
               bin_write_query,
               bin_writer_query,
               bin_read_query,
               bin_read_query$0,
               bin_reader_query,
               bin_query,
               bin_shape_response,
               bin_size_response,
               bin_write_response,
               bin_writer_response,
               bin_read_response,
               bin_read_response$0,
               bin_reader_response,
               bin_response,
               version,
               callee_model_of_query,
               response_of_callee_model]);
            var
             version$0=Version[1],
             bin_shape_query$0=Version[2],
             bin_size_query$0=Version[3],
             bin_write_query$0=Version[4],
             bin_writer_query$0=Version[5],
             bin_read_query$1=Version[6],
             bin_read_query$2=Version[7],
             bin_reader_query$0=Version[8],
             bin_query$0=Version[9],
             bin_shape_response$0=Version[10],
             bin_size_response$0=Version[11],
             bin_write_response$0=Version[12],
             bin_writer_response$0=Version[13],
             bin_read_response$1=Version[14],
             bin_read_response$2=Version[15],
             bin_reader_response$0=Version[16],
             bin_response$0=Version[17],
             query_of_caller_model=Version[18],
             caller_model_of_response=Version[21],
             include=
              caml_call1
               (Caller[7],
                [0,
                 bin_shape_query$0,
                 bin_size_query$0,
                 bin_write_query$0,
                 bin_writer_query$0,
                 bin_read_query$1,
                 bin_read_query$2,
                 bin_reader_query$0,
                 bin_query$0,
                 bin_shape_response$0,
                 bin_size_response$0,
                 bin_write_response$0,
                 bin_writer_response$0,
                 bin_read_response$1,
                 bin_read_response$2,
                 bin_reader_response$0,
                 bin_response$0,
                 version$0,
                 query_of_caller_model,
                 caller_model_of_response]),
             _i1_=include[1];
            function _i2_(param)
             {var _i3_=caml_call1(Callee[5],0),_i4_=caml_call1(Caller[4],0);
              return caml_call2(Core_Int[102][25],_i4_,_i3_)}
            caml_call8
             (Ppx_inline_test_lib_Runtime[4],
              Inline_test_config,
              cst_Int_Set_equal_Caller_versi$0,
              0,
              cst_src_versioned_rpc_ml$11,
              1361,
              8,
              76,
              _i2_);
            return [0,_i1_]}
          var dispatch_multi=Caller[5],implement_multi=Callee[3];
          function versions(param){return caml_call1(Caller[4],0)}
          function rpcs(param){return caml_call1(Caller[3],0)}
          return [0,
                  Register,
                  dispatch_multi,
                  implement_multi,
                  rpcs,
                  versions,
                  name]}],
       _gs_,
       _gr_,
       _gq_],
     _gu_=
      [0,
       function(_iS_)
        {var
          _iT_=Make$2(_iS_),
          _iU_=_iT_[1],
          _iV_=_iT_[5],
          _iW_=_iT_[4],
          _iX_=_iT_[3],
          _iY_=_iT_[6];
         return [0,
                 function(_iZ_)
                  {return caml_call1
                           (_iY_,
                            [0,
                             _iZ_[2],
                             _iZ_[3],
                             _iZ_[4],
                             _iZ_[5],
                             _iZ_[6],
                             _iZ_[7],
                             _iZ_[8],
                             _iZ_[9],
                             _iZ_[1],
                             _iZ_[10]])},
                 _iX_,
                 _iW_,
                 _iV_,
                 _iU_]}],
     _gv_=
      [0,
       function(_iQ_)
        {var _iR_=Make$1(_iQ_);
         return [0,_iR_[7],_iR_[6],_iR_[3],_iR_[4],_iR_[5],_iR_[1]]}],
     _gw_=
      [0,
       function(_iE_)
        {var
          _iF_=Make$0(_iE_),
          _iG_=_iF_[1],
          _iH_=_iF_[7],
          _iI_=_iF_[6],
          _iJ_=_iF_[5],
          _iK_=_iF_[4],
          _iL_=_iF_[9];
         function _iM_(_iP_){return [0,caml_call1(_iL_,_iP_)[1]]}
         var _iN_=_iF_[10];
         return [0,
                 function(_iO_){return [0,caml_call1(_iN_,_iO_)[1]]},
                 _iM_,
                 _iK_,
                 _iJ_,
                 _iI_,
                 _iH_,
                 _iG_]}],
     _gx_=
      [0,
       [0,
        [0,
         create$11,
         name$3,
         add_version,
         add_version_with_failure,
         add_rpc_version,
         add_rpc_version_with_failure,
         implement$7],
        function(_iw_)
         {var
           _ix_=Make(_iw_),
           _iy_=_ix_[1],
           _iz_=_ix_[5],
           _iA_=_ix_[4],
           _iB_=_ix_[3],
           _iC_=_ix_[6];
          return [0,
                  function(_iD_)
                   {return caml_call1
                            (_iC_,
                             [0,
                              _iD_[2],
                              _iD_[3],
                              _iD_[4],
                              _iD_[5],
                              _iD_[6],
                              _iD_[7],
                              _iD_[8],
                              _iD_[9],
                              _iD_[10],
                              _iD_[11],
                              _iD_[12],
                              _iD_[13],
                              _iD_[14],
                              _iD_[15],
                              _iD_[16],
                              _iD_[17],
                              _iD_[1],
                              _iD_[18],
                              _iD_[19]])},
                  _iB_,
                  _iA_,
                  _iz_,
                  _iy_]}],
       _gw_,
       _gv_,
       _gu_],
     _gy_=
      [0,
       function(_io_)
        {var
          _ip_=Make$7(_io_),
          _iq_=_ip_[1],
          _ir_=_ip_[4],
          _is_=_ip_[3],
          _it_=_ip_[5],
          _iu_=_ip_[6];
         return [0,
                 function(_iv_)
                  {return caml_call1
                           (_iu_,
                            [0,
                             _iv_[2],
                             _iv_[3],
                             _iv_[4],
                             _iv_[5],
                             _iv_[6],
                             _iv_[7],
                             _iv_[8],
                             _iv_[9],
                             _iv_[1],
                             _iv_[10]])},
                 _it_,
                 _is_,
                 _ir_,
                 _iq_]}],
     _gz_=
      [0,
       function(_im_)
        {var _in_=Make$6(_im_);
         return [0,_in_[7],_in_[6],_in_[5],_in_[3],_in_[4],_in_[1]]}],
     _gA_=
      [0,
       function(_h$_)
        {var
          _ia_=Make$5(_h$_),
          _ib_=_ia_[1],
          _ic_=_ia_[4],
          _id_=_ia_[3],
          _ie_=_ia_[7],
          _if_=_ia_[5],
          _ig_=_ia_[6],
          _ih_=_ia_[9];
         function _ii_(_il_){return [0,caml_call1(_ih_,_il_)[1]]}
         var _ij_=_ia_[10];
         return [0,
                 function(_ik_){return [0,caml_call1(_ij_,_ik_)[1]]},
                 _ii_,
                 _ig_,
                 _if_,
                 _ie_,
                 _id_,
                 _ic_,
                 _ib_]}],
     _gB_=[0,create$13,create_directly,connection,menu],
     Async_rpc_kernel_Versioned_rpc=
      [0,
       [0,add$1,_fM_,request,supported_rpcs,supported_versions,create$12,_fO_],
       _gB_,
       [0,write$5,write_without_pushback$4,close$6,closed$1,is_closed$4],
       [0,
        [0,
         function(_h0_)
          {var
            _h1_=Make$4(_h0_),
            _h2_=_h1_[1],
            _h3_=_h1_[4],
            _h4_=_h1_[3],
            _h5_=_h1_[5],
            _h6_=_h1_[6];
           function _h7_(_h__)
            {return caml_call1
                     (_h6_,
                      [0,
                       _h__[2],
                       _h__[3],
                       _h__[4],
                       _h__[5],
                       _h__[6],
                       _h__[7],
                       _h__[8],
                       _h__[9],
                       _h__[10],
                       _h__[11],
                       _h__[12],
                       _h__[13],
                       _h__[14],
                       _h__[15],
                       _h__[16],
                       _h__[17],
                       _h__[1],
                       _h__[18],
                       _h__[19]])}
           var _h8_=_h1_[7];
           return [0,
                   function(_h9_)
                    {return caml_call1
                             (_h8_,
                              [0,
                               _h9_[2],
                               _h9_[3],
                               _h9_[4],
                               _h9_[5],
                               _h9_[6],
                               _h9_[7],
                               _h9_[8],
                               _h9_[9],
                               _h9_[10],
                               _h9_[11],
                               _h9_[12],
                               _h9_[13],
                               _h9_[14],
                               _h9_[15],
                               _h9_[16],
                               _h9_[17],
                               _h9_[1],
                               _h9_[18],
                               _h9_[19]])},
                   _h7_,
                   _h5_,
                   _h4_,
                   _h3_,
                   _h2_]}],
        _gA_,
        _gz_,
        _gy_],
       _gx_,
       _gt_];
    caml_register_global
     (883,Async_rpc_kernel_Versioned_rpc,"Async_rpc_kernel__Versioned_rpc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Pipe_tran);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$50);
    caml_call1(Expect_test_collector[5][1],cst_src_pipe_transport_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$51,cst$27);
    function pipe_read(t,f)
     {function _hY_(param)
       {if(3456156 <= param)return caml_call1(f,3456156);
        var res=caml_call3(Async_kernel_Pipe[37],0,0,t);
        if(typeof res === "number" && 3456156 > res)return pipe_read(t,f);
        return caml_call1(f,res)}
      var _hZ_=caml_call1(Async_kernel_Pipe[42],t);
      return caml_call2(Async_kernel[22][2],_hZ_,_hY_)}
    function create$14(pipe)
     {return [0,pipe,caml_call1(Core_Bigbuffer[2],Header[1])]}
    function Pipe_reader(Data)
     {function sexp_of_t(x_007)
       {var
         buffer_005=x_007[2],
         pipe_003=x_007[1],
         _hX_=Data[1],
         arg_006=caml_call1(Core_Bigbuffer[1],buffer_005),
         bnds_002=[0,[1,[0,_gC_,[0,arg_006,0]]],0],
         arg_004=caml_call2(Async_kernel_Pipe[4][1],_hX_,pipe_003),
         bnds_002$0=[0,[1,[0,_gD_,[0,arg_004,0]]],bnds_002];
        return [1,bnds_002$0]}
      function close(t)
       {caml_call1(Async_kernel_Pipe[15],t[1]);
        return Async_kernel_Deferred[18]}
      function is_closed(t){return caml_call1(Async_kernel_Pipe[16],t[1])}
      function read_forever(t,on_message,on_end_of_batch)
       {var buffer=t[2];
        function process_queue$0(counter,need,queue)
         {for(;;)
           {var match=caml_call1(Core_Queue[43],queue);
            if(! match)return caml_call1(Async_kernel[19],[1,need]);
            var
             data=match[1],
             buff_len=caml_call1(Core_Bigbuffer[12],buffer),
             data_len=caml_call1(Data[2],data);
            if
             (caml_call2(Core_Int[99][3],buff_len,0)
              &&
              caml_call2(Core_Int[99][1],data_len,need))
             {var _hT_=caml_call1(Data[4],data),_hU_=0;
              if(counter >= 50)
               return caml_trampoline_return
                       (process_data$0,[0,_hU_,_hT_,data_len,queue]);
              var counter$0=counter + 1 | 0;
              return process_data$0(counter$0,_hU_,_hT_,data_len,queue)}
            caml_call2(Data[3],buffer,data);
            var _hV_=caml_call1(Core_Bigbuffer[12],buffer);
            if(! caml_call2(Core_Int[99][1],_hV_,need))continue;
            var
             data$0=caml_call1(Core_Bigbuffer[22],buffer),
             length=caml_call1(Core_Bigbuffer[12],buffer),
             _hW_=0;
            if(counter >= 50)
             return caml_trampoline_return
                     (process_data$0,[0,_hW_,data$0,length,queue]);
            var counter$1=counter + 1 | 0;
            return process_data$0(counter$1,_hW_,data$0,length,queue)}}
        function process_data$0(counter,pos,data,length,queue)
         {if(! caml_call2(Core_Int[99][1],length,Header[1]))
           {var _hS_=Header[1];
            if(counter >= 50)
             return caml_trampoline_return
                     (set_buffer_and_process_queue$0,
                      [0,_hS_,pos,length,queue,data]);
            var counter$1=counter + 1 | 0;
            return set_buffer_and_process_queue$0
                    (counter$1,_hS_,pos,length,queue,data)}
          var
           payload_len=caml_call2(Header[2],data,pos),
           total_len=Header[1] + payload_len | 0;
          if(! caml_call2(Core_Int[99][1],length,total_len))
           {if(counter >= 50)
             return caml_trampoline_return
                     (set_buffer_and_process_queue$0,
                      [0,total_len,pos,length,queue,data]);
            var counter$0=counter + 1 | 0;
            return set_buffer_and_process_queue$0
                    (counter$0,total_len,pos,length,queue,data)}
          var
           continue_or_wait=
            caml_call3(on_message,data,pos + Header[1] | 0,payload_len);
          if
           (typeof continue_or_wait !== "number" && 0 === continue_or_wait[0])
           {var
             x=continue_or_wait[1],
             pos$0=pos + total_len | 0,
             length$0=length - total_len | 0;
            set_buffer(pos$0,length$0,data);
            var _hR_=function(data){return caml_call2(Data[3],buffer,data)};
            caml_call2(Core_Queue[16],queue,_hR_);
            return caml_call1(Async_kernel[19],[0,x])}
          function _hP_(param)
           {var pos$0=pos + total_len | 0,length$0=length - total_len | 0;
            if(caml_call2(Core_Int[99][1],length$0,0))
             return caml_call2(Core_Int[99][4],length$0,0)
                     ?process_data(pos$0,data,length$0,queue)
                     :set_buffer_and_process_queue(Header[1],pos$0,0,queue,data);
            throw [0,Assert_failure,_gE_]}
          if(typeof continue_or_wait === "number")
           var _hQ_=Async_kernel_Deferred[18];
          else
           {if(0 === continue_or_wait[0])throw [0,Assert_failure,_gF_];
            var d=continue_or_wait[1],_hQ_=d}
          return caml_call2(Async_kernel[22][2],_hQ_,_hP_)}
        function set_buffer_and_process_queue$0
         (counter,need,pos,length,queue,data)
         {set_buffer(pos,length,data);
          if(counter >= 50)
           return caml_trampoline_return(process_queue$0,[0,need,queue]);
          var counter$0=counter + 1 | 0;
          return process_queue$0(counter$0,need,queue)}
        function process_queue(need,queue)
         {return caml_trampoline(process_queue$0(0,need,queue))}
        function process_data(pos,data,length,queue)
         {return caml_trampoline(process_data$0(0,pos,data,length,queue))}
        function set_buffer_and_process_queue(need,pos,length,queue,data)
         {return caml_trampoline
                  (set_buffer_and_process_queue$0
                    (0,need,pos,length,queue,data))}
        function set_buffer(pos,length,data)
         {if(caml_call2(Core_Int[99][3],length,0))
           return caml_call1(Core_Bigbuffer[13],buffer);
          var data$0=caml_call3(Core_Bigstring[25],data,pos,length);
          caml_call1(Core_Bigbuffer[13],buffer);
          return caml_call2(Core_Bigbuffer[23],buffer,data$0)}
        function wait_for_read(need)
         {function _hN_(param)
           {if(typeof param === "number")
             return caml_call1(Async_kernel[19],_gG_);
            var queue=param[2],_hO_=process_queue(need,queue);
            return caml_call2(Async_kernel[20],_hO_,end_of_batch_and_continue)}
          return pipe_read(t[1],_hN_)}
        function end_of_batch_and_continue(next)
         {caml_call1(on_end_of_batch,0);
          if(0 === next[0])
           {var result=next[1];return caml_call1(Async_kernel[19],[0,result])}
          var need=next[1];
          return wait_for_read(need)}
        var need=Header[1],length=caml_call1(Core_Bigbuffer[12],buffer);
        if(caml_call2(Core_Int[88],length,need))return wait_for_read(need);
        var
         data=caml_call1(Core_Bigbuffer[22],buffer),
         _hM_=process_data(0,data,length,caml_call2(Core_Queue[61],0,0));
        return caml_call2(Async_kernel[20],_hM_,end_of_batch_and_continue)}
      var of_bigstring=Data[5],For_testing=[0,of_bigstring];
      return [0,sexp_of_t,close,is_closed,read_forever,For_testing]}
    function Pipe_writer(Data)
     {function sexp_of_t(x_015)
       {var
         monitor_013=x_015[2],
         pipe_011=x_015[1],
         _hL_=Data[1],
         arg_014=caml_call1(Async_kernel_Monitor[1],monitor_013),
         bnds_010=[0,[1,[0,_gH_,[0,arg_014,0]]],0],
         arg_012=caml_call2(Async_kernel_Pipe[3][1],_hL_,pipe_011),
         bnds_010$0=[0,[1,[0,_gI_,[0,arg_012,0]]],bnds_010];
        return [1,bnds_010$0]}
      function close(t)
       {caml_call1(Async_kernel_Pipe[14],t[1]);
        return Async_kernel_Deferred[18]}
      function is_closed(t){return caml_call1(Async_kernel_Pipe[16],t[1])}
      function monitor(t){return t[2]}
      function bytes_to_write(param){return 0}
      function stopped(t){return caml_call1(Async_kernel_Pipe[17],t[1])}
      function flushed(param){return Async_kernel_Deferred[18]}
      function sent_result(x){return [0,x]}
      function check_closed(t,f)
       {return caml_call1(Async_kernel_Pipe[16],t[1])?0:caml_call1(f,0)}
      function send_bin_prot(t,writer,x)
       {return check_closed
                (t,
                 function(param)
                  {var
                    buf=caml_call3(Bin_prot_Utils[4],_gJ_,writer,x),
                    _hK_=caml_call1(Data[5],buf);
                   caml_call2(Async_kernel_Pipe[27],t[1],_hK_);
                   return [0,0]})}
      function send_bin_prot_and_bigstring(t,writer,x,buf,pos,payload_size)
       {return check_closed
                (t,
                 function(param)
                  {var
                    data_size=caml_call1(writer[1],x),
                    data=
                     caml_call2
                      (Core_Bigstring[115],
                       0,
                       (data_size + Header[1] | 0) + payload_size | 0);
                   caml_call3(Header[3],data,0,data_size + payload_size | 0);
                   var dst_pos=caml_call3(writer[2],data,Header[1],x);
                   caml_call5
                    (Core_Bigstring[22],buf,pos,data,dst_pos,payload_size);
                   var _hJ_=caml_call1(Data[5],data);
                   caml_call2(Async_kernel_Pipe[27],t[1],_hJ_);
                   return [0,0]})}
      function send_bin_prot_and_bigstring_no(t,writer,x,buf,pos,len)
       {var r=send_bin_prot_and_bigstring(t,writer,x,buf,pos,len);
        if(typeof r !== "number" && 0 === r[0])
         return [0,Async_kernel_Deferred[18]];
        return r}
      return [0,
              sexp_of_t,
              close,
              is_closed,
              monitor,
              bytes_to_write,
              stopped,
              flushed,
              flushed,
              sent_result,
              check_closed,
              send_bin_prot,
              send_bin_prot_and_bigstring,
              send_bin_prot_and_bigstring_no]}
    var
     sexp_of_t$20=Core_Bigstring[6],
     length$1=Core_Bigstring[21],
     add_to_bigbuffer=Core_Bigbuffer[23];
    function to_bigstring(x){return x}
    function of_bigstring(x){return x}
    var
     Bigstring_data=
      [0,sexp_of_t$20,length$1,add_to_bigbuffer,to_bigstring,of_bigstring],
     sexp_of_t$21=Core_String[116],
     length$2=caml_ml_string_length,
     add_to_bigbuffer$0=Core_Bigbuffer[16];
    function to_bigstring$0(x){return caml_call3(Core_Bigstring[14],0,0,x)}
    function of_bigstring$0(x){return caml_call3(Core_Bigstring[16],0,0,x)}
    var
     String_data=
      [0,
       sexp_of_t$21,
       length$2,
       add_to_bigbuffer$0,
       to_bigstring$0,
       of_bigstring$0],
     Bigstring_pipe_reader=Pipe_reader(Bigstring_data),
     Bigstring_pipe_writer=Pipe_writer(Bigstring_data),
     String_pipe_reader=Pipe_reader(String_data),
     String_pipe_writer=Pipe_writer(String_data),
     Kind=[0,0,1];
    function create$15(kind,reader$0,writer$0)
     {var
       writer=[0,writer$0,caml_call4(Async_kernel_Monitor[3],0,0,0,0)],
       _hH_=
        kind
         ?caml_call2
           (_b1_[12],
            [0,
             Bigstring_pipe_writer[1],
             Bigstring_pipe_writer[2],
             Bigstring_pipe_writer[3],
             Bigstring_pipe_writer[4],
             Bigstring_pipe_writer[5],
             Bigstring_pipe_writer[6],
             Bigstring_pipe_writer[7],
             Bigstring_pipe_writer[8],
             Bigstring_pipe_writer[11],
             Bigstring_pipe_writer[12],
             Bigstring_pipe_writer[13]],
            writer)
         :caml_call2
           (_b1_[12],
            [0,
             String_pipe_writer[1],
             String_pipe_writer[2],
             String_pipe_writer[3],
             String_pipe_writer[4],
             String_pipe_writer[5],
             String_pipe_writer[6],
             String_pipe_writer[7],
             String_pipe_writer[8],
             String_pipe_writer[11],
             String_pipe_writer[12],
             String_pipe_writer[13]],
            writer),
       reader=create$14(reader$0),
       _hI_=
        kind
         ?caml_call2
           (_b2_[5],
            [0,
             Bigstring_pipe_reader[1],
             Bigstring_pipe_reader[2],
             Bigstring_pipe_reader[3],
             Bigstring_pipe_reader[4]],
            reader)
         :caml_call2
           (_b2_[5],
            [0,
             String_pipe_reader[1],
             String_pipe_reader[2],
             String_pipe_reader[3],
             String_pipe_reader[4]],
            reader);
      return [0,_hI_,_hH_]}
    function Test_reader(Transport_reader)
     {var expect=caml_call3(Core_Bigstring[14],0,0,cst_FOOBAR123);
      function create_message_buf(message)
       {var
         message_len=caml_call1(Core_Bigstring[21],message),
         buf=caml_call2(Core_Bigstring[115],0,Header[1] + message_len | 0);
        caml_call3(Header[3],buf,0,message_len);
        caml_call5(Core_Bigstring[22],message,0,buf,Header[1],message_len);
        return buf}
      function create_message(param){return create_message_buf(expect)}
      function on_message(opt,on_message_count,buffer,pos$0,len)
       {if(opt)var sth=opt[1],message=sth;else var message=expect;
        on_message_count[1] = on_message_count[1] + 1 | 0;
        var
         got=caml_call3(Core_Bigstring[25],buffer,pos$0,len),
         sexpifier=Core_Bigstring[6],
         equal=0,
         message$0=0,
         here=0;
        function comparator(a_016,b_017)
         {return caml_call2(Core_Bigstring[4],a_016,b_017)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos,
          sexpifier,
          comparator,
          here,
          message$0,
          equal,
          message,
          got);
        return 0}
      function on_end_of_batch(on_end_of_batch_count,param)
       {on_end_of_batch_count[1]++;return 0}
      function wait(param)
       {return caml_call1(Async_kernel_Async_kernel_sche[33][1],0)}
      function run_test(run,verify)
       {var
         match=caml_call3(Async_kernel_Pipe[7],0,0,0),
         writer=match[2],
         reader=match[1],
         reader$0=create$14(reader),
         on_message_count=[0,0],
         on_end_of_batch_count=[0,0],
         _hB_=0;
        function on_message$0(_hE_,_hF_,_hG_)
         {return on_message(_hB_,on_message_count,_hE_,_hF_,_hG_)}
        function on_end_of_batch$0(_hD_)
         {return on_end_of_batch(on_end_of_batch_count,_hD_)}
        caml_call3
         (Transport_reader[5],reader$0,on_message$0,on_end_of_batch$0);
        wait(0);
        caml_call1
         (run,
          function(x)
           {var _hC_=caml_call1(Transport_reader[1][1],x);
            return caml_call2(Async_kernel_Pipe[27],writer,_hC_)});
        wait(0);
        return caml_call2(verify,on_message_count,on_end_of_batch_count)}
      function verify
       (on_message_count,on_end_of_batch_count,message_count,expect)
       {var
         sexpifier=Core[356],
         _hz_=on_message_count[1],
         equal=0,
         message=0,
         here=0;
        function comparator(a_018,b_019)
         {return caml_call2(Core[352],a_018,b_019)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$0,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          message_count,
          _hz_);
        var
         sexpifier$0=Core[356],
         _hA_=on_end_of_batch_count[1],
         equal$0=0,
         message$0=0,
         here$0=0;
        function comparator$0(a_020,b_021)
         {return caml_call2(Core[352],a_020,b_021)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$1,
                 sexpifier$0,
                 comparator$0,
                 here$0,
                 message$0,
                 equal$0,
                 expect,
                 _hA_)}
      function write_1_msg_1_chunk(write)
       {return caml_call1(write,create_message(0))}
      function write_1_msg_3_chunk(write)
       {var
         buf=create_message_buf(caml_call3(Core_Bigstring[14],0,0,cst$28)),
         _hy_=caml_call1(Core_Bigstring[21],expect);
        caml_call3(Header[3],buf,0,_hy_);
        caml_call1(write,buf);
        wait(0);
        var
         msg_len=caml_call1(Core_Bigstring[21],expect),
         split_at=msg_len / 2 | 0,
         part1=caml_call3(Core_Bigstring[25],expect,0,split_at),
         part2=
          caml_call3
           (Core_Bigstring[25],expect,split_at,msg_len - split_at | 0);
        caml_call1(write,part1);
        wait(0);
        return caml_call1(write,part2)}
      function write_2_msg_1_chunk(write)
       {var
         one_msg=create_message_buf(expect),
         two_msg=caml_call2(Core_Bigstring[18],0,[0,one_msg,[0,one_msg,0]]);
        return caml_call1(write,two_msg)}
      function write_2_msg_one_byte_at_a_time(write)
       {var
         one_msg=create_message_buf(expect),
         two_msg=caml_call2(Core_Bigstring[18],0,[0,one_msg,[0,one_msg,0]]),
         _hw_=caml_call1(Core_Bigstring[21],two_msg) - 1 | 0,
         _hv_=0;
        if(_hw_ >= 0)
         {var i=_hv_;
          for(;;)
           {caml_call1(write,caml_call3(Core_Bigstring[25],two_msg,i,1));
            wait(0);
            var _hx_=i + 1 | 0;
            if(_hw_ !== i){var i=_hx_;continue}
            break}}
        return 0}
      function _g7_(param)
       {run_test
         (write_1_msg_1_chunk,
          function(_ht_){return function(_hu_){return verify(_ht_,_hu_,1,1)}});
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_run_test_write_1_msg_1_chu,
        0,
        cst_src_pipe_transport_ml$0,
        378,
        2,
        61,
        _g7_);
      function _g8_(param)
       {function f(write)
         {write_1_msg_1_chunk(write);return write_1_msg_1_chunk(write)}
        run_test
         (f,
          function(_hr_){return function(_hs_){return verify(_hr_,_hs_,2,1)}});
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_run_test_f_verify_2_1,
        0,
        cst_src_pipe_transport_ml$1,
        380,
        2,
        137,
        _g8_);
      function _g9_(param)
       {run_test
         (write_1_msg_3_chunk,
          function(_hp_){return function(_hq_){return verify(_hp_,_hq_,1,3)}});
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_run_test_write_1_msg_3_chu,
        0,
        cst_src_pipe_transport_ml$2,
        388,
        2,
        61,
        _g9_);
      function _g__(param)
       {run_test
         (write_2_msg_1_chunk,
          function(_hn_){return function(_ho_){return verify(_hn_,_ho_,2,1)}});
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_run_test_write_2_msg_1_chu,
        0,
        cst_src_pipe_transport_ml$3,
        389,
        2,
        61,
        _g__);
      function _g$_(param)
       {run_test
         (write_2_msg_one_byte_at_a_time,
          function(_hl_){return function(_hm_){return verify(_hl_,_hm_,2,34)}});
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_run_test_write_2_msg_one_b,
        0,
        cst_src_pipe_transport_ml$4,
        390,
        2,
        82,
        _g$_);
      function _ha_(param)
       {function f(write)
         {caml_call1(write,create_message(0));
          wait(0);
          write_1_msg_3_chunk(write);
          wait(0);
          write_2_msg_1_chunk(write);
          wait(0);
          write_2_msg_one_byte_at_a_time(write);
          wait(0);
          return caml_call1(write,create_message(0))}
        run_test
         (f,
          function(_hj_){return function(_hk_){return verify(_hj_,_hk_,7,40)}});
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_run_test_f_verify_7_40,
        0,
        cst_src_pipe_transport_ml$5,
        392,
        2,
        317,
        _ha_);
      function _hb_(param)
       {var
         match=caml_call3(Async_kernel_Pipe[7],0,0,0),
         writer=match[2],
         reader=match[1],
         reader$0=create$14(reader);
        function on_end_of_batch(param){return 0}
        function write(x)
         {var _hi_=caml_call1(Transport_reader[1][1],x);
          return caml_call2(Async_kernel_Pipe[27],writer,_hi_)}
        var num=[0,0];
        function stop_after_on_message(buffer,pos,len)
         {num[1]++;
          var
           got=caml_call3(Core_Bigstring[25],buffer,pos,len),
           sexpifier=Core_Bigstring[6],
           equal=0,
           message=0,
           here=0;
          function comparator(a_022,b_023)
           {return caml_call2(Core_Bigstring[4],a_022,b_023)}
          caml_call8
           (Ppx_assert_lib_Runtime[3],
            pos$2,
            sexpifier,
            comparator,
            here,
            message,
            equal,
            expect,
            got);
          return _gK_}
        write_2_msg_1_chunk(write);
        caml_call1(Async_kernel_Pipe[14],writer);
        function _hc_(x)
         {if(! caml_call1(Core_Result[29],x))throw [0,Assert_failure,_gM_];
          function _hg_(x)
           {if(caml_call1(Core_Result[29],x))return Async_kernel_Deferred[18];
            throw [0,Assert_failure,_gL_]}
          var
           _hh_=
            caml_call3
             (Transport_reader[5],
              reader$0,
              stop_after_on_message,
              on_end_of_batch);
          return caml_call2(Async_kernel[22][2],_hh_,_hg_)}
        var
         _hd_=
          caml_call3
           (Transport_reader[5],
            reader$0,
            stop_after_on_message,
            on_end_of_batch),
         _he_=caml_call2(Async_kernel[22][2],_hd_,_hc_);
        caml_call1(Async_kernel[6],_he_);
        wait(0);
        var
         sexpifier=Core_Int[80],
         _hf_=num[1],
         expect$0=2,
         equal=0,
         message=0,
         here=0;
        function comparator(a_026,b_027)
         {return caml_call2(Core_Int[91],a_026,b_027)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$3,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect$0,
          _hf_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_can_call_read_forever_mult,
        0,
        cst_src_pipe_transport_ml$6,
        407,
        2,
        1007,
        _hb_);
      return [0,
              expect,
              create_message_buf,
              create_message,
              on_message,
              on_end_of_batch,
              wait,
              run_test,
              verify,
              write_1_msg_1_chunk,
              write_1_msg_3_chunk,
              write_2_msg_1_chunk,
              write_2_msg_one_byte_at_a_time]}
    function _gN_(param)
     {Test_reader
       ([0,
         String_pipe_reader[5],
         String_pipe_reader[1],
         String_pipe_reader[2],
         String_pipe_reader[3],
         String_pipe_reader[4]]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Test_reader_string,
      0,
      cst_src_pipe_transport_ml$7,
      441,
      0,
      79,
      _gN_);
    function _gO_(param)
     {Test_reader
       ([0,
         Bigstring_pipe_reader[5],
         Bigstring_pipe_reader[1],
         Bigstring_pipe_reader[2],
         Bigstring_pipe_reader[3],
         Bigstring_pipe_reader[4]]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Test_reader_bigstring,
      0,
      cst_src_pipe_transport_ml$8,
      442,
      0,
      85,
      _gO_);
    function Bench_reader(Transport_reader)
     {var default_message=caml_call3(Core_Bigstring[14],0,0,cst_FOOBAR123$0);
      function create_message_buf(message)
       {var
         message_len=caml_call1(Core_Bigstring[21],message),
         buf=caml_call2(Core_Bigstring[115],0,Header[1] + message_len | 0);
        caml_call3(Header[3],buf,0,message_len);
        caml_call5(Core_Bigstring[22],message,0,buf,Header[1],message_len);
        return buf}
      function create_message(param)
       {return create_message_buf(default_message)}
      var
       one_message=create_message(0),
       two_messages=
        caml_call2(Core_Bigstring[18],0,[0,one_message,[0,one_message,0]]),
       msg_len=caml_call1(Core_Bigstring[21],one_message),
       split_at=msg_len / 2 | 0,
       one_message_p1=caml_call3(Core_Bigstring[25],one_message,0,split_at),
       one_message_p2=
        caml_call3
         (Core_Bigstring[25],one_message,split_at,msg_len - split_at | 0);
      function on_message(buffer,param,_g6_){return 0}
      function on_end_of_batch(param){return 0}
      function wait(param)
       {return caml_call1(Async_kernel_Async_kernel_sche[33][1],0)}
      function run_test(run)
       {var
         match=caml_call3(Async_kernel_Pipe[7],0,0,0),
         writer=match[2],
         reader=match[1],
         reader$0=create$14(reader);
        caml_call3(Transport_reader[5],reader$0,on_message,on_end_of_batch);
        wait(0);
        var for$0=0;
        for(;;)
         {caml_call1
           (run,
            function(x)
             {var _g5_=caml_call1(Transport_reader[1][1],x);
              return caml_call2(Async_kernel_Pipe[27],writer,_g5_)});
          var _g4_=for$0 + 1 | 0;
          if(100 === for$0)return wait(0);
          var for$0=_g4_}}
      function write_1_msg_1_chunk(write)
       {return caml_call1(write,one_message)}
      var buf=create_message_buf(caml_call3(Core_Bigstring[14],0,0,cst$29));
      function write_1_msg_3_chunk(write)
       {var _g3_=caml_call1(Core_Bigstring[21],one_message);
        caml_call3(Header[3],buf,0,_g3_);
        caml_call1(write,buf);
        caml_call1(write,one_message_p1);
        return caml_call1(write,one_message_p2)}
      function write_2_msg_1_chunk(write)
       {return caml_call1(write,two_messages)}
      function write_2_msg_one_byte_at_a_time(write)
       {var _g1_=caml_call1(Core_Bigstring[21],two_messages) - 1 | 0,_g0_=0;
        if(_g1_ >= 0)
         {var i=_g0_;
          for(;;)
           {caml_call1(write,caml_call3(Core_Bigstring[25],two_messages,i,1));
            var _g2_=i + 1 | 0;
            if(_g1_ !== i){var i=_g2_;continue}
            break}}
        return 0}
      if(Ppx_bench_lib_Benchmark_accumu[3])
       {var f=function(param,_gZ_){return run_test(write_1_msg_1_chunk)};
        caml_call8
         (Ppx_bench_lib_Benchmark_accumu[5],
          cst_write_1_msg_1_chunk,
          cst_run_test_write_1_msg_1_chu$0,
          cst_src_pipe_transport_ml$9,
          cst_src_pipe_transport_ml_Benc,
          512,
          2,
          64,
          [0,f])}
      if(Ppx_bench_lib_Benchmark_accumu[3])
       {var
         f$0=
          function(param,_gY_)
           {function f(write)
             {write_1_msg_1_chunk(write);return write_1_msg_1_chunk(write)}
            return run_test(f)};
        caml_call8
         (Ppx_bench_lib_Benchmark_accumu[5],
          cst_write_2_msg_1_chunk,
          cst_let_f_write_write_1_msg_1_,
          cst_src_pipe_transport_ml$10,
          cst_src_pipe_transport_ml_Benc$0,
          514,
          2,
          140,
          [0,f$0])}
      if(Ppx_bench_lib_Benchmark_accumu[3])
       {var f$1=function(param,_gX_){return run_test(write_1_msg_3_chunk)};
        caml_call8
         (Ppx_bench_lib_Benchmark_accumu[5],
          cst_write_1_msg_3_chunk,
          cst_run_test_write_1_msg_3_chu$0,
          cst_src_pipe_transport_ml$11,
          cst_src_pipe_transport_ml_Benc$1,
          522,
          2,
          64,
          [0,f$1])}
      if(Ppx_bench_lib_Benchmark_accumu[3])
       {var f$2=function(param,_gW_){return run_test(write_2_msg_1_chunk)};
        caml_call8
         (Ppx_bench_lib_Benchmark_accumu[5],
          cst_write_2_msg_1_chunk$0,
          cst_run_test_write_2_msg_1_chu$0,
          cst_src_pipe_transport_ml$12,
          cst_src_pipe_transport_ml_Benc$2,
          523,
          2,
          64,
          [0,f$2])}
      if(Ppx_bench_lib_Benchmark_accumu[3])
       {var
         f$3=
          function(param,_gV_)
           {return run_test(write_2_msg_one_byte_at_a_time)};
        caml_call8
         (Ppx_bench_lib_Benchmark_accumu[5],
          cst_write_2_msg_one_byte,
          cst_run_test_write_2_msg_one_b$0,
          cst_src_pipe_transport_ml$13,
          cst_src_pipe_transport_ml_Benc$3,
          524,
          2,
          85,
          [0,f$3])}
      if(Ppx_bench_lib_Benchmark_accumu[3])
       {var
         f$4=
          function(param,_gU_)
           {function f(write)
             {caml_call1(write,create_message(0));
              write_1_msg_3_chunk(write);
              write_2_msg_1_chunk(write);
              write_2_msg_one_byte_at_a_time(write);
              return caml_call1(write,create_message(0))}
            return run_test(f)};
        caml_call8
         (Ppx_bench_lib_Benchmark_accumu[5],
          cst_multi,
          cst_let_f_write_write_create_m,
          cst_src_pipe_transport_ml$14,
          cst_src_pipe_transport_ml_Benc$4,
          526,
          2,
          245,
          [0,f$4])}
      return [0,
              default_message,
              create_message_buf,
              create_message,
              one_message,
              two_messages,
              one_message_p1,
              one_message_p2,
              on_message,
              on_end_of_batch,
              wait,
              run_test,
              write_1_msg_1_chunk,
              buf,
              write_1_msg_3_chunk,
              write_2_msg_1_chunk,
              write_2_msg_one_byte_at_a_time]}
    if(Ppx_bench_lib_Benchmark_accumu[3])
     {var
       _gP_=
        function(param)
         {Bench_reader
           ([0,
             String_pipe_reader[5],
             String_pipe_reader[1],
             String_pipe_reader[2],
             String_pipe_reader[3],
             String_pipe_reader[4]]);
          return 0};
      caml_call8
       (Ppx_bench_lib_Benchmark_accumu[6],
        cst_Test_reader_string$0,
        cst$30,
        cst_src_pipe_transport_ml$16,
        cst_src_pipe_transport_ml$15,
        538,
        0,
        81,
        _gP_)}
    if(Ppx_bench_lib_Benchmark_accumu[3])
     {var
       _gQ_=
        function(param)
         {Bench_reader
           ([0,
             Bigstring_pipe_reader[5],
             Bigstring_pipe_reader[1],
             Bigstring_pipe_reader[2],
             Bigstring_pipe_reader[3],
             Bigstring_pipe_reader[4]]);
          return 0};
      caml_call8
       (Ppx_bench_lib_Benchmark_accumu[6],
        cst_Test_reader_bigstring$0,
        cst$31,
        cst_src_pipe_transport_ml$18,
        cst_src_pipe_transport_ml$17,
        539,
        0,
        87,
        _gQ_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$52);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Pipe_tran$0);
    var Async_rpc_kernel_Pipe_transpor=[0,Kind,create$15];
    caml_register_global
     (887,Async_rpc_kernel_Pipe_transpor,"Async_rpc_kernel__Pipe_transport");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel_Persisten);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$53);
    caml_call1(Expect_test_collector[5][1],cst_src_persistent_connection_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$54,cst$32);
    var Make$8=include$6[1],rpc_connection=_gB_[3];
    function close$7(t)
     {var _gT_=caml_call1(rpc_connection,t);
      return caml_call3(_ft_[10],0,0,_gT_)}
    function is_closed$5(t)
     {var _gS_=caml_call1(rpc_connection,t);return caml_call1(_ft_[13],_gS_)}
    function close_finished$0(t)
     {var _gR_=caml_call1(rpc_connection,t);return caml_call1(_ft_[11],_gR_)}
    var
     Versioned_rpc=
      caml_call1(Make$8,[0,close$7,is_closed$5,close_finished$0]);
    function close$8(t){return caml_call3(_ft_[10],0,0,t)}
    function is_closed$6(t){return caml_call1(_ft_[13],t)}
    function close_finished$1(t){return caml_call1(_ft_[11],t)}
    var Rpc$0=caml_call1(Make$8,[0,close$8,is_closed$6,close_finished$1]);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$55);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel_Persisten$0);
    var Async_rpc_kernel_Persistent_co=[0,Rpc$0,Versioned_rpc];
    caml_register_global
     (889,
      Async_rpc_kernel_Persistent_co,
      "Async_rpc_kernel__Persistent_connection");
    caml_call1(Ppx_module_timer_runtime[4],cst_Async_rpc_kernel);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_async_rpc_kernel$56);
    caml_call1(Expect_test_collector[5][1],cst_src_async_rpc_kernel_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_rpc_kernel$57,cst$33);
    var
     Async_rpc_kernel_stable=[0],
     Async_rpc_kernel_private=[0,default_handshake_timeout];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_rpc_kernel$58);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Async_rpc_kernel$0);
    var
     Async_rpc_kernel$0=
      [0,Async_rpc_kernel_stable,Async_rpc_kernel_private];
    caml_register_global(890,Async_rpc_kernel$0,"Async_rpc_kernel");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
