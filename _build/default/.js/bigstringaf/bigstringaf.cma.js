// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_ba_dim_1=runtime.caml_ba_dim_1,
     caml_ba_uint8_get16=runtime.caml_ba_uint8_get16,
     caml_ba_uint8_get32=runtime.caml_ba_uint8_get32,
     caml_ba_uint8_get64=runtime.caml_ba_uint8_get64,
     caml_ba_uint8_set16=runtime.caml_ba_uint8_set16,
     caml_ba_uint8_set32=runtime.caml_ba_uint8_set32,
     caml_ba_uint8_set64=runtime.caml_ba_uint8_set64,
     caml_bswap16=runtime.caml_bswap16,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_int32_bswap=runtime.caml_int32_bswap,
     caml_int64_bswap=runtime.caml_int64_bswap,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_memchr=caml_string_of_jsbytes("memchr"),
     cst_memchr$0=caml_string_of_jsbytes("memchr"),
     cst_memcmp_string=caml_string_of_jsbytes("memcmp_string"),
     cst_memcmp_string$0=caml_string_of_jsbytes("memcmp_string"),
     cst_memcmp_string$1=caml_string_of_jsbytes("memcmp_string"),
     cst_memcmp=caml_string_of_jsbytes("memcmp"),
     cst_memcmp$0=caml_string_of_jsbytes("memcmp"),
     cst_memcmp$1=caml_string_of_jsbytes("memcmp"),
     cst_blit_to_bytes=caml_string_of_jsbytes("blit_to_bytes"),
     cst_blit_to_bytes$0=caml_string_of_jsbytes("blit_to_bytes"),
     cst_blit_to_bytes$1=caml_string_of_jsbytes("blit_to_bytes"),
     cst_blit_from_bytes=caml_string_of_jsbytes("blit_from_bytes"),
     cst_blit_from_bytes$0=caml_string_of_jsbytes("blit_from_bytes"),
     cst_blit_from_bytes$1=caml_string_of_jsbytes("blit_from_bytes"),
     cst_blit_from_string=caml_string_of_jsbytes("blit_from_string"),
     cst_blit_from_string$0=caml_string_of_jsbytes("blit_from_string"),
     cst_blit_from_string$1=caml_string_of_jsbytes("blit_from_string"),
     cst_blit=caml_string_of_jsbytes("blit"),
     cst_blit$0=caml_string_of_jsbytes("blit"),
     cst_blit$1=caml_string_of_jsbytes("blit"),
     cst_of_string=caml_string_of_jsbytes("of_string"),
     cst_substring=caml_string_of_jsbytes("substring"),
     cst_copy=caml_string_of_jsbytes("copy"),
     partial=
      [11,
       caml_string_of_jsbytes(", len: "),
       [4,0,0,0,[11,caml_string_of_jsbytes(" }"),0]]],
     partial$0=
      [11,
       caml_string_of_jsbytes(", len: "),
       [4,0,0,0,[11,caml_string_of_jsbytes(" }"),0]]],
     Stdlib_Sys=global_data.Stdlib__Sys,
     Stdlib_Bytes=global_data.Stdlib__Bytes,
     Stdlib_Printf=global_data.Stdlib__Printf,
     Stdlib=global_data.Stdlib,
     Stdlib_Bigarray=global_data.Stdlib__Bigarray,
     _c_=
      [0,
       [11,
        caml_string_of_jsbytes("Bigstringaf."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" invalid range: { buf1_len: "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", buf1_off: "),
            [4,
             0,
             0,
             0,
             [11,
              caml_string_of_jsbytes(", buf2_len: "),
              [4,
               0,
               0,
               0,
               [11,caml_string_of_jsbytes(", buf2_off: "),[4,0,0,0,partial]]]]]]]]]],
       caml_string_of_jsbytes
        ("Bigstringaf.%s invalid range: { buf1_len: %d, buf1_off: %d, buf2_len: %d, buf2_off: %d, len: %d }")],
     _b_=
      [0,
       [11,
        caml_string_of_jsbytes("Bigstringaf."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" invalid range: { src_len: "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", src_off: "),
            [4,
             0,
             0,
             0,
             [11,
              caml_string_of_jsbytes(", dst_len: "),
              [4,
               0,
               0,
               0,
               [11,caml_string_of_jsbytes(", dst_off: "),[4,0,0,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes
        ("Bigstringaf.%s invalid range: { src_len: %d, src_off: %d, dst_len: %d, dst_off: %d, len: %d }")],
     _a_=
      [0,
       [11,
        caml_string_of_jsbytes("Bigstringaf."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" invalid range: { buffer_len: "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", off: "),
            [4,
             0,
             0,
             0,
             [11,
              caml_string_of_jsbytes(", len: "),
              [4,0,0,0,[11,caml_string_of_jsbytes(" }"),0]]]]]]]]],
       caml_string_of_jsbytes
        ("Bigstringaf.%s invalid range: { buffer_len: %d, off: %d, len: %d }")];
    function create(size)
     {return caml_call3
              (Stdlib_Bigarray[19][1],
               Stdlib_Bigarray[13],
               Stdlib_Bigarray[15],
               size)}
    var empty=create(0);
    function length(t){return caml_ba_dim_1(t)}
    function sub(t,off,len){return runtime.caml_ba_sub(t,off,len)}
    function invalid_bounds(op,buffer_len,off,len)
     {var message=caml_call5(Stdlib_Printf[4],_a_,op,buffer_len,off,len);
      throw [0,Stdlib[6],message]}
    function invalid_bounds_blit(op,src_len,src_off,dst_len,dst_off,len)
     {var
       message=
        caml_call7
         (Stdlib_Printf[4],_b_,op,src_len,src_off,dst_len,dst_off,len);
      throw [0,Stdlib[6],message]}
    function invalid_bounds_memcmp(op,buf1_len,buf1_off,buf2_len,buf2_off,len)
     {var
       message=
        caml_call7
         (Stdlib_Printf[4],_c_,op,buf1_len,buf1_off,buf2_len,buf2_off,len);
      throw [0,Stdlib[6],message]}
    function copy(t,off,len)
     {var buffer_len=caml_ba_dim_1(t),_aY_=len < 0?1:0;
      if(_aY_)
       var _aZ_=_aY_;
      else
       var _a0_=off < 0?1:0,_aZ_=_a0_ || ((buffer_len - off | 0) < len?1:0);
      if(_aZ_)invalid_bounds(cst_copy,buffer_len,off,len);
      var dst=create(len);
      runtime.bigstringaf_blit_to_bigstring(t,off,dst,0,len);
      return dst}
    function substring(t,off,len)
     {var buffer_len=caml_ba_dim_1(t),_aV_=len < 0?1:0;
      if(_aV_)
       var _aW_=_aV_;
      else
       var _aX_=off < 0?1:0,_aW_=_aX_ || ((buffer_len - off | 0) < len?1:0);
      if(_aW_)invalid_bounds(cst_substring,buffer_len,off,len);
      var b=caml_create_bytes(len);
      runtime.bigstringaf_blit_to_bytes(t,off,b,0,len);
      return caml_call1(Stdlib_Bytes[48],b)}
    function to_string(t)
     {var len=caml_ba_dim_1(t),b=caml_create_bytes(len);
      runtime.bigstringaf_blit_to_bytes(t,0,b,0,len);
      return caml_call1(Stdlib_Bytes[48],b)}
    function of_string(off,len,s)
     {var buffer_len=caml_ml_string_length(s),_aS_=len < 0?1:0;
      if(_aS_)
       var _aT_=_aS_;
      else
       var _aU_=off < 0?1:0,_aT_=_aU_ || ((buffer_len - off | 0) < len?1:0);
      if(_aT_)invalid_bounds(cst_of_string,buffer_len,off,len);
      var b=create(len);
      runtime.bigstringaf_blit_from_bytes(s,off,b,0,len);
      return b}
    function blit(src,src_off,dst,dst_off,len)
     {var src_len=caml_ba_dim_1(src),dst_len=caml_ba_dim_1(dst);
      if(len < 0)
       invalid_bounds_blit(cst_blit,src_len,src_off,dst_len,dst_off,len);
      var
       _aO_=src_off < 0?1:0,
       _aP_=_aO_ || ((src_len - src_off | 0) < len?1:0);
      if(_aP_)
       invalid_bounds_blit(cst_blit$0,src_len,src_off,dst_len,dst_off,len);
      var
       _aQ_=dst_off < 0?1:0,
       _aR_=_aQ_ || ((dst_len - dst_off | 0) < len?1:0);
      if(_aR_)
       invalid_bounds_blit(cst_blit$1,src_len,src_off,dst_len,dst_off,len);
      return runtime.bigstringaf_blit_to_bigstring
              (src,src_off,dst,dst_off,len)}
    function blit_from_string(src,src_off,dst,dst_off,len)
     {var src_len=caml_ml_string_length(src),dst_len=caml_ba_dim_1(dst);
      if(len < 0)
       invalid_bounds_blit
        (cst_blit_from_string,src_len,src_off,dst_len,dst_off,len);
      var
       _aK_=src_off < 0?1:0,
       _aL_=_aK_ || ((src_len - src_off | 0) < len?1:0);
      if(_aL_)
       invalid_bounds_blit
        (cst_blit_from_string$0,src_len,src_off,dst_len,dst_off,len);
      var
       _aM_=dst_off < 0?1:0,
       _aN_=_aM_ || ((dst_len - dst_off | 0) < len?1:0);
      if(_aN_)
       invalid_bounds_blit
        (cst_blit_from_string$1,src_len,src_off,dst_len,dst_off,len);
      return runtime.bigstringaf_blit_from_bytes(src,src_off,dst,dst_off,len)}
    function blit_from_bytes(src,src_off,dst,dst_off,len)
     {var src_len=caml_ml_bytes_length(src),dst_len=caml_ba_dim_1(dst);
      if(len < 0)
       invalid_bounds_blit
        (cst_blit_from_bytes,src_len,src_off,dst_len,dst_off,len);
      var
       _aG_=src_off < 0?1:0,
       _aH_=_aG_ || ((src_len - src_off | 0) < len?1:0);
      if(_aH_)
       invalid_bounds_blit
        (cst_blit_from_bytes$0,src_len,src_off,dst_len,dst_off,len);
      var
       _aI_=dst_off < 0?1:0,
       _aJ_=_aI_ || ((dst_len - dst_off | 0) < len?1:0);
      if(_aJ_)
       invalid_bounds_blit
        (cst_blit_from_bytes$1,src_len,src_off,dst_len,dst_off,len);
      return runtime.bigstringaf_blit_from_bytes(src,src_off,dst,dst_off,len)}
    function blit_to_bytes(src,src_off,dst,dst_off,len)
     {var src_len=caml_ba_dim_1(src),dst_len=caml_ml_bytes_length(dst);
      if(len < 0)
       invalid_bounds_blit
        (cst_blit_to_bytes,src_len,src_off,dst_len,dst_off,len);
      var
       _aC_=src_off < 0?1:0,
       _aD_=_aC_ || ((src_len - src_off | 0) < len?1:0);
      if(_aD_)
       invalid_bounds_blit
        (cst_blit_to_bytes$0,src_len,src_off,dst_len,dst_off,len);
      var
       _aE_=dst_off < 0?1:0,
       _aF_=_aE_ || ((dst_len - dst_off | 0) < len?1:0);
      if(_aF_)
       invalid_bounds_blit
        (cst_blit_to_bytes$1,src_len,src_off,dst_len,dst_off,len);
      return runtime.bigstringaf_blit_to_bytes(src,src_off,dst,dst_off,len)}
    function memcmp(buf1,buf1_off,buf2,buf2_off,len)
     {var buf1_len=caml_ba_dim_1(buf1),buf2_len=caml_ba_dim_1(buf2);
      if(len < 0)
       invalid_bounds_memcmp
        (cst_memcmp,buf1_len,buf1_off,buf2_len,buf2_off,len);
      var
       _ay_=buf1_off < 0?1:0,
       _az_=_ay_ || ((buf1_len - buf1_off | 0) < len?1:0);
      if(_az_)
       invalid_bounds_memcmp
        (cst_memcmp$0,buf1_len,buf1_off,buf2_len,buf2_off,len);
      var
       _aA_=buf2_off < 0?1:0,
       _aB_=_aA_ || ((buf2_len - buf2_off | 0) < len?1:0);
      if(_aB_)
       invalid_bounds_memcmp
        (cst_memcmp$1,buf1_len,buf1_off,buf2_len,buf2_off,len);
      return runtime.bigstringaf_memcmp_bigstring
              (buf1,buf1_off,buf2,buf2_off,len)}
    function memcmp_string(buf1,buf1_off,buf2,buf2_off,len)
     {var buf1_len=caml_ba_dim_1(buf1),buf2_len=caml_ml_string_length(buf2);
      if(len < 0)
       invalid_bounds_memcmp
        (cst_memcmp_string,buf1_len,buf1_off,buf2_len,buf2_off,len);
      var
       _au_=buf1_off < 0?1:0,
       _av_=_au_ || ((buf1_len - buf1_off | 0) < len?1:0);
      if(_av_)
       invalid_bounds_memcmp
        (cst_memcmp_string$0,buf1_len,buf1_off,buf2_len,buf2_off,len);
      var
       _aw_=buf2_off < 0?1:0,
       _ax_=_aw_ || ((buf2_len - buf2_off | 0) < len?1:0);
      if(_ax_)
       invalid_bounds_memcmp
        (cst_memcmp_string$1,buf1_len,buf1_off,buf2_len,buf2_off,len);
      return runtime.bigstringaf_memcmp_string
              (buf1,buf1_off,buf2,buf2_off,len)}
    function memchr(buf,buf_off,chr,len)
     {var buf_len=caml_ba_dim_1(buf);
      if(len < 0)invalid_bounds(cst_memchr,buf_len,buf_off,len);
      var
       _as_=buf_off < 0?1:0,
       _at_=_as_ || ((buf_len - buf_off | 0) < len?1:0);
      if(_at_)invalid_bounds(cst_memchr$0,buf_len,buf_off,len);
      return runtime.bigstringaf_memchr(buf,buf_off,chr,len)}
    function caml_bigstring_set_16(bs,off,i)
     {return caml_ba_uint8_set16(bs,off,caml_bswap16(i))}
    function caml_bigstring_set_32(bs,off,i)
     {return caml_ba_uint8_set32(bs,off,caml_int32_bswap(i))}
    function caml_bigstring_set_64(bs,off,i)
     {return caml_ba_uint8_set64(bs,off,caml_int64_bswap(i))}
    function caml_bigstring_get_16(bs,off)
     {return caml_bswap16(caml_ba_uint8_get16(bs,off))}
    function caml_bigstring_get_32(bs,off)
     {return caml_int32_bswap(caml_ba_uint8_get32(bs,off))}
    function caml_bigstring_get_64(bs,off)
     {return caml_int64_bswap(caml_ba_uint8_get64(bs,off))}
    function get_int16_sign_extended(x,off)
     {var _aq_=Stdlib_Sys[10] - 16 | 0,_ar_=Stdlib_Sys[10] - 16 | 0;
      return caml_bigstring_get_16(x,off) << _ar_ >> _aq_}
    if(Stdlib_Sys[11])
     var _e_=caml_ba_uint8_set16,_d_=caml_bigstring_set_16;
    else
     var _e_=caml_bigstring_set_16,_d_=caml_ba_uint8_set16;
    if(Stdlib_Sys[11])
     var _g_=caml_ba_uint8_set32,_f_=caml_bigstring_set_32;
    else
     var _g_=caml_bigstring_set_32,_f_=caml_ba_uint8_set32;
    if(Stdlib_Sys[11])
     var _i_=caml_ba_uint8_set64,_h_=caml_bigstring_set_64;
    else
     var _i_=caml_bigstring_set_64,_h_=caml_ba_uint8_set64;
    if(Stdlib_Sys[11])
     var _k_=caml_ba_uint8_get16,_j_=caml_bigstring_get_16;
    else
     var _k_=caml_bigstring_get_16,_j_=caml_ba_uint8_get16;
    function get_int16_sign_extended_noswap(x,off)
     {var _ao_=Stdlib_Sys[10] - 16 | 0,_ap_=Stdlib_Sys[10] - 16 | 0;
      return caml_ba_uint8_get16(x,off) << _ap_ >> _ao_}
    if(Stdlib_Sys[11])
     var
      get_int16_sign_extended_noswap$0=get_int16_sign_extended_noswap,
      _l_=get_int16_sign_extended;
    else
     var
      get_int16_sign_extended_noswap$0=get_int16_sign_extended,
      _l_=get_int16_sign_extended_noswap;
    if(Stdlib_Sys[11])
     var _n_=caml_ba_uint8_get32,_m_=caml_bigstring_get_32;
    else
     var _n_=caml_bigstring_get_32,_m_=caml_ba_uint8_get32;
    if(Stdlib_Sys[11])
     var get_int64_be=caml_ba_uint8_get64,get_int64_le=caml_bigstring_get_64;
    else
     var get_int64_be=caml_bigstring_get_64,get_int64_le=caml_ba_uint8_get64;
    function caml_bigstring_unsafe_set_16(bs,off,i)
     {return caml_ba_uint8_set16(bs,off,caml_bswap16(i))}
    function caml_bigstring_unsafe_set_32(bs,off,i)
     {return caml_ba_uint8_set32(bs,off,caml_int32_bswap(i))}
    function caml_bigstring_unsafe_set_64(bs,off,i)
     {return caml_ba_uint8_set64(bs,off,caml_int64_bswap(i))}
    function caml_bigstring_unsafe_get_16(bs,off)
     {return caml_bswap16(caml_ba_uint8_get16(bs,off))}
    function caml_bigstring_unsafe_get_32(bs,off)
     {return caml_int32_bswap(caml_ba_uint8_get32(bs,off))}
    function caml_bigstring_unsafe_get_64(bs,off)
     {return caml_int64_bswap(caml_ba_uint8_get64(bs,off))}
    if(Stdlib_Sys[11])
     var _p_=caml_ba_uint8_set16,_o_=caml_bigstring_unsafe_set_16;
    else
     var _p_=caml_bigstring_unsafe_set_16,_o_=caml_ba_uint8_set16;
    if(Stdlib_Sys[11])
     var _r_=caml_ba_uint8_set32,_q_=caml_bigstring_unsafe_set_32;
    else
     var _r_=caml_bigstring_unsafe_set_32,_q_=caml_ba_uint8_set32;
    if(Stdlib_Sys[11])
     var _t_=caml_ba_uint8_set64,_s_=caml_bigstring_unsafe_set_64;
    else
     var _t_=caml_bigstring_unsafe_set_64,_s_=caml_ba_uint8_set64;
    if(Stdlib_Sys[11])
     var _v_=caml_ba_uint8_get16,_u_=caml_bigstring_unsafe_get_16;
    else
     var _v_=caml_bigstring_unsafe_get_16,_u_=caml_ba_uint8_get16;
    function unsafe_get_int16_sign_extended(x,off)
     {var _am_=Stdlib_Sys[10] - 16 | 0,_an_=Stdlib_Sys[10] - 16 | 0;
      return _u_(x,off) << _an_ >> _am_}
    function unsafe_get_int16_sign_extended$0(x,off)
     {var _ak_=Stdlib_Sys[10] - 16 | 0,_al_=Stdlib_Sys[10] - 16 | 0;
      return _v_(x,off) << _al_ >> _ak_}
    if(Stdlib_Sys[11])
     var _x_=caml_ba_uint8_get32,_w_=caml_bigstring_unsafe_get_32;
    else
     var _x_=caml_bigstring_unsafe_get_32,_w_=caml_ba_uint8_get32;
    if(Stdlib_Sys[11])
     var
      unsafe_get_int64_be=caml_ba_uint8_get64,
      unsafe_get_int64_le=caml_bigstring_unsafe_get_64;
    else
     var
      unsafe_get_int64_be=caml_bigstring_unsafe_get_64,
      unsafe_get_int64_le=caml_ba_uint8_get64;
    function _y_(_aj_,_ai_,_ah_,_ag_)
     {return runtime.bigstringaf_memchr(_aj_,_ai_,_ah_,_ag_)}
    function _z_(_af_,_ae_,_ad_,_ac_,_ab_)
     {return runtime.bigstringaf_memcmp_string(_af_,_ae_,_ad_,_ac_,_ab_)}
    function _A_(_aa_,_$_,___,_Z_,_Y_)
     {return runtime.bigstringaf_memcmp_bigstring(_aa_,_$_,___,_Z_,_Y_)}
    function _B_(_X_,_W_,_V_,_U_,_T_)
     {return runtime.bigstringaf_blit_to_bytes(_X_,_W_,_V_,_U_,_T_)}
    function _C_(_S_,_R_,_Q_,_P_,_O_)
     {return runtime.bigstringaf_blit_from_bytes(_S_,_R_,_Q_,_P_,_O_)}
    function _D_(_N_,_M_,_L_,_K_,_J_)
     {return runtime.bigstringaf_blit_from_bytes(_N_,_M_,_L_,_K_,_J_)}
    var
     Bigstringaf=
      [0,
       create,
       empty,
       of_string,
       copy,
       sub,
       length,
       substring,
       to_string,
       _j_,
       _l_,
       _d_,
       _m_,
       _f_,
       get_int64_le,
       _h_,
       _k_,
       get_int16_sign_extended_noswap$0,
       _e_,
       _n_,
       _g_,
       get_int64_be,
       _i_,
       blit,
       blit_from_string,
       blit_from_bytes,
       blit_to_bytes,
       memcmp,
       memcmp_string,
       memchr,
       _u_,
       _v_,
       unsafe_get_int16_sign_extended,
       unsafe_get_int16_sign_extended$0,
       _o_,
       _p_,
       _w_,
       _x_,
       _q_,
       _r_,
       unsafe_get_int64_le,
       unsafe_get_int64_be,
       _s_,
       _t_,
       function(_I_,_H_,_G_,_F_,_E_)
        {return runtime.bigstringaf_blit_to_bigstring(_I_,_H_,_G_,_F_,_E_)},
       _D_,
       _C_,
       _B_,
       _A_,
       _z_,
       _y_];
    runtime.caml_register_global(31,Bigstringaf,"Bigstringaf");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
