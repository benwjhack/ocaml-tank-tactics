// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_src_protocol_bonsai_protoc$11=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_Graph_info$0=caml_string_of_jsbytes("Graph_info"),
     cst_Performance_measure$0=caml_string_of_jsbytes("Performance_measure"),
     cst_graph_info=caml_string_of_jsbytes("graph_info"),
     cst_performance_measure=caml_string_of_jsbytes("performance_measure"),
     cst_Graph_info$1=caml_string_of_jsbytes("Graph_info"),
     cst_Performance_measure$1=caml_string_of_jsbytes("Performance_measure"),
     cst_graph_info$0=caml_string_of_jsbytes("graph_info"),
     cst_performance_measure$0=caml_string_of_jsbytes("performance_measure"),
     cst_src_protocol_bonsai_protoc$10=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml.Message.t"),
     cst_src_protocol_bonsai_protoc$4=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_duration$0=caml_string_of_jsbytes("duration"),
     cst_entry_type$0=caml_string_of_jsbytes("entry_type"),
     cst_label$0=caml_string_of_jsbytes("label"),
     cst_start_time$0=caml_string_of_jsbytes("start_time"),
     cst_Bonsai$0=caml_string_of_jsbytes("Bonsai"),
     cst_Other$0=caml_string_of_jsbytes("Other"),
     cst_Bonsai$1=caml_string_of_jsbytes("Bonsai"),
     cst_Other$1=caml_string_of_jsbytes("Other"),
     cst_duration$1=caml_string_of_jsbytes("duration"),
     cst_start_time$1=caml_string_of_jsbytes("start_time"),
     cst_entry_type$1=caml_string_of_jsbytes("entry_type"),
     cst_label$1=caml_string_of_jsbytes("label"),
     cst_src_protocol_bonsai_protoc$3=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml.Entry.t"),
     cst_src_protocol_bonsai_protoc$2=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml.Entry.t"),
     cst_Bonsai_protocol=caml_string_of_jsbytes("Bonsai_protocol"),
     cst_bonsai_protocol=caml_string_of_jsbytes("bonsai_protocol"),
     cst_src_protocol_bonsai_protoc=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_bonsai_protocol$0=caml_string_of_jsbytes("bonsai_protocol"),
     cst_duration=caml_string_of_jsbytes("duration"),
     cst_start_time=caml_string_of_jsbytes("start_time"),
     cst_entry_type=caml_string_of_jsbytes("entry_type"),
     cst_Other=caml_string_of_jsbytes("Other"),
     cst_Bonsai=caml_string_of_jsbytes("Bonsai"),
     cst_src_protocol_bonsai_protoc$0=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml:7:14"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_src_protocol_bonsai_protoc$1=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml:6:2"),
     cst_t$0=caml_string_of_jsbytes("t"),
     error_source_028=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml.Entry.t"),
     cst_src_protocol_bonsai_protoc$5=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_src_protocol_bonsai_protoc$6=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_src_protocol_bonsai_protoc$7=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_src_protocol_bonsai_protoc$8=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_4a2a77ea1b6212f7eb19e8d0b9=
      caml_string_of_jsbytes("4a2a77ea1b6212f7eb19e8d0b9ef6abb"),
     cst_Performance_measure=caml_string_of_jsbytes("Performance_measure"),
     cst_Graph_info=caml_string_of_jsbytes("Graph_info"),
     cst_t$1=caml_string_of_jsbytes("t"),
     cst_src_protocol_bonsai_protoc$9=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml:21:2"),
     cst_t$2=caml_string_of_jsbytes("t"),
     error_source_050=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml.Message.t"),
     cst_src_protocol_bonsai_protoc$12=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_src_protocol_bonsai_protoc$13=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_src_protocol_bonsai_protoc$14=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_src_protocol_bonsai_protoc$15=
      caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),
     cst_4a2a77ea1b6212f7eb19e8d0b9$0=
      caml_string_of_jsbytes("4a2a77ea1b6212f7eb19e8d0b9ef6abb"),
     cst_bonsai_protocol$1=caml_string_of_jsbytes("bonsai_protocol"),
     cst_Bonsai_protocol$0=caml_string_of_jsbytes("Bonsai_protocol"),
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Core=global_data.Core,
     Expect_test_common_File=global_data.Expect_test_common__File,
     Bonsai_Graph_info=global_data.Bonsai__Graph_info,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Bin_prot_Read=global_data.Bin_prot__Read,
     Bin_prot_Common=global_data.Bin_prot__Common,
     Bin_prot_Write=global_data.Bin_prot__Write,
     Bonsai_Node_path=global_data.Bonsai__Node_path,
     Assert_failure=global_data.Assert_failure,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Expect_test_config=global_data.Expect_test_config,
     Inline_test_config=global_data.Inline_test_config;
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_protocol);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_protocol);
    caml_call1(Expect_test_collector[5][1],cst_src_protocol_bonsai_protoc);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_protocol$0,cst);
    var
     _a_=
      [0,
       [0,cst_entry_type,Core[459]],
       [0,[0,cst_start_time,Core[327]],[0,[0,cst_duration,Core[327]],0]]],
     _b_=[0,caml_call2(Bin_prot_Shape[10],cst_Other,[0,Core[459]]),0],
     _c_=
      [0,
       caml_call2(Bin_prot_Shape[10],cst_Bonsai,[0,Bonsai_Node_path[5]]),
       _b_],
     _d_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_bonsai_protoc$0),
     _e_=[0,[0,cst_label,caml_call2(Bin_prot_Shape[12],_d_,_c_)],_a_],
     _f_=caml_call1(Bin_prot_Shape[8],_e_),
     _g_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t),0,_f_],0],
     _h_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_bonsai_protoc$1),
     group=caml_call2(Bin_prot_Shape[6],_h_,_g_),
     _i_=caml_call1(Bin_prot_Shape[2][1],cst_t$0),
     bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_i_),0),
     _C_=[0,caml_string_of_jsbytes("Graph_info")],
     _D_=[0,caml_string_of_jsbytes("Performance_measure")],
     _B_=
      [1,caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml.Message.t")],
     _k_=[0,caml_string_of_jsbytes("duration")],
     _l_=[0,caml_string_of_jsbytes("start_time")],
     _m_=[0,caml_string_of_jsbytes("entry_type")],
     _n_=[0,caml_string_of_jsbytes("Bonsai")],
     _p_=[0,caml_string_of_jsbytes("Other")],
     _o_=[0,caml_string_of_jsbytes("label")],
     _j_=[0,caml_string_of_jsbytes("src/protocol/bonsai_protocol.ml"),6,2],
     _s_=[1,caml_string_of_jsbytes(" 06de0862e532730a58840545d773281d ")],
     _t_=[0,caml_string_of_jsbytes("")],
     _G_=[1,caml_string_of_jsbytes(" b17892a0948ebd34a0b716278484df52 ")],
     _H_=[0,caml_string_of_jsbytes("")];
    function bin_size_t(param)
     {var v4=param[4],v3=param[3],v2=param[2],v1=param[1],size=0;
      if(370492634 <= v1[1])
       var
        args=v1[2],
        size_args=caml_call1(Bonsai_Node_path[1],args),
        _ar_=caml_call2(Bin_prot_Common[23],size_args,4);
      else
       var
        args$0=v1[2],
        size_args$0=caml_call1(Core[460],args$0),
        _ar_=caml_call2(Bin_prot_Common[23],size_args$0,4);
      var
       size$0=caml_call2(Bin_prot_Common[23],size,_ar_),
       _as_=caml_call1(Core[460],v2),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_as_),
       _at_=caml_call1(Core[328],v3),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_at_),
       _au_=caml_call1(Core[328],v4);
      return caml_call2(Bin_prot_Common[23],size$2,_au_)}
    function bin_write_t(buf,pos,param)
     {var v4=param[4],v3=param[3],v2=param[2],v1=param[1];
      if(370492634 <= v1[1])
       var
        args=v1[2],
        pos$0=caml_call3(Bin_prot_Write[30],buf,pos,370492634),
        pos$1=caml_call3(Bonsai_Node_path[2],buf,pos$0,args);
      else
       var
        args$0=v1[2],
        pos$4=caml_call3(Bin_prot_Write[30],buf,pos,-912009552),
        pos$1=caml_call3(Core[461],buf,pos$4,args$0);
      var
       pos$2=caml_call3(Core[461],buf,pos$1,v2),
       pos$3=caml_call3(Core[329],buf,pos$2,v3);
      return caml_call3(Core[329],buf,pos$3,v4)}
    var bin_writer_t=[0,bin_size_t,bin_write_t];
    function bin_read_t(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_protocol_bonsai_protoc$2,
               pos_ref[1])}
    function bin_read_t$0(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {if(-912009552 === vint)
         var
          arg_1=caml_call2(Core[463],buf,pos_ref),
          _ap_=[0,-912009552,arg_1];
        else
         {if(370492634 !== vint)throw Bin_prot_Common[13];
          var
           arg_1$0=caml_call2(Bonsai_Node_path[3],buf,pos_ref),
           _ap_=[0,370492634,arg_1$0]}
        var v_label=_ap_}
      catch(_aq_)
       {_aq_ = caml_wrap_exception(_aq_);
        if(_aq_ !== Bin_prot_Common[13])throw _aq_;
        var
         v_label=
          caml_call2
           (Bin_prot_Common[19],cst_src_protocol_bonsai_protoc$3,pos_ref[1])}
      var
       v_entry_type=caml_call2(Core[463],buf,pos_ref),
       v_start_time=caml_call2(Core[331],buf,pos_ref),
       v_duration=caml_call2(Core[331],buf,pos_ref);
      return [0,v_label,v_entry_type,v_start_time,v_duration]}
    var
     bin_reader_t=[0,bin_read_t$0,bin_read_t],
     bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
    function t_of_sexp(sexp_002)
     {if(0 === sexp_002[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_028,sexp_002);
      var
       field_sexps_003=sexp_002[1],
       label_004=[0,0],
       entry_type_006=[0,0],
       start_time_008=[0,0],
       duration_010=[0,0],
       duplicates_012=[0,0],
       extra_013=[0,0];
      function iter_034(param)
       {var param$0=param;
        for(;;)
         {if(! param$0)return 0;
          var _$_=param$0[1];
          if(1 === _$_[0])
           {var _aa_=_$_[1];
            if(_aa_)
             {var _ab_=_aa_[1];
              if(0 === _ab_[0])
               {var _ac_=_aa_[2],_ad_=_ab_[1],switch$0=0;
                if(! _ac_ || ! _ac_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_035=param$0[2],
                   field_sexp_015$3=
                    function(_ao_)
                     {function field_sexp_015(param)
                       {if(! _ao_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_028,sexp_002);
                        if(_ao_[2])throw [0,Assert_failure,_j_];
                        var x_036=_ao_[1];
                        return x_036}
                      return field_sexp_015},
                   field_sexp_015=field_sexp_015$3(_ac_);
                  if(caml_string_notequal(_ad_,cst_duration$0))
                   if(caml_string_notequal(_ad_,cst_entry_type$0))
                    if(caml_string_notequal(_ad_,cst_label$0))
                     if(caml_string_notequal(_ad_,cst_start_time$0))
                      {if(Sexplib0_Sexp_conv[26][1])
                        extra_013[1] = [0,_ad_,extra_013[1]]}
                     else
                      if(start_time_008[1])
                       duplicates_012[1] = [0,_ad_,duplicates_012[1]];
                      else
                       {var
                         field_sexp_015$0=field_sexp_015(0),
                         fvalue_018=caml_call1(Core[340],field_sexp_015$0);
                        start_time_008[1] = [0,fvalue_018]}
                    else
                     if(label_004[1])
                      duplicates_012[1] = [0,_ad_,duplicates_012[1]];
                     else
                      {var sexp_032=field_sexp_015(0);
                       try
                        {if(0 === sexp_032[0])
                          var
                           atom_021=sexp_032[1],
                           _ae_=
                            caml_string_notequal(atom_021,cst_Bonsai$0)
                             ?caml_string_notequal(atom_021,cst_Other$0)
                               ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                               :caml_call2
                                 (Sexplib0_Sexp_conv_error[23],error_source_028,sexp_032)
                             :caml_call2
                               (Sexplib0_Sexp_conv_error[23],error_source_028,sexp_032),
                           _af_=_ae_;
                         else
                          {var _ag_=sexp_032[1];
                           if(_ag_)
                            {var _ah_=_ag_[1];
                             if(0 === _ah_[0])
                              {var sexp_args_024=_ag_[2],atom_021$0=_ah_[1];
                               if(caml_string_notequal(atom_021$0,cst_Bonsai$1))
                                if(caml_string_notequal(atom_021$0,cst_Other$1))
                                 var _ai_=caml_call1(Sexplib0_Sexp_conv_error[19],0);
                                else
                                 {var switch$1=0;
                                  if(sexp_args_024 && ! sexp_args_024[2])
                                   {var
                                     arg0_026=sexp_args_024[1],
                                     res0_027=caml_call1(Core[472],arg0_026),
                                     _al_=[0,-912009552,res0_027];
                                    switch$1 = 1}
                                  if(! switch$1)
                                   var
                                    _al_=
                                     caml_call3
                                      (Sexplib0_Sexp_conv_error[22],
                                       error_source_028,
                                       atom_021$0,
                                       sexp_032);
                                  var _ai_=_al_}
                               else
                                {var switch$2=0;
                                 if(sexp_args_024 && ! sexp_args_024[2])
                                  {var
                                    arg0_030=sexp_args_024[1],
                                    res0_031=caml_call1(Bonsai_Node_path[9],arg0_030),
                                    _am_=[0,370492634,res0_031];
                                   switch$2 = 1}
                                 if(! switch$2)
                                  var
                                   _am_=
                                    caml_call3
                                     (Sexplib0_Sexp_conv_error[22],
                                      error_source_028,
                                      atom_021$0,
                                      sexp_032);
                                 var _ai_=_am_}
                               var _aj_=_ai_}
                             else
                              var
                               _aj_=
                                caml_call2
                                 (Sexplib0_Sexp_conv_error[24],error_source_028,sexp_032);
                             var _ak_=_aj_}
                           else
                            var
                             _ak_=
                              caml_call2
                               (Sexplib0_Sexp_conv_error[25],error_source_028,sexp_032);
                           var _af_=_ak_}
                         var fvalue_033=_af_}
                       catch(_an_)
                        {_an_ = caml_wrap_exception(_an_);
                         if(_an_ !== Sexplib0_Sexp_conv_error[18])throw _an_;
                         var
                          fvalue_033=
                           caml_call2
                            (Sexplib0_Sexp_conv_error[20],error_source_028,sexp_032)}
                       label_004[1] = [0,fvalue_033]}
                   else
                    if(entry_type_006[1])
                     duplicates_012[1] = [0,_ad_,duplicates_012[1]];
                    else
                     {var
                       field_sexp_015$1=field_sexp_015(0),
                       fvalue_019=caml_call1(Core[472],field_sexp_015$1);
                      entry_type_006[1] = [0,fvalue_019]}
                  else
                   if(duration_010[1])
                    duplicates_012[1] = [0,_ad_,duplicates_012[1]];
                   else
                    {var
                      field_sexp_015$2=field_sexp_015(0),
                      fvalue_017=caml_call1(Core[340],field_sexp_015$2);
                     duration_010[1] = [0,fvalue_017]}
                  var param$0=tail_035;
                  continue}}}}
          return caml_call2(Sexplib0_Sexp_conv_error[10],error_source_028,_$_)}}
      iter_034(field_sexps_003);
      if(duplicates_012[1])
       return caml_call3
               (Sexplib0_Sexp_conv_error[12],
                error_source_028,
                duplicates_012[1],
                sexp_002);
      if(extra_013[1])
       return caml_call3
               (Sexplib0_Sexp_conv_error[13],
                error_source_028,
                extra_013[1],
                sexp_002);
      var
       _X_=label_004[1],
       _Y_=entry_type_006[1],
       _Z_=start_time_008[1],
       ___=duration_010[1];
      if(_X_ && _Y_ && _Z_ && ___)
       {var
         duration_011=___[1],
         start_time_009=_Z_[1],
         entry_type_007=_Y_[1],
         label_005=_X_[1];
        return [0,label_005,entry_type_007,start_time_009,duration_011]}
      return caml_call3
              (Sexplib0_Sexp_conv_error[15],
               error_source_028,
               sexp_002,
               [0,
                [0,0 === label_004[1]?1:0,cst_label$1],
                [0,
                 [0,0 === entry_type_006[1]?1:0,cst_entry_type$1],
                 [0,
                  [0,0 === start_time_008[1]?1:0,cst_start_time$1],
                  [0,[0,0 === duration_010[1]?1:0,cst_duration$1],0]]]])}
    function sexp_of_t(param)
     {var
       duration_046=param[4],
       start_time_044=param[3],
       entry_type_042=param[2],
       label_038=param[1],
       arg_047=caml_call1(Core[339],duration_046),
       bnds_037=[0,[1,[0,_k_,[0,arg_047,0]]],0],
       arg_045=caml_call1(Core[339],start_time_044),
       bnds_037$0=[0,[1,[0,_l_,[0,arg_045,0]]],bnds_037],
       arg_043=caml_call1(Core[471],entry_type_042),
       bnds_037$1=[0,[1,[0,_m_,[0,arg_043,0]]],bnds_037$0];
      if(370492634 <= label_038[1])
       var
        v_040=label_038[2],
        arg_039=[1,[0,_n_,[0,caml_call1(Bonsai_Node_path[10],v_040),0]]];
      else
       var
        v_041=label_038[2],
        arg_039=[1,[0,_p_,[0,caml_call1(Core[471],v_041),0]]];
      var bnds_037$2=[0,[1,[0,_o_,[0,arg_039,0]]],bnds_037$1];
      return [1,bnds_037$2]}
    var
     Expect_test_collector$0=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _q_(param)
     {var
       _U_=caml_call1(Bin_prot_Shape[21],bin_shape_t),
       _V_=caml_call1(Bin_prot_Shape[18][4],_U_);
      caml_call1(Core[32],_V_);
      var
       _W_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_src_protocol_bonsai_protoc$4),
         16,
         293,
         299,
         305];
      return caml_call1(Expect_test_collector$0[1],_W_)}
    var
     _r_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_src_protocol_bonsai_protoc$5),
       16,
       293,
       306,
       344],
     _u_=
      [0,
       [0,
        _t_,
        _s_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_src_protocol_bonsai_protoc$6),
         16,
         293,
         299,
         305],
        _r_],
       0],
     _v_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_src_protocol_bonsai_protoc$8),
       14,
       235,
       237,
       345],
     _w_=
      caml_call1(Expect_test_common_File[4][3],cst_4a2a77ea1b6212f7eb19e8d0b9);
    caml_call9
     (Expect_test_collector$0[3],
      _w_,
      _v_,
      cst_src_protocol_bonsai_protoc$7,
      0,
      0,
      _u_,
      0,
      Inline_test_config,
      _q_);
    var
     _x_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_Graph_info,[0,Bonsai_Graph_info[6],0]],
         [0,[0,cst_Performance_measure,[0,bin_shape_t,0]],0]]),
     _y_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$1),0,_x_],0],
     _z_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_bonsai_protoc$9),
     group$0=caml_call2(Bin_prot_Shape[6],_z_,_y_),
     _A_=caml_call1(Bin_prot_Shape[2][1],cst_t$2),
     bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_A_),0);
    function bin_size_t$0(param)
     {if(0 === param[0])
       {var v1=param[1],_S_=caml_call1(Bonsai_Graph_info[2],v1);
        return caml_call2(Bin_prot_Common[23],1,_S_)}
      var v1$0=param[1],_T_=bin_size_t(v1$0);
      return caml_call2(Bin_prot_Common[23],1,_T_)}
    function bin_write_t$0(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
        return caml_call3(Bonsai_Graph_info[3],buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
      return bin_write_t(buf,pos$1,v1$0)}
    var bin_writer_t$0=[0,bin_size_t$0,bin_write_t$0];
    function bin_read_t$1(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_protocol_bonsai_protoc$10,
               pos_ref[1])}
    function bin_read_t$2(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(Bonsai_Graph_info[4],buf,pos_ref);
        return [0,arg_1]}
      if(1 !== match)return caml_call2(Bin_prot_Common[18],_B_,pos_ref[1]);
      var arg_1$0=bin_read_t$0(buf,pos_ref);
      return [1,arg_1$0]}
    var
     bin_reader_t$0=[0,bin_read_t$2,bin_read_t$1],
     bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
    function t_of_sexp$0(sexp_052)
     {if(0 === sexp_052[0])
       {var _O_=sexp_052[1],switch$0=0;
        if(caml_string_notequal(_O_,cst_Graph_info$0))
         {var switch$1=0;
          if(caml_string_notequal(_O_,cst_Performance_measure$0))
           if(caml_string_notequal(_O_,cst_graph_info))
            {if(caml_string_notequal(_O_,cst_performance_measure))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_050,sexp_052)}
        if(! switch$0)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],error_source_050,sexp_052)}
      else
       {var _P_=sexp_052[1];
        if(! _P_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_050,sexp_052);
        var _Q_=_P_[1];
        if(0 !== _Q_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_050,sexp_052);
        var _R_=_Q_[1],switch$2=0;
        if(caml_string_notequal(_R_,cst_Graph_info$1))
         {var switch$3=0;
          if(caml_string_notequal(_R_,cst_Performance_measure$1))
           if(caml_string_notequal(_R_,cst_graph_info$0))
            {if(caml_string_notequal(_R_,cst_performance_measure$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args_059=_P_[2];
            if(sexp_args_059 && ! sexp_args_059[2])
             {var arg0_060=sexp_args_059[1],res0_061=t_of_sexp(arg0_060);
              return [1,res0_061]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],error_source_050,_R_,sexp_052)}}
        if(! switch$2)
         {var sexp_args_054=_P_[2];
          if(sexp_args_054 && ! sexp_args_054[2])
           {var
             arg0_055=sexp_args_054[1],
             res0_056=caml_call1(Bonsai_Graph_info[10],arg0_055);
            return [0,res0_056]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],error_source_050,_R_,sexp_052)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_050,sexp_052)}
    function sexp_of_t$0(param)
     {if(0 === param[0])
       {var
         arg0_062=param[1],
         res0_063=caml_call1(Bonsai_Graph_info[11],arg0_062);
        return [1,[0,_C_,[0,res0_063,0]]]}
      var arg0_064=param[1],res0_065=sexp_of_t(arg0_064);
      return [1,[0,_D_,[0,res0_065,0]]]}
    var
     Expect_test_collector$1=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _E_(param)
     {var
       _L_=caml_call1(Bin_prot_Shape[21],bin_shape_t$0),
       _M_=caml_call1(Bin_prot_Shape[18][4],_L_);
      caml_call1(Core[32],_M_);
      var
       _N_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_src_protocol_bonsai_protoc$11),
         28,
         548,
         554,
         560];
      return caml_call1(Expect_test_collector$1[1],_N_)}
    var
     _F_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_src_protocol_bonsai_protoc$12),
       28,
       548,
       561,
       599],
     _I_=
      [0,
       [0,
        _H_,
        _G_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_src_protocol_bonsai_protoc$13),
         28,
         548,
         554,
         560],
        _F_],
       0],
     _J_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_src_protocol_bonsai_protoc$15),
       26,
       490,
       492,
       600],
     _K_=
      caml_call1
       (Expect_test_common_File[4][3],cst_4a2a77ea1b6212f7eb19e8d0b9$0);
    caml_call9
     (Expect_test_collector$1[3],
      _K_,
      _J_,
      cst_src_protocol_bonsai_protoc$14,
      0,
      0,
      _I_,
      0,
      Inline_test_config,
      _E_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_protocol$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_protocol$0);
    var
     Bonsai_protocol=
      [0,
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t],
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_read_t$2,
        bin_read_t$1,
        bin_shape_t$0,
        bin_writer_t$0,
        bin_reader_t$0,
        bin_t$0]];
    runtime.caml_register_global(90,Bonsai_protocol,"Bonsai_protocol");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJib25zYWlfcHJvdG9jb2wuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImVycm9yX3NvdXJjZV8wMjgiLCJlcnJvcl9zb3VyY2VfMDUwIiwiZ3JvdXAiLCJiaW5fc2hhcGVfdCIsImJpbl9zaXplX3QiLCJ2NCIsInYzIiwidjIiLCJ2MSIsInNpemUiLCJhcmdzIiwic2l6ZV9hcmdzIiwiYXJncyQwIiwic2l6ZV9hcmdzJDAiLCJzaXplJDAiLCJzaXplJDEiLCJzaXplJDIiLCJiaW5fd3JpdGVfdCIsImJ1ZiIsInBvcyIsInBvcyQwIiwicG9zJDEiLCJwb3MkNCIsInBvcyQyIiwicG9zJDMiLCJiaW5fd3JpdGVyX3QiLCJiaW5fcmVhZF90IiwicG9zX3JlZiIsInZpbnQiLCJiaW5fcmVhZF90JDAiLCJhcmdfMSIsImFyZ18xJDAiLCJ2X2xhYmVsIiwidl9lbnRyeV90eXBlIiwidl9zdGFydF90aW1lIiwidl9kdXJhdGlvbiIsImJpbl9yZWFkZXJfdCIsImJpbl90IiwidF9vZl9zZXhwIiwic2V4cF8wMDIiLCJmaWVsZF9zZXhwc18wMDMiLCJsYWJlbF8wMDQiLCJlbnRyeV90eXBlXzAwNiIsInN0YXJ0X3RpbWVfMDA4IiwiZHVyYXRpb25fMDEwIiwiZHVwbGljYXRlc18wMTIiLCJleHRyYV8wMTMiLCJpdGVyXzAzNCIsInRhaWxfMDM1IiwiZmllbGRfc2V4cF8wMTUkMyIsImZpZWxkX3NleHBfMDE1IiwieF8wMzYiLCJmaWVsZF9zZXhwXzAxNSQwIiwiZnZhbHVlXzAxOCIsInNleHBfMDMyIiwiYXRvbV8wMjEiLCJzZXhwX2FyZ3NfMDI0IiwiYXRvbV8wMjEkMCIsImFyZzBfMDI2IiwicmVzMF8wMjciLCJhcmcwXzAzMCIsInJlczBfMDMxIiwiZnZhbHVlXzAzMyIsImZpZWxkX3NleHBfMDE1JDEiLCJmdmFsdWVfMDE5IiwiZmllbGRfc2V4cF8wMTUkMiIsImZ2YWx1ZV8wMTciLCJkdXJhdGlvbl8wMTEiLCJzdGFydF90aW1lXzAwOSIsImVudHJ5X3R5cGVfMDA3IiwibGFiZWxfMDA1Iiwic2V4cF9vZl90IiwiZHVyYXRpb25fMDQ2Iiwic3RhcnRfdGltZV8wNDQiLCJlbnRyeV90eXBlXzA0MiIsImxhYmVsXzAzOCIsImFyZ18wNDciLCJibmRzXzAzNyIsImFyZ18wNDUiLCJibmRzXzAzNyQwIiwiYXJnXzA0MyIsImJuZHNfMDM3JDEiLCJ2XzA0MCIsImFyZ18wMzkiLCJ2XzA0MSIsImJuZHNfMDM3JDIiLCJncm91cCQwIiwiYmluX3NoYXBlX3QkMCIsImJpbl9zaXplX3QkMCIsInYxJDAiLCJiaW5fd3JpdGVfdCQwIiwiYmluX3dyaXRlcl90JDAiLCJiaW5fcmVhZF90JDEiLCJiaW5fcmVhZF90JDIiLCJiaW5fcmVhZGVyX3QkMCIsImJpbl90JDAiLCJ0X29mX3NleHAkMCIsInNleHBfMDUyIiwic2V4cF9hcmdzXzA1OSIsImFyZzBfMDYwIiwicmVzMF8wNjEiLCJzZXhwX2FyZ3NfMDU0IiwiYXJnMF8wNTUiLCJyZXMwXzA1NiIsInNleHBfb2ZfdCQwIiwiYXJnMF8wNjIiLCJyZXMwXzA2MyIsImFyZzBfMDY0IiwicmVzMF8wNjUiXSwic291cmNlcyI6WyIvaG9tZS9iZW4vLm9wYW0vNC4xNC9saWIvYm9uc2FpL3Byb3RvY29sL2JvbnNhaV9wcm90b2NvbC5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7STs7Ozs7Ozs7Ozs7Ozs7O0lBMEJJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXJCRzs7S0FBTDs7O0tBTXlCLHVCQU56QjtLQXFCRTs7Ozs7Ozs7Ozs7Ozs7O0lBZnVCLFNBTnpCSTs7OztRQUNZTSxLQURaRjtRQUNZRzs7OztlQURaSDtRQUNZSzs7TUFEWjs7Ozs7Ozt3REFNeUI7YUFOekJJOzs7O1FBQ1lQLEtBRFpGO1FBQ1lZLG9DQURaRjtpREFDWUU7OztlQURaWjtRQUNZYyxvQ0FEWko7dUNBQ1lJO01BRFo7OzsrQ0FNeUI7UUFOekJHO0lBTXlCLFNBTnpCQzs7OzswQkFNeUI7YUFOekJHO00sSUFDWUQsa0NBRFpWOzswQkFDWVU7O3FDQURaVjs2QkFDWVk7Ozs7a0RBRFpaOzZCQUNZYTtZQUFSQzs7Ozs7OztpRUFESkw7TUFFSTt5Q0FGSlQ7T0FHSSxrQ0FISkE7T0FJSSxnQ0FKSkE7TUFJSSxVQUhBYyxRQUNBQyxhQUNBQyxhQUNBQyxXQUVxQjs7cUJBTnpCTjtLQU15QixTQU5wQjFCLFlBQUxzQjtJQU15QixTQU56QmE7Ozs7Ozs7Ozs7Ozs7UTtRQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBTXlCOzZCQU56Qlk7Ozs7Ozs7OztzQkFHSTttREFISkw7O3dCQUdJOzBDQUhKSzt5QkFHSSxnQ0FISkU7d0JBR0k7O3FCQUZBO2tEQURKUDs7dUJBQ0ksSUFBUVMsU0FEWko7O2tDQUNZSTs7Ozs7OztnQ0FBcUM7K0RBRGpEdEQsaUJBQ1lzRDs4QkFBYTs2REFEekJ0RCxpQkFDWXNEOzs7Ozs7Ozs7Ozs7OztvQ0FBcUM7OENBQXJDRTtxQ0FBcUM7Ozs7Ozs7O3VDQURqRHhEO3VDQUNZeUQ7Ozs7OzttQ0FBYTs2Q0FBYkQ7b0NBQWE7Ozs7Ozs7O3NDQUR6QnhEO3NDQUNZeUQ7Ozs7Ozs7OytEQURaekQsaUJBQ1lzRDs7Ozs7OzZEQURadEQsaUJBQ1lzRDs7NkJBQVJROzs7Ozs7MkJBQVE7MERBRFo5RCxpQkFDWXNEO3VCQUFSOztvQkFDQTtpREFGSlQ7O3NCQUVJO3dDQUZKSzt1QkFFSSxnQ0FGSmE7c0JBRUk7O21CQUVBO2dEQUpKbEI7O3FCQUlJO3VDQUpKSztzQkFJSSxnQ0FKSmU7cUJBSUk7a0JBSko7OytFQU15QjtNQU56Qjs7Ozs7Ozs7Ozs7Ozs7V0FDSXhCO09BREosSUFFSUM7T0FGSixJQUdJQztPQUhKLElBSUlDOzs7O1NBREF3QjtTQURBQztTQURBQzs0QkFDQUQsZUFDQUQsZUFDQUQ7TUFKSjs7Ozs7eUJBQ0kxQjs7MEJBQ0FDOzsyQkFDQUM7OEJBQ0FDLDBDQUVxQjthQU56QjJCOzs7Ozs7T0FJSTs7T0FEQTsrQ0FISk07T0FFSTsrQ0FGSkU7TUFFSSxnQkFEQUo7O1FBQVFPLE1BQVJQOzZEQUFRTzs7O2NBQVJQO2tEQUFRUztNQURaLCtCQUNJRCxhQURKRjtNQUNJLFVBREpJLFdBTXlCOzs7Ozs7eUNBTnBCbEY7O01BU0g7TUFDQTs7Ozs7Ozs7O3VEQUFnRDtJQUFoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBS0c7Ozs7OzBDQWZBQTtLQWVBO0tBQUw7OztLQUd5Qix5QkFIekI7SUFHeUIsU0FIekJxRjs7Ozs0QkFmQXBGLFdBZUFxRjtrREFHeUI7YUFIekJDOzs7OzthQWZBekUsWUFlQUMsZUFHeUI7UUFIekJ5RTtJQUd5QixTQUh6QkM7Ozs7MEJBR3lCO2FBSHpCQzs7Ozs7O2tCQWZBaEUsYUFlQVg7d0JBR3lCOzt1QkFIekIyRTtLQUd5QixXQUhwQk4sY0FBTEk7SUFHeUIsU0FIekJLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxREFmQTFELFVBZUE2RDs7Ozs7Ozs7Ozs7Ozs4RUFHeUI7YUFIekJLOztRQUNFOzs7O01BQ0EsK0JBakJGakMsVUFpQkVvQzt1Q0FDdUI7Ozs7Ozt5Q0FIcEJwQjs7TUFNSDtNQUNBOzs7Ozs7Ozs7dURBQWdEO0lBQWhEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQXRCRmpEOzs7Ozs7UUFBS25DO1FBQUxzQjs7OztRQWVBdUU7Ozs7OztRQUFLVDtRQUFMSTs7OztVIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiEgQ29yZVxub3BlbiBCb25zYWkuUHJpdmF0ZVxuXG5cbm1vZHVsZSBFbnRyeSA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHsgbGFiZWwgOiBbIGBCb25zYWkgb2YgTm9kZV9wYXRoLnQgfCBgT3RoZXIgb2Ygc3RyaW5nIF1cbiAgICA7IGVudHJ5X3R5cGUgOiBzdHJpbmdcbiAgICA7IHN0YXJ0X3RpbWUgOiBmbG9hdFxuICAgIDsgZHVyYXRpb24gOiBmbG9hdFxuICAgIH1cbiAgW0BAZGVyaXZpbmcgYmluX2lvLCBzZXhwXVxuXG4gIGxldCVleHBlY3RfdGVzdCBfID1cbiAgICBwcmludF9lbmRsaW5lIFslYmluX2RpZ2VzdDogdF07XG4gICAgWyVleHBlY3Qge3wgMDZkZTA4NjJlNTMyNzMwYTU4ODQwNTQ1ZDc3MzI4MWQgfH1dXG4gIDs7XG5lbmRcblxubW9kdWxlIE1lc3NhZ2UgPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICB8IEdyYXBoX2luZm8gb2YgR3JhcGhfaW5mby50XG4gICAgfCBQZXJmb3JtYW5jZV9tZWFzdXJlIG9mIEVudHJ5LnRcbiAgW0BAZGVyaXZpbmcgYmluX2lvLCBzZXhwXVxuXG4gIGxldCVleHBlY3RfdGVzdCBfID1cbiAgICBwcmludF9lbmRsaW5lIFslYmluX2RpZ2VzdDogdF07XG4gICAgWyVleHBlY3Qge3wgYjE3ODkyYTA5NDhlYmQzNGEwYjcxNjI3ODQ4NGRmNTIgfH1dXG4gIDs7XG5lbmRcbiJdfQ==
