// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_js_to_array=runtime.caml_js_to_array,
     caml_js_wrap_callback_unsafe=runtime.caml_js_wrap_callback_unsafe,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Bonsai_web_Import=caml_string_of_jsbytes("Bonsai_web__Import"),
     cst_bonsai_web=caml_string_of_jsbytes("bonsai_web"),
     cst_web_import_ml=caml_string_of_jsbytes("web/import.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_bonsai_web$0=caml_string_of_jsbytes("bonsai_web"),
     cst_bonsai_web$1=caml_string_of_jsbytes("bonsai_web"),
     cst_Bonsai_web_Import$0=caml_string_of_jsbytes("Bonsai_web__Import"),
     cst_Bonsai_web_To_incr_dom_int=
      caml_string_of_jsbytes("Bonsai_web__To_incr_dom_intf"),
     cst_bonsai_web$2=caml_string_of_jsbytes("bonsai_web"),
     cst_web_to_incr_dom_intf_ml=
      caml_string_of_jsbytes("web/to_incr_dom_intf.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_bonsai_web$3=caml_string_of_jsbytes("bonsai_web"),
     cst_bonsai_web$4=caml_string_of_jsbytes("bonsai_web"),
     cst_Bonsai_web_To_incr_dom_int$0=
      caml_string_of_jsbytes("Bonsai_web__To_incr_dom_intf"),
     cst$2=caml_string_of_jsbytes(""),
     cst_Bonsai_web_To_incr_dom=
      caml_string_of_jsbytes("Bonsai_web__To_incr_dom"),
     cst_bonsai_web$5=caml_string_of_jsbytes("bonsai_web"),
     cst_web_to_incr_dom_ml=caml_string_of_jsbytes("web/to_incr_dom.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_bonsai_web$6=caml_string_of_jsbytes("bonsai_web"),
     cst_bonsai_web$7=caml_string_of_jsbytes("bonsai_web"),
     cst_Bonsai_web_To_incr_dom$0=
      caml_string_of_jsbytes("Bonsai_web__To_incr_dom"),
     cst_before$0=caml_string_of_jsbytes("before"),
     cst_before=caml_string_of_jsbytes("before"),
     cst_after=caml_string_of_jsbytes("after"),
     cst$5=caml_string_of_jsbytes("/"),
     cst$6=caml_string_of_jsbytes(":"),
     cst_https=caml_string_of_jsbytes("https://"),
     cst$7=caml_string_of_jsbytes(""),
     entry_types=[0,caml_string_of_jsbytes("measure"),0],
     cst_importScripts=caml_string_of_jsbytes("importScripts('"),
     cst$4=caml_string_of_jsbytes(""),
     cst_Bonsai_web_Forward_perform=
      caml_string_of_jsbytes("Bonsai_web__Forward_performance_entries"),
     cst_bonsai_web$8=caml_string_of_jsbytes("bonsai_web"),
     cst_web_forward_performance_en=
      caml_string_of_jsbytes("web/forward_performance_entries.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_bonsai_web$9=caml_string_of_jsbytes("bonsai_web"),
     cst_bonsai_web$10=caml_string_of_jsbytes("bonsai_web"),
     cst_Bonsai_web_Forward_perform$0=
      caml_string_of_jsbytes("Bonsai_web__Forward_performance_entries"),
     cst$9=caml_string_of_jsbytes(""),
     cst_Not_starting_debugger_Be_a=
      caml_string_of_jsbytes
       ('Not starting debugger. Be aware that running the debugger will send performance data to the debugger server, which may be unacceptable if the data you work with is sensitive. Consider running a local server and calling this function again with the local host and port. If you wish to proceed, run this function again, passing "true" as the first parameter'),
     cst_Already_debugging=caml_string_of_jsbytes("Already debugging."),
     cst_Starting_the_debugger=
      caml_string_of_jsbytes("Starting the debugger."),
     cst_debugger_host_and_port_not=
      caml_string_of_jsbytes("debugger host and port not be specified"),
     cst_Bonsai_web_Start=caml_string_of_jsbytes("Bonsai_web__Start"),
     cst_bonsai_web$11=caml_string_of_jsbytes("bonsai_web"),
     cst_web_start_ml=caml_string_of_jsbytes("web/start.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_bonsai_web$12=caml_string_of_jsbytes("bonsai_web"),
     cst_bonsai_web$13=caml_string_of_jsbytes("bonsai_web"),
     cst_Bonsai_web_Start$0=caml_string_of_jsbytes("Bonsai_web__Start"),
     cst_Bonsai_web_Effect=caml_string_of_jsbytes("Bonsai_web__Effect"),
     cst_bonsai_web$14=caml_string_of_jsbytes("bonsai_web"),
     cst_web_effect_ml=caml_string_of_jsbytes("web/effect.ml"),
     cst$10=caml_string_of_jsbytes(""),
     cst_bonsai_web$15=caml_string_of_jsbytes("bonsai_web"),
     cst_bonsai_web$16=caml_string_of_jsbytes("bonsai_web"),
     cst_Bonsai_web_Effect$0=caml_string_of_jsbytes("Bonsai_web__Effect"),
     cst_WARNING_Could_not_deserial=
      caml_string_of_jsbytes("WARNING: Could not deserialize persistent-var"),
     cst_WARNING_Could_not_find_a_s=
      caml_string_of_jsbytes
       ("WARNING: Could not find a sexp for persistent_var"),
     cst_Bonsai_web_Persistent_var=
      caml_string_of_jsbytes("Bonsai_web__Persistent_var"),
     cst_bonsai_web$17=caml_string_of_jsbytes("bonsai_web"),
     cst_web_persistent_var_ml=caml_string_of_jsbytes("web/persistent_var.ml"),
     cst$11=caml_string_of_jsbytes(""),
     cst_bonsai_web$18=caml_string_of_jsbytes("bonsai_web"),
     cst_bonsai_web$19=caml_string_of_jsbytes("bonsai_web"),
     cst_Bonsai_web_Persistent_var$0=
      caml_string_of_jsbytes("Bonsai_web__Persistent_var"),
     cst_FIELDSET=caml_string_of_jsbytes("FIELDSET"),
     cst_Bonsai_web=caml_string_of_jsbytes("Bonsai_web"),
     cst_bonsai_web$20=caml_string_of_jsbytes("bonsai_web"),
     cst_web_bonsai_web_ml=caml_string_of_jsbytes("web/bonsai_web.ml"),
     cst$12=caml_string_of_jsbytes(""),
     cst_bonsai_web$21=caml_string_of_jsbytes("bonsai_web"),
     cst_BENCHMARKS_RUNNER=caml_string_of_jsbytes("BENCHMARKS_RUNNER"),
     cst_TRUE=caml_string_of_jsbytes("TRUE"),
     cst_cannot_run_tests_in_a_brow=
      caml_string_of_jsbytes("cannot run tests in a browser"),
     cst_bonsai_web$22=caml_string_of_jsbytes("bonsai_web"),
     cst_Bonsai_web$0=caml_string_of_jsbytes("Bonsai_web"),
     include=global_data.Virtual_dom__Effect,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Bonsai=global_data.Bonsai,
     Core=global_data.Core,
     Core_Type_equal=global_data.Core__Type_equal,
     Bonsai_Value=global_data.Bonsai__Value,
     Bonsai_Lifecycle=global_data.Bonsai__Lifecycle,
     Incr_dom_Component=global_data.Incr_dom__Component,
     Bonsai_Environment=global_data.Bonsai__Environment,
     Ui_incr=global_data.Ui_incr,
     Bonsai_Path=global_data.Bonsai__Path,
     Bonsai_Snapshot=global_data.Bonsai__Snapshot,
     Bonsai_Apply_action=global_data.Bonsai__Apply_action,
     Js_of_ocaml_Firebug=global_data.Js_of_ocaml__Firebug,
     Core_Or_error=global_data.Core__Or_error,
     Core_Error=global_data.Core__Error,
     Async_kernel_Ivar=global_data.Async_kernel__Ivar,
     Javascript_profiling=global_data.Javascript_profiling,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     Bonsai_protocol=global_data.Bonsai_protocol,
     Core_Int=global_data.Core__Int,
     Stdlib_String=global_data.Stdlib__String,
     Bonsai_Graph_info=global_data.Bonsai__Graph_info,
     Bonsai_Instrumentation=global_data.Bonsai__Instrumentation,
     Core_Time_ns=global_data.Core__Time_ns,
     Async_kernel=global_data.Async_kernel,
     Core_Array=global_data.Core__Array,
     Core_List=global_data.Core__List,
     Core_Core_bin_prot=global_data.Core__Core_bin_prot,
     Js_of_ocaml_Dom=global_data.Js_of_ocaml__Dom,
     Js_of_ocaml_File=global_data.Js_of_ocaml__File,
     Js_of_ocaml_Worker=global_data.Js_of_ocaml__Worker,
     Stdlib_List=global_data.Stdlib__List,
     Stdlib_Array=global_data.Stdlib__Array,
     Core_Fn=global_data.Core__Fn,
     Core_Nothing=global_data.Core__Nothing,
     Core_Option=global_data.Core__Option,
     Bus=global_data.Bus,
     Async_kernel_Pipe=global_data.Async_kernel__Pipe,
     Ui_effect=global_data.Ui_effect,
     Incr_dom_Start_app=global_data.Incr_dom__Start_app,
     Base_Option=global_data.Base__Option;
    global_data.Base__Field;
    var
     Moption=global_data.Moption,
     Core_Queue=global_data.Core__Queue,
     Async_kernel_Deferred=global_data.Async_kernel__Deferred,
     Core_Sexp=global_data.Core__Sexp,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Core_String=global_data.Core__String,
     Core_Core_sys=global_data.Core__Core_sys,
     Bonsai_web=[0];
    caml_register_global(128,Bonsai_web,"Bonsai_web__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_web_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_web);
    caml_call1(Expect_test_collector[5][1],cst_web_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_web$0,cst);
    var
     _a_=[0,caml_string_of_jsbytes("Dynamic")],
     _b_=[0,caml_string_of_jsbytes("Static")],
     _c_=[0,caml_string_of_jsbytes("')"),0],
     _d_=[0,caml_string_of_jsbytes("application/javascript")],
     _g_=[0,caml_string_of_jsbytes("Dynamic")],
     _h_=[0,caml_string_of_jsbytes("Static")],
     _e_=[0,caml_string_of_jsbytes("web/start.ml"),37,865,875],
     _f_=[0,caml_string_of_jsbytes("web/start.ml"),43,1103,1128],
     _i_=[0,caml_string_of_jsbytes("e")],
     _j_=[0,caml_string_of_jsbytes("unique_id")],
     _k_=[0,caml_string_of_jsbytes("unique_id")];
    function sequence(e){return [0,include[2],e]}
    var no_op=include[1],Event=[0,sequence,no_op];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_web$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_web_Import$0);
    var Bonsai_web_Import=[0,Event];
    caml_register_global(134,Bonsai_web_Import,"Bonsai_web__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_web_To_incr_dom_int);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_web$2);
    caml_call1(Expect_test_collector[5][1],cst_web_to_incr_dom_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_web$3,cst$0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_web$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_web_To_incr_dom_int$0);
    var Bonsai_web_To_incr_dom_intf=[0];
    caml_register_global
     (135,Bonsai_web_To_incr_dom_intf,"Bonsai_web__To_incr_dom_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_web_To_incr_dom);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_web$5);
    caml_call1(Expect_test_collector[5][1],cst_web_to_incr_dom_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_web$6,cst$1);
    function create(param){return [0,Bonsai_Lifecycle[1][2]]}
    var State=[0,create];
    function convert_with_extra(component)
     {var
       fresh=caml_call2(Core_Type_equal[8][3],cst$2,Core[150]),
       _aV_=caml_call1(Bonsai_Value[22],fresh),
       var$0=caml_call1(Bonsai[28][2],_aV_),
       _aW_=caml_call1(component,var$0),
       component$0=caml_call1(Bonsai[28][3],_aW_),
       apply_static=component$0[5],
       model=component$0[4],
       static_action=component$0[3],
       dynamic_action=component$0[2],
       t=component$0[1],
       Input=[0],
       Model=[0,model[2],model[5],model[4],model[1]],
       of_dynamic_action_001=caml_call1(Core_Type_equal[8][6],dynamic_action),
       of_static_action_002=caml_call1(Core_Type_equal[8][6],static_action);
      function sexp_of_t(x_017)
       {if(0 === x_017[0])
         {var
           arg0_003=x_017[1],
           res0_004=caml_call1(of_dynamic_action_001,arg0_003);
          return [1,[0,_a_,[0,res0_004,0]]]}
        var
         arg0_005=x_017[1],
         res0_006=caml_call1(of_static_action_002,arg0_005);
        return [1,[0,_b_,[0,res0_006,0]]]}
      var Extra=[0];
      function create(input,param,model,inject)
       {function inject_dynamic(a){return caml_call1(inject,[0,a])}
        function inject_static(a){return caml_call1(inject,[1,a])}
        var
         environment=
          caml_call3(Bonsai_Environment[2],Bonsai_Environment[1],fresh,input),
         snapshot=
          caml_call7
           (Bonsai[28][6],
            environment,
            Bonsai_Path[25],
            Ui_incr[2],
            model,
            inject_dynamic,
            inject_static,
            t),
         let_syntax_009=caml_call1(Bonsai_Snapshot[2],snapshot),
         _aX_=caml_call1(Bonsai_Snapshot[1],snapshot),
         let_syntax_010=caml_call1(Bonsai_Apply_action[3],_aX_),
         let_syntax_011=caml_call1(Bonsai_Snapshot[4],snapshot);
        function _aY_(param)
         {var
           _a2_=param[2],
           _a3_=_a2_[2],
           model=_a3_[2],
           lifecycle=_a3_[1],
           dynamic_apply_action=_a2_[1],
           match=param[1],
           extra=match[2],
           view=match[1],
           schedule_event=include[22][2];
          function apply_action(action,state,param)
           {if(0 === action[0])
             {var action$0=action[1];
              return caml_call3
                      (dynamic_apply_action,schedule_event,model,action$0)}
            var action$1=action[1];
            return caml_call4
                    (apply_static,inject_static,schedule_event,model,action$1)}
          function on_display(state,param)
           {var diff=caml_call2(Bonsai_Lifecycle[1][3],state[1],lifecycle);
            state[1] = lifecycle;
            return caml_call1(include[22][2],diff)}
          return caml_call6
                  (Incr_dom_Component[7],
                   [0,apply_action],
                   0,
                   [0,on_display],
                   extra,
                   model,
                   view)}
        var
         _aZ_=caml_call2(Ui_incr[78][4][21],let_syntax_011,model),
         _a0_=caml_call2(Ui_incr[78][4][21],let_syntax_010,_aZ_),
         _a1_=caml_call2(Ui_incr[78][4][21],let_syntax_009,_a0_);
        return caml_call2(Ui_incr[78][4][6],_a1_,_aY_)}
      return [0,Input,Model,Extra,[0,sexp_of_t],State,create]}
    function convert(component)
     {function _aU_(r){return [0,r,0]}
      return convert_with_extra(caml_call2(Bonsai[29][5],component,_aU_))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_web$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_web_To_incr_dom$0);
    var Bonsai_web_To_incr_dom=[0,convert,convert_with_extra];
    caml_register_global(147,Bonsai_web_To_incr_dom,"Bonsai_web__To_incr_dom");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_web_Forward_perform);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_web$8);
    caml_call1(Expect_test_collector[5][1],cst_web_forward_performance_en);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_web$9,cst$3);
    var t4=Js_of_ocaml_Js[52][1].PerformanceObserver;
    function send_message(t,message){t[2] = [0,message,t[2]];return 0}
    function instrument(host,port,worker_name,component)
     {var
       _aH_=Bonsai_protocol[2][8],
       _aI_=
        [0,
         cst_https,
         [0,
          host,
          [0,
           cst$6,
           [0,caml_call1(Core_Int[82],port),[0,cst$5,[0,worker_name,0]]]]]],
       url=caml_call2(Stdlib_String[6],cst$7,_aI_),
       _aD_=
        caml_call2(Stdlib_String[6],cst$4,[0,cst_importScripts,[0,url,_c_]]),
       t8=caml_call3(Js_of_ocaml_File[1],_d_,0,_aD_),
       t9=Js_of_ocaml_Dom_html[8].URL,
       blob_url=t9.createObjectURL(t8),
       _aE_=caml_string_of_jsstring(blob_url),
       t12=caml_call1(Js_of_ocaml_Worker[1],_aE_),
       worker=[0,0,0,t12,_aH_];
      function _aF_(message)
       {worker[1] = 1;
        var
         url=caml_string_of_jsstring(message.data),
         t25=caml_call1(Js_of_ocaml_Js[5][2],"noopener"),
         t23=caml_jsstring_of_string(url);
        Js_of_ocaml_Dom_html[8].open(t23,"bonsai-bug",t25);
        return Js_of_ocaml_Js[8]}
      var t11=caml_call1(Js_of_ocaml_Dom[10],_aF_);
      t12.onmessage = t11;
      function f(new_entries,observer)
       {observer.takeRecords();
        function _aS_(entry)
         {var
           label=caml_string_of_jsstring(entry.name),
           match=caml_call1(Bonsai_Instrumentation[3],label);
          if(match)
           var node_id=match[1],label$0=[0,370492634,node_id];
          else
           var label$0=[0,-912009552,label];
          var
           entry_type=caml_string_of_jsbytes(entry.entryType),
           start_time=entry.startTime,
           duration=entry.duration,
           entry$0=[0,label$0,entry_type,start_time,duration];
          return send_message(worker,[1,entry$0])}
        var _aT_=caml_js_to_array(new_entries.getEntries());
        return caml_call2(Core_Array[22],_aT_,_aS_)}
      var
       _aC_=caml_call2(Stdlib_List[19],caml_jsstring_of_string,entry_types),
       t1=runtime.caml_js_from_array(caml_call1(Stdlib_Array[12],_aC_)),
       t5={};
      t5.entryTypes = t1;
      var t3=runtime.caml_js_wrap_callback(f),t28=new t4(t3);
      t28.observe(t5);
      var graph_info_dirty=[0,0],graph_info=[0,Bonsai_Graph_info[12]];
      function _aJ_(gi){graph_info[1] = gi;graph_info_dirty[1] = 1;return 0}
      var component$0=caml_call2(Bonsai_Graph_info[13],component,_aJ_);
      function _aK_(s)
       {var
         before=caml_call2(Core[18],s,cst_before),
         after=caml_call2(Core[18],s,cst_after);
        caml_call1(Javascript_profiling[4][1],after);
        return caml_call3(Javascript_profiling[4][2],s,before,after)}
      function _aL_(s)
       {var _aR_=caml_call2(Core[18],s,cst_before$0);
        return caml_call1(Javascript_profiling[4][1],_aR_)}
      var
       instrumented_computation=
        caml_call3(Bonsai_Instrumentation[1],component$0,_aL_,_aK_),
       stop_ivar=caml_call1(Async_kernel_Ivar[12],0),
       stop=caml_call1(Async_kernel_Ivar[18],stop_ivar);
      function _aM_(param)
       {if(graph_info_dirty[1])
         {graph_info_dirty[1] = 0;send_message(worker,[0,graph_info[1]])}
        if(worker[1])
         {var
           _aP_=worker[2],
           _aQ_=caml_call1(Core_List[151],worker[4]),
           t15=
            runtime.caml_jsbytes_of_string
             (caml_call2(Core_Core_bin_prot[1][1],_aQ_,_aP_));
          worker[3].postMessage(t15);
          worker[2] = 0}
        caml_call1(Javascript_profiling[2],0);
        return caml_call1(Javascript_profiling[3],0)}
      var _aN_=caml_call1(Core_Time_ns[1][81],0.5);
      caml_call5(Async_kernel[7],0,[0,stop],0,_aN_,_aM_);
      function shutdown(param)
       {caml_call2(Async_kernel_Ivar[15],stop_ivar,0);
        t28.disconnect();
        caml_call1(Javascript_profiling[2],0);
        caml_call1(Javascript_profiling[3],0);
        worker[2] = 0;
        return worker[3].terminate()}
      function shutdown$0(param)
       {var match=caml_call2(Core_Or_error[33],0,shutdown);
        if(0 === match[0])return 0;
        var e=match[1],_aO_=caml_call1(Core_Error[6],e);
        return caml_call2(Core[249],0,_aO_)}
      function _aG_(message)
       {Js_of_ocaml_Firebug[1].warn(message);
        shutdown$0(0);
        return Js_of_ocaml_Js[8]}
      var t13=caml_call1(Js_of_ocaml_Dom[10],_aG_);
      worker[3].onerror = t13;
      return [0,instrumented_computation,shutdown$0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_web$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_web_Forward_perform$0);
    var Bonsai_web_Forward_performance=[0,instrument];
    caml_register_global
     (170,
      Bonsai_web_Forward_performance,
      "Bonsai_web__Forward_performance_entries");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_web_Start);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_web$11);
    caml_call1(Expect_test_collector[5][1],cst_web_start_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_web$12,cst$8);
    function stop(t){return caml_call2(Async_kernel_Ivar[15],t[2],0)}
    function started(t){return caml_call1(Async_kernel_Ivar[18],t[3])}
    function schedule(t,a)
     {var _aA_=t[1];
      if(0 === _aA_[0])
       {var queue=_aA_[1];return caml_call2(Core_Queue[41],queue,a)}
      var f=_aA_[1],_aB_=caml_call1(f,a);
      return caml_call1(include[22][2],_aB_)}
    function input(t){return caml_call1(Ui_incr[53][5],t[4])}
    function set_input(t,input){return caml_call2(Ui_incr[53][3],t[4],input)}
    function update_input(t,f){return set_input(t,caml_call1(f,input(t)))}
    function outgoing(param){var outgoing_pipe=param[5];return outgoing_pipe}
    function extra(t){return caml_call1(Bus[6],t[6])}
    function last_extra(t){return caml_call1(Moption[7],t[7])}
    function inject_outgoing(r){return r[2]}
    function input$0(r){return r[1]}
    function create$0(input,inject_outgoing){return [0,input,inject_outgoing]}
    function create$1(view,extra,inject_incoming)
     {return [0,view,extra,inject_incoming]}
    function start_generic
     (get_app_result,initial_input,bind_to_element_with_id,component)
     {var
       fresh=caml_call2(Core_Type_equal[8][3],cst$9,Core[150]),
       _Q_=caml_call1(Bonsai_Value[22],fresh),
       var$0=caml_call1(Bonsai[28][2],_Q_),
       _R_=caml_call1(component,var$0),
       computation=caml_call1(Bonsai[28][3],_R_),
       apply_static=computation[5],
       model=computation[4],
       static_action=computation[3],
       dynamic_action=computation[2],
       t=computation[1],
       _S_=model[1];
      return function(get_app_input)
       {var
         match=caml_call3(Async_kernel_Pipe[7],0,0,0),
         pipe_write=match[2],
         outgoing_pipe=match[1],
         Action=[0],
         handle$0=caml_call1(Async_kernel_Pipe[32],pipe_write),
         Out_event=caml_call1(Ui_effect[18],[0,Action,handle$0]),
         input_var=caml_call2(Ui_incr[53][2],0,initial_input);
        function _T_(error)
         {var _az_=caml_call1(Core_Error[6],error);
          return caml_call2(Core[249],0,_az_)}
        var
         extra=caml_call5(Bus[7],0,_e_,0,1,_T_),
         last_extra=caml_call1(Moption[4],0);
        function _U_(extra){return caml_call2(Moption[12],last_extra,extra)}
        caml_call4(Bus[19],0,extra,_f_,_U_);
        var
         _V_=caml_call1(Async_kernel_Ivar[12],0),
         _W_=caml_call1(Async_kernel_Ivar[12],0),
         handle=
          [0,
           [0,caml_call2(Core_Queue[61],0,0)],
           _W_,
           _V_,
           input_var,
           outgoing_pipe,
           extra,
           last_extra];
        function _X_(input)
         {return caml_call2(get_app_input,input,Out_event[1])}
        var
         _Y_=caml_call1(Ui_incr[53][4],input_var),
         input=caml_call2(Ui_incr[78][4][6],_Y_,_X_),
         prev_lifecycle=[0,Bonsai_Lifecycle[1][2]],
         is_debugging_var=caml_call2(Ui_incr[53][2],0,0),
         debugger_shutdown=[0,0],
         cutoff=Core[246],
         Model=[0,cutoff],
         State=[0],
         sexp_of_dynamic_action=
          caml_call1(Core_Type_equal[8][6],dynamic_action),
         sexp_of_static_action=caml_call1(Core_Type_equal[8][6],static_action);
        function sexp_of_t(param)
         {if(0 === param[0])
           {var
             arg0_006=param[1],
             res0_007=caml_call1(sexp_of_dynamic_action,arg0_006);
            return [1,[0,_g_,[0,res0_007,0]]]}
          var
           arg0_008=param[1],
           res0_009=caml_call1(sexp_of_static_action,arg0_008);
          return [1,[0,_h_,[0,res0_009,0]]]}
        function action_requires_stabilization(param)
         {return 0 === param[0]?1:0}
        function on_startup(param,_ay_){return caml_call1(Async_kernel[19],0)}
        function _Z_(model,param,inject,computation)
         {var
           environment=
            caml_call3
             (Bonsai_Environment[2],Bonsai_Environment[1],fresh,input);
          function inject_dynamic(a){return caml_call1(inject,[0,a])}
          function inject_static(a){return caml_call1(inject,[1,a])}
          var
           snapshot=
            caml_call7
             (Bonsai[28][6],
              environment,
              Bonsai_Path[25],
              Ui_incr[2],
              model,
              inject_dynamic,
              inject_static,
              computation);
          function _al_(param)
           {var
             inject_incoming=param[3],
             extra=param[2],
             view=param[1],
             prev=handle[1];
            handle[1] = [1,inject_incoming];
            if(0 === prev[0])
             {var
               queue=prev[1],
               _aw_=function(_ax_){return schedule(handle,_ax_)};
              caml_call2(Core_Queue[16],queue,_aw_)}
            caml_call2(Bus[12],handle[6],extra);
            return view}
          var
           _am_=caml_call1(Bonsai_Snapshot[2],snapshot),
           _an_=caml_call2(Ui_incr[78][2],_am_,get_app_result),
           let_syntax_010=caml_call2(Ui_incr[78][4][6],_an_,_al_);
          function _ao_
           (dynamic_apply_action,param,schedule_event,model,action)
           {if(0 === action[0])
             {var action$0=action[1];
              return caml_call3
                      (dynamic_apply_action,schedule_event,model,action$0)}
            var action$1=action[1];
            return caml_call4
                    (apply_static,inject_static,schedule_event,model,action$1)}
          var
           _ap_=caml_call1(Bonsai_Snapshot[1],snapshot),
           _aq_=caml_call1(Bonsai_Apply_action[3],_ap_),
           let_syntax_011=caml_call2(Ui_incr[78][4][6],_aq_,_ao_);
          function _ar_(lifecycle,param,schedule_event)
           {caml_call2(Async_kernel_Ivar[15],handle[3],0);
            caml_call1
             (schedule_event,
              caml_call2(Bonsai_Lifecycle[1][3],prev_lifecycle[1],lifecycle));
            prev_lifecycle[1] = lifecycle;
            return 0}
          var
           _as_=caml_call1(Bonsai_Snapshot[4],snapshot),
           let_syntax_012=caml_call2(Ui_incr[78][4][6],_as_,_ar_);
          function _at_(param)
           {var
             match=param[2],
             on_display=match[2],
             apply_action=match[1],
             view=param[1];
            function update_visibility(model,param){return model}
            return [0,view,apply_action,update_visibility,on_display]}
          var
           _au_=caml_call2(Ui_incr[78][4][21],let_syntax_011,let_syntax_012),
           _av_=caml_call2(Ui_incr[78][4][21],let_syntax_010,_au_);
          return caml_call2(Ui_incr[78][4][6],_av_,_at_)}
        function create(model,old_model,inject)
         {function _ag_(param)
           {if(! param)return _Z_(model,old_model,inject,t);
            var worker_name$0=param[3],port$0=param[2],host$0=param[1];
            function _ai_(param)
             {var
               match=param[2],
               worker_name=match[2],
               port=match[1],
               host=param[1];
              return [0,host,port,worker_name]}
            var
             _aj_=caml_call2(Base_Option[26][4][4],port$0,worker_name$0),
             _ak_=caml_call2(Base_Option[26][4][4],host$0,_aj_),
             match=caml_call2(Base_Option[26][4][3],_ak_,_ai_);
            if(match)
             var
              match$0=match[1],
              worker_name=match$0[3],
              port=match$0[2],
              host=match$0[1],
              match$1=instrument(host,port,worker_name,t);
            else
             {caml_call1(Core[32],cst_debugger_host_and_port_not);
              var match$1=[0,t,function(param){return 0}]}
            var shutdown=match$1[2],instrumented_computation=match$1[1];
            debugger_shutdown[1] = [0,shutdown];
            return _Z_(model,old_model,inject,instrumented_computation)}
          var _ah_=caml_call1(Ui_incr[53][4],is_debugging_var);
          return caml_call2(Ui_incr[78][4][1],_ah_,_ag_)}
        var ___=[0,caml_call1(Async_kernel_Ivar[18],handle[2])];
        caml_call6
         (Incr_dom_Start_app[2][1],
          0,
          ___,
          0,
          bind_to_element_with_id,
          _S_,
          [0,
           Model,
           [0,sexp_of_t],
           State,
           action_requires_stabilization,
           on_startup,
           create]);
        function start_bonsai_debugger(dry_run,host,port,worker_name)
         {function print_message(param)
           {return caml_call1(Core[32],cst_Not_starting_debugger_Be_a)}
          function _aa_(dry_run)
           {if(! (dry_run | 0))return print_message(0);
            var match=caml_call1(Ui_incr[53][5],is_debugging_var);
            if(match)
             caml_call1(Core[32],cst_Already_debugging);
            else
             {caml_call1(Core[32],cst_Starting_the_debugger);
              var
               _ab_=caml_call1(Js_of_ocaml_Js[6][10],worker_name),
               _ac_=caml_call2(Core_Option[29],_ab_,caml_string_of_jsstring),
               _ad_=caml_call1(Js_of_ocaml_Js[6][10],port),
               _ae_=caml_call1(Js_of_ocaml_Js[6][10],host),
               _af_=
                [0,
                 caml_call2(Core_Option[29],_ae_,caml_string_of_jsstring),
                 _ad_,
                 _ac_];
              caml_call2(Ui_incr[53][3],is_debugging_var,_af_)}
            return caml_call1(Ui_incr[58],0)}
          return caml_call3(Js_of_ocaml_Js[6][7],dry_run,print_message,_aa_)}
        function stop_bonsai_debugger(param)
         {function _$_(f){return caml_call1(f,0)}
          caml_call2(Core_Option[41],debugger_shutdown[1],_$_);
          debugger_shutdown[1] = 0;
          caml_call2(Ui_incr[53][3],is_debugging_var,0);
          return caml_call1(Ui_incr[58],0)}
        var t0=caml_js_wrap_callback_unsafe(start_bonsai_debugger);
        Js_of_ocaml_Js[52][1].startBonsaiDebugger = t0;
        var t2=caml_js_wrap_callback_unsafe(stop_bonsai_debugger);
        Js_of_ocaml_Js[52][1].stopBonsaiDebugger = t2;
        return handle}}
    function start_standalone(initial_input,bind_to_element_with_id,component)
     {function _P_(input,param){return input}
      return caml_call1
              (start_generic
                (function(view){return [0,view,0,Core_Nothing[3]]},
                 initial_input,
                 bind_to_element_with_id,
                 component),
               _P_)}
    function start(initial_input,bind_to_element_with_id,component)
     {return caml_call1
              (start_generic
                (function(_O_){return _O_},
                 initial_input,
                 bind_to_element_with_id,
                 component),
               create$0)}
    function extra$0(param){return 0}
    var No_extra=[0,extra$0];
    function incoming(param){return Core_Nothing[3]}
    var No_incoming=[0,incoming];
    function view(_N_){return _N_}
    var
     extra$1=No_extra[1],
     incoming$0=No_incoming[1],
     just_the_view=[0,view,extra$1,incoming$0],
     Result_spec=[0,No_extra,No_incoming,just_the_view];
    function start$0(result_spec,bind_to_element_with_id,computation)
     {function _J_(r)
       {var _L_=caml_call1(result_spec[3],r),_M_=caml_call1(result_spec[2],r);
        return [0,caml_call1(result_spec[1],r),_M_,_L_]}
      var
       _K_=caml_call1(Core_Fn[1],computation),
       bonsai=caml_call2(Bonsai[29][5],_K_,_J_);
      return start(0,bind_to_element_with_id,bonsai)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_web$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_web_Start$0);
    var
     Bonsai_web_Start=
      [0,
       [0,
        [0,
         stop,
         started,
         schedule,
         outgoing,
         input,
         set_input,
         update_input,
         extra,
         last_extra],
        [0,input$0,inject_outgoing],
        [0,create$1],
        start_standalone,
        start],
       [0,[0,stop,started,schedule,extra,last_extra],Result_spec,start$0]];
    caml_register_global(182,Bonsai_web_Start,"Bonsai_web__Start");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_web_Effect);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_web$14);
    caml_call1(Expect_test_collector[5][1],cst_web_effect_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_web$15,cst$10);
    var
     Ignore=include[1],
     Many=include[2],
     symbol_bind=include[3],
     symbol_map=include[4],
     bind=include[5],
     return$0=include[6],
     map=include[7],
     join=include[8],
     ignore_m=include[9],
     all=include[10],
     all_unit=include[11],
     never=include[12],
     lazy=include[13],
     print_s=include[14],
     of_sync_fun=include[15],
     Viewport_changed=include[16],
     Stop_propagation=include[17],
     Stop_immediate_propagation=include[18],
     Prevent_default=include[19],
     sequence_as_sibling=include[20],
     Define_visibility=include[21],
     Expert=include[22],
     Action=[0];
    function handle(param,on_response)
     {var f=param[2],a=param[1];
      function _G_(result){return caml_call1(on_response,result)}
      var
       _H_=caml_call1(f,a),
       _I_=caml_call2(Async_kernel_Deferred[16][4][3],_H_,_G_);
      return caml_call1(Async_kernel[6],_I_)}
    var
     Deferred_fun_arg=[0,Action,handle],
     Deferred_fun=caml_call1(Ui_effect[19],Deferred_fun_arg);
    function of_deferred_fun(f,a){return caml_call1(Deferred_fun[1],[0,a,f])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_web$16);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_web_Effect$0);
    var
     Bonsai_web_Effect=
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       never,
       lazy,
       print_s,
       of_sync_fun,
       Viewport_changed,
       Stop_propagation,
       Stop_immediate_propagation,
       Prevent_default,
       sequence_as_sibling,
       Define_visibility,
       Expert,
       of_deferred_fun];
    caml_register_global(184,Bonsai_web_Effect,"Bonsai_web__Effect");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_web_Persistent_var);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_web$17);
    caml_call1(Expect_test_collector[5][1],cst_web_persistent_var_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_web$18,cst$11);
    function create$2(M)
     {return function(kind,unique_id,default$0)
       {function _u_(t8)
         {function set(key,value)
           {var
             t3=caml_jsstring_of_string(value),
             t2=caml_jsstring_of_string(key);
            return t8.setItem(t2,t3)}
          function get(key)
           {var
             t5=caml_jsstring_of_string(key),
             _E_=t8.getItem(t5),
             _F_=caml_call1(Js_of_ocaml_Js[5][10],_E_);
            return caml_call2(Core_Option[29],_F_,caml_string_of_jsstring)}
          function delete$0(key)
           {var t7=caml_jsstring_of_string(key);return t8.removeItem(t7)}
          return [0,get,set,delete$0]}
        var
         _v_=
          -442878713 <= kind
           ?caml_call1
             (Js_of_ocaml_Js[6][10],Js_of_ocaml_Dom_html[8].localStorage)
           :caml_call1
             (Js_of_ocaml_Js[6][10],Js_of_ocaml_Dom_html[8].sessionStorage),
         match=caml_call2(Base_Option[26][4][3],_v_,_u_);
        if(match)
         var
          match$0=match[1],
          delete$0=match$0[3],
          setter=match$0[2],
          getter=match$0[1],
          deleter=delete$0,
          setter$0=setter,
          getter$0=getter;
        else
         var
          deleter$0=function(key){return 0},
          setter$2=function(key,value){return 0},
          getter$1=function(key){return 0},
          deleter=deleter$0,
          setter$0=setter$2,
          getter$0=getter$1;
        var match$1=caml_call1(getter$0,unique_id);
        if(match$1)
         {var
           sexp=match$1[1],
           _w_=
            function(param)
             {var _D_=caml_call1(Core_Sexp[73],sexp);
              return caml_call1(M[1],_D_)},
           match$2=caml_call2(Core_Or_error[33],0,_w_);
          if(0 === match$2[0])
           var a=match$2[1],a$0=a;
          else
           {var
             e=match$2[1],
             _x_=[0,[1,[0,_i_,[0,caml_call1(Core_Error[6],e),0]]],0],
             _y_=[0,[1,[0,_j_,[0,caml_call1(Core[471],unique_id),0]]],_x_],
             _z_=
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7],cst_WARNING_Could_not_deserial),
                _y_]];
            caml_call2(Core[249],0,_z_);
            var a$0=default$0}
          var value=a$0}
        else
         {var
           _A_=[0,[1,[0,_k_,[0,caml_call1(Core[471],unique_id),0]]],0],
           _B_=
            [1,
             [0,
              caml_call1(Sexplib0_Sexp_conv[7],cst_WARNING_Could_not_find_a_s),
              _A_]];
          caml_call2(Core[249],0,_B_);
          var value=default$0}
        var var$0=caml_call1(Bonsai[3][1],value);
        function setter$1(t)
         {var _C_=caml_call1(M[2],t);
          return caml_call2(setter$0,unique_id,caml_call1(Core_Sexp[82],_C_))}
        function clear(param){return caml_call1(deleter,unique_id)}
        var
         effect=
          caml_call1
           (of_sync_fun,
            function(a){setter$1(a);return caml_call2(Bonsai[3][3],var$0,a)});
        return [0,var$0,setter$1,clear,effect]}}
    function set(param,a)
     {var setter=param[2],var$0=param[1];
      caml_call1(setter,a);
      return caml_call2(Bonsai[3][3],var$0,a)}
    function value(param)
     {var var$0=param[1];return caml_call1(Bonsai[3][5],var$0)}
    function update(param,f)
     {var setter=param[2],var$0=param[1];
      function _t_(old)
       {var new$0=caml_call1(f,old);caml_call1(setter,new$0);return new$0}
      return caml_call2(Bonsai[3][2],var$0,_t_)}
    function get(param)
     {var var$0=param[1];return caml_call1(Bonsai[3][4],var$0)}
    function clear_persistence(param)
     {var clear=param[3];return caml_call1(clear,0)}
    function effect(param){var effect=param[4];return effect}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_web$19);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_web_Persistent_var$0);
    var
     Bonsai_web_Persistent_var=
      [0,create$2,update,set,get,value,clear_persistence,effect];
    caml_register_global
     (187,Bonsai_web_Persistent_var,"Bonsai_web__Persistent_var");
    var Bonsai_web_Import_stable=[0];
    caml_register_global
     (188,Bonsai_web_Import_stable,"Bonsai_web__Import_stable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_web);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai_web$20);
    caml_call1(Expect_test_collector[5][1],cst_web_bonsai_web_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai_web$21,cst$12);
    var
     Arrow_deprecated=[0],
     is_in_browser=caml_call1(Js_of_ocaml_Js[6][5],Js_of_ocaml_Dom_html[2]),
     match=caml_call1(Core_Core_sys[19],cst_BENCHMARKS_RUNNER),
     switch$0=0;
    if(match && ! runtime.caml_string_notequal(match[1],cst_TRUE))
     {var is_benchmark=1;switch$0 = 1}
    if(! switch$0)var is_benchmark=0;
    var _l_=Core[541];
    if(is_in_browser)
     if(is_benchmark)
      var _m_=25748998;
     else
      if(_l_)
       var
        _n_=caml_call1(Sexplib0_Sexp_conv[7],cst_cannot_run_tests_in_a_brow),
        _m_=caml_call1(Core[253],_n_);
      else
       var _m_=95560584;
    else
     var _m_=is_benchmark?-531563232:_l_?853947087:870528546;
    function am_within_disabled_fieldset(event)
     {if(25748998 <= _m_ && 853947087 > _m_)
       {var
         _o_=
          function(element)
           {var
             tag_name=caml_call1(Js_of_ocaml_Js[6][10],element.tagName),
             disabled=caml_call1(Js_of_ocaml_Js[6][10],element.disabled),
             match=caml_call2(Core_Option[18],tag_name,disabled);
            if(! match)return 0;
            var
             match$0=match[1],
             disabled$0=match$0[2],
             tag_name$0=match$0[1],
             _q_=caml_string_of_jsstring(tag_name$0),
             _r_=caml_call2(Core_String[126],_q_,cst_FIELDSET),
             _s_=_r_?disabled$0 | 0:_r_;
            return _s_},
         _p_=caml_js_to_array(event.composedPath());
        return caml_call2(Core_Array[26],_p_,_o_)}
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai_web$22);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_web$0);
    var Bonsai_web$0=[0,Arrow_deprecated,_m_,am_within_disabled_fieldset];
    caml_register_global(191,Bonsai_web$0,"Bonsai_web");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
