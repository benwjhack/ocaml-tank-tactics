// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_fillcolor=caml_string_of_jsbytes("fillcolor"),
     cst_apply_action$1=caml_string_of_jsbytes("apply-action"),
     cst_value$1=caml_string_of_jsbytes("value"),
     cst_result$1=caml_string_of_jsbytes("result"),
     cst_lifecycle$1=caml_string_of_jsbytes("lifecycle"),
     cst_empty_lifecycle$1=caml_string_of_jsbytes("empty lifecycle"),
     cst_model$1=caml_string_of_jsbytes("model"),
     cst_model_input=caml_string_of_jsbytes("model & input"),
     cst_assoc_key$1=caml_string_of_jsbytes("assoc key"),
     cst_assoc_input$1=caml_string_of_jsbytes("assoc input"),
     cst_assoc_result_map=caml_string_of_jsbytes("assoc result map"),
     cst_assoc_lifecycle_map=caml_string_of_jsbytes("assoc lifecycle map"),
     cst_assoc_apply_action_map=
      caml_string_of_jsbytes("assoc apply-action map"),
     cst_path$1=caml_string_of_jsbytes("path"),
     cst_impossible_apply_action$1=
      caml_string_of_jsbytes("impossible apply-action"),
     cst_lifecycle_apply_action_pai$1=
      caml_string_of_jsbytes("lifecycle/apply-action pair"),
     cst_apply_action=caml_string_of_jsbytes("apply_action"),
     cst_Impossible_apply_action=
      caml_string_of_jsbytes("Impossible_apply_action"),
     cst_Apply_action=caml_string_of_jsbytes("Apply_action"),
     cst_Assoc_apply_actions=caml_string_of_jsbytes("Assoc_apply_actions"),
     cst_Assoc_input=caml_string_of_jsbytes("Assoc_input"),
     cst_Assoc_key=caml_string_of_jsbytes("Assoc_key"),
     cst_Assoc_lifecycles=caml_string_of_jsbytes("Assoc_lifecycles"),
     cst_Assoc_results=caml_string_of_jsbytes("Assoc_results"),
     cst_Empty_lifecycle=caml_string_of_jsbytes("Empty_lifecycle"),
     cst_Lifecycle=caml_string_of_jsbytes("Lifecycle"),
     cst_Lifecycle_apply_action_pai=
      caml_string_of_jsbytes("Lifecycle_apply_action_pair"),
     cst_Model=caml_string_of_jsbytes("Model"),
     cst_Model_and_input=caml_string_of_jsbytes("Model_and_input"),
     cst_Path=caml_string_of_jsbytes("Path"),
     cst_Result=caml_string_of_jsbytes("Result"),
     cst_Value=caml_string_of_jsbytes("Value"),
     cst_lifecycle=caml_string_of_jsbytes("lifecycle"),
     cst_assoc_apply_actions=caml_string_of_jsbytes("assoc_apply_actions"),
     cst_assoc_input=caml_string_of_jsbytes("assoc_input"),
     cst_assoc_key=caml_string_of_jsbytes("assoc_key"),
     cst_assoc_lifecycles=caml_string_of_jsbytes("assoc_lifecycles"),
     cst_assoc_results=caml_string_of_jsbytes("assoc_results"),
     cst_empty_lifecycle=caml_string_of_jsbytes("empty_lifecycle"),
     cst_impossible_apply_action=
      caml_string_of_jsbytes("impossible_apply_action"),
     cst_lifecycle_apply_action_pai=
      caml_string_of_jsbytes("lifecycle_apply_action_pair"),
     cst_model=caml_string_of_jsbytes("model"),
     cst_model_and_input=caml_string_of_jsbytes("model_and_input"),
     cst_path=caml_string_of_jsbytes("path"),
     cst_result=caml_string_of_jsbytes("result"),
     cst_value=caml_string_of_jsbytes("value"),
     cst_apply_action$0=caml_string_of_jsbytes("apply_action"),
     cst_Impossible_apply_action$0=
      caml_string_of_jsbytes("Impossible_apply_action"),
     cst_Apply_action$0=caml_string_of_jsbytes("Apply_action"),
     cst_Assoc_apply_actions$0=caml_string_of_jsbytes("Assoc_apply_actions"),
     cst_Assoc_input$0=caml_string_of_jsbytes("Assoc_input"),
     cst_Assoc_key$0=caml_string_of_jsbytes("Assoc_key"),
     cst_Assoc_lifecycles$0=caml_string_of_jsbytes("Assoc_lifecycles"),
     cst_Assoc_results$0=caml_string_of_jsbytes("Assoc_results"),
     cst_Empty_lifecycle$0=caml_string_of_jsbytes("Empty_lifecycle"),
     cst_Lifecycle$0=caml_string_of_jsbytes("Lifecycle"),
     cst_Lifecycle_apply_action_pai$0=
      caml_string_of_jsbytes("Lifecycle_apply_action_pair"),
     cst_Model$0=caml_string_of_jsbytes("Model"),
     cst_Model_and_input$0=caml_string_of_jsbytes("Model_and_input"),
     cst_Path$0=caml_string_of_jsbytes("Path"),
     cst_Result$0=caml_string_of_jsbytes("Result"),
     cst_Value$0=caml_string_of_jsbytes("Value"),
     cst_lifecycle$0=caml_string_of_jsbytes("lifecycle"),
     cst_assoc_apply_actions$0=caml_string_of_jsbytes("assoc_apply_actions"),
     cst_assoc_input$0=caml_string_of_jsbytes("assoc_input"),
     cst_assoc_key$0=caml_string_of_jsbytes("assoc_key"),
     cst_assoc_lifecycles$0=caml_string_of_jsbytes("assoc_lifecycles"),
     cst_assoc_results$0=caml_string_of_jsbytes("assoc_results"),
     cst_empty_lifecycle$0=caml_string_of_jsbytes("empty_lifecycle"),
     cst_impossible_apply_action$0=
      caml_string_of_jsbytes("impossible_apply_action"),
     cst_lifecycle_apply_action_pai$0=
      caml_string_of_jsbytes("lifecycle_apply_action_pair"),
     cst_model$0=caml_string_of_jsbytes("model"),
     cst_model_and_input$0=caml_string_of_jsbytes("model_and_input"),
     cst_path$0=caml_string_of_jsbytes("path"),
     cst_result$0=caml_string_of_jsbytes("result"),
     cst_value$0=caml_string_of_jsbytes("value"),
     cst_app=caml_string_of_jsbytes("app/"),
     cst_lib=caml_string_of_jsbytes("lib/"),
     cst_bound=caml_string_of_jsbytes("bound: "),
     cst_bound$0=caml_string_of_jsbytes("bound: "),
     cst_Bonsai_Annotate_incr=caml_string_of_jsbytes("Bonsai__Annotate_incr"),
     cst_bonsai=caml_string_of_jsbytes("bonsai"),
     cst_src_annotate_incr_ml=caml_string_of_jsbytes("src/annotate_incr.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_bonsai$0=caml_string_of_jsbytes("bonsai"),
     error_source_005=caml_string_of_jsbytes("src/annotate_incr.ml.Kind.T.t"),
     cst_bonsai$1=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Annotate_incr$0=
      caml_string_of_jsbytes("Bonsai__Annotate_incr"),
     cst_Bonsai_Module_types=caml_string_of_jsbytes("Bonsai__Module_types"),
     cst_bonsai$2=caml_string_of_jsbytes("bonsai"),
     cst_src_module_types_ml=caml_string_of_jsbytes("src/module_types.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_bonsai$3=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$4=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Module_types$0=caml_string_of_jsbytes("Bonsai__Module_types"),
     cst_Bonsai_Import=caml_string_of_jsbytes("Bonsai__Import"),
     cst_bonsai$5=caml_string_of_jsbytes("bonsai"),
     cst_src_import_ml=caml_string_of_jsbytes("src/import.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_bonsai$6=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$7=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Import$0=caml_string_of_jsbytes("Bonsai__Import"),
     cst_Bonsai_Environment=caml_string_of_jsbytes("Bonsai__Environment"),
     cst_bonsai$8=caml_string_of_jsbytes("bonsai"),
     cst_src_environment_ml=caml_string_of_jsbytes("src/environment.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_bonsai$9=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$10=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Environment$0=caml_string_of_jsbytes("Bonsai__Environment"),
     cst_constant=caml_string_of_jsbytes("constant"),
     cst_incr=caml_string_of_jsbytes("incr"),
     cst_named=caml_string_of_jsbytes("named"),
     cst_both=caml_string_of_jsbytes("both"),
     cst_cutoff=caml_string_of_jsbytes("cutoff"),
     cst_map=caml_string_of_jsbytes("map"),
     cst_map2=caml_string_of_jsbytes("map2"),
     cst_map3=caml_string_of_jsbytes("map3"),
     cst_map4=caml_string_of_jsbytes("map4"),
     cst_map5=caml_string_of_jsbytes("map5"),
     cst_map6=caml_string_of_jsbytes("map6"),
     cst_map7=caml_string_of_jsbytes("map7"),
     cst_A_Value_t_was_used_outside=
      caml_string_of_jsbytes
       ("A Value.t was used outside of the scope that it was declared in! Make sure that you aren't storing any Value.t inside a ref!"),
     cst_Bonsai_Value=caml_string_of_jsbytes("Bonsai__Value"),
     cst_bonsai$11=caml_string_of_jsbytes("bonsai"),
     cst_src_value_ml=caml_string_of_jsbytes("src/value.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_bonsai$12=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$13=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Value$0=caml_string_of_jsbytes("Bonsai__Value"),
     cst_Bonsai_Var_mutated_during_=
      caml_string_of_jsbytes
       ("Bonsai.Var mutated during the computation of a Bonsai value"),
     cst_Bonsai_Var=caml_string_of_jsbytes("Bonsai__Var"),
     cst_bonsai$14=caml_string_of_jsbytes("bonsai"),
     cst_src_var_ml=caml_string_of_jsbytes("src/var.ml"),
     cst$4=caml_string_of_jsbytes(""),
     cst_bonsai$15=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$16=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Var$0=caml_string_of_jsbytes("Bonsai__Var"),
     cst_Bonsai_Meta=caml_string_of_jsbytes("Bonsai__Meta"),
     cst_bonsai$17=caml_string_of_jsbytes("bonsai"),
     cst_src_meta_ml=caml_string_of_jsbytes("src/meta.ml"),
     cst$5=caml_string_of_jsbytes(""),
     cst_bonsai$18=caml_string_of_jsbytes("bonsai"),
     cst$6=caml_string_of_jsbytes("()"),
     cst_Nothing_t=caml_string_of_jsbytes("Nothing.t"),
     cst_bonsai$19=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Meta$0=caml_string_of_jsbytes("Bonsai__Meta"),
     cst_poly_model=caml_string_of_jsbytes("poly-model"),
     cst_enum_action_with_key$0=caml_string_of_jsbytes("enum action with key"),
     cst_enum_action_with_key=caml_string_of_jsbytes("enum action with key"),
     cst_Bonsai_Hidden=caml_string_of_jsbytes("Bonsai__Hidden"),
     cst_bonsai$20=caml_string_of_jsbytes("bonsai"),
     cst_src_hidden_ml=caml_string_of_jsbytes("src/hidden.ml"),
     cst$7=caml_string_of_jsbytes(""),
     cst_bonsai$21=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$22=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Hidden$0=caml_string_of_jsbytes("Bonsai__Hidden"),
     cst$9=caml_string_of_jsbytes("_"),
     cst_x=caml_string_of_jsbytes("x"),
     cst_y=caml_string_of_jsbytes("y"),
     cst_Bonsai_Path=caml_string_of_jsbytes("Bonsai__Path"),
     cst_bonsai$23=caml_string_of_jsbytes("bonsai"),
     cst_src_path_ml=caml_string_of_jsbytes("src/path.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_bonsai$24=caml_string_of_jsbytes("bonsai"),
     cst_bonsai_path=caml_string_of_jsbytes("bonsai_path"),
     cst_bonsai$25=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Path$0=caml_string_of_jsbytes("Bonsai__Path"),
     cst_Bonsai_Lifecycle=caml_string_of_jsbytes("Bonsai__Lifecycle"),
     cst_bonsai$26=caml_string_of_jsbytes("bonsai"),
     cst_src_lifecycle_ml=caml_string_of_jsbytes("src/lifecycle.ml"),
     cst$10=caml_string_of_jsbytes(""),
     cst_bonsai$27=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$28=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Lifecycle$0=caml_string_of_jsbytes("Bonsai__Lifecycle"),
     cst_Bonsai_Computation=caml_string_of_jsbytes("Bonsai__Computation"),
     cst_bonsai$29=caml_string_of_jsbytes("bonsai"),
     cst_src_computation_ml=caml_string_of_jsbytes("src/computation.ml"),
     cst$11=caml_string_of_jsbytes(""),
     cst_bonsai$30=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$31=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Computation$0=caml_string_of_jsbytes("Bonsai__Computation"),
     cst_src_node_path_ml$15=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$10=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$5=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$0=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$1=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$2=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$3=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$4=caml_string_of_jsbytes("src/node_path.ml"),
     cst_bcf00d2e31fa7902f34efdb04d=
      caml_string_of_jsbytes("bcf00d2e31fa7902f34efdb04d2a7b31"),
     cst_src_node_path_ml$6=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$7=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$8=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$9=caml_string_of_jsbytes("src/node_path.ml"),
     cst_bcf00d2e31fa7902f34efdb04d$0=
      caml_string_of_jsbytes("bcf00d2e31fa7902f34efdb04d2a7b31"),
     cst_src_node_path_ml$11=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$12=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$13=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$14=caml_string_of_jsbytes("src/node_path.ml"),
     cst_bcf00d2e31fa7902f34efdb04d$1=
      caml_string_of_jsbytes("bcf00d2e31fa7902f34efdb04d2a7b31"),
     cst_src_node_path_ml$16=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$17=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$18=caml_string_of_jsbytes("src/node_path.ml"),
     cst_src_node_path_ml$19=caml_string_of_jsbytes("src/node_path.ml"),
     cst_bcf00d2e31fa7902f34efdb04d$2=
      caml_string_of_jsbytes("bcf00d2e31fa7902f34efdb04d2a7b31"),
     cst_Bonsai_Node_path=caml_string_of_jsbytes("Bonsai__Node_path"),
     cst_bonsai$32=caml_string_of_jsbytes("bonsai"),
     cst_src_node_path_ml=caml_string_of_jsbytes("src/node_path.ml"),
     cst$12=caml_string_of_jsbytes(""),
     cst_bonsai$33=caml_string_of_jsbytes("bonsai"),
     cst_depth=caml_string_of_jsbytes("depth"),
     cst_choices=caml_string_of_jsbytes("choices"),
     cst_builder=caml_string_of_jsbytes("builder"),
     cst_src_node_path_ml_4_0=caml_string_of_jsbytes("src/node_path.ml:4:0"),
     cst_builder$0=caml_string_of_jsbytes("builder"),
     append_to=[0,0,0],
     cst_src_node_path_ml$20=caml_string_of_jsbytes("src/node_path.ml"),
     cst$13=caml_string_of_jsbytes(""),
     cst_bonsai$34=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Node_path$0=caml_string_of_jsbytes("Bonsai__Node_path"),
     cst_Bonsai_Transform=caml_string_of_jsbytes("Bonsai__Transform"),
     cst_bonsai$35=caml_string_of_jsbytes("bonsai"),
     cst_src_transform_ml=caml_string_of_jsbytes("src/transform.ml"),
     cst$14=caml_string_of_jsbytes(""),
     cst_bonsai$36=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$37=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Transform$0=caml_string_of_jsbytes("Bonsai__Transform"),
     cst_Bonsai_Flatten_values=
      caml_string_of_jsbytes("Bonsai__Flatten_values"),
     cst_bonsai$38=caml_string_of_jsbytes("bonsai"),
     cst_src_flatten_values_ml=caml_string_of_jsbytes("src/flatten_values.ml"),
     cst$15=caml_string_of_jsbytes(""),
     cst_bonsai$39=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$40=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Flatten_values$0=
      caml_string_of_jsbytes("Bonsai__Flatten_values"),
     cst_const$0=caml_string_of_jsbytes("const"),
     cst_incr$0=caml_string_of_jsbytes("incr"),
     cst_both$0=caml_string_of_jsbytes("both"),
     cst_cutoff$0=caml_string_of_jsbytes("cutoff"),
     cst_map$0=caml_string_of_jsbytes("map"),
     cst_map2$0=caml_string_of_jsbytes("map2"),
     cst_map3$0=caml_string_of_jsbytes("map3"),
     cst_map4$0=caml_string_of_jsbytes("map4"),
     cst_map5$0=caml_string_of_jsbytes("map5"),
     cst_map6$0=caml_string_of_jsbytes("map6"),
     cst_map7$0=caml_string_of_jsbytes("map7"),
     cst_path$2=caml_string_of_jsbytes("path"),
     cst_read=caml_string_of_jsbytes("read"),
     cst_leaf=caml_string_of_jsbytes("leaf"),
     cst_leaf0=caml_string_of_jsbytes("leaf0"),
     cst_leaf_incr=caml_string_of_jsbytes("leaf_incr"),
     cst_model_cutoff=caml_string_of_jsbytes("model_cutoff"),
     cst_dyn_set=caml_string_of_jsbytes("dyn_set"),
     cst_fetch=caml_string_of_jsbytes("fetch"),
     cst_assoc=caml_string_of_jsbytes("assoc"),
     cst_assoc_simpl=caml_string_of_jsbytes("assoc_simpl"),
     cst_switch=caml_string_of_jsbytes("switch"),
     cst_lazy=caml_string_of_jsbytes("lazy"),
     cst_wrap=caml_string_of_jsbytes("wrap"),
     cst_with_model_resetter=caml_string_of_jsbytes("with_model_resetter"),
     cst_life_cycle=caml_string_of_jsbytes("life_cycle"),
     cst_const=caml_string_of_jsbytes("const"),
     cst_named$1=caml_string_of_jsbytes("named"),
     cst_dir_none=caml_string_of_jsbytes(" [dir=none];"),
     cst$27=caml_string_of_jsbytes(";"),
     cst$25=caml_string_of_jsbytes("_"),
     cst$26=caml_string_of_jsbytes(""),
     cst_000000=caml_string_of_jsbytes("#000000"),
     cst$22=caml_string_of_jsbytes(""),
     cst_circle=caml_string_of_jsbytes("circle"),
     cst_86E3CE=caml_string_of_jsbytes("#86E3CE"),
     cst_Mrecord=caml_string_of_jsbytes("Mrecord"),
     cst_D0E6A5=caml_string_of_jsbytes("#D0E6A5"),
     cst$23=caml_string_of_jsbytes("{"),
     cst$24=caml_string_of_jsbytes(""),
     cst_Mrecord$0=caml_string_of_jsbytes("Mrecord"),
     color=caml_string_of_jsbytes("#FFDD94"),
     cst_oval=caml_string_of_jsbytes("oval"),
     cst_FFFFFF=caml_string_of_jsbytes("#FFFFFF"),
     cst_subst=caml_string_of_jsbytes("subst"),
     cst_oval$0=caml_string_of_jsbytes("oval"),
     cst$21=caml_string_of_jsbytes(""),
     cst_tooltip=caml_string_of_jsbytes(', tooltip = "'),
     cst$17=caml_string_of_jsbytes(""),
     cst$20=caml_string_of_jsbytes(""),
     cst$18=caml_string_of_jsbytes('"; '),
     cst_fillcolor$0=caml_string_of_jsbytes('"; fillcolor = "'),
     cst_label=caml_string_of_jsbytes('", label = "'),
     cst_shape=caml_string_of_jsbytes(', shape = "'),
     cst_style_filled=caml_string_of_jsbytes("[ style=filled"),
     cst$19=caml_string_of_jsbytes(""),
     cst_named$0=caml_string_of_jsbytes("named_"),
     cst_Bonsai_To_dot=caml_string_of_jsbytes("Bonsai__To_dot"),
     cst_bonsai$41=caml_string_of_jsbytes("bonsai"),
     cst_src_to_dot_ml=caml_string_of_jsbytes("src/to_dot.ml"),
     cst$16=caml_string_of_jsbytes(""),
     cst_bonsai$42=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$43=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_To_dot$0=caml_string_of_jsbytes("Bonsai__To_dot"),
     cst_Bonsai_Apply_action=caml_string_of_jsbytes("Bonsai__Apply_action"),
     cst_bonsai$44=caml_string_of_jsbytes("bonsai"),
     cst_src_apply_action_ml=caml_string_of_jsbytes("src/apply_action.ml"),
     cst$28=caml_string_of_jsbytes(""),
     cst_bonsai$45=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$46=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Apply_action$0=caml_string_of_jsbytes("Bonsai__Apply_action"),
     cst_Bonsai_Snapshot=caml_string_of_jsbytes("Bonsai__Snapshot"),
     cst_bonsai$47=caml_string_of_jsbytes("bonsai"),
     cst_src_snapshot_ml=caml_string_of_jsbytes("src/snapshot.ml"),
     cst$29=caml_string_of_jsbytes(""),
     cst_bonsai$48=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$49=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Snapshot$0=caml_string_of_jsbytes("Bonsai__Snapshot"),
     cst_Bonsai_Simplify=caml_string_of_jsbytes("Bonsai__Simplify"),
     cst_bonsai$50=caml_string_of_jsbytes("bonsai"),
     cst_src_simplify_ml=caml_string_of_jsbytes("src/simplify.ml"),
     cst$30=caml_string_of_jsbytes(""),
     cst_bonsai$51=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$52=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Simplify$0=caml_string_of_jsbytes("Bonsai__Simplify"),
     cst_After=caml_string_of_jsbytes("After"),
     cst_Before=caml_string_of_jsbytes("Before"),
     cst_after=caml_string_of_jsbytes("after"),
     cst_before=caml_string_of_jsbytes("before"),
     cst_After$0=caml_string_of_jsbytes("After"),
     cst_Before$0=caml_string_of_jsbytes("Before"),
     cst_after$0=caml_string_of_jsbytes("after"),
     cst_before$0=caml_string_of_jsbytes("before"),
     cst_incr_compute=caml_string_of_jsbytes("incr-compute"),
     cst_last_result=caml_string_of_jsbytes("last_result"),
     cst_last_seqnum=caml_string_of_jsbytes("last_seqnum"),
     cst_last_result$0=caml_string_of_jsbytes("last_result"),
     cst_last_seqnum$0=caml_string_of_jsbytes("last_seqnum"),
     error_source_061=caml_string_of_jsbytes("src/proc.ml.Edge.Poll.t"),
     cst_model_id=caml_string_of_jsbytes("model id"),
     cst_action_id=caml_string_of_jsbytes("action id"),
     cst_inject_id=caml_string_of_jsbytes("inject id"),
     cst_outer_model_for_wrap=caml_string_of_jsbytes("outer model for wrap"),
     cst_lazy_model=caml_string_of_jsbytes("lazy-model"),
     cst_state_machine$0=caml_string_of_jsbytes("state machine"),
     cst_state_machine=caml_string_of_jsbytes("state machine"),
     cst_key_id=caml_string_of_jsbytes("key id"),
     cst_data_id=caml_string_of_jsbytes("data id"),
     cst_Bonsai_Proc=caml_string_of_jsbytes("Bonsai__Proc"),
     cst_bonsai$53=caml_string_of_jsbytes("bonsai"),
     cst_src_proc_ml=caml_string_of_jsbytes("src/proc.ml"),
     cst$31=caml_string_of_jsbytes(""),
     cst_bonsai$54=caml_string_of_jsbytes("bonsai"),
     error_source_101=
      caml_string_of_jsbytes("src/proc.ml.Clock.Before_or_after.t"),
     cst_bonsai$55=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Proc$0=caml_string_of_jsbytes("Bonsai__Proc"),
     cst_Bonsai_Legacy_api_intf=
      caml_string_of_jsbytes("Bonsai__Legacy_api_intf"),
     cst_bonsai$56=caml_string_of_jsbytes("bonsai"),
     cst_src_legacy_api_intf_ml=
      caml_string_of_jsbytes("src/legacy_api_intf.ml"),
     cst$32=caml_string_of_jsbytes(""),
     cst_bonsai$57=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$58=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Legacy_api_intf$0=
      caml_string_of_jsbytes("Bonsai__Legacy_api_intf"),
     name=caml_string_of_jsbytes("pure"),
     cst_Bonsai_Legacy_api=caml_string_of_jsbytes("Bonsai__Legacy_api"),
     cst_bonsai$59=caml_string_of_jsbytes("bonsai"),
     cst_src_legacy_api_ml=caml_string_of_jsbytes("src/legacy_api.ml"),
     cst$33=caml_string_of_jsbytes(""),
     cst_bonsai$60=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$61=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Legacy_api$0=caml_string_of_jsbytes("Bonsai__Legacy_api"),
     cst_src_graph_info_ml_113_41=
      caml_string_of_jsbytes("src/graph_info.ml:113:41"),
     cst_BUG=caml_string_of_jsbytes("BUG"),
     cst_dag$0=caml_string_of_jsbytes("dag"),
     cst_info$0=caml_string_of_jsbytes("info"),
     cst_tree$0=caml_string_of_jsbytes("tree"),
     cst_info$1=caml_string_of_jsbytes("info"),
     cst_dag$1=caml_string_of_jsbytes("dag"),
     cst_tree$1=caml_string_of_jsbytes("tree"),
     cst_src_graph_info_ml_t=caml_string_of_jsbytes("src/graph_info.ml.t"),
     cst_path$3=caml_string_of_jsbytes("path"),
     cst_return=caml_string_of_jsbytes("return"),
     cst_leaf1=caml_string_of_jsbytes("leaf1"),
     cst_leaf0$0=caml_string_of_jsbytes("leaf0"),
     cst_leaf_incr$0=caml_string_of_jsbytes("leaf_incr"),
     cst_model_cutoff$0=caml_string_of_jsbytes("model_cutoff"),
     cst_subst$0=caml_string_of_jsbytes("subst"),
     cst_subst_stateless_from=caml_string_of_jsbytes("subst_stateless_from"),
     cst_subst_stateless_into=caml_string_of_jsbytes("subst_stateless_into"),
     cst_store=caml_string_of_jsbytes("store"),
     cst_fetch$0=caml_string_of_jsbytes("fetch"),
     cst_assoc$0=caml_string_of_jsbytes("assoc"),
     cst_assoc_simpl$0=caml_string_of_jsbytes("assoc_simpl"),
     cst_switch$0=caml_string_of_jsbytes("switch"),
     cst_lazy$0=caml_string_of_jsbytes("lazy"),
     cst_wrap$0=caml_string_of_jsbytes("wrap"),
     cst_with_model_resetter$0=caml_string_of_jsbytes("with_model_resetter"),
     cst_lifecycle$2=caml_string_of_jsbytes("lifecycle"),
     cst_constant$0=caml_string_of_jsbytes("constant"),
     cst_incr$1=caml_string_of_jsbytes("incr"),
     cst_named$2=caml_string_of_jsbytes("named"),
     cst_both$1=caml_string_of_jsbytes("both"),
     cst_cutoff$1=caml_string_of_jsbytes("cutoff"),
     cst_map$1=caml_string_of_jsbytes("map"),
     cst_map2$1=caml_string_of_jsbytes("map2"),
     cst_map3$1=caml_string_of_jsbytes("map3"),
     cst_map4$1=caml_string_of_jsbytes("map4"),
     cst_map5$1=caml_string_of_jsbytes("map5"),
     cst_map6$1=caml_string_of_jsbytes("map6"),
     cst_map7$1=caml_string_of_jsbytes("map7"),
     cst_src_graph_info_ml_Node_inf=
      caml_string_of_jsbytes("src/graph_info.ml.Node_info.t"),
     cst_here=caml_string_of_jsbytes("here"),
     cst_node_type=caml_string_of_jsbytes("node_type"),
     cst_here$0=caml_string_of_jsbytes("here"),
     cst_node_type$0=caml_string_of_jsbytes("node_type"),
     cst_pos_bol=caml_string_of_jsbytes("pos_bol"),
     cst_pos_cnum=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_fname=caml_string_of_jsbytes("pos_fname"),
     cst_pos_lnum=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_cnum$0=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_bol$0=caml_string_of_jsbytes("pos_bol"),
     cst_pos_lnum$0=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_fname$0=caml_string_of_jsbytes("pos_fname"),
     cst_Bonsai_Graph_info=caml_string_of_jsbytes("Bonsai__Graph_info"),
     cst_bonsai$62=caml_string_of_jsbytes("bonsai"),
     cst_src_graph_info_ml=caml_string_of_jsbytes("src/graph_info.ml"),
     cst$34=caml_string_of_jsbytes(""),
     cst_bonsai$63=caml_string_of_jsbytes("bonsai"),
     error_source_021=
      caml_string_of_jsbytes("src/graph_info.ml.Source_code_position.t"),
     cst_pos_cnum$1=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_bol$1=caml_string_of_jsbytes("pos_bol"),
     cst_pos_lnum$1=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_fname$1=caml_string_of_jsbytes("pos_fname"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_src_graph_info_ml_6_2=caml_string_of_jsbytes("src/graph_info.ml:6:2"),
     cst_t$0=caml_string_of_jsbytes("t"),
     error_source_048=caml_string_of_jsbytes("src/graph_info.ml.Node_info.t"),
     cst_here$1=caml_string_of_jsbytes("here"),
     cst_node_type$1=caml_string_of_jsbytes("node_type"),
     cst_t$1=caml_string_of_jsbytes("t"),
     cst_src_graph_info_ml_16_2=
      caml_string_of_jsbytes("src/graph_info.ml:16:2"),
     cst_t$2=caml_string_of_jsbytes("t"),
     cst_info=caml_string_of_jsbytes("info"),
     cst_dag=caml_string_of_jsbytes("dag"),
     cst_tree=caml_string_of_jsbytes("tree"),
     cst_t$3=caml_string_of_jsbytes("t"),
     cst_src_graph_info_ml_77_0=
      caml_string_of_jsbytes("src/graph_info.ml:77:0"),
     cst_t$4=caml_string_of_jsbytes("t"),
     error_source_074=caml_string_of_jsbytes("src/graph_info.ml.t"),
     cst_bonsai$64=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Graph_info$0=caml_string_of_jsbytes("Bonsai__Graph_info"),
     cst$40=caml_string_of_jsbytes(""),
     cst$41=caml_string_of_jsbytes(""),
     cst$42=caml_string_of_jsbytes(""),
     cst$39=caml_string_of_jsbytes("##"),
     cst$36=caml_string_of_jsbytes(" "),
     cst$37=caml_string_of_jsbytes("##"),
     cst$38=caml_string_of_jsbytes(""),
     cst_Bonsai_Instrumentation=
      caml_string_of_jsbytes("Bonsai__Instrumentation"),
     cst_bonsai$65=caml_string_of_jsbytes("bonsai"),
     cst_src_instrumentation_ml=
      caml_string_of_jsbytes("src/instrumentation.ml"),
     cst$35=caml_string_of_jsbytes(""),
     cst_bonsai$66=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$67=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Instrumentation$0=
      caml_string_of_jsbytes("Bonsai__Instrumentation"),
     cst_BUG_type_id_mismatch_in_Bo=
      caml_string_of_jsbytes("BUG: type-id mismatch in Bonsai.lazy_"),
     cst_an_action_inside_of_Bonsai$0=
      caml_string_of_jsbytes
       ("an action inside of Bonsai.switch as been dropped because the computation is no longer active"),
     cst_an_action_inside_of_Bonsai=
      caml_string_of_jsbytes
       ("an action inside of Bonsai.assoc as been dropped because the computation is no longer active"),
     cst_BUG_Bonsai_Path_t_should_b=
      caml_string_of_jsbytes
       ("BUG: [Bonsai.Path.t] should be unique for all components, but duplicate paths were discovered."),
     cst_Bonsai_Eval=caml_string_of_jsbytes("Bonsai__Eval"),
     cst_bonsai$68=caml_string_of_jsbytes("bonsai"),
     cst_src_eval_ml=caml_string_of_jsbytes("src/eval.ml"),
     cst$43=caml_string_of_jsbytes(""),
     cst_bonsai$69=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$70=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai_Eval$0=caml_string_of_jsbytes("Bonsai__Eval"),
     cst_Bonsai=caml_string_of_jsbytes("Bonsai"),
     cst_bonsai$71=caml_string_of_jsbytes("bonsai"),
     cst_src_bonsai_ml=caml_string_of_jsbytes("src/bonsai.ml"),
     cst$44=caml_string_of_jsbytes(""),
     cst_bonsai$72=caml_string_of_jsbytes("bonsai"),
     cst_bonsai$73=caml_string_of_jsbytes("bonsai"),
     cst_Bonsai$0=caml_string_of_jsbytes("Bonsai"),
     Ui_incr=global_data.Ui_incr,
     Core_String=global_data.Core__String,
     Tailwind_colors=global_data.Tailwind_colors,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Base_Hash=global_data.Base__Hash,
     Core_Source_code_position=global_data.Core__Source_code_position,
     Core=global_data.Core,
     Core_List=global_data.Core__List,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Core_Hashable=global_data.Core__Hashable,
     Core_Memo=global_data.Core__Memo,
     Core_Univ_map=global_data.Core__Univ_map,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Core_Type_equal=global_data.Core__Type_equal,
     Incremental=global_data.Incremental,
     Core_Unique_id=global_data.Core__Unique_id,
     Base_Applicative=global_data.Base__Applicative,
     Core_Either=global_data.Core__Either,
     Core_Map=global_data.Core__Map,
     Core_Tuple=global_data.Core__Tuple,
     Core_Nothing=global_data.Core__Nothing,
     Core_Sexp=global_data.Core__Sexp,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Base_Buffer=global_data.Base__Buffer,
     Core_Int=global_data.Core__Int,
     Core_Char=global_data.Core__Char,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     Core_Lazy=global_data.Core__Lazy,
     Core_Comparable=global_data.Core__Comparable,
     Reversed_list=global_data.Reversed_list,
     Ui_effect=global_data.Ui_effect,
     Core_Option=global_data.Core__Option,
     Expect_test_common_File=global_data.Expect_test_common__File,
     Expect_test_config=global_data.Expect_test_config,
     Inline_test_config=global_data.Inline_test_config,
     Bin_prot_Common=global_data.Bin_prot__Common,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Core_Hashtbl=global_data.Core__Hashtbl,
     Assert_failure=global_data.Assert_failure,
     Stdlib_String=global_data.Stdlib__String;
    global_data.Base__Field;
    var
     Core_Unit=global_data.Core__Unit,
     Core_Comparator=global_data.Core__Comparator,
     Core_Time_ns=global_data.Core__Time_ns,
     Incr_map=global_data.Incr_map,
     Bonsai=[0];
    caml_register_global(732,Bonsai,"Bonsai__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Annotate_incr);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai);
    caml_call1(Expect_test_collector[5][1],cst_src_annotate_incr_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$0,cst);
    var
     enabled=[0,0],
     _q_=[0,caml_string_of_jsbytes("style"),caml_string_of_jsbytes("filled")],
     _a_=[0,caml_string_of_jsbytes("Apply_action")],
     _b_=[0,caml_string_of_jsbytes("Value")],
     _c_=[0,caml_string_of_jsbytes("Result")],
     _d_=[0,caml_string_of_jsbytes("Lifecycle")],
     _e_=[0,caml_string_of_jsbytes("Empty_lifecycle")],
     _f_=[0,caml_string_of_jsbytes("Model")],
     _g_=[0,caml_string_of_jsbytes("Model_and_input")],
     _h_=[0,caml_string_of_jsbytes("Assoc_key")],
     _i_=[0,caml_string_of_jsbytes("Assoc_input")],
     _j_=[0,caml_string_of_jsbytes("Assoc_results")],
     _k_=[0,caml_string_of_jsbytes("Assoc_lifecycles")],
     _l_=[0,caml_string_of_jsbytes("Assoc_apply_actions")],
     _m_=[0,caml_string_of_jsbytes("Path")],
     _n_=[0,caml_string_of_jsbytes("Impossible_apply_action")],
     _o_=[0,caml_string_of_jsbytes("Lifecycle_apply_action_pair")],
     _x_=[0,caml_string_of_jsbytes("t2")],
     _y_=[0,caml_string_of_jsbytes("t1")],
     _z_=[0,caml_string_of_jsbytes("t")],
     _A_=[0,caml_string_of_jsbytes("t2")],
     _B_=[0,caml_string_of_jsbytes("t1")],
     _C_=[0,caml_string_of_jsbytes("t3")],
     _D_=[0,caml_string_of_jsbytes("t2")],
     _E_=[0,caml_string_of_jsbytes("t1")],
     _F_=[0,caml_string_of_jsbytes("t4")],
     _G_=[0,caml_string_of_jsbytes("t3")],
     _H_=[0,caml_string_of_jsbytes("t2")],
     _I_=[0,caml_string_of_jsbytes("t1")],
     _J_=[0,caml_string_of_jsbytes("t5")],
     _K_=[0,caml_string_of_jsbytes("t4")],
     _L_=[0,caml_string_of_jsbytes("t3")],
     _M_=[0,caml_string_of_jsbytes("t2")],
     _N_=[0,caml_string_of_jsbytes("t1")],
     _O_=[0,caml_string_of_jsbytes("t6")],
     _P_=[0,caml_string_of_jsbytes("t5")],
     _Q_=[0,caml_string_of_jsbytes("t4")],
     _R_=[0,caml_string_of_jsbytes("t3")],
     _S_=[0,caml_string_of_jsbytes("t2")],
     _T_=[0,caml_string_of_jsbytes("t1")],
     _U_=[0,caml_string_of_jsbytes("t7")],
     _V_=[0,caml_string_of_jsbytes("t6")],
     _W_=[0,caml_string_of_jsbytes("t5")],
     _X_=[0,caml_string_of_jsbytes("t4")],
     _Y_=[0,caml_string_of_jsbytes("t3")],
     _Z_=[0,caml_string_of_jsbytes("t2")],
     ___=[0,caml_string_of_jsbytes("t1")],
     _ag_=
      [0,
       [11,caml_string_of_jsbytes("map to "),[2,0,0]],
       caml_string_of_jsbytes("map to %s")],
     _af_=
      [0,
       [2,0,[11,caml_string_of_jsbytes("-action"),0]],
       caml_string_of_jsbytes("%s-action")],
     _ae_=
      [0,
       [12,40,[2,0,[11,caml_string_of_jsbytes(" * "),[2,0,[12,41,0]]]]],
       caml_string_of_jsbytes("(%s * %s)")],
     _ad_=
      [0,
       [11,caml_string_of_jsbytes("map to "),[2,0,0]],
       caml_string_of_jsbytes("map to %s")],
     _ac_=
      [0,
       [12,40,[2,0,[11,caml_string_of_jsbytes(" * "),[2,0,[12,41,0]]]]],
       caml_string_of_jsbytes("(%s * %s)")],
     _ab_=
      [0,
       [2,0,[11,caml_string_of_jsbytes("-model"),0]],
       caml_string_of_jsbytes("%s-model")],
     _aj_=[0,caml_string_of_jsbytes("key")],
     _ak_=[0,caml_string_of_jsbytes("action")],
     _am_=[0,caml_string_of_jsbytes("Subst_from")],
     _an_=[0,caml_string_of_jsbytes("Subst_into")],
     _ao_=[0,caml_string_of_jsbytes("Assoc")],
     _ap_=[0,caml_string_of_jsbytes("Switch")],
     _aN_=[0,0,0],
     _bg_=[0,caml_string_of_jsbytes("_")],
     _bd_=[0,caml_string_of_jsbytes("_")],
     _a9_=[0,caml_string_of_jsbytes("_")],
     _a3_=[0,caml_string_of_jsbytes("_")],
     _aX_=[0,caml_string_of_jsbytes("_")],
     _aP_=[0,caml_string_of_jsbytes("Path")],
     _aQ_=[0,caml_string_of_jsbytes("Return")],
     _aR_=[0,caml_string_of_jsbytes("Leaf")],
     _aS_=[0,caml_string_of_jsbytes("Leaf0")],
     _aT_=[0,caml_string_of_jsbytes("Leaf_incr")],
     _aU_=[0,caml_string_of_jsbytes("Model_cutoff")],
     _aV_=
      [0,
       [1,
        [0,
         [0,caml_string_of_jsbytes("here")],
         [0,[0,caml_string_of_jsbytes("None")],0]]],
       0],
     _aW_=[0,caml_string_of_jsbytes("into")],
     _aY_=[0,caml_string_of_jsbytes("via")],
     _aZ_=[0,caml_string_of_jsbytes("from")],
     _a0_=[0,caml_string_of_jsbytes("Subst")],
     _a1_=
      [0,
       [1,
        [0,
         [0,caml_string_of_jsbytes("here")],
         [0,[0,caml_string_of_jsbytes("None")],0]]],
       0],
     _a2_=[0,caml_string_of_jsbytes("into")],
     _a4_=[0,caml_string_of_jsbytes("via")],
     _a5_=[0,caml_string_of_jsbytes("from")],
     _a6_=[0,caml_string_of_jsbytes("Subst_stateless_from")],
     _a7_=
      [0,
       [1,
        [0,
         [0,caml_string_of_jsbytes("here")],
         [0,[0,caml_string_of_jsbytes("None")],0]]],
       0],
     _a8_=[0,caml_string_of_jsbytes("into")],
     _a__=[0,caml_string_of_jsbytes("via")],
     _a$_=[0,caml_string_of_jsbytes("from")],
     _ba_=[0,caml_string_of_jsbytes("Subst_stateless_into")],
     _bb_=[0,caml_string_of_jsbytes("inner")],
     _bc_=[0,caml_string_of_jsbytes("value")],
     _be_=[0,caml_string_of_jsbytes("id")],
     _bf_=[0,caml_string_of_jsbytes("Store")],
     _bh_=[0,caml_string_of_jsbytes("Fetch")],
     _bi_=[0,caml_string_of_jsbytes("by")],
     _bj_=[0,caml_string_of_jsbytes("map")],
     _bk_=[0,caml_string_of_jsbytes("Assoc")],
     _bl_=[0,caml_string_of_jsbytes("map")],
     _bm_=[0,caml_string_of_jsbytes("Assoc_simpl")],
     _bn_=[0,caml_string_of_jsbytes("arms")],
     _bo_=[0,caml_string_of_jsbytes("match_")],
     _bp_=[0,caml_string_of_jsbytes("Switch")],
     _bq_=[0,caml_string_of_jsbytes("Lazy")],
     _br_=[0,caml_string_of_jsbytes("Wrap")],
     _bs_=[0,caml_string_of_jsbytes("With_model_resetter")],
     _bt_=[0,caml_string_of_jsbytes("Lifecycle")],
     _bJ_=[0,[0,30,0],1],
     _bE_=[0,0,1],
     _bB_=[0,[0,1,[0,2,[0,2,[0,1,[0,0,0]]]]],0],
     _bC_=[1,caml_string_of_jsbytes(" 1-2-2-1-0_0 ")],
     _bD_=[0,caml_string_of_jsbytes("")],
     _bF_=[1,caml_string_of_jsbytes(" _1 ")],
     _bG_=[0,caml_string_of_jsbytes("")],
     _bH_=[1,caml_string_of_jsbytes(" _0 ")],
     _bI_=[0,caml_string_of_jsbytes("")],
     _bK_=[1,caml_string_of_jsbytes(" 30_1 ")],
     _bL_=[0,caml_string_of_jsbytes("")],
     _ci_=[0,1],
     _cj_=[0,2],
     _ck_=[0,1],
     _cl_=[0,2],
     _cm_=[0,1],
     _cn_=[0,2],
     _co_=[0,1],
     _cp_=[0,2],
     _cq_=[0,2],
     _cr_=[0,1],
     _cs_=[0,1],
     _cB_=
      [0,
       [11,caml_string_of_jsbytes("digraph {\n"),[2,0,[12,125,0]]],
       caml_string_of_jsbytes("digraph {\n%s}")],
     _cA_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" -> "),[2,0,[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("%s -> %s%s\n")],
     _cz_=[0,caml_string_of_jsbytes("src/to_dot.ml"),82,2],
     _cw_=[0,caml_string_of_jsbytes("width=.1, height=.1")],
     _cx_=[0,caml_string_of_jsbytes("}"),0],
     _cy_=[0,caml_string_of_jsbytes("width=.1, height=.1")],
     _cu_=[0,caml_string_of_jsbytes('"'),0],
     _cv_=[0,caml_string_of_jsbytes("]"),0],
     _dO_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),935,28623,28629]],
     _dP_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),934,28600,28606]],
     _dH_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),903,27452,27458]],
     _dI_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),902,27427,27433]],
     _dJ_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),901,27402,27408]],
     _dK_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),900,27377,27383]],
     _dL_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),899,27352,27358]],
     _dM_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),898,27327,27333]],
     _dN_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),897,27302,27308]],
     _dB_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),892,27185,27191]],
     _dC_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),891,27160,27166]],
     _dD_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),890,27135,27141]],
     _dE_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),889,27110,27116]],
     _dF_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),888,27085,27091]],
     _dG_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),887,27060,27066]],
     _dw_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),882,26949,26955]],
     _dx_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),881,26924,26930]],
     _dy_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),880,26899,26905]],
     _dz_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),879,26874,26880]],
     _dA_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),878,26849,26855]],
     _ds_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),873,26744,26750]],
     _dt_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),872,26719,26725]],
     _du_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),871,26694,26700]],
     _dv_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),870,26669,26675]],
     _dp_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),865,26570,26576]],
     _dq_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),864,26545,26551]],
     _dr_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),863,26520,26526]],
     _dn_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),852,26364,26372]],
     _do_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),851,26339,26347]],
     _dk_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),845,26251,26259]],
     _dl_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),844,26226,26234]],
     _dm_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),843,26201,26209]],
     _dj_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),814,25159,25163]],
     _dg_=[0,caml_string_of_jsbytes("After")],
     _dh_=[0,caml_string_of_jsbytes("Before")],
     _dc_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),761,23850,23858]],
     _dd_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),760,23829,23835]],
     _de_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),759,23790,23796]],
     _df_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),771,24089,24093]],
     _c8_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),624,19750,19756]],
     _c9_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),623,19682,19688]],
     _c__=[0,[0,caml_string_of_jsbytes("src/proc.ml"),623,19682,19688]],
     _c7_=[0,caml_string_of_jsbytes("Set")],
     _c5_=[0,caml_string_of_jsbytes("last_result")],
     _c6_=[0,caml_string_of_jsbytes("last_seqnum")],
     _c4_=[0,caml_string_of_jsbytes("src/proc.ml"),591,8],
     _c$_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),602,18902,18908]],
     _da_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),582,18403,18409]],
     _db_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),582,18403,18409]],
     _cW_=[0,caml_string_of_jsbytes("src/proc.ml"),536,6],
     _cV_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),543,17355,17363]],
     _cY_=[0,caml_string_of_jsbytes("src/proc.ml"),536,6],
     _cX_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),536,17113,17119]],
     _cU_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),538,17156,17164]],
     _cZ_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),536,17113,17119]],
     _c0_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),535,17092,17096]],
     _c1_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),534,17032,17036]],
     _c2_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),534,17032,17036]],
     _c3_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),534,17032,17036]],
     _cQ_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),504,15973,15979]],
     _cR_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),503,15957,15961]],
     _cS_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),498,15802,15808]],
     _cT_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),497,15781,15785]],
     _cO_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),487,15483,15485]],
     _cL_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),360,11507,11511]],
     _cM_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),347,11016,11020]],
     _cI_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),316,10175,10177]],
     _cJ_=[0,caml_string_of_jsbytes("src/proc.ml"),310,10048,10054],
     _cK_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),308,10000,10002]],
     _cE_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),284,9119,9121]],
     _cF_=[0,caml_string_of_jsbytes("src/proc.ml"),277,8985,8991],
     _cG_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),275,8937,8939]],
     _cH_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),274,8903,8905]],
     _cD_=[0,caml_string_of_jsbytes("src/proc.ml"),29,670,716],
     _cP_=[0,[0,caml_string_of_jsbytes("src/proc.ml"),486,15458,15460]],
     _d4_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),110,2680,2684]],
     _d5_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),108,2612,2616]],
     _d2_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),103,2476,2480]],
     _d3_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),101,2405,2409]],
     _d0_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),96,2295,2299]],
     _d1_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),95,2268,2272]],
     _dZ_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),90,2179,2183]],
     _dY_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),85,2087,2091]],
     _dW_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),80,1988,1992]],
     _dX_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),79,1959,1963]],
     _dV_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),73,1830,1834]],
     _dU_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),67,1704,1708]],
     _dS_=[0,caml_string_of_jsbytes("src/legacy_api.ml"),40,2],
     _dT_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),40,997,999]],
     _dQ_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),27,674,676]],
     _dR_=[0,[0,caml_string_of_jsbytes("src/legacy_api.ml"),26,653,655]],
     _eu_=[0,caml_string_of_jsbytes("info")],
     _ev_=[0,caml_string_of_jsbytes("dag")],
     _ew_=[0,caml_string_of_jsbytes("tree")],
     _et_=[0,caml_string_of_jsbytes("src/graph_info.ml"),77,0],
     _ee_=[0,caml_string_of_jsbytes("here")],
     _ef_=[0,caml_string_of_jsbytes("node_type")],
     _ed_=[0,caml_string_of_jsbytes("src/graph_info.ml"),16,2],
     _d7_=[0,caml_string_of_jsbytes("pos_cnum")],
     _d8_=[0,caml_string_of_jsbytes("pos_bol")],
     _d9_=[0,caml_string_of_jsbytes("pos_lnum")],
     _d__=[0,caml_string_of_jsbytes("pos_fname")],
     _d6_=[0,caml_string_of_jsbytes("src/graph_info.ml"),6,2],
     _ey_=[0,caml_string_of_jsbytes("-compute"),0],
     _ez_=[0,caml_string_of_jsbytes("-apply_action"),0],
     _eA_=[0,caml_string_of_jsbytes("-by"),0],
     _eI_=[0,caml_string_of_jsbytes("src/eval.ml"),473,6],
     _eJ_=[0,caml_string_of_jsbytes("src/eval.ml"),473,6],
     _eF_=[0,caml_string_of_jsbytes("action")],
     _eG_=[0,caml_string_of_jsbytes("index")],
     _eD_=[0,caml_string_of_jsbytes("action")],
     _eE_=[0,caml_string_of_jsbytes("key")],
     _eH_=[0,0],
     _eB_=[0,caml_string_of_jsbytes("path")];
    function enable_incremental_annotations(param){enabled[1] = 1;return 0}
    function disable_incremental_annotation(param){enabled[1] = 0;return 0}
    var empty_attrs=Core_String[140][3];
    function hash_fold_t(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        case 6:return caml_call2(Base_Hash[3],hsv,6);
        case 7:return caml_call2(Base_Hash[3],hsv,7);
        case 8:return caml_call2(Base_Hash[3],hsv,8);
        case 9:return caml_call2(Base_Hash[3],hsv,9);
        case 10:return caml_call2(Base_Hash[3],hsv,10);
        case 11:return caml_call2(Base_Hash[3],hsv,11);
        case 12:return caml_call2(Base_Hash[3],hsv,12);
        case 13:return caml_call2(Base_Hash[3],hsv,13);
        default:return caml_call2(Base_Hash[3],hsv,14)}}
    function hash(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_t9_=hash_fold_t(hsv,x);
      return caml_call1(Base_Hash[9],_t9_)}
    var compare=runtime.caml_int_compare;
    function t_of_sexp(sexp_006)
     {if(0 === sexp_006[0])
       {var
         _tZ_=sexp_006[1],
         _t0_=caml_string_compare(_tZ_,cst_apply_action),
         switch$0=0;
        if(0 <= _t0_)
         if(0 < _t0_)
          {var _t1_=caml_string_compare(_tZ_,cst_lifecycle);
           if(0 <= _t1_)
            if(0 < _t1_)
             if(caml_string_notequal(_tZ_,cst_lifecycle_apply_action_pai))
              if(caml_string_notequal(_tZ_,cst_model))
               if(caml_string_notequal(_tZ_,cst_model_and_input))
                if(caml_string_notequal(_tZ_,cst_path))
                 if(caml_string_notequal(_tZ_,cst_result))
                  {if(! caml_string_notequal(_tZ_,cst_value))switch$0 = 2}
                 else
                  switch$0 = 3;
                else
                 switch$0 = 13;
               else
                switch$0 = 7;
              else
               switch$0 = 6;
             else
              switch$0 = 15;
            else
             switch$0 = 4;
           else
            if(caml_string_notequal(_tZ_,cst_assoc_apply_actions))
             if(caml_string_notequal(_tZ_,cst_assoc_input))
              if(caml_string_notequal(_tZ_,cst_assoc_key))
               if(caml_string_notequal(_tZ_,cst_assoc_lifecycles))
                if(caml_string_notequal(_tZ_,cst_assoc_results))
                 if(caml_string_notequal(_tZ_,cst_empty_lifecycle))
                  {if
                    (! caml_string_notequal(_tZ_,cst_impossible_apply_action))
                    switch$0 = 14}
                 else
                  switch$0 = 5;
                else
                 switch$0 = 10;
               else
                switch$0 = 11;
              else
               switch$0 = 8;
             else
              switch$0 = 9;
            else
             switch$0 = 12}
         else
          switch$0 = 1;
        else
         {var _t2_=caml_string_compare(_tZ_,cst_Impossible_apply_action);
          if(0 <= _t2_)
           if(0 < _t2_)
            if(caml_string_notequal(_tZ_,cst_Lifecycle))
             if(caml_string_notequal(_tZ_,cst_Lifecycle_apply_action_pai))
              if(caml_string_notequal(_tZ_,cst_Model))
               if(caml_string_notequal(_tZ_,cst_Model_and_input))
                if(caml_string_notequal(_tZ_,cst_Path))
                 if(caml_string_notequal(_tZ_,cst_Result))
                  {if(! caml_string_notequal(_tZ_,cst_Value))switch$0 = 2}
                 else
                  switch$0 = 3;
                else
                 switch$0 = 13;
               else
                switch$0 = 7;
              else
               switch$0 = 6;
             else
              switch$0 = 15;
            else
             switch$0 = 4;
           else
            switch$0 = 14;
          else
           if(caml_string_notequal(_tZ_,cst_Apply_action))
            if(caml_string_notequal(_tZ_,cst_Assoc_apply_actions))
             if(caml_string_notequal(_tZ_,cst_Assoc_input))
              if(caml_string_notequal(_tZ_,cst_Assoc_key))
               if(caml_string_notequal(_tZ_,cst_Assoc_lifecycles))
                if(caml_string_notequal(_tZ_,cst_Assoc_results))
                 {if(! caml_string_notequal(_tZ_,cst_Empty_lifecycle))
                   switch$0 = 5}
                else
                 switch$0 = 10;
               else
                switch$0 = 11;
              else
               switch$0 = 8;
             else
              switch$0 = 9;
            else
             switch$0 = 12;
           else
            switch$0 = 1}
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11;
          case 13:return 12;
          case 14:return 13;
          case 15:return 14
          }}
      else
       {var _t3_=sexp_006[1];
        if(! _t3_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_005,sexp_006);
        var _t4_=_t3_[1];
        if(0 !== _t4_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_005,sexp_006);
        var
         _t5_=_t4_[1],
         _t6_=caml_string_compare(_t5_,cst_apply_action$0),
         switch$1=0;
        if(0 <= _t6_)
         if(0 < _t6_)
          {var _t7_=caml_string_compare(_t5_,cst_lifecycle$0);
           if(0 <= _t7_)
            if(0 < _t7_)
             if(caml_string_notequal(_t5_,cst_lifecycle_apply_action_pai$0))
              if(caml_string_notequal(_t5_,cst_model$0))
               if(caml_string_notequal(_t5_,cst_model_and_input$0))
                if(caml_string_notequal(_t5_,cst_path$0))
                 if(caml_string_notequal(_t5_,cst_result$0))
                  {if(! caml_string_notequal(_t5_,cst_value$0))switch$1 = 2}
                 else
                  switch$1 = 3;
                else
                 switch$1 = 13;
               else
                switch$1 = 7;
              else
               switch$1 = 6;
             else
              switch$1 = 15;
            else
             switch$1 = 4;
           else
            if(caml_string_notequal(_t5_,cst_assoc_apply_actions$0))
             if(caml_string_notequal(_t5_,cst_assoc_input$0))
              if(caml_string_notequal(_t5_,cst_assoc_key$0))
               if(caml_string_notequal(_t5_,cst_assoc_lifecycles$0))
                if(caml_string_notequal(_t5_,cst_assoc_results$0))
                 if(caml_string_notequal(_t5_,cst_empty_lifecycle$0))
                  {if
                    (! caml_string_notequal(_t5_,cst_impossible_apply_action$0))
                    switch$1 = 14}
                 else
                  switch$1 = 5;
                else
                 switch$1 = 10;
               else
                switch$1 = 11;
              else
               switch$1 = 8;
             else
              switch$1 = 9;
            else
             switch$1 = 12}
         else
          switch$1 = 1;
        else
         {var _t8_=caml_string_compare(_t5_,cst_Impossible_apply_action$0);
          if(0 <= _t8_)
           if(0 < _t8_)
            if(caml_string_notequal(_t5_,cst_Lifecycle$0))
             if(caml_string_notequal(_t5_,cst_Lifecycle_apply_action_pai$0))
              if(caml_string_notequal(_t5_,cst_Model$0))
               if(caml_string_notequal(_t5_,cst_Model_and_input$0))
                if(caml_string_notequal(_t5_,cst_Path$0))
                 if(caml_string_notequal(_t5_,cst_Result$0))
                  {if(! caml_string_notequal(_t5_,cst_Value$0))switch$1 = 2}
                 else
                  switch$1 = 3;
                else
                 switch$1 = 13;
               else
                switch$1 = 7;
              else
               switch$1 = 6;
             else
              switch$1 = 15;
            else
             switch$1 = 4;
           else
            switch$1 = 14;
          else
           if(caml_string_notequal(_t5_,cst_Apply_action$0))
            if(caml_string_notequal(_t5_,cst_Assoc_apply_actions$0))
             if(caml_string_notequal(_t5_,cst_Assoc_input$0))
              if(caml_string_notequal(_t5_,cst_Assoc_key$0))
               if(caml_string_notequal(_t5_,cst_Assoc_lifecycles$0))
                if(caml_string_notequal(_t5_,cst_Assoc_results$0))
                 {if(! caml_string_notequal(_t5_,cst_Empty_lifecycle$0))
                   switch$1 = 5}
                else
                 switch$1 = 10;
               else
                switch$1 = 11;
              else
               switch$1 = 8;
             else
              switch$1 = 9;
            else
             switch$1 = 12;
           else
            switch$1 = 1}
        switch(switch$1)
         {case 1:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 2:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 3:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 4:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 5:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 6:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 7:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 8:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 9:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 10:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 11:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 12:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 13:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 14:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006);
          case 15:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_005,sexp_006)}
    function sexp_of_t(param)
     {switch(param)
       {case 0:return _a_;
        case 1:return _b_;
        case 2:return _c_;
        case 3:return _d_;
        case 4:return _e_;
        case 5:return _f_;
        case 6:return _g_;
        case 7:return _h_;
        case 8:return _i_;
        case 9:return _j_;
        case 10:return _k_;
        case 11:return _l_;
        case 12:return _m_;
        case 13:return _n_;
        default:return _o_}}
    var
     include=
      caml_call1
       (Core_Hashable[3],[0,hash_fold_t,t_of_sexp,compare,sexp_of_t,hash]),
     hashable=include[4];
    function _p_(kind,incr)
     {var _tX_=0;
      switch(kind)
       {case 0:var _tY_=cst_apply_action$1;break;
        case 1:var _tY_=cst_value$1;break;
        case 2:var _tY_=cst_result$1;break;
        case 3:var _tY_=cst_lifecycle$1;break;
        case 4:var _tY_=cst_empty_lifecycle$1;break;
        case 5:var _tY_=cst_model$1;break;
        case 6:var _tY_=cst_model_input;break;
        case 7:var _tY_=cst_assoc_key$1;break;
        case 8:var _tY_=cst_assoc_input$1;break;
        case 9:var _tY_=cst_assoc_result_map;break;
        case 10:var _tY_=cst_assoc_lifecycle_map;break;
        case 11:var _tY_=cst_assoc_apply_action_map;break;
        case 12:var _tY_=cst_path$1;break;
        case 13:var _tY_=cst_impossible_apply_action$1;break;
        default:var _tY_=cst_lifecycle_apply_action_pai$1}
      var label=[0,_tY_,_tX_];
      switch(kind)
       {case 0:var match=Tailwind_colors[22];break;
        case 1:var match=Tailwind_colors[11];break;
        case 2:var match=Tailwind_colors[12];break;
        case 3:var match=Tailwind_colors[42];break;
        case 4:var match=Tailwind_colors[44];break;
        case 5:var match=Tailwind_colors[32];break;
        case 6:var match=Tailwind_colors[72];break;
        case 7:var match=Tailwind_colors[73];break;
        case 8:var match=Tailwind_colors[74];break;
        case 9:var match=Tailwind_colors[13];break;
        case 10:var match=Tailwind_colors[43];break;
        case 11:var match=Tailwind_colors[23];break;
        case 12:var match=Tailwind_colors[14];break;
        case 13:var match=Tailwind_colors[24];break;
        default:var match=Tailwind_colors[33]}
      var
       color=match[2],
       attrs=
        caml_call1(Core_String[140][9],[0,_q_,[0,[0,cst_fillcolor,color],0]]);
      return caml_call3(Ui_incr[74][3],incr,label,attrs)}
    var _r_=caml_call3(Core_Memo[1],[0,hashable],0,_p_);
    function annotate_packed(kind,incr)
     {var _tW_=enabled[1];return _tW_?caml_call2(_r_,kind,incr):_tW_}
    function annotate(kind,incr)
     {var _tV_=enabled[1];
      return _tV_?annotate_packed(kind,caml_call1(Ui_incr[75],incr)):_tV_}
    function attribute_packed(pos_opt,t)
     {if(enabled[1] && pos_opt)
       {var
         pos$0=pos_opt[1],
         _tR_=caml_call1(Core_Source_code_position[2],pos$0),
         _tS_=caml_call2(Core_String[83],_tR_,cst_lib),
         pos=caml_call2(Core_String[83],_tS_,cst_app),
         match=caml_call2(Core_String[61],pos,47);
        if(match)
         var
          match$0=match[1],
          r=match$0[2],
          l=match$0[1],
          _tT_=[0,caml_call2(Core[18],cst_bound,r),0],
          labels=[0,caml_call2(Core[18],cst_bound$0,l),_tT_];
        else
         var labels=[0,pos,0];
        var
         _tU_=
          function(label)
           {var label$0=[0,label,0];
            return caml_call3(Ui_incr[74][3],t,label$0,empty_attrs)};
        return caml_call2(Core_List[9],labels,_tU_)}
      return 0}
    function attribute(pos_opt,incr)
     {var _tQ_=enabled[1];
      return _tQ_?attribute_packed(pos_opt,caml_call1(Ui_incr[75],incr)):_tQ_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Annotate_incr$0);
    var
     Kind=[0],
     include$0=
      [0,
       enable_incremental_annotations,
       disable_incremental_annotation,
       Kind,
       annotate,
       annotate_packed,
       attribute,
       attribute_packed];
    caml_register_global(747,include$0,"Bonsai__Annotate_incr");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Module_types);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$2);
    caml_call1(Expect_test_collector[5][1],cst_src_module_types_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$3,cst$0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Module_types$0);
    var Bonsai_Module_types=[0];
    caml_register_global(748,Bonsai_Module_types,"Bonsai__Module_types");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$5);
    caml_call1(Expect_test_collector[5][1],cst_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$6,cst$1);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Import$0);
    var
     Bonsai_Import=
      [0,
       enable_incremental_annotations,
       disable_incremental_annotation,
       Kind,
       annotate,
       annotate_packed,
       attribute,
       attribute_packed];
    caml_register_global(749,Bonsai_Import,"Bonsai__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Environment);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$8);
    caml_call1(Expect_test_collector[5][1],cst_src_environment_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$9,cst$2);
    var
     _s_=[0,Ui_incr[5]],
     include$1=caml_call1(caml_call1(Core_Univ_map[22],Core_Univ_map[1]),_s_),
     _u_=include$1[10],
     _v_=include$1[13],
     _t_=include$1[4],
     _w_=include$1[16];
    function add_overwriting(t,key,data)
     {return caml_call3(_w_,t,key,function(param){return data})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Environment$0);
    var Bonsai_Environment=[0,_t_,_v_,add_overwriting,_u_];
    caml_register_global(751,Bonsai_Environment,"Bonsai__Environment");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Value);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$11);
    caml_call1(Expect_test_collector[5][1],cst_src_value_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$12,cst$3);
    var Constant_id=caml_call1(Core_Unique_id[1],[0]);
    function sexp_of_t$0(param)
     {var value=param[1];
      switch(value[0])
       {case 0:return caml_call1(Sexplib0_Sexp_conv[7],cst_constant);
        case 1:return caml_call1(Sexplib0_Sexp_conv[7],cst_incr);
        case 2:
         var
          id=value[1],
          _tj_=caml_call1(Core_Type_equal[8][5],id),
          _tk_=[0,caml_call1(Core[471],_tj_),0];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_named),_tk_]];
        case 3:
         var
          t2=value[2],
          t1=value[1],
          _tl_=[0,[1,[0,_x_,[0,sexp_of_t$0(t2),0]]],0],
          _tm_=[0,[1,[0,_y_,[0,sexp_of_t$0(t1),0]]],_tl_];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_both),_tm_]];
        case 4:
         var t=value[1],_tn_=[0,sexp_of_t$0(t),0];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_cutoff),_tn_]];
        case 5:
         var t$0=value[1],_to_=[0,[1,[0,_z_,[0,sexp_of_t$0(t$0),0]]],0];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_map),_to_]];
        case 6:
         var
          t2$0=value[2],
          t1$0=value[1],
          _tp_=[0,[1,[0,_A_,[0,sexp_of_t$0(t2$0),0]]],0],
          _tq_=[0,[1,[0,_B_,[0,sexp_of_t$0(t1$0),0]]],_tp_];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_map2),_tq_]];
        case 7:
         var
          t3=value[3],
          t2$1=value[2],
          t1$1=value[1],
          _tr_=[0,[1,[0,_C_,[0,sexp_of_t$0(t3),0]]],0],
          _ts_=[0,[1,[0,_D_,[0,sexp_of_t$0(t2$1),0]]],_tr_],
          _tt_=[0,[1,[0,_E_,[0,sexp_of_t$0(t1$1),0]]],_ts_];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_map3),_tt_]];
        case 8:
         var
          t4=value[4],
          t3$0=value[3],
          t2$2=value[2],
          t1$2=value[1],
          _tu_=[0,[1,[0,_F_,[0,sexp_of_t$0(t4),0]]],0],
          _tv_=[0,[1,[0,_G_,[0,sexp_of_t$0(t3$0),0]]],_tu_],
          _tw_=[0,[1,[0,_H_,[0,sexp_of_t$0(t2$2),0]]],_tv_],
          _tx_=[0,[1,[0,_I_,[0,sexp_of_t$0(t1$2),0]]],_tw_];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_map4),_tx_]];
        case 9:
         var
          t5=value[5],
          t4$0=value[4],
          t3$1=value[3],
          t2$3=value[2],
          t1$3=value[1],
          _ty_=[0,[1,[0,_J_,[0,sexp_of_t$0(t5),0]]],0],
          _tz_=[0,[1,[0,_K_,[0,sexp_of_t$0(t4$0),0]]],_ty_],
          _tA_=[0,[1,[0,_L_,[0,sexp_of_t$0(t3$1),0]]],_tz_],
          _tB_=[0,[1,[0,_M_,[0,sexp_of_t$0(t2$3),0]]],_tA_],
          _tC_=[0,[1,[0,_N_,[0,sexp_of_t$0(t1$3),0]]],_tB_];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_map5),_tC_]];
        case 10:
         var
          t6=value[6],
          t5$0=value[5],
          t4$1=value[4],
          t3$2=value[3],
          t2$4=value[2],
          t1$4=value[1],
          _tD_=[0,[1,[0,_O_,[0,sexp_of_t$0(t6),0]]],0],
          _tE_=[0,[1,[0,_P_,[0,sexp_of_t$0(t5$0),0]]],_tD_],
          _tF_=[0,[1,[0,_Q_,[0,sexp_of_t$0(t4$1),0]]],_tE_],
          _tG_=[0,[1,[0,_R_,[0,sexp_of_t$0(t3$2),0]]],_tF_],
          _tH_=[0,[1,[0,_S_,[0,sexp_of_t$0(t2$4),0]]],_tG_],
          _tI_=[0,[1,[0,_T_,[0,sexp_of_t$0(t1$4),0]]],_tH_];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_map6),_tI_]];
        default:
         var
          t7=value[7],
          t6$0=value[6],
          t5$1=value[5],
          t4$2=value[4],
          t3$3=value[3],
          t2$5=value[2],
          t1$5=value[1],
          _tJ_=[0,[1,[0,_U_,[0,sexp_of_t$0(t7),0]]],0],
          _tK_=[0,[1,[0,_V_,[0,sexp_of_t$0(t6$0),0]]],_tJ_],
          _tL_=[0,[1,[0,_W_,[0,sexp_of_t$0(t5$1),0]]],_tK_],
          _tM_=[0,[1,[0,_X_,[0,sexp_of_t$0(t4$2),0]]],_tL_],
          _tN_=[0,[1,[0,_Y_,[0,sexp_of_t$0(t3$3),0]]],_tM_],
          _tO_=[0,[1,[0,_Z_,[0,sexp_of_t$0(t2$5),0]]],_tN_],
          _tP_=[0,[1,[0,___,[0,sexp_of_t$0(t1$5),0]]],_tO_];
         return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_map7),_tP_]]}}
    function map2(t1,t2,f){return [0,[6,t1,t2,f],0]}
    function _$_(t,f){return [0,[5,t,f],0]}
    function named(n){return [0,[2,n],0]}
    function cutoff(equal,t){return [0,[4,t,equal],0]}
    function _aa_(env,param)
     {var value=param[1];
      switch(value[0])
       {case 0:var x=value[1];return caml_call1(Ui_incr[11],x);
        case 1:var x$0=value[1];return x$0;
        case 2:
         var name=value[1],match=caml_call2(_u_,env,name);
         if(! match)return caml_call1(Core[6],cst_A_Value_t_was_used_outside);
         var incremental=match[1];
         return incremental;
        case 3:
         var t2=value[2],t1=value[1],_sQ_=_aa_(env,t2),_sR_=_aa_(env,t1);
         return caml_call2(Ui_incr[42],_sR_,_sQ_);
        case 4:
         var
          equal=value[2],
          t=value[1],
          t$0=_aa_(env,t),
          _sS_=caml_call1(Incremental[58][5],equal);
         caml_call2(Incremental[59],t$0,_sS_);
         return t$0;
        case 5:
         var f=value[2],t$1=value[1],_sT_=_aa_(env,t$1);
         return caml_call2(Ui_incr[12],_sT_,f);
        case 6:
         var
          f$0=value[3],
          t2$0=value[2],
          t1$0=value[1],
          _sU_=_aa_(env,t2$0),
          _sV_=_aa_(env,t1$0);
         return caml_call3(Ui_incr[14],_sV_,_sU_,f$0);
        case 7:
         var
          f$1=value[4],
          t3=value[3],
          t2$1=value[2],
          t1$1=value[1],
          _sW_=_aa_(env,t3),
          _sX_=_aa_(env,t2$1),
          _sY_=_aa_(env,t1$1);
         return caml_call4(Ui_incr[15],_sY_,_sX_,_sW_,f$1);
        case 8:
         var
          f$2=value[5],
          t4=value[4],
          t3$0=value[3],
          t2$2=value[2],
          t1$2=value[1],
          _sZ_=_aa_(env,t4),
          _s0_=_aa_(env,t3$0),
          _s1_=_aa_(env,t2$2),
          _s2_=_aa_(env,t1$2);
         return caml_call5(Ui_incr[16],_s2_,_s1_,_s0_,_sZ_,f$2);
        case 9:
         var
          f$3=value[6],
          t5=value[5],
          t4$0=value[4],
          t3$1=value[3],
          t2$3=value[2],
          t1$3=value[1],
          _s3_=_aa_(env,t5),
          _s4_=_aa_(env,t4$0),
          _s5_=_aa_(env,t3$1),
          _s6_=_aa_(env,t2$3),
          _s7_=_aa_(env,t1$3);
         return caml_call6(Ui_incr[17],_s7_,_s6_,_s5_,_s4_,_s3_,f$3);
        case 10:
         var
          f$4=value[7],
          t6=value[6],
          t5$0=value[5],
          t4$1=value[4],
          t3$2=value[3],
          t2$4=value[2],
          t1$4=value[1],
          _s8_=_aa_(env,t6),
          _s9_=_aa_(env,t5$0),
          _s__=_aa_(env,t4$1),
          _s$_=_aa_(env,t3$2),
          _ta_=_aa_(env,t2$4),
          _tb_=_aa_(env,t1$4);
         return caml_call7(Ui_incr[18],_tb_,_ta_,_s$_,_s__,_s9_,_s8_,f$4);
        default:
         var
          f$5=value[8],
          t7=value[7],
          t6$0=value[6],
          t5$1=value[5],
          t4$2=value[4],
          t3$3=value[3],
          t2$5=value[2],
          t1$5=value[1],
          _tc_=_aa_(env,t7),
          _td_=_aa_(env,t6$0),
          _te_=_aa_(env,t5$1),
          _tf_=_aa_(env,t4$2),
          _tg_=_aa_(env,t3$3),
          _th_=_aa_(env,t2$5),
          _ti_=_aa_(env,t1$5);
         return caml_call8(Ui_incr[19],_ti_,_th_,_tg_,_tf_,_te_,_td_,_tc_,f$5)}}
    function eval$0(env,t){var incr=_aa_(env,t);annotate(1,incr);return incr}
    function return$0(a){return [0,[0,a,caml_call1(Constant_id[45],0)],0]}
    var
     map=[0,-198771759,_$_],
     include$2=caml_call1(Base_Applicative[11],[0,return$0,map2,map]),
     return$1=include$2[1],
     map$0=include$2[2],
     symbol=include$2[4],
     symbol$0=include$2[5],
     symbol$1=include$2[6],
     symbol_map=include$2[7],
     apply=include$2[8],
     map2$0=include$2[9],
     all_unit=include$2[12],
     Applicative_infix=include$2[13];
    function both(a,b){return [0,[3,a,b],0]}
    function map3(t1,t2,t3,f){return [0,[7,t1,t2,t3,f],0]}
    function map4(t1,t2,t3,t4,f){return [0,[8,t1,t2,t3,t4,f],0]}
    function map5(t1,t2,t3,t4,t5,f){return [0,[9,t1,t2,t3,t4,t5,f],0]}
    function map6(t1,t2,t3,t4,t5,t6,f){return [0,[10,t1,t2,t3,t4,t5,t6,f],0]}
    function map7(t1,t2,t3,t4,t5,t6,t7,f)
     {return [0,[11,t1,t2,t3,t4,t5,t6,t7,f],0]}
    function all(param)
     {if(! param)return caml_call1(return$1,0);
      var _sD_=param[2],_sE_=param[1];
      if(! _sD_)return caml_call2(map$0,_sE_,function(a1){return [0,a1,0]});
      var _sF_=_sD_[2],_sG_=_sD_[1];
      if(! _sF_)
       return caml_call3
               (map2$0,_sE_,_sG_,function(a1,a2){return [0,a1,[0,a2,0]]});
      var _sH_=_sF_[2],_sI_=_sF_[1];
      if(! _sH_)
       return map3
               (_sE_,
                _sG_,
                _sI_,
                function(a1,a2,a3){return [0,a1,[0,a2,[0,a3,0]]]});
      var _sJ_=_sH_[2],_sK_=_sH_[1];
      if(! _sJ_)
       return map4
               (_sE_,
                _sG_,
                _sI_,
                _sK_,
                function(a1,a2,a3,a4){return [0,a1,[0,a2,[0,a3,[0,a4,0]]]]});
      var _sL_=_sJ_[2],_sM_=_sJ_[1];
      if(! _sL_)
       return map5
               (_sE_,
                _sG_,
                _sI_,
                _sK_,
                _sM_,
                function(a1,a2,a3,a4,a5)
                 {return [0,a1,[0,a2,[0,a3,[0,a4,[0,a5,0]]]]]});
      var _sN_=_sL_[2],_sO_=_sL_[1];
      if(! _sN_)
       return map6
               (_sE_,
                _sG_,
                _sI_,
                _sK_,
                _sM_,
                _sO_,
                function(a1,a2,a3,a4,a5,a6)
                 {return [0,a1,[0,a2,[0,a3,[0,a4,[0,a5,[0,a6,0]]]]]]});
      var _sP_=_sN_[1];
      if(! _sN_[2])
       return map7
               (_sE_,
                _sG_,
                _sI_,
                _sK_,
                _sM_,
                _sO_,
                _sP_,
                function(a1,a2,a3,a4,a5,a6,a7)
                 {return [0,a1,[0,a2,[0,a3,[0,a4,[0,a5,[0,a6,[0,a7,0]]]]]]]});
      var
       rest=_sN_[2],
       left=
        map7
         (_sE_,
          _sG_,
          _sI_,
          _sK_,
          _sM_,
          _sO_,
          _sP_,
          function(a1,a2,a3,a4,a5,a6,a7)
           {return [0,a1,[0,a2,[0,a3,[0,a4,[0,a5,[0,a6,[0,a7,0]]]]]]]}),
       right=all(rest);
      return caml_call3
              (map2$0,
               left,
               right,
               function(left,right){return caml_call2(Core[157],left,right)})}
    function of_incr(x){return [0,[1,x],0]}
    var
     Open_on_rhs_intf=[0],
     symbol$2=Applicative_infix[1],
     symbol$3=Applicative_infix[2],
     symbol$4=Applicative_infix[3],
     symbol_map$0=Applicative_infix[4],
     Open_on_rhs=[0],
     Let_syntax=[0,return$1,map$0,both,Open_on_rhs],
     Let_syntax$0=
      [0,return$1,symbol$2,symbol$3,symbol$4,symbol_map$0,Let_syntax];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Value$0);
    var
     Bonsai_Value=
      [0,
       Constant_id,
       return$1,
       map$0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       map2$0,
       all,
       all_unit,
       Applicative_infix,
       Open_on_rhs_intf,
       Let_syntax$0,
       map3,
       map4,
       map5,
       map6,
       map7,
       sexp_of_t$0,
       named,
       cutoff,
       eval$0,
       of_incr];
    caml_register_global(757,Bonsai_Value,"Bonsai__Value");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Var);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$14);
    caml_call1(Expect_test_collector[5][1],cst_src_var_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$15,cst$4);
    function create(x){return caml_call2(Ui_incr[53][2],0,x)}
    function set(t,v)
     {if(caml_call1(Ui_incr[59],0))
       caml_call1(Core[6],cst_Bonsai_Var_mutated_during_);
      return caml_call2(Ui_incr[53][3],t,v)}
    function update(t,f)
     {var old=caml_call1(Ui_incr[53][5],t);return set(t,caml_call1(f,old))}
    function get(t){return caml_call1(Ui_incr[53][5],t)}
    function value(t){return of_incr(caml_call1(Ui_incr[53][4],t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$16);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Var$0);
    var Bonsai_Var=[0,create,update,set,get,value];
    caml_register_global(758,Bonsai_Var,"Bonsai__Var");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Meta);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$17);
    caml_call1(Expect_test_collector[5][1],cst_src_meta_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$18,cst$5);
    var
     unit_type_id=caml_call2(Core_Type_equal[8][3],cst$6,Core[518]),
     nothing_type_id=
      caml_call2(Core_Type_equal[8][3],cst_Nothing_t,Core_Nothing[13]),
     unit=[0,0,Core[515],unit_type_id,Core[518],Core[519]];
    function of_module(M)
     {return function(default$0,name)
       {var
         _sB_=M[2],
         _sC_=caml_call2(Core[257],_ab_,name),
         type_id=caml_call2(Core_Type_equal[8][3],_sC_,_sB_);
        return [0,default$0,M[3],type_id,M[2],M[1]]}}
    function both$0(model1,model2)
     {var
       sexp_of=caml_call2(Core_Tuple[1][2],model1[4],model2[4]),
       of_sexp=caml_call2(Core_Tuple[1][1],model1[5],model2[5]),
       _sy_=caml_call1(Core_Type_equal[8][5],model2[3]),
       _sz_=caml_call1(Core_Type_equal[8][5],model1[3]),
       _sA_=caml_call3(Core[257],_ac_,_sz_,_sy_),
       type_id=caml_call2(Core_Type_equal[8][3],_sA_,sexp_of),
       default$0=[0,model1[1],model2[1]],
       equal=caml_call2(Core_Tuple[1][10],model1[2],model2[2]);
      return [0,default$0,equal,type_id,sexp_of,of_sexp]}
    function map$1(M)
     {return function(model)
       {var sexp_of_model=model[4],model_of_sexp=model[5];
        function sexp_of_map_model(x_001)
         {return caml_call3(Core_Map[118],[0,M[2]],sexp_of_model,x_001)}
        var
         _su_=caml_call1(Core_Type_equal[8][5],model[3]),
         _sv_=caml_call2(Core[257],_ad_,_su_),
         model_map_type_id=
          caml_call2(Core_Type_equal[8][3],_sv_,sexp_of_map_model);
        function _sw_(x_002)
         {return caml_call3(Core_Map[119],[0,M[1],M[3]],model_of_sexp,x_002)}
        var _sx_=caml_call1(Core_Map[71],model[2]);
        return [0,
                caml_call1(Core_Map[4],[0,M[3]]),
                _sx_,
                model_map_type_id,
                sexp_of_map_model,
                _sw_]}}
    function both$1(a,b)
     {var
       _so_=caml_call1(Core_Type_equal[8][6],b),
       _sp_=caml_call1(Core_Type_equal[8][6],a),
       _sq_=caml_call2(Core_Either[14],_sp_,_so_),
       _sr_=caml_call1(Core_Type_equal[8][5],b),
       _ss_=caml_call1(Core_Type_equal[8][5],a),
       _st_=caml_call3(Core[257],_ae_,_ss_,_sr_);
      return caml_call2(Core_Type_equal[8][3],_st_,_sq_)}
    function of_module$0(M)
     {return function(name)
       {var _sm_=M[1],_sn_=caml_call2(Core[257],_af_,name);
        return caml_call2(Core_Type_equal[8][3],_sn_,_sm_)}}
    function map$2(M)
     {return function(action)
       {var sexp_of_action=caml_call1(Core_Type_equal[8][6],action);
        function _sj_(param)
         {var
           arg1_004=param[2],
           arg0_003=param[1],
           res0_005=caml_call1(M[2],arg0_003),
           res1_006=caml_call1(sexp_of_action,arg1_004);
          return [1,[0,res0_005,[0,res1_006,0]]]}
        var
         _sk_=caml_call1(Core_Type_equal[8][5],action),
         _sl_=caml_call2(Core[257],_ag_,_sk_);
        return caml_call2(Core_Type_equal[8][3],_sl_,_sj_)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$19);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Meta$0);
    var
     _ah_=[0,nothing_type_id,both$1,map$2,of_module$0],
     _ai_=[0,unit,both$0,map$1,of_module],
     Bonsai_Meta=[0,unit_type_id,_ai_,_ah_];
    caml_register_global(763,Bonsai_Meta,"Bonsai__Meta");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Hidden);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$20);
    caml_call1(Expect_test_collector[5][1],cst_src_hidden_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$21,cst$7);
    function sexp_of_t$1(sexp_of_key,param)
     {var
       key=param[3],
       type_id=param[2],
       action=param[1],
       sexp_of_action=caml_call1(Core_Type_equal[8][6],type_id),
       _sh_=[0,[1,[0,_aj_,[0,caml_call1(sexp_of_key,key),0]]],0],
       _si_=[0,[1,[0,_ak_,[0,caml_call1(sexp_of_action,action),0]]],_sh_];
      return [1,
              [0,
               caml_call1(Sexplib0_Sexp_conv[7],cst_enum_action_with_key),
               _si_]]}
    function type_id(sexp_of_key)
     {function _sg_(x_001){return sexp_of_t$1(sexp_of_key,x_001)}
      return caml_call2(Core_Type_equal[8][3],cst_enum_action_with_key$0,_sg_)}
    var Action=[0,sexp_of_t$1,type_id];
    function sexp_of_t$2(param)
     {var match=param[2],sexp_of=match[4],model=param[1];
      return caml_call1(sexp_of,model)}
    function equal(param,_sf_)
     {var
       t2=_sf_[2][3],
       m2=_sf_[1],
       match=param[2],
       t1=match[3],
       equal=match[2],
       m1=param[1],
       match$0=caml_call2(Core_Type_equal[8][9],t1,t2);
      return match$0?caml_call2(equal,m1,m2):0}
    function create$0(info)
     {function wrap(m){return [0,m,info,t_of_sexp]}
      function t_of_sexp(sexp){return wrap(caml_call1(info[5],sexp))}
      return wrap}
    function sexp_of_t$3(sexp_of_t)
     {var _se_=[0,sexp_of_t];
      return function(x_002)
       {return caml_call3(Core_Map[118],_se_,sexp_of_t$2,x_002)}}
    function t_of_sexp$0(K)
     {return function(default_models,sexp)
       {var
         k_to_sexp_map=
          caml_call3(Core_Map[119],[0,K[1],K[3]],Core_Sexp[91],sexp);
        function _sa_(param,_sb_)
         {var _sc_=_sb_[1];
          if(737457313 === _sc_)
           {var _sd_=_sb_[2],match=_sd_[2],t_of_sexp=match[3],sexp=_sd_[1];
            return [0,caml_call1(t_of_sexp,sexp)]}
          if(847852583 <= _sc_)return 0;
          var default_model=_sb_[2];
          return [0,default_model]}
        return caml_call3(Core_Map[77],k_to_sexp_map,default_models,_sa_)}}
    var find_exn=Core_Map[39],set$0=Core_Map[32];
    function model_info(K)
     {return function(default$0)
       {function sexp_of(x_004){return caml_call1(sexp_of_t$3(K[2]),x_004)}
        var
         of_sexp=caml_call1(t_of_sexp$0(K),default$0),
         _r__=caml_call2(Core_Type_equal[8][3],cst_poly_model,sexp_of);
        return [0,
                default$0,
                function(a_005,b_006)
                 {function _r$_(a_007,b_008){return equal(a_007,b_008)}
                  return caml_call4(Core_Map[122],[0],_r$_,a_005,b_006)},
                _r__,
                sexp_of,
                of_sexp]}}
    var Multi_model=[0,sexp_of_t$3,t_of_sexp$0,find_exn,set$0,model_info];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$22);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Hidden$0);
    var
     _al_=[0,equal,sexp_of_t$2,create$0],
     Bonsai_Hidden=[0,Action,_al_,Multi_model];
    caml_register_global(765,Bonsai_Hidden,"Bonsai__Hidden");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Path);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$23);
    caml_call1(Expect_test_collector[5][1],cst_src_path_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$24,cst$8);
    function sexp_of_t$4(param)
     {var id=param[2],key=param[1];
      return caml_call2(Core_Type_equal[8][6],id,key)}
    function keyed(compare,id)
     {function _r9_(key){return [0,key,id,compare]}
      return caml_call1(Core[258],_r9_)}
    function sexp_of_t$5(param)
     {if(typeof param === "number")return 0 === param?_am_:_an_;
      if(0 === param[0])
       {var arg0_001=param[1],res0_002=sexp_of_t$4(arg0_001);
        return [1,[0,_ao_,[0,res0_002,0]]]}
      var arg0_003=param[1],res0_004=caml_call1(Core[356],arg0_003);
      return [1,[0,_ap_,[0,res0_004,0]]]}
    function compare$0(a_005,b_006)
     {if(caml_call2(Ppx_compare_lib[1],a_005,b_006))return 0;
      var switch$0=0;
      if(typeof a_005 === "number")
       {if(0 === a_005)
         {if(typeof b_006 === "number" && ! b_006)return 0;return -1}
        if(typeof b_006 !== "number")return -1;
        if(b_006)return 0}
      else
       if(0 === a_005[0])
        {var _r7_=a_005[1];
         if(typeof b_006 !== "number")
          {if(0 !== b_006[0])return -1;
           var
            b_008=b_006[1],
            id2=b_008[2],
            key2=b_008[1],
            compare1=_r7_[3],
            id1=_r7_[2],
            key1=_r7_[1],
            match=caml_call2(Core_Type_equal[8][9],id1,id2);
           if(match)return caml_call2(compare1,key1,key2);
           var
            _r5_=caml_call1(Core_Type_equal[8][2],id2),
            _r6_=caml_call1(Core_Type_equal[8][2],id1);
           return caml_call2(Core_Type_equal[8][11][24],_r6_,_r5_)}
         if(0 !== b_006)switch$0 = 1}
       else
        {var _r8_=a_005[1];
         if(typeof b_006 !== "number")
          {if(0 === b_006[0])return 1;
           var b_010=b_006[1];
           return caml_call2(Core[352],_r8_,b_010)}
         if(0 !== b_006)switch$0 = 1}
      return switch$0?1:1}
    var offset=caml_call1(Core_Char[6],97);
    function lower_nibble_to_alpha(c)
     {var _r4_=caml_call2(Core_Int[24],c,15) + offset | 0;
      return caml_call1(Core_Char[8],_r4_)}
    function char_to_alpha(buf,c)
     {var
       c$0=caml_call1(Core_Char[6],c),
       lower=lower_nibble_to_alpha(c$0),
       upper=lower_nibble_to_alpha(caml_call2(Core_Int[30],c$0,4));
      caml_call2(Base_Buffer[15],buf,upper);
      return caml_call2(Base_Buffer[15],buf,lower)}
    function sexp_of_t$6(t){return caml_call2(Core[421],sexp_of_t$5,t[1])}
    function compare$1(a,b)
     {var _r1_=b[1],_r2_=a[1];
      function _r3_(a_014,b_015){return compare$0(a_014,b_015)}
      return caml_call3(Core[418],_r3_,_r2_,_r1_)}
    var empty=[0,0,caml_call1(Core_Lazy[24],cst_bonsai_path)];
    function append(t,ele)
     {var
       _rO_=
        [246,
         function(_rT_)
          {var
            _rU_=t[2],
            _rV_=caml_obj_tag(_rU_),
            parent=
             250 === _rV_
              ?_rU_[1]
              :246 === _rV_?caml_call1(CamlinternalLazy[2],_rU_):_rU_;
           if(typeof ele === "number")
            var _rW_=0 === ele?cst_x:cst_y;
           else
            if(0 === ele[0])
             {var
               k=ele[1],
               buf=caml_call1(Base_Buffer[2],10),
               _rP_=sexp_of_t$4(k),
               _rQ_=
                function(buf,string)
                 {function _rY_(_rZ_){return char_to_alpha(buf,_rZ_)}
                  return caml_call2(Core_String[6],string,_rY_)};
              caml_call4(Core_Sexp[87],buf,char_to_alpha,_rQ_,_rP_);
              var _rW_=caml_call1(Base_Buffer[3],buf)}
            else
             {var
               i=ele[1],
               buf$0=caml_call1(Base_Buffer[2],4),
               _rR_=function(_r0_){return char_to_alpha(buf$0,_r0_)},
               _rS_=caml_call1(Core_Int[82],i);
              caml_call2(Core_String[6],_rS_,_rR_);
              var _rW_=caml_call1(Base_Buffer[3],buf$0)}
           var _rX_=caml_call2(Core[18],cst$9,_rW_);
           return caml_call2(Core[18],parent,_rX_)}];
      return [0,caml_call2(Core[157],t[1],[0,ele,0]),_rO_]}
    var
     include$3=caml_call1(Core_Comparable[10],[0,compare$1,sexp_of_t$6]),
     _aK_=include$3[21],
     _aq_=include$3[1],
     _ar_=include$3[2],
     _as_=include$3[3],
     _at_=include$3[4],
     _au_=include$3[5],
     _av_=include$3[6],
     _aw_=include$3[7],
     _ax_=include$3[8],
     _ay_=include$3[9],
     _az_=include$3[10],
     _aA_=include$3[11],
     _aB_=include$3[12],
     _aC_=include$3[13],
     _aD_=include$3[14],
     _aE_=include$3[15],
     _aF_=include$3[16],
     _aG_=include$3[17],
     _aH_=include$3[18],
     _aI_=include$3[19],
     _aJ_=include$3[20],
     _aL_=include$3[22];
    function to_unique_identifier_string(t)
     {var _rM_=t[2],_rN_=caml_obj_tag(_rM_);
      return 250 === _rN_
              ?_rM_[1]
              :246 === _rN_?caml_call1(CamlinternalLazy[2],_rM_):_rM_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$25);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Path$0);
    var
     _aM_=[0,[0],keyed,sexp_of_t$5,compare$0],
     Bonsai_Path=
      [0,
       _aM_,
       sexp_of_t$6,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       empty,
       append,
       to_unique_identifier_string];
    caml_register_global(773,Bonsai_Path,"Bonsai__Path");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Lifecycle);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$26);
    caml_call1(Expect_test_collector[5][1],cst_src_lifecycle_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$27,cst$10);
    var empty$0=_aK_[4];
    function has_after_display(t)
     {function _rL_(t){return caml_call1(Core_Option[57],t[3])}
      return caml_call2(Core_Map[88],t,_rL_)}
    function maybe_cons(hd,tl){if(! hd)return tl;var a=hd[1];return [0,a,tl]}
    function diff(old,new$0)
     {function collect(param,_rJ_)
       {var after_display=_rJ_[3];
        return function(_rK_){return maybe_cons(after_display,_rK_)}}
      var after_displays=caml_call3(Core_Map[55],new$0,0,collect);
      function collect$0(param,_rE_)
       {var _rF_=param[2],_rG_=param[1],_rH_=_rE_[2];
        if(typeof _rH_ !== "number")
         {var _rI_=_rH_[1];
          if(-57574468 === _rI_)
           {var match=_rH_[2],on_activate=match[1];
            return [0,maybe_cons(on_activate,_rG_),_rF_]}
          if(847852583 === _rI_)
           {var match$0=_rH_[2],on_deactivate=match$0[2];
            return [0,_rG_,maybe_cons(on_deactivate,_rF_)]}}
        return [0,_rG_,_rF_]}
      var
       data_equal=Core[246],
       match=caml_call5(Core_Map[81],old,new$0,data_equal,_aN_,collect$0),
       deactivations=match[2],
       activations=match[1],
       _rz_=caml_call1(Reversed_list[3],after_displays),
       _rA_=[0,[0,Ui_effect[2],_rz_],0],
       _rB_=caml_call1(Reversed_list[3],activations),
       _rC_=[0,[0,Ui_effect[2],_rB_],_rA_],
       _rD_=caml_call1(Reversed_list[3],deactivations);
      return [0,Ui_effect[2],[0,[0,Ui_effect[2],_rD_],_rC_]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$28);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Lifecycle$0);
    var _aO_=[0,has_after_display,empty$0,diff],Bonsai_Lifecycle=[0,_aO_];
    caml_register_global(777,Bonsai_Lifecycle,"Bonsai__Lifecycle");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Computation);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$29);
    caml_call1(Expect_test_collector[5][1],cst_src_computation_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$30,cst$11);
    function sexp_of_t$7(param)
     {if(typeof param === "number")return _aP_;
      switch(param[0])
       {case 0:
         var value=param[1];return [1,[0,_aQ_,[0,sexp_of_t$0(value),0]]];
        case 1:
         var name=param[3];
         return [1,[0,_aR_,[0,caml_call1(Core[471],name),0]]];
        case 2:
         var name$0=param[2];
         return [1,[0,_aS_,[0,caml_call1(Core[471],name$0),0]]];
        case 3:
         var name$1=param[4];
         return [1,[0,_aT_,[0,caml_call1(Core[471],name$1),0]]];
        case 4:var t=param[1];return [1,[0,_aU_,[0,sexp_of_t$7(t),0]]];
        case 5:
         var
          into=param[3],
          via=param[2],
          from=param[1],
          _q$_=0,
          _ra_=[0,[1,[0,_aW_,[0,sexp_of_t$7(into),0]]],_aV_],
          _rb_=0,
          _rc_=function(param){return _aX_},
          _rd_=
           [0,
            [1,[0,_aY_,[0,caml_call2(Core_Type_equal[8][1],_rc_,via),_rb_]]],
            _ra_];
         return [1,
                 [0,
                  _a0_,
                  [0,[1,[0,[1,[0,_aZ_,[0,sexp_of_t$7(from),0]]],_rd_]],_q$_]]];
        case 6:
         var
          into$0=param[3],
          via$0=param[2],
          from$0=param[1],
          _re_=0,
          _rf_=[0,[1,[0,_a2_,[0,sexp_of_t$7(into$0),0]]],_a1_],
          _rg_=0,
          _rh_=function(param){return _a3_},
          _ri_=
           [0,
            [1,[0,_a4_,[0,caml_call2(Core_Type_equal[8][1],_rh_,via$0),_rg_]]],
            _rf_];
         return [1,
                 [0,
                  _a6_,
                  [0,[1,[0,[1,[0,_a5_,[0,sexp_of_t$7(from$0),0]]],_ri_]],_re_]]];
        case 7:
         var
          into$1=param[3],
          via$1=param[2],
          from$1=param[1],
          _rj_=0,
          _rk_=[0,[1,[0,_a8_,[0,sexp_of_t$7(into$1),0]]],_a7_],
          _rl_=0,
          _rm_=function(param){return _a9_},
          _rn_=
           [0,
            [1,[0,_a__,[0,caml_call2(Core_Type_equal[8][1],_rm_,via$1),_rl_]]],
            _rk_];
         return [1,
                 [0,
                  _ba_,
                  [0,[1,[0,[1,[0,_a$_,[0,sexp_of_t$7(from$1),0]]],_rn_]],_rj_]]];
        case 8:
         var
          inner=param[3],
          value$0=param[2],
          id=param[1],
          _rp_=[0,[1,[0,_bb_,[0,sexp_of_t$7(inner),0]]],0],
          _ro_=0,
          _rq_=[0,[1,[0,_bc_,[0,sexp_of_t$0(value$0),0]]],_rp_],
          _rr_=0,
          _rs_=function(param){return _bd_};
         return [1,
                 [0,
                  _bf_,
                  [0,
                   [1,
                    [0,
                     [1,
                      [0,_be_,[0,caml_call2(Core_Type_equal[8][1],_rs_,id),_rr_]]],
                     _rq_]],
                   _ro_]]];
        case 9:
         var id$0=param[1],_rt_=0,_ru_=function(param){return _bg_};
         return [1,
                 [0,_bh_,[0,caml_call2(Core_Type_equal[8][1],_ru_,id$0),_rt_]]];
        case 10:
         var
          by=param[5],
          map=param[1],
          _rv_=[0,[1,[0,_bi_,[0,sexp_of_t$7(by),0]]],0];
         return [1,
                 [0,
                  _bk_,
                  [0,[1,[0,[1,[0,_bj_,[0,sexp_of_t$0(map),0]]],_rv_]],0]]];
        case 11:
         var map$0=param[1];
         return [1,
                 [0,
                  _bm_,
                  [0,[1,[0,[1,[0,_bl_,[0,sexp_of_t$0(map$0),0]]],0]],0]]];
        case 12:
         var
          arms=param[2],
          match=param[1],
          _rw_=
           function(param)
            {var
              arg1_007=param[2],
              arg0_006=param[1],
              res0_008=caml_call1(Core[356],arg0_006),
              res1_009=sexp_of_packed(arg1_007);
             return [1,[0,res0_008,[0,res1_009,0]]]},
          _rx_=caml_call2(Core_Map[74],0,arms),
          x_010=caml_call2(Core_List[72],_rx_,_rw_),
          _ry_=
           [0,[1,[0,_bn_,[0,caml_call2(Core[421],Core_Sexp[90],x_010),0]]],0];
         return [1,
                 [0,
                  _bp_,
                  [0,[1,[0,[1,[0,_bo_,[0,sexp_of_t$0(match),0]]],_ry_]],0]]];
        case 13:return _bq_;
        case 14:
         var inner$0=param[3];return [1,[0,_br_,[0,sexp_of_t$7(inner$0),0]]];
        case 15:var t$0=param[1];return [1,[0,_bs_,[0,sexp_of_t$7(t$0),0]]];
        default:return _bt_}}
    function sexp_of_packed(param){var t=param[1];return sexp_of_t$7(t)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$31);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Computation$0);
    var Bonsai_Computation=[0,sexp_of_t$7,sexp_of_packed];
    caml_register_global(778,Bonsai_Computation,"Bonsai__Computation");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Node_path);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$32);
    caml_call1(Expect_test_collector[5][1],cst_src_node_path_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$33,cst$12);
    var
     _bu_=[0,[0,cst_depth,Core[344]],0],
     _bv_=[0,[0,cst_choices,caml_call1(Core[410],Core[344])],_bu_],
     _bw_=caml_call1(Bin_prot_Shape[8],_bv_),
     _bx_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_builder),0,_bw_],0],
     _by_=caml_call1(Bin_prot_Shape[4][1],cst_src_node_path_ml_4_0),
     group=caml_call2(Bin_prot_Shape[6],_by_,_bx_),
     _bz_=caml_call1(Bin_prot_Shape[2][1],cst_builder$0);
    caml_call1(caml_call2(Bin_prot_Shape[14],group,_bz_),0);
    function to_string(param)
     {var
       depth=param[2],
       choices=param[1],
       buffer=caml_call1(Base_Buffer[2],10);
      if(choices)
       {var
         choices$0=choices[2],
         choice=choices[1],
         _q7_=caml_call1(Core_Int[82],choice);
        caml_call2(Base_Buffer[16],buffer,_q7_);
        var
         _q8_=
          function(choice)
           {caml_call2(Base_Buffer[15],buffer,45);
            var _q__=caml_call1(Core_Int[82],choice);
            return caml_call2(Base_Buffer[16],buffer,_q__)};
        caml_call2(Core_List[9],choices$0,_q8_)}
      caml_call2(Base_Buffer[15],buffer,95);
      var _q9_=caml_call1(Core_Int[82],depth);
      caml_call2(Base_Buffer[16],buffer,_q9_);
      return caml_call1(Base_Buffer[3],buffer)}
    function choice_point(t,n)
     {return [0,caml_call2(Core[157],t[1],[0,n,0]),0]}
    function descend(t){return [0,t[1],t[2] + 1 | 0]}
    function _bA_(param)
     {function test(t){var s=to_string(t);return caml_call1(Core[32],s)}
      var
       Expect_test_collector$0=
        caml_call1(Expect_test_collector[2],Expect_test_config);
      function _qJ_(param)
       {test(_bB_);
        var
         _q6_=
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$0),
           37,
           888,
           896,
           902];
        return caml_call1(Expect_test_collector$0[1],_q6_)}
      var
       _qK_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$1),
         37,
         888,
         903,
         920],
       _qL_=
        [0,
         [0,
          _bD_,
          _bC_,
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$2),
           37,
           888,
           896,
           902],
          _qK_],
         0],
       _qM_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$4),
         35,
         809,
         813,
         921],
       _qN_=
        caml_call1
         (Expect_test_common_File[4][3],cst_bcf00d2e31fa7902f34efdb04d);
      caml_call9
       (Expect_test_collector$0[3],
        _qN_,
        _qM_,
        cst_src_node_path_ml$3,
        0,
        0,
        _qL_,
        0,
        Inline_test_config,
        _qJ_);
      var
       Expect_test_collector$1=
        caml_call1(Expect_test_collector[2],Expect_test_config);
      function _qO_(param)
       {test(_bE_);
        var
         _q5_=
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$5),
           42,
           994,
           1002,
           1008];
        return caml_call1(Expect_test_collector$1[1],_q5_)}
      var
       _qP_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$6),
         42,
         994,
         1009,
         1017],
       _qQ_=
        [0,
         [0,
          _bG_,
          _bF_,
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$7),
           42,
           994,
           1002,
           1008],
          _qP_],
         0],
       _qR_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$9),
         40,
         930,
         934,
         1018],
       _qS_=
        caml_call1
         (Expect_test_common_File[4][3],cst_bcf00d2e31fa7902f34efdb04d$0);
      caml_call9
       (Expect_test_collector$1[3],
        _qS_,
        _qR_,
        cst_src_node_path_ml$8,
        0,
        0,
        _qQ_,
        0,
        Inline_test_config,
        _qO_);
      var
       Expect_test_collector$2=
        caml_call1(Expect_test_collector[2],Expect_test_config);
      function _qT_(param)
       {test(append_to);
        var
         _q4_=
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$10),
           47,
           1069,
           1077,
           1083];
        return caml_call1(Expect_test_collector$2[1],_q4_)}
      var
       _qU_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$11),
         47,
         1069,
         1084,
         1092],
       _qV_=
        [0,
         [0,
          _bI_,
          _bH_,
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$12),
           47,
           1069,
           1077,
           1083],
          _qU_],
         0],
       _qW_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$14),
         45,
         1027,
         1031,
         1093],
       _qX_=
        caml_call1
         (Expect_test_common_File[4][3],cst_bcf00d2e31fa7902f34efdb04d$1);
      caml_call9
       (Expect_test_collector$2[3],
        _qX_,
        _qW_,
        cst_src_node_path_ml$13,
        0,
        0,
        _qV_,
        0,
        Inline_test_config,
        _qT_);
      var
       Expect_test_collector$3=
        caml_call1(Expect_test_collector[2],Expect_test_config);
      function _qY_(param)
       {test(_bJ_);
        var
         _q3_=
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$15),
           52,
           1170,
           1178,
           1184];
        return caml_call1(Expect_test_collector$3[1],_q3_)}
      var
       _qZ_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$16),
         52,
         1170,
         1185,
         1195],
       _q0_=
        [0,
         [0,
          _bL_,
          _bK_,
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$17),
           52,
           1170,
           1178,
           1184],
          _qZ_],
         0],
       _q1_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_node_path_ml$19),
         50,
         1102,
         1106,
         1196],
       _q2_=
        caml_call1
         (Expect_test_common_File[4][3],cst_bcf00d2e31fa7902f34efdb04d$2);
      caml_call9
       (Expect_test_collector$3[3],
        _q2_,
        _q1_,
        cst_src_node_path_ml$18,
        0,
        0,
        _q0_,
        0,
        Inline_test_config,
        _qY_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$13,
      0,
      cst_src_node_path_ml$20,
      28,
      0,
      513,
      _bA_);
    function finalize(builder){return to_string(builder)}
    var
     _bM_=Core_String[118],
     _bN_=Core_String[117],
     _bP_=Core_String[140],
     _cb_=Core_String[111],
     _cd_=Core_String[109],
     _ce_=Core_String[108],
     _cf_=Core_String[107],
     _cg_=Core_String[116],
     _ch_=Core_String[115],
     _bO_=Core_String[141],
     _bQ_=Core_String[139],
     _bR_=Core_String[138],
     _bS_=Core_String[137],
     _bT_=Core_String[136],
     _bU_=Core_String[135],
     _bV_=Core_String[134],
     _bW_=Core_String[133],
     _bX_=Core_String[132],
     _bY_=Core_String[131],
     _bZ_=Core_String[130],
     _b0_=Core_String[129],
     _b1_=Core_String[128],
     _b2_=Core_String[127],
     _b3_=Core_String[126],
     _b4_=Core_String[125],
     _b5_=Core_String[124],
     _b6_=Core_String[123],
     _b7_=Core_String[122],
     _b8_=Core_String[121],
     _b9_=Core_String[120],
     _b__=Core_String[114],
     _b$_=Core_String[113],
     _ca_=Core_String[112],
     _cc_=Core_String[110];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$34);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Node_path$0);
    var
     Bonsai_Node_path=
      [0,
       _cf_,
       _ce_,
       _cd_,
       _cc_,
       _cb_,
       _ca_,
       _b$_,
       _b__,
       _ch_,
       _cg_,
       _b9_,
       _b8_,
       _b7_,
       _b6_,
       _b5_,
       _b4_,
       _b3_,
       _b2_,
       _b1_,
       _b0_,
       _bZ_,
       _bY_,
       _bX_,
       _bW_,
       _bV_,
       _bU_,
       _bT_,
       _bS_,
       _bR_,
       _bQ_,
       _bP_,
       _bO_,
       _bN_,
       _bM_,
       append_to,
       choice_point,
       descend,
       finalize];
    caml_register_global(784,Bonsai_Node_path,"Bonsai__Node_path");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Transform);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$35);
    caml_call1(Expect_test_collector[5][1],cst_src_transform_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$36,cst$14);
    var Var_from_parent=[0];
    function descend$0(f,var_from_parent,append_to,parent,param)
     {var here=param[2],value=param[1],current_path=descend(append_to);
      function map(n,v)
       {var
         append_to=choice_point(current_path,n),
         child_path=descend(append_to),
         _qE_=[246,function(_qI_){return finalize(child_path)}],
         _qF_=[246,function(_qH_){return finalize(current_path)}],
         _qG_=[0,function(parent,v){return descend$0(f,0,append_to,parent,v)}];
        return caml_call6(f[1],_qG_,var_from_parent,_qF_,_qE_,parent,v)}
      switch(value[0])
       {case 0:var value$0=value;break;
        case 1:var value$0=value;break;
        case 2:var value$0=value;break;
        case 3:
         var b=value[2],a=value[1],_qa_=map(2,b),value$0=[3,map(1,a),_qa_];
         break;
        case 4:var _qb_=value[2],value$0=[4,map(1,value[1]),_qb_];break;
        case 5:var _qc_=value[2],value$0=[5,map(1,value[1]),_qc_];break;
        case 6:
         var
          _qd_=value[3],
          _qe_=map(2,value[2]),
          value$0=[6,map(1,value[1]),_qe_,_qd_];
         break;
        case 7:
         var
          _qf_=value[4],
          _qg_=map(3,value[3]),
          _qh_=map(2,value[2]),
          value$0=[7,map(1,value[1]),_qh_,_qg_,_qf_];
         break;
        case 8:
         var
          _qi_=value[5],
          _qj_=map(4,value[4]),
          _qk_=map(3,value[3]),
          _ql_=map(2,value[2]),
          value$0=[8,map(1,value[1]),_ql_,_qk_,_qj_,_qi_];
         break;
        case 9:
         var
          _qm_=value[6],
          _qn_=map(5,value[5]),
          _qo_=map(4,value[4]),
          _qp_=map(3,value[3]),
          _qq_=map(2,value[2]),
          value$0=[9,map(1,value[1]),_qq_,_qp_,_qo_,_qn_,_qm_];
         break;
        case 10:
         var
          _qr_=value[7],
          _qs_=map(6,value[6]),
          _qt_=map(5,value[5]),
          _qu_=map(4,value[4]),
          _qv_=map(3,value[3]),
          _qw_=map(2,value[2]),
          value$0=[10,map(1,value[1]),_qw_,_qv_,_qu_,_qt_,_qs_,_qr_];
         break;
        default:
         var
          _qx_=value[8],
          _qy_=map(7,value[7]),
          _qz_=map(6,value[6]),
          _qA_=map(5,value[5]),
          _qB_=map(4,value[4]),
          _qC_=map(3,value[3]),
          _qD_=map(2,value[2]),
          value$0=[11,map(1,value[1]),_qD_,_qC_,_qB_,_qA_,_qz_,_qy_,_qx_]}
      return [0,value$0,here]}
    function descend$1(f,for_value,append_to,parent,computation)
     {var current_path=descend(append_to);
      function map(opt,choice,c)
       {if(opt)var sth=opt[1],var_from_parent=sth;else var var_from_parent=0;
        if(choice)
         var choice$0=choice[1],append_to=choice_point(current_path,choice$0);
        else
         var append_to=current_path;
        var
         child_path=descend(append_to),
         _p7_=[246,function(_p$_){return finalize(child_path)}],
         _p8_=[246,function(_p__){return finalize(current_path)}],
         _p9_=
          [0,
           function(parent,c)
            {return descend$1(f,for_value,append_to,parent,c)}];
        return caml_call6(f[1],_p9_,var_from_parent,_p8_,_p7_,parent,c)}
      function map_packed(choice,param)
       {var _p3_=param[5],_p4_=param[4],_p5_=param[3],_p6_=param[2];
        return [0,map(0,choice,param[1]),_p6_,_p5_,_p4_,_p3_]}
      function map_value(opt,choice,v)
       {if(opt)var sth=opt[1],var_from_parent=sth;else var var_from_parent=0;
        if(choice)
         var choice$0=choice[1],append_to=choice_point(current_path,choice$0);
        else
         var append_to=current_path;
        var
         parent_path=[246,function(_p2_){return finalize(current_path)}],
         current_path$0=descend(append_to),
         _pZ_=[246,function(_p1_){return finalize(current_path$0)}],
         _p0_=
          [0,
           function(parent,v)
            {return descend$0(for_value,0,append_to,parent,v)}];
        return caml_call6
                (for_value[1],_p0_,var_from_parent,parent_path,_pZ_,parent,v)}
      if(typeof computation === "number")return computation;
      switch(computation[0])
       {case 0:var value=computation[1];return [0,map_value(0,0,value)];
        case 1:
         var _pt_=computation[4],_pu_=computation[3],_pv_=computation[2];
         return [1,map_value(0,0,computation[1]),_pv_,_pu_,_pt_];
        case 2:return computation;
        case 3:
         var _pw_=computation[4],_px_=computation[3],_py_=computation[2];
         return [3,map_value(0,0,computation[1]),_py_,_px_,_pw_];
        case 4:
         var _pz_=computation[2];return [4,map(0,0,computation[1]),_pz_];
        case 5:
         var
          _pA_=computation[1],
          from=
           map
            ([0,[0,caml_call1(Core_Type_equal[8][2],computation[2])]],
             _ci_,
             _pA_),
          into=map(0,_cj_,computation[3]);
         return [5,from,computation[2],into,computation[4]];
        case 6:
         var
          _pB_=computation[1],
          from$0=
           map
            ([0,[0,caml_call1(Core_Type_equal[8][2],computation[2])]],
             _ck_,
             _pB_),
          into$0=map(0,_cl_,computation[3]);
         return [6,from$0,computation[2],into$0,computation[4]];
        case 7:
         var
          _pC_=computation[1],
          from$1=
           map
            ([0,[0,caml_call1(Core_Type_equal[8][2],computation[2])]],
             _cm_,
             _pC_),
          into$1=map(0,_cn_,computation[3]);
         return [7,from$1,computation[2],into$1,computation[4]];
        case 8:
         var
          _pD_=computation[2],
          value$0=
           map_value
            ([0,[0,caml_call1(Core_Type_equal[8][2],computation[1])]],
             _co_,
             _pD_),
          inner=map(0,_cp_,computation[3]);
         return [8,computation[1],value$0,inner];
        case 9:return computation;
        case 10:
         var
          _pE_=computation[9],
          _pF_=computation[8],
          _pG_=computation[7],
          _pH_=computation[6],
          _pI_=computation[5],
          _pJ_=caml_call1(Core_Type_equal[8][2],computation[4]),
          _pK_=
           map
            ([0,[1,caml_call1(Core_Type_equal[8][2],computation[3]),_pJ_]],
             _cq_,
             _pI_),
          _pL_=computation[4],
          _pM_=computation[3],
          _pN_=computation[2];
         return [10,
                 map_value(0,_cr_,computation[1]),
                 _pN_,
                 _pM_,
                 _pL_,
                 _pK_,
                 _pH_,
                 _pG_,
                 _pF_,
                 _pE_];
        case 11:
         var
          _pO_=computation[5],
          _pP_=computation[4],
          _pQ_=computation[3],
          _pR_=computation[2];
         return [11,map_value(0,0,computation[1]),_pR_,_pQ_,_pP_,_pO_];
        case 12:
         var
          arms=computation[2],
          match=computation[1],
          index=[0,1],
          _pS_=function(c){index[1]++;return map_packed([0,index[1]],c)},
          _pT_=caml_call2(Core_Map[51],arms,_pS_);
         return [12,map_value(0,_cs_,match),_pT_];
        case 13:
         var t=computation[1],_pU_=function(eta){return map_packed(0,eta)};
         return [13,caml_call2(Core_Lazy[25],t,_pU_)];
        case 14:
         var
          _pV_=computation[4],
          _pW_=computation[3],
          _pX_=caml_call1(Core_Type_equal[8][2],computation[2]),
          _pY_=
           map
            ([0,[1,caml_call1(Core_Type_equal[8][2],computation[1]),_pX_]],
             0,
             _pW_);
         return [14,computation[1],computation[2],_pY_,_pV_];
        case 15:var t$0=computation[1];return [15,map(0,0,t$0)];
        default:var t$1=computation[1];return [16,map_value(0,0,t$1)]}}
    function map$3(computation_mapper,value_mapper,init,computation)
     {var
       current_path=descend(append_to),
       _pn_=[246,function(_ps_){return finalize(current_path)}],
       _po_=[246,function(_pr_){return finalize(append_to)}],
       _pp_=0,
       _pq_=
        [0,
         function(parent,c)
          {return descend$1
                   (computation_mapper,value_mapper,append_to,parent,c)}];
      return caml_call6
              (computation_mapper[1],_pq_,_pp_,_po_,_pn_,init,computation)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$37);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Transform$0);
    var Bonsai_Transform=[0,Var_from_parent,[0],[0],map$3];
    caml_register_global(785,Bonsai_Transform,"Bonsai__Transform");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Flatten_values);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$38);
    caml_call1(Expect_test_collector[5][1],cst_src_flatten_values_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$39,cst$15);
    function value_map(recurse,param,_oU_,_oT_,_oS_,_oR_)
     {var here=_oR_[2],value=_oR_[1],switch$0=0;
      switch(value[0])
       {case 3:
         var _oV_=value[2][1];
         if(3 === _oV_[0])
          {var _oW_=_oV_[1],_oX_=value[1],_oY_=_oV_[2][1];
           if(3 === _oY_[0])
            {var _o0_=_oY_[1],_o1_=_oY_[2][1];
             if(3 === _o1_[0])
              {var _o3_=_o1_[1],_o4_=_o1_[2][1];
               if(3 === _o4_[0])
                {var _o6_=_o4_[1],_o7_=_o4_[2][1];
                 if(3 === _o7_[0])
                  var
                   t7=_o7_[2],
                   t6$0=_o7_[1],
                   _o8_=
                    [11,
                     _oX_,
                     _oW_,
                     _o0_,
                     _o3_,
                     _o6_,
                     t6$0,
                     t7,
                     function(t1,t2,t3,t4,t5,t6,t7)
                      {return [0,t1,[0,t2,[0,t3,[0,t4,[0,t5,[0,t6,t7]]]]]]}];
                 else
                  var
                   t6=_o4_[2],
                   _o8_=
                    [10,
                     _oX_,
                     _oW_,
                     _o0_,
                     _o3_,
                     _o6_,
                     t6,
                     function(t1,t2,t3,t4,t5,t6)
                      {return [0,t1,[0,t2,[0,t3,[0,t4,[0,t5,t6]]]]]}];
                 var _o5_=_o8_}
               else
                var
                 t5=_o1_[2],
                 _o5_=
                  [9,
                   _oX_,
                   _oW_,
                   _o0_,
                   _o3_,
                   t5,
                   function(t1,t2,t3,t4,t5)
                    {return [0,t1,[0,t2,[0,t3,[0,t4,t5]]]]}];
               var _o2_=_o5_}
             else
              var
               t4=_oY_[2],
               _o2_=
                [8,
                 _oX_,
                 _oW_,
                 _o0_,
                 t4,
                 function(t1,t2,t3,t4){return [0,t1,[0,t2,[0,t3,t4]]]}];
             var _oZ_=_o2_}
           else
            var
             t3=_oV_[2],
             _oZ_=[7,_oX_,_oW_,t3,function(t1,t2,t3){return [0,t1,[0,t2,t3]]}];
           var value$0=_oZ_;
           switch$0 = 1}
         break;
        case 5:
         var _o9_=value[1][1];
         if(3 === _o9_[0])
          {var _o__=_o9_[1],_o$_=_o9_[2][1];
           if(3 === _o$_[0])
            {var _pb_=_o$_[1],_pc_=_o$_[2][1];
             if(3 === _pc_[0])
              {var _pe_=_pc_[1],_pf_=_pc_[2][1];
               if(3 === _pf_[0])
                {var _ph_=_pf_[1],_pi_=_pf_[2][1];
                 if(3 === _pi_[0])
                  {var _pk_=_pi_[1],_pl_=_pi_[2][1];
                   if(3 === _pl_[0])
                    var
                     f$4=value[2],
                     t7$0=_pl_[2],
                     t6$2=_pl_[1],
                     _pm_=
                      [11,
                       _o__,
                       _pb_,
                       _pe_,
                       _ph_,
                       _pk_,
                       t6$2,
                       t7$0,
                       function(t1,t2,t3,t4,t5,t6,t7)
                        {return caml_call1
                                 (f$4,[0,t1,[0,t2,[0,t3,[0,t4,[0,t5,[0,t6,t7]]]]]])}];
                   else
                    var
                     f$3=value[2],
                     t6$1=_pi_[2],
                     _pm_=
                      [10,
                       _o__,
                       _pb_,
                       _pe_,
                       _ph_,
                       _pk_,
                       t6$1,
                       function(t1,t2,t3,t4,t5,t6)
                        {return caml_call1
                                 (f$3,[0,t1,[0,t2,[0,t3,[0,t4,[0,t5,t6]]]]])}];
                   var _pj_=_pm_}
                 else
                  var
                   f$2=value[2],
                   t5$0=_pf_[2],
                   _pj_=
                    [9,
                     _o__,
                     _pb_,
                     _pe_,
                     _ph_,
                     t5$0,
                     function(t1,t2,t3,t4,t5)
                      {return caml_call1(f$2,[0,t1,[0,t2,[0,t3,[0,t4,t5]]]])}];
                 var _pg_=_pj_}
               else
                var
                 f$1=value[2],
                 t4$0=_pc_[2],
                 _pg_=
                  [8,
                   _o__,
                   _pb_,
                   _pe_,
                   t4$0,
                   function(t1,t2,t3,t4)
                    {return caml_call1(f$1,[0,t1,[0,t2,[0,t3,t4]]])}];
               var _pd_=_pg_}
             else
              var
               f$0=value[2],
               t3$0=_o$_[2],
               _pd_=
                [7,
                 _o__,
                 _pb_,
                 t3$0,
                 function(t1,t2,t3){return caml_call1(f$0,[0,t1,[0,t2,t3]])}];
             var _pa_=_pd_}
           else
            var
             f=value[2],
             t2=_o9_[2],
             _pa_=[6,_o__,t2,function(t1,t2){return caml_call1(f,[0,t1,t2])}];
           var value$0=_pa_;
           switch$0 = 1}
         break
        }
      if(! switch$0)var value$0=value;
      return caml_call2(recurse[1],0,[0,value$0,here])}
    function computation_map(recurse,param,_oQ_,_oP_,_oO_,computation)
     {return caml_call2(recurse[1],0,computation)}
    function flatten_values(t)
     {return map$3([0,computation_map],[0,value_map],0,t)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$40);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Flatten_values$0);
    var Bonsai_Flatten_values=[0,flatten_values];
    caml_register_global(786,Bonsai_Flatten_values,"Bonsai__Flatten_values");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_To_dot);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$41);
    caml_call1(Expect_test_collector[5][1],cst_src_to_dot_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$42,cst$16);
    var
     of_string=Core_String[117],
     to_string$0=Core_String[118],
     _ct_=Core_String[57];
    function basic_shape(opt,tooltip,shape,label,color,param)
     {if(opt)var sth=opt[1],other=sth;else var other=cst$21;
      if(tooltip)
       var
        tooltip$0=tooltip[1],
        tooltip$1=
         caml_call2
          (Stdlib_String[6],cst$17,[0,cst_tooltip,[0,tooltip$0,_cu_]]);
      else
       var tooltip$1=cst$20;
      return caml_call2
              (Stdlib_String[6],
               cst$19,
               [0,
                cst_style_filled,
                [0,
                 tooltip$1,
                 [0,
                  cst_shape,
                  [0,
                   shape,
                   [0,
                    cst_label,
                    [0,
                     label,
                     [0,cst_fillcolor$0,[0,color,[0,cst$18,[0,other,_cv_]]]]]]]]]])}
    function register(state,kind$2,name$0)
     {function _oK_(c)
       {var _oN_=caml_call1(Core_Char[17],c);
        return _oN_?_oN_:caml_call2(Core_Char[49],c,95)}
      if(! caml_call2(Core_String[11],name$0,_oK_))
       throw [0,Assert_failure,_cz_];
      var
       _oL_=[0,name$0,[0,cst$25,[0,caml_call1(Core_Int[82],state[1]),0]]],
       s=caml_call2(Stdlib_String[6],cst$26,_oL_);
      caml_call2(Base_Buffer[16],state[4],s);
      caml_call2(Base_Buffer[15],state[4],32);
      if(typeof kind$2 === "number")
       var _oM_=basic_shape(_cw_,0,cst_circle,cst$22,cst_000000,0);
      else
       switch(kind$2[0])
        {case 0:
          var
           kind=kind$2[1],
           _oM_=basic_shape(0,0,cst_Mrecord,kind,cst_86E3CE,0);
          break;
         case 1:
          var
           name=kind$2[2],
           kind$0=kind$2[1],
           _oM_=
            basic_shape
             (0,
              [0,name],
              cst_Mrecord$0,
              caml_call2(Stdlib_String[6],cst$24,[0,cst$23,[0,kind$0,_cx_]]),
              cst_D0E6A5,
              0);
          break;
         case 2:
          var
           here=kind$2[2],
           kind$1=kind$2[1],
           tooltip=
            caml_call2(Core_Option[29],here,Core_Source_code_position[2]),
           _oM_=basic_shape(0,tooltip,cst_oval,kind$1,color,0);
          break;
         default:
          var
           here$0=kind$2[1],
           tooltip$0=
            caml_call2(Core_Option[29],here$0,Core_Source_code_position[2]),
           _oM_=basic_shape(_cy_,tooltip$0,cst_oval$0,cst_subst,cst_FFFFFF,0)}
      caml_call2(Base_Buffer[16],state[4],_oM_);
      caml_call2(Base_Buffer[15],state[4],10);
      state[1] = state[1] + 1 | 0;
      return caml_call1(of_string,s)}
    function arrow(state,from,to)
     {var
       arrow_string=caml_call2(_ct_,to,cst_named$0)?cst_dir_none:cst$27,
       _oI_=caml_call1(to_string$0,to),
       _oJ_=caml_call1(to_string$0,from);
      return caml_call5(Core[229],state[4],_cA_,_oJ_,_oI_,arrow_string)}
    function arrow_from_many(state,to,l)
     {function _oH_(from){return arrow(state,from,to)}
      caml_call2(Core_List[9],l,_oH_);
      return to}
    function register_named(state,shape,name)
     {var name$0=caml_call1(Core_Type_equal[8][2],name);
      function _oG_(param){return register(state,shape,cst_named$1)}
      return caml_call3(Core_Hashtbl[51],state[2],name$0,_oG_)}
    function follow_value(state,param)
     {var here=param[2],value=param[1];
      function register$0(s){return register(state,[2,s,here],s)}
      var shape=[2,cst_const$0,here];
      switch(value[0])
       {case 0:
         var
          id=value[2],
          _oc_=function(param){return register(state,shape,cst_const)};
         return caml_call3(Core_Hashtbl[51],state[3],id,_oc_);
        case 1:return register$0(cst_incr$0);
        case 2:var name=value[1];return register_named(state,[3,here],name);
        case 3:
         var
          t2=value[2],
          t1=value[1],
          _od_=[0,follow_value(state,t2),0],
          _oe_=[0,follow_value(state,t1),_od_];
         return arrow_from_many(state,register$0(cst_both$0),_oe_);
        case 4:
         var
          t=value[1],
          me=register$0(cst_cutoff$0),
          them=follow_value(state,t);
         arrow(state,them,me);
         return me;
        case 5:
         var
          t$0=value[1],
          me$0=register$0(cst_map$0),
          them$0=follow_value(state,t$0);
         arrow(state,them$0,me$0);
         return me$0;
        case 6:
         var
          t2$0=value[2],
          t1$0=value[1],
          _of_=[0,follow_value(state,t2$0),0],
          _og_=[0,follow_value(state,t1$0),_of_];
         return arrow_from_many(state,register$0(cst_map2$0),_og_);
        case 7:
         var
          t3=value[3],
          t2$1=value[2],
          t1$1=value[1],
          _oh_=[0,follow_value(state,t3),0],
          _oi_=[0,follow_value(state,t2$1),_oh_],
          _oj_=[0,follow_value(state,t1$1),_oi_];
         return arrow_from_many(state,register$0(cst_map3$0),_oj_);
        case 8:
         var
          t4=value[4],
          t3$0=value[3],
          t2$2=value[2],
          t1$2=value[1],
          _ok_=[0,follow_value(state,t4),0],
          _ol_=[0,follow_value(state,t3$0),_ok_],
          _om_=[0,follow_value(state,t2$2),_ol_],
          _on_=[0,follow_value(state,t1$2),_om_];
         return arrow_from_many(state,register$0(cst_map4$0),_on_);
        case 9:
         var
          t5=value[5],
          t4$0=value[4],
          t3$1=value[3],
          t2$3=value[2],
          t1$3=value[1],
          _oo_=[0,follow_value(state,t5),0],
          _op_=[0,follow_value(state,t4$0),_oo_],
          _oq_=[0,follow_value(state,t3$1),_op_],
          _or_=[0,follow_value(state,t2$3),_oq_],
          _os_=[0,follow_value(state,t1$3),_or_];
         return arrow_from_many(state,register$0(cst_map5$0),_os_);
        case 10:
         var
          t6=value[6],
          t5$0=value[5],
          t4$1=value[4],
          t3$2=value[3],
          t2$4=value[2],
          t1$4=value[1],
          _ot_=[0,follow_value(state,t6),0],
          _ou_=[0,follow_value(state,t5$0),_ot_],
          _ov_=[0,follow_value(state,t4$1),_ou_],
          _ow_=[0,follow_value(state,t3$2),_ov_],
          _ox_=[0,follow_value(state,t2$4),_ow_],
          _oy_=[0,follow_value(state,t1$4),_ox_];
         return arrow_from_many(state,register$0(cst_map6$0),_oy_);
        default:
         var
          t7=value[7],
          t6$0=value[6],
          t5$1=value[5],
          t4$2=value[4],
          t3$3=value[3],
          t2$5=value[2],
          t1$5=value[1],
          _oz_=[0,follow_value(state,t7),0],
          _oA_=[0,follow_value(state,t6$0),_oz_],
          _oB_=[0,follow_value(state,t5$1),_oA_],
          _oC_=[0,follow_value(state,t4$2),_oB_],
          _oD_=[0,follow_value(state,t3$3),_oC_],
          _oE_=[0,follow_value(state,t2$5),_oD_],
          _oF_=[0,follow_value(state,t1$5),_oE_];
         return arrow_from_many(state,register$0(cst_map7$0),_oF_)}}
    function follow_computation(state,computation)
     {var computation$0=computation;
      for(;;)
       {var
         register_computation=
          function(kind){return register(state,[0,kind],kind)};
        if(typeof computation$0 === "number")
         return register_computation(cst_path$2);
        switch(computation$0[0])
         {case 0:
           var value=computation$0[1],me=register_computation(cst_read);
           arrow(state,follow_value(state,value),me);
           return me;
          case 1:
           var
            kind=computation$0[4],
            name=computation$0[3],
            input=computation$0[1],
            me$0=register(state,[1,kind,name],cst_leaf),
            _nM_=input[1];
           switch(_nM_[0])
            {case 0:return me$0;
             case 6:
              var t2=_nM_[2],t1=_nM_[1],_nN_=[0,follow_value(state,t2),0];
              return arrow_from_many
                      (state,me$0,[0,follow_value(state,t1),_nN_]);
             case 7:
              var
               t3=_nM_[3],
               t2$0=_nM_[2],
               t1$0=_nM_[1],
               _nO_=[0,follow_value(state,t3),0],
               _nP_=[0,follow_value(state,t2$0),_nO_];
              return arrow_from_many
                      (state,me$0,[0,follow_value(state,t1$0),_nP_]);
             case 8:
              var
               t4=_nM_[4],
               t3$0=_nM_[3],
               t2$1=_nM_[2],
               t1$1=_nM_[1],
               _nQ_=[0,follow_value(state,t4),0],
               _nR_=[0,follow_value(state,t3$0),_nQ_],
               _nS_=[0,follow_value(state,t2$1),_nR_];
              return arrow_from_many
                      (state,me$0,[0,follow_value(state,t1$1),_nS_]);
             case 9:
              var
               t5=_nM_[5],
               t4$0=_nM_[4],
               t3$1=_nM_[3],
               t2$2=_nM_[2],
               t1$2=_nM_[1],
               _nT_=[0,follow_value(state,t5),0],
               _nU_=[0,follow_value(state,t4$0),_nT_],
               _nV_=[0,follow_value(state,t3$1),_nU_],
               _nW_=[0,follow_value(state,t2$2),_nV_];
              return arrow_from_many
                      (state,me$0,[0,follow_value(state,t1$2),_nW_]);
             case 10:
              var
               t6=_nM_[6],
               t5$0=_nM_[5],
               t4$1=_nM_[4],
               t3$2=_nM_[3],
               t2$3=_nM_[2],
               t1$3=_nM_[1],
               _nX_=[0,follow_value(state,t6),0],
               _nY_=[0,follow_value(state,t5$0),_nX_],
               _nZ_=[0,follow_value(state,t4$1),_nY_],
               _n0_=[0,follow_value(state,t3$2),_nZ_],
               _n1_=[0,follow_value(state,t2$3),_n0_];
              return arrow_from_many
                      (state,me$0,[0,follow_value(state,t1$3),_n1_]);
             case 11:
              var
               t7=_nM_[7],
               t6$0=_nM_[6],
               t5$1=_nM_[5],
               t4$2=_nM_[4],
               t3$3=_nM_[3],
               t2$4=_nM_[2],
               t1$4=_nM_[1],
               _n2_=[0,follow_value(state,t7),0],
               _n3_=[0,follow_value(state,t6$0),_n2_],
               _n4_=[0,follow_value(state,t5$1),_n3_],
               _n5_=[0,follow_value(state,t4$2),_n4_],
               _n6_=[0,follow_value(state,t3$3),_n5_],
               _n7_=[0,follow_value(state,t2$4),_n6_];
              return arrow_from_many
                      (state,me$0,[0,follow_value(state,t1$4),_n7_]);
             default:arrow(state,follow_value(state,input),me$0);return me$0}
          case 2:
           var kind$0=computation$0[3],name$0=computation$0[2];
           return register(state,[1,kind$0,name$0],cst_leaf0);
          case 3:return register_computation(cst_leaf_incr);
          case 4:
           var t=computation$0[1],me$1=register_computation(cst_model_cutoff);
           arrow(state,follow_computation(state,t),me$1);
           return me$1;
          case 5:
           var _n8_=computation$0[1];
           if(typeof _n8_ !== "number" && 0 === _n8_[0])
            {var
              here$0=computation$0[4],
              into$0=computation$0[3],
              via$0=computation$0[2],
              from=_n8_[1],
              _n__=register_named(state,[3,here$0],via$0);
             arrow(state,follow_value(state,from),_n__);
             var computation$0=into$0;
             continue}
           var
            here=computation$0[4],
            into=computation$0[3],
            via=computation$0[2],
            _n9_=register_named(state,[3,here],via);
           arrow(state,follow_computation(state,_n8_),_n9_);
           var computation$0=into;
           continue;
          case 6:
           var
            here$1=computation$0[4],
            into$1=computation$0[3],
            via$1=computation$0[2],
            from$0=computation$0[1],
            _n$_=register_named(state,[3,here$1],via$1);
           arrow(state,follow_computation(state,from$0),_n$_);
           var computation$0=into$1;
           continue;
          case 7:
           var
            here$2=computation$0[4],
            into$2=computation$0[3],
            via$2=computation$0[2],
            from$1=computation$0[1],
            _oa_=register_named(state,[3,here$2],via$2);
           arrow(state,follow_computation(state,from$1),_oa_);
           var computation$0=into$2;
           continue;
          case 8:
           var
            inner=computation$0[3],
            value$0=computation$0[2],
            id=computation$0[1],
            me$2=register_computation(cst_dyn_set);
           arrow(state,follow_value(state,value$0),me$2);
           arrow(state,me$2,register_named(state,0,id));
           var computation$0=inner;
           continue;
          case 9:
           var id$0=computation$0[1],me$3=register_computation(cst_fetch);
           arrow(state,register_named(state,0,id$0),me$3);
           return me$3;
          case 10:
           var
            by=computation$0[5],
            map=computation$0[1],
            me$4=register_computation(cst_assoc);
           arrow(state,follow_computation(state,by),me$4);
           arrow(state,follow_value(state,map),me$4);
           return me$4;
          case 11:
           var
            map$0=computation$0[1],
            me$5=register_computation(cst_assoc_simpl);
           arrow(state,follow_value(state,map$0),me$5);
           return me$5;
          case 12:
           var
            arms=computation$0[2],
            match=computation$0[1],
            me$6=register_computation(cst_switch);
           arrow(state,follow_value(state,match),me$6);
           var
            _ob_=
             function(param)
              {var t=param[1];
               return arrow(state,follow_computation(state,t),me$6)};
           caml_call2(Core_Map[44],arms,_ob_);
           return me$6;
          case 13:return register_computation(cst_lazy);
          case 14:
           var inner$0=computation$0[3],me$7=register_computation(cst_wrap);
           arrow(state,follow_computation(state,inner$0),me$7);
           return me$7;
          case 15:
           var
            t$0=computation$0[1],
            me$8=register_computation(cst_with_model_resetter);
           arrow(state,follow_computation(state,t$0),me$8);
           return me$8;
          default:
           var v=computation$0[1],me$9=register_computation(cst_life_cycle);
           arrow(state,follow_value(state,v),me$9);
           return me$9}}}
    function to_dot(param)
     {var
       t=param[1],
       _nI_=caml_call1(Base_Buffer[2],2014),
       _nJ_=caml_call3(Constant_id[38][4],0,0,0),
       _nK_=Core_Type_equal[8][11],
       state=
        [0,
         0,
         caml_call3(Core_Hashtbl[4],0,0,[0,_nK_[24],_nK_[2],_nK_[26]]),
         _nJ_,
         _nI_],
       t$0=flatten_values(t);
      follow_computation(state,t$0);
      var _nL_=caml_call1(Base_Buffer[3],state[4]);
      return caml_call2(Core[257],_cB_,_nL_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$43);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_To_dot$0);
    var Bonsai_To_dot=[0,to_dot];
    caml_register_global(790,Bonsai_To_dot,"Bonsai__To_dot");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Apply_action);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$44);
    caml_call1(Expect_test_collector[5][1],cst_src_apply_action_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$45,cst$28);
    function iter_incremental(t,f)
     {switch(t[0])
       {case 0:
         var incr=t[1];return caml_call1(f,caml_call1(Ui_incr[75],incr));
        case 1:return 0;
        default:
         var incr$0=t[1];return caml_call1(f,caml_call1(Ui_incr[75],incr$0))}}
    function incremental(i){return [0,i]}
    var impossible=[1,function(_nH_){return _nH_}];
    function join(t1,t2,schedule_event,param,action)
     {var m2=param[2],m1=param[1];
      if(0 === action[0])
       {var action1=action[1];
        return [0,caml_call3(t1,schedule_event,m1,action1),m2]}
      var action2=action[1];
      return [0,m1,caml_call3(t2,schedule_event,m2,action2)]}
    function join_witness(t1,t2,action)
     {if(0 === action[0]){var action1=action[1];return caml_call1(t1,action1)}
      var action2=action[1];
      return caml_call1(t2,action2)}
    function to_incremental(param)
     {switch(param[0])
       {case 0:var i=param[1];return i;
        case 1:
         var
          witness=param[1],
          _nD_=
           function(param,model,action)
            {var _nF_=caml_call1(witness,action);
             return caml_call1(Core_Nothing[3],_nF_)};
         return caml_call1(Ui_incr[11],_nD_);
        default:
         var
          map_action=param[5],
          unmap_model=param[4],
          map_model=param[3],
          witness$0=param[2],
          incr=param[1],
          _nE_=
           function(incr,schedule_event,model,action)
            {var match=caml_call1(map_action,action);
             if(0 === match[0])
              {var
                a=match[1],
                match$0=caml_call1(map_model,model),
                m2=match$0[2],
                m1=match$0[1];
               return caml_call1
                       (unmap_model,[0,caml_call3(incr,schedule_event,m1,a),m2])}
             var n=match[1],_nG_=caml_call1(witness$0,n);
             return caml_call1(Core_Nothing[3],_nG_)};
         return caml_call2(Ui_incr[78][4][6],incr,_nE_)}}
    function map$4(t,f)
     {var t$0=t;
      for(;;)
       switch(t$0[0])
        {case 0:var i=t$0[1];return [0,caml_call2(Ui_incr[12],i,f)];
         case 1:
          var
           witness=t$0[1],
           _nB_=
            function(witness)
              {return function(param,m,a)
                {var _nC_=caml_call1(witness,a);
                 return caml_call1(Core_Nothing[3],_nC_)}}
             (witness),
           t$1=[0,caml_call1(Ui_incr[11],_nB_)],
           t$0=t$1;
          continue;
         default:var t$2=[0,to_incremental(t$0)],t$0=t$2;continue}}
    function merge(t1,t2)
     {switch(t1[0])
       {case 0:
         var _nf_=t1[1];
         switch(t2[0])
          {case 0:
            var t2$0=t2[1];return [0,caml_call3(Ui_incr[14],_nf_,t2$0,join)];
           case 1:
            var
             witness=t2[1],
             _ng_=function(_nu_){return _nu_},
             _nh_=function(_nt_){return _nt_};
            return [2,_nf_,witness,function(_ns_){return _ns_},_nh_,_ng_];
           default:
            var
             map_action=t2[5],
             unmap_model=t2[4],
             map_model=t2[3],
             witness$0=t2[2],
             incr=t2[1],
             map_model$0=
              function(param)
               {var
                 conjoined=param[2],
                 new$0=param[1],
                 match=caml_call1(map_model,conjoined),
                 right=match[2],
                 left=match[1];
                return [0,[0,new$0,left],right]},
             unmap_model$0=
              function(param)
               {var
                 right=param[2],
                 match=param[1],
                 left=match[2],
                 new$0=match[1],
                 conjoined=caml_call1(unmap_model,[0,left,right]);
                return [0,new$0,conjoined]},
             map_action$0=
              function(param)
               {if(0 === param[0]){var new$0=param[1];return [0,[0,new$0]]}
                var conjoined=param[1],match=caml_call1(map_action,conjoined);
                if(0 === match[0]){var a=match[1];return [0,[1,a]]}
                var b=match[1];
                return [1,b]};
            return [2,
                    caml_call3(Ui_incr[14],_nf_,incr,join),
                    witness$0,
                    map_model$0,
                    unmap_model$0,
                    map_action$0]}
        case 1:
         var _ni_=t1[1];
         switch(t2[0])
          {case 0:
            var t2$1=t2[1];
            return [2,
                    t2$1,
                    _ni_,
                    Core_Tuple[1][15],
                    Core_Tuple[1][15],
                    Core_Either[17]];
           case 1:
            var b=t2[1];
            return [1,
                    function(param)
                     {if(0 === param[0])
                       {var x=param[1];return caml_call1(_ni_,x)}
                      var y=param[1];
                      return caml_call1(b,y)}];
           default:
            var
             map_action$1=t2[5],
             unmap_model$1=t2[4],
             map_model$1=t2[3],
             witness$1=t2[2],
             incr$0=t2[1],
             map_model$2=
              function(param)
               {var
                 conjoined=param[2],
                 new$0=param[1],
                 match=caml_call1(map_model$1,conjoined),
                 right=match[2],
                 left=match[1];
                return [0,left,[0,new$0,right]]},
             unmap_model$2=
              function(param)
               {var
                 match=param[2],
                 right=match[2],
                 new$0=match[1],
                 left=param[1],
                 conjoined=caml_call1(unmap_model$1,[0,left,right]);
                return [0,new$0,conjoined]},
             map_action$2=
              function(param)
               {if(0 === param[0]){var new$0=param[1];return [1,[0,new$0]]}
                var
                 conjoined=param[1],
                 match=caml_call1(map_action$1,conjoined);
                if(0 === match[0]){var a=match[1];return [0,a]}
                var b=match[1];
                return [1,[1,b]]};
            return [2,
                    incr$0,
                    function(_nr_){return join_witness(_ni_,witness$1,_nr_)},
                    map_model$2,
                    unmap_model$2,
                    map_action$2]}
        default:
         if(2 === t2[0])
          {var
            map_model$5=
             function(param)
              {var
                b=param[2],
                a=param[1],
                match=caml_call1(t2[3],b),
                _nz_=match[2],
                _nA_=match[1],
                match$0=caml_call1(t1[3],a),
                i2=match$0[2],
                i1=match$0[1];
               return [0,[0,i1,_nA_],[0,i2,_nz_]]},
            unmap_model$5=
             function(param)
              {var
                _nx_=param[2],
                s2=_nx_[2],
                s1=_nx_[1],
                match=param[1],
                i2=match[2],
                i1=match[1],
                _ny_=caml_call1(t2[4],[0,i2,s2]);
               return [0,caml_call1(t1[4],[0,i1,s1]),_ny_]},
            map_action$5=
             function(param)
              {if(0 === param[0])
                {var a=param[1],match=caml_call1(t1[5],a);
                 if(0 === match[0]){var a$0=match[1];return [0,[0,a$0]]}
                 var a$1=match[1];
                 return [1,[0,a$1]]}
               var a$2=param[1],match$0=caml_call1(t2[5],a$2);
               if(0 === match$0[0]){var a$3=match$0[1];return [0,[1,a$3]]}
               var a$4=match$0[1];
               return [1,[1,a$4]]},
            _no_=t2[2],
            _np_=t1[2],
            _nq_=function(_nw_){return join_witness(_np_,_no_,_nw_)};
           return [2,
                   caml_call3(Ui_incr[14],t1[1],t2[1],join),
                   _nq_,
                   map_model$5,
                   unmap_model$5,
                   map_action$5]}
         var _nj_=t1[5],_nk_=t1[4],_nl_=t1[3],_nm_=t1[2],_nn_=t1[1];
         if(1 === t2[0])
          {var
            t2$3=t2[1],
            map_model$4=
             function(param)
              {var
                new$0=param[2],
                conjoined=param[1],
                match=caml_call1(_nl_,conjoined),
                right=match[2],
                left=match[1];
               return [0,left,[0,right,new$0]]},
            unmap_model$4=
             function(param)
              {var
                match=param[2],
                new$0=match[2],
                right=match[1],
                left=param[1],
                conjoined=caml_call1(_nk_,[0,left,right]);
               return [0,conjoined,new$0]},
            map_action$4=
             function(param)
              {if(0 !== param[0]){var a$0=param[1];return [1,[1,a$0]]}
               var conjoined=param[1],match=caml_call1(_nj_,conjoined);
               if(0 === match[0]){var a=match[1];return [0,a]}
               var b=match[1];
               return [1,[0,b]]};
           return [2,
                   _nn_,
                   function(_nv_){return join_witness(_nm_,t2$3,_nv_)},
                   map_model$4,
                   unmap_model$4,
                   map_action$4]}
         var
          t2$2=t2[1],
          map_model$3=
           function(param)
            {var
              new$0=param[2],
              conjoined=param[1],
              match=caml_call1(_nl_,conjoined),
              right=match[2],
              left=match[1];
             return [0,[0,left,new$0],right]},
          unmap_model$3=
           function(param)
            {var
              right=param[2],
              match=param[1],
              new$0=match[2],
              left=match[1],
              conjoined=caml_call1(_nk_,[0,left,right]);
             return [0,conjoined,new$0]},
          map_action$3=
           function(param)
            {if(0 !== param[0]){var new$0=param[1];return [0,[1,new$0]]}
             var conjoined=param[1],match=caml_call1(_nj_,conjoined);
             if(0 === match[0]){var a=match[1];return [0,[0,a]]}
             var b=match[1];
             return [1,b]};
         return [2,
                 caml_call3(Ui_incr[14],_nn_,t2$2,join),
                 _nm_,
                 map_model$3,
                 unmap_model$3,
                 map_action$3]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$46);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Apply_action$0);
    var
     Bonsai_Apply_action=
      [0,incremental,impossible,to_incremental,merge,map$4,iter_incremental];
    caml_register_global(791,Bonsai_Apply_action,"Bonsai__Apply_action");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Snapshot);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$47);
    caml_call1(Expect_test_collector[5][1],cst_src_snapshot_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$48,cst$29);
    function result(r){return r[3]}
    function lifecycle(r){return r[2]}
    function apply_action(r){return r[1]}
    function create$1(apply_action,lifecycle,result)
     {switch(apply_action[0])
       {case 0:
         var apply_action$0=apply_action[1];annotate(0,apply_action$0);break;
        case 1:break;
        default:var incr=apply_action[1];annotate(0,incr)}
      var _nc_=3;
      function _nd_(_ne_){return annotate(_nc_,_ne_)}
      caml_call2(Core_Option[41],lifecycle,_nd_);
      annotate(2,result);
      return [0,apply_action,lifecycle,result]}
    function attribute_positions(here,t)
     {var _m$_=t[1];
      switch(_m$_[0])
       {case 0:var apply_action=_m$_[1];attribute(here,apply_action);break;
        case 1:break;
        default:var incr=_m$_[1];attribute(here,incr)}
      function _na_(_nb_){return attribute(here,_nb_)}
      caml_call2(Core_Option[41],t[2],_na_);
      return attribute(here,t[3])}
    function lifecycle_or_empty(t)
     {var match=t[2];
      if(match){var l=match[1];return l}
      var r=caml_call1(Ui_incr[10],_aO_[2]);
      annotate(4,r);
      return r}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$49);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Snapshot$0);
    var
     Bonsai_Snapshot=
      [0,
       apply_action,
       result,
       lifecycle,
       lifecycle_or_empty,
       create$1,
       attribute_positions];
    caml_register_global(793,Bonsai_Snapshot,"Bonsai__Snapshot");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Simplify);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$50);
    caml_call1(Expect_test_collector[5][1],cst_src_simplify_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$51,cst$30);
    function sexp_of_t$8(of_a_001){return Core[518]}
    var
     include$4=
      caml_call1
       (caml_call1(Core_Univ_map[22],Core_Univ_map[1]),[0,sexp_of_t$8]),
     empty$1=include$4[4],
     is_empty=include$4[6],
     set$1=include$4[7],
     add_exn=include$4[13],
     remove=include$4[17],
     to_alist=include$4[20];
    function merge$0(a,b)
     {function _m9_(acc,param)
       {var id=param[1];return caml_call3(set$1,acc,id,0)}
      var _m__=caml_call1(to_alist,b);
      return caml_call3(Core_List[10],_m__,a,_m9_)}
    function sexp_of_t$9(of_a_002){return of_a_002}
    var
     Env=
      caml_call1
       (caml_call1(Core_Univ_map[22],Core_Univ_map[1]),[0,sexp_of_t$9]);
    function squash(other)
     {if(typeof other === "number")return 0;
      if(0 === other[0]){var a=other[1];return [0,a]}
      var gen=other[2],free=other[1];
      return caml_call1(is_empty,free)?[0,caml_call1(gen,Env[4])]:other}
    function map$5(a,f)
     {if(typeof a === "number")return 0;
      if(0 === a[0]){var a$0=a[1];return [0,caml_call1(f,a$0)]}
      var gen=a[2],free=a[1];
      return [1,free,function(m){return caml_call1(f,caml_call1(gen,m))}]}
    function both$2(a,b)
     {if(typeof a !== "number")
       if(0 === a[0])
        {var _m5_=a[1];
         if(typeof b !== "number")
          {if(0 === b[0]){var b$0=b[1];return [0,[0,_m5_,b$0]]}
           var gen=b[2],free=b[1];
           return [1,free,function(m){return [0,_m5_,caml_call1(gen,m)]}]}}
       else
        {var _m6_=a[2],_m7_=a[1];
         if(typeof b !== "number")
          {if(0 === b[0])
            {var b$1=b[1];
             return [1,_m7_,function(m){return [0,caml_call1(_m6_,m),b$1]}]}
           var gen_b=b[2],free_b=b[1],free$0=merge$0(_m7_,free_b);
           return [1,
                   free$0,
                   function(env)
                    {var _m8_=caml_call1(gen_b,env);
                     return [0,caml_call1(_m6_,env),_m8_]}]}}
      return 0}
    function value_to_function(value,key_id,data_id)
     {var _mo_=value[1];
      switch(_mo_[0])
       {case 0:var r=_mo_[1];return [0,function(key,data){return r}];
        case 1:return 0;
        case 2:
         var
          name=_mo_[1],
          same_name=Core_Type_equal[8][9],
          match=caml_call2(same_name,name,key_id),
          match$0=caml_call2(same_name,name,data_id);
         if(match)return [0,function(key,data){return key}];
         if(match$0)return [0,function(key,data){return data}];
         var
          _mp_=
           function(env,param,_mU_){return caml_call2(Env[11],env,name)};
         return [1,caml_call3(add_exn,empty$1,name,0),_mp_];
        case 3:
         var
          b=_mo_[2],
          a=_mo_[1],
          let_syntax_003=value_to_function(a,key_id,data_id),
          let_syntax_004=value_to_function(b,key_id,data_id),
          _mq_=
           function(param,key,data)
            {var b=param[2],a=param[1],_mT_=caml_call2(b,key,data);
             return [0,caml_call2(a,key,data),_mT_]};
         return map$5(both$2(let_syntax_003,let_syntax_004),_mq_);
        case 4:return 0;
        case 5:
         var
          f=_mo_[2],
          t=_mo_[1],
          _mr_=
           function(a,key,data){return caml_call1(f,caml_call2(a,key,data))};
         return map$5(value_to_function(t,key_id,data_id),_mr_);
        case 6:
         var
          f$0=_mo_[3],
          t2=_mo_[2],
          t1=_mo_[1],
          let_syntax_007=value_to_function(t1,key_id,data_id),
          let_syntax_008=value_to_function(t2,key_id,data_id),
          _ms_=
           function(param,key,data)
            {var t2=param[2],t1=param[1],_mS_=caml_call2(t2,key,data);
             return caml_call2(f$0,caml_call2(t1,key,data),_mS_)};
         return map$5(both$2(let_syntax_007,let_syntax_008),_ms_);
        case 7:
         var
          f$1=_mo_[4],
          t3=_mo_[3],
          t2$0=_mo_[2],
          t1$0=_mo_[1],
          let_syntax_010=value_to_function(t1$0,key_id,data_id),
          let_syntax_011=value_to_function(t2$0,key_id,data_id),
          let_syntax_012=value_to_function(t3,key_id,data_id),
          _mt_=
           function(param,key,data)
            {var
              match=param[2],
              t3=match[2],
              t2=match[1],
              t1=param[1],
              _mQ_=caml_call2(t3,key,data),
              _mR_=caml_call2(t2,key,data);
             return caml_call3(f$1,caml_call2(t1,key,data),_mR_,_mQ_)};
         return map$5
                 (both$2(let_syntax_010,both$2(let_syntax_011,let_syntax_012)),
                  _mt_);
        case 8:
         var
          f$2=_mo_[5],
          t4=_mo_[4],
          t3$0=_mo_[3],
          t2$1=_mo_[2],
          t1$1=_mo_[1],
          let_syntax_014=value_to_function(t1$1,key_id,data_id),
          let_syntax_015=value_to_function(t2$1,key_id,data_id),
          let_syntax_016=value_to_function(t3$0,key_id,data_id),
          let_syntax_017=value_to_function(t4,key_id,data_id),
          _mu_=
           function(param,key,data)
            {var
              _mM_=param[2],
              match=_mM_[2],
              t4=match[2],
              t3=match[1],
              t2=_mM_[1],
              t1=param[1],
              _mN_=caml_call2(t4,key,data),
              _mO_=caml_call2(t3,key,data),
              _mP_=caml_call2(t2,key,data);
             return caml_call4(f$2,caml_call2(t1,key,data),_mP_,_mO_,_mN_)};
         return map$5
                 (both$2
                   (let_syntax_014,
                    both$2(let_syntax_015,both$2(let_syntax_016,let_syntax_017))),
                  _mu_);
        case 9:
         var
          f$3=_mo_[6],
          t5=_mo_[5],
          t4$0=_mo_[4],
          t3$1=_mo_[3],
          t2$2=_mo_[2],
          t1$2=_mo_[1],
          let_syntax_019=value_to_function(t1$2,key_id,data_id),
          let_syntax_020=value_to_function(t2$2,key_id,data_id),
          let_syntax_021=value_to_function(t3$1,key_id,data_id),
          let_syntax_022=value_to_function(t4$0,key_id,data_id),
          let_syntax_023=value_to_function(t5,key_id,data_id),
          _mv_=
           function(param,key,data)
            {var
              _mG_=param[2],
              _mH_=_mG_[2],
              match=_mH_[2],
              t5=match[2],
              t4=match[1],
              t3=_mH_[1],
              t2=_mG_[1],
              t1=param[1],
              _mI_=caml_call2(t5,key,data),
              _mJ_=caml_call2(t4,key,data),
              _mK_=caml_call2(t3,key,data),
              _mL_=caml_call2(t2,key,data);
             return caml_call5
                     (f$3,caml_call2(t1,key,data),_mL_,_mK_,_mJ_,_mI_)};
         return map$5
                 (both$2
                   (let_syntax_019,
                    both$2
                     (let_syntax_020,
                      both$2(let_syntax_021,both$2(let_syntax_022,let_syntax_023)))),
                  _mv_);
        case 10:
         var
          f$4=_mo_[7],
          t6=_mo_[6],
          t5$0=_mo_[5],
          t4$1=_mo_[4],
          t3$2=_mo_[3],
          t2$3=_mo_[2],
          t1$3=_mo_[1],
          let_syntax_025=value_to_function(t1$3,key_id,data_id),
          let_syntax_026=value_to_function(t2$3,key_id,data_id),
          let_syntax_027=value_to_function(t3$2,key_id,data_id),
          let_syntax_028=value_to_function(t4$1,key_id,data_id),
          let_syntax_029=value_to_function(t5$0,key_id,data_id),
          let_syntax_030=value_to_function(t6,key_id,data_id),
          _mw_=
           function(param,key,data)
            {var
              _my_=param[2],
              _mz_=_my_[2],
              _mA_=_mz_[2],
              match=_mA_[2],
              t6=match[2],
              t5=match[1],
              t4=_mA_[1],
              t3=_mz_[1],
              t2=_my_[1],
              t1=param[1],
              _mB_=caml_call2(t6,key,data),
              _mC_=caml_call2(t5,key,data),
              _mD_=caml_call2(t4,key,data),
              _mE_=caml_call2(t3,key,data),
              _mF_=caml_call2(t2,key,data);
             return caml_call6
                     (f$4,caml_call2(t1,key,data),_mF_,_mE_,_mD_,_mC_,_mB_)};
         return map$5
                 (both$2
                   (let_syntax_025,
                    both$2
                     (let_syntax_026,
                      both$2
                       (let_syntax_027,
                        both$2(let_syntax_028,both$2(let_syntax_029,let_syntax_030))))),
                  _mw_);
        default:
         var
          f$5=_mo_[8],
          t7=_mo_[7],
          t6$0=_mo_[6],
          t5$1=_mo_[5],
          t4$2=_mo_[4],
          t3$3=_mo_[3],
          t2$4=_mo_[2],
          t1$4=_mo_[1],
          let_syntax_032=value_to_function(t1$4,key_id,data_id),
          let_syntax_033=value_to_function(t2$4,key_id,data_id),
          let_syntax_034=value_to_function(t3$3,key_id,data_id),
          let_syntax_035=value_to_function(t4$2,key_id,data_id),
          let_syntax_036=value_to_function(t5$1,key_id,data_id),
          let_syntax_037=value_to_function(t6$0,key_id,data_id),
          let_syntax_038=value_to_function(t7,key_id,data_id),
          _mx_=
           function(param,key,data)
            {var
              _mV_=param[2],
              _mW_=_mV_[2],
              _mX_=_mW_[2],
              _mY_=_mX_[2],
              match=_mY_[2],
              t7=match[2],
              t6=match[1],
              t5=_mY_[1],
              t4=_mX_[1],
              t3=_mW_[1],
              t2=_mV_[1],
              t1=param[1],
              _mZ_=caml_call2(t7,key,data),
              _m0_=caml_call2(t6,key,data),
              _m1_=caml_call2(t5,key,data),
              _m2_=caml_call2(t4,key,data),
              _m3_=caml_call2(t3,key,data),
              _m4_=caml_call2(t2,key,data);
             return caml_call7
                     (f$5,caml_call2(t1,key,data),_m4_,_m3_,_m2_,_m1_,_m0_,_mZ_)};
         return map$5
                 (both$2
                   (let_syntax_032,
                    both$2
                     (let_syntax_033,
                      both$2
                       (let_syntax_034,
                        both$2
                         (let_syntax_035,
                          both$2(let_syntax_036,both$2(let_syntax_037,let_syntax_038)))))),
                  _mx_)}}
    function _cC_(computation,key_id,data_id)
     {function recurse(_mn_){return _cC_(_mn_,key_id,data_id)}
      function handle_subst(from,via,into)
       {var match=recurse(from),match$0=recurse(into);
        if(typeof match$0 !== "number")
         {if(0 === match$0[0]){var r=match$0[1];return [0,r]}
          if(typeof match !== "number")
           {if(0 === match[0])
             {var
               gen=match$0[2],
               free=match$0[1],
               from$0=match[1],
               free$0=caml_call2(remove,free,via),
               gen$0=
                function(env,path,key,data)
                 {var
                   from_path=append(path,0),
                   into_path=append(path,1),
                   _mm_=caml_call3(from$0,from_path,key,data),
                   env$0=caml_call3(Env[13],env,via,_mm_);
                  return caml_call4(gen,env$0,into_path,key,data)};
              return squash([1,free$0,gen$0])}
            var
             gen_b=match$0[2],
             free_b=match$0[1],
             gen_a=match[2],
             free_a=match[1],
             free_b$0=caml_call2(remove,free_b,via),
             free$1=merge$0(free_a,free_b$0),
             gen$1=
              function(env,path,key,data)
               {var
                 from_path=append(path,0),
                 into_path=append(path,1),
                 _ml_=caml_call4(gen_a,env,from_path,key,data),
                 env$0=caml_call3(Env[13],env,via,_ml_);
                return caml_call4(gen_b,env$0,into_path,key,data)};
            return squash([1,free$1,gen$1])}}
        return 0}
      if(typeof computation === "number")
       return [0,function(path,param,_mk_){return path}];
      switch(computation[0])
       {case 0:
         var value=computation[1],_mj_=function(f,path){return f};
         return map$5(value_to_function(value,key_id,data_id),_mj_);
        case 5:
         var into=computation[3],via=computation[2],from=computation[1];
         return handle_subst(from,via,into);
        case 6:
         var into$0=computation[3],via$0=computation[2],from$0=computation[1];
         return handle_subst(from$0,via$0,into$0);
        case 7:
         var into$1=computation[3],via$1=computation[2],from$1=computation[1];
         return handle_subst(from$1,via$1,into$1);
        default:return 0}}
    function computation_to_function(t,key_compare,key_id,data_id)
     {var
       _mh_=caml_call2(_aM_[2],key_compare,key_id),
       make_path_element=caml_call1(Core[259],_mh_),
       match=squash(_cC_(t,key_id,data_id));
      if(typeof match !== "number" && 0 === match[0])
       {var
         f=match[1],
         _mi_=
          function(path,key,data)
           {var path$0=append(path,[0,caml_call1(make_path_element,key)]);
            return caml_call3(f,path$0,key,data)};
        return caml_call1(Core_Option[53],_mi_)}
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$52);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Simplify$0);
    var Bonsai_Simplify=[0,computation_to_function];
    caml_register_global(794,Bonsai_Simplify,"Bonsai__Simplify");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Proc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$53);
    caml_call1(Expect_test_collector[5][1],cst_src_proc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$54,cst$31);
    function unusable_static_apply_action(param,_mg_,model)
     {return Core_Nothing[3]}
    function sub(here,param,f)
     {var
       from_apply_static=param[5],
       from_model=param[4],
       from_static_action=param[3],
       from_dynamic_action=param[2],
       from=param[1];
      if(typeof from !== "number" && 0 === from[0])
       {var _mb_=from[1],_mc_=_mb_[1];
        if(2 === _mc_[0])
         {var there=_mb_[2],here$0=caml_call2(Core_Option[54],here,there);
          return caml_call1(f,[0,_mc_,here$0])}}
      var
       _l6_=Core[150],
       _l7_=caml_call1(Core_Source_code_position[2],_cD_),
       via=caml_call2(Core_Type_equal[8][3],_l7_,_l6_),
       match=caml_call1(f,named(via)),
       into_apply_static=match[5],
       into_model=match[4],
       into_static_action=match[3],
       into_dynamic_action=match[2],
       into=match[1],
       match$0=caml_call2(Core_Type_equal[8][9],into_static_action,_ah_[1]),
       _l8_=caml_call2(Core_Type_equal[8][9],into_dynamic_action,_ah_[1]),
       _l9_=caml_call2(Core_Type_equal[8][9],into_model[3],_ai_[1][3]),
       match$1=caml_call2(Core_Type_equal[8][9],from_static_action,_ah_[1]),
       _l__=caml_call2(Core_Type_equal[8][9],from_dynamic_action,_ah_[1]);
      if
       (caml_call2(Core_Type_equal[8][9],from_model[3],_ai_[1][3])
        &&
        _l__
        &&
        match$1)
       return [0,
               [6,from,via,into,here],
               into_dynamic_action,
               into_static_action,
               into_model,
               into_apply_static];
      if(_l9_ && _l8_ && match$0)
       return [0,
               [7,from,via,into,here],
               from_dynamic_action,
               from_static_action,
               from_model,
               from_apply_static];
      function apply_static(inject,schedule_event,param,_md_)
       {var _me_=param[2],_mf_=param[1];
        if(0 === _md_[0])
         {var a=_md_[1],inject$0=function(a){return caml_call1(inject,[0,a])};
          return [0,
                  caml_call4(from_apply_static,inject$0,schedule_event,_mf_,a),
                  _me_]}
        var a$0=_md_[1];
        function inject$1(a){return caml_call1(inject,[1,a])}
        return [0,
                _mf_,
                caml_call4(into_apply_static,inject$1,schedule_event,_me_,a$0)]}
      var
       _l$_=caml_call2(_ai_[2],from_model,into_model),
       _ma_=caml_call2(_ah_[2],from_static_action,into_static_action);
      return [0,
              [5,from,via,into,here],
              caml_call2(_ah_[2],from_dynamic_action,into_dynamic_action),
              _ma_,
              _l$_,
              apply_static]}
    function read(x)
     {return [0,[0,x],_ah_[1],_ah_[1],_ai_[1],unusable_static_apply_action]}
    function switch$0(match,branches,with$0)
     {function _l1_(param,key)
       {var
         models=param[2],
         components=param[1],
         component=caml_call1(with$0,key),
         model=component[4],
         model$0=caml_call2(_al_[3],model,model[1]),
         components$0=caml_call3(Core_Map[31],components,key,component),
         models$0=caml_call3(Core_Map[31],models,key,model$0);
        return [0,components$0,models$0]}
      var
       _l2_=[0,Core_Int[101][3],Core_Int[101][3]],
       _l3_=caml_call5(Core_List[117],0,0,0,0,branches),
       match$0=caml_call3(Core_List[10],_l3_,_l2_,_l1_),
       models=match$0[2],
       arms=match$0[1];
      function apply_static(inject,schedule_event,model,action)
       {var
         index=action[3],
         action_type_id=action[2],
         action$0=action[1],
         match=caml_call2(Multi_model[3],model,index),
         chosen_model_info=match[2],
         chosen_model=match[1];
        function inject$0(action)
         {return caml_call1(inject,[0,action,action_type_id,index])}
        var
         match$0=caml_call2(Core_Map[39],arms,index),
         apply_static=match$0[5],
         tm=match$0[4],
         am=match$0[3];
        caml_call2(Core_Type_equal[8][10],tm[3],chosen_model_info[3]);
        caml_call2(Core_Type_equal[8][10],am,action_type_id);
        var
         new_model=
          caml_call4
           (apply_static,inject$0,schedule_event,chosen_model,action$0),
         new_model$0=caml_call2(_al_[3],tm,new_model);
        return caml_call3(Multi_model[4],model,index,new_model$0)}
      var
       _l4_=
        caml_call2
         (Multi_model[5],[0,Core_Int[79],Core_Int[80],Core_Int[100]],models),
       _l5_=caml_call1(Action[2],Core[356]);
      return [0,
              [12,match,arms],
              caml_call1(Action[2],Core[356]),
              _l5_,
              _l4_,
              apply_static]}
    function symbol$5(f)
     {return function(_l0_){return caml_call2(map$0,_l0_,f)}}
    function symbol_map$1(a,f){return caml_call2(map$0,a,f)}
    function arr(here,t,f){return read([0,caml_call2(map$0,t,f)[1],here])}
    var
     Let_syntax$1=
      [0,sub,switch$0,read,map$0,both,arr,map3,map4,map5,map6,map7],
     Let_syntax$2=[0,read,symbol,symbol$5,symbol_map$1,Let_syntax$1];
    function pure(f,i){return read(caml_call2(map$0,i,f))}
    function const$0(x){return read(caml_call1(return$1,x))}
    function with_model_resetter(param)
     {var
       apply_static=param[5],
       model=param[4],
       static_action=param[3],
       dynamic_action=param[2],
       t=param[1],
       static_action$0=caml_call2(_ah_[2],unit_type_id,static_action);
      function apply_static$0(inject,schedule_event,m)
       {function inject$0(a){return caml_call1(inject,[1,a])}
        return function(param)
         {if(0 === param[0])return model[1];
          var a=param[1];
          return caml_call4(apply_static,inject$0,schedule_event,m,a)}}
      return [0,[15,t],dynamic_action,static_action$0,model,apply_static$0]}
    function assoc(comparator,map,f)
     {var
       key_id=caml_call2(Core_Type_equal[8][3],cst_key_id,comparator[2]),
       data_id=caml_call2(Core_Type_equal[8][3],cst_data_id,Core[150]),
       key_var=named(key_id),
       data_var=named(data_id),
       match=caml_call2(f,key_var,data_var),
       apply_static=match[5],
       model_info=match[4],
       static_action=match[3],
       dynamic_action=match[2],
       by=match[1],
       match$0=computation_to_function(by,comparator[3][1],key_id,data_id);
      if(match$0)
       {var by$0=match$0[1];
        return [0,
                [11,map,key_id,data_id,by$0,0],
                _ah_[1],
                _ah_[1],
                _ai_[1],
                unusable_static_apply_action]}
      function apply_static$0(inject,schedule_event,model,param)
       {var action=param[2],id=param[1];
        function inject$0(a){return caml_call1(inject,[0,id,a])}
        var
         _lY_=model_info[1],
         _lZ_=caml_call2(Core_Map[38],model,id),
         specific_model=caml_call2(Core_Option[34],_lZ_,_lY_),
         data=
          caml_call4
           (apply_static,inject$0,schedule_event,specific_model,action);
        return caml_call2(model_info[2],data,model_info[1])
                ?caml_call2(Core_Map[41],model,id)
                :caml_call3(Core_Map[32],model,id,data)}
      var
       _lV_=caml_call2(_ai_[3],comparator,model_info),
       _lW_=caml_call2(_ah_[3],comparator,static_action),
       _lX_=caml_call2(_ah_[3],comparator,dynamic_action);
      return [0,
              [10,
               map,
               comparator[3][1],
               key_id,
               data_id,
               by,
               model_info,
               dynamic_action,
               0,
               0],
              _lX_,
              _lW_,
              _lV_,
              apply_static$0]}
    function enum$0(E)
     {return function(match,with$0)
       {var
         all=E[2],
         include=caml_call1(Core_Comparator[5],[0,E[1],E[5]]),
         comparator=include[1],
         forward_index=caml_call1(Core_List[19],all);
        function _lS_(i,k){return [0,k,i]}
        var
         _lT_=caml_call2(Core_List[92],all,_lS_),
         reverse_index=caml_call2(Core_Map[8],[0,comparator],_lT_),
         _lU_=caml_call1(Core_Map[39],reverse_index),
         match$0=caml_call2(Let_syntax$2[4],match,_lU_),
         branches=forward_index.length - 1;
        function with$1(i)
         {return caml_call1
                  (with$0,runtime.caml_check_bound(forward_index,i)[1 + i])}
        return caml_call3(Let_syntax$2[5][2],match$0,branches,with$1)}}
    function state_machine1(here,M)
     {return function(A)
       {return function(default_model,apply_action,input)
         {var
           name=caml_call1(Core_Source_code_position[2],here),
           _lQ_=caml_call3(_ai_[4],M,default_model,name),
           _lR_=_ah_[1];
          return [0,
                  [1,input,apply_action,name,cst_state_machine],
                  caml_call2(_ah_[4],A,name),
                  _lR_,
                  _lQ_,
                  unusable_static_apply_action]}}}
    function of_module1(component,default_model,input)
     {function _lI_(let_syntax_004)
       {function _lK_(model_and_inject)
         {function _lO_(param)
           {var input=param[2],match=param[1],inject=match[2],model=match[1];
            return caml_call3(component[7],inject,input,model)}
          var
           _lP_=
            caml_call2(Let_syntax$2[5][5],model_and_inject,let_syntax_004);
          return caml_call3(Let_syntax$2[5][6],_cE_,_lP_,_lO_)}
        var
         _lL_=component[6],
         _lM_=component[4],
         _lN_=
          caml_call4
           (state_machine1(_cF_,component[3]),
            _lM_,
            default_model,
            _lL_,
            let_syntax_004);
        return caml_call3(Let_syntax$2[5][1],_cG_,_lN_,_lK_)}
      var _lJ_=caml_call1(Let_syntax$2[1],input);
      return caml_call3(Let_syntax$2[5][1],_cH_,_lJ_,_lI_)}
    function of_module2(c,default_model,i1,i2)
     {return of_module1(c,default_model,both(i1,i2))}
    function state_machine0(here,model,action,default_model,apply_action)
     {function apply_action$0(inject,schedule_event,model,action)
       {return caml_call4(apply_action,inject,schedule_event,model,action)}
      function compute(inject,model){return [0,model,inject]}
      var
       name=caml_call1(Core_Source_code_position[2],here),
       _lG_=caml_call3(_ai_[4],model,default_model,name),
       _lH_=caml_call2(_ah_[4],action,name);
      return [0,
              [2,compute,name,cst_state_machine$0],
              _ah_[1],
              _lH_,
              _lG_,
              apply_action$0]}
    function of_module0(component,default_model)
     {function _ly_(model_and_inject)
       {function _lF_(param)
         {var inject=param[2],model=param[1];
          return caml_call3(component[7],inject,0,model)}
        return caml_call3(Let_syntax$2[5][6],_cI_,model_and_inject,_lF_)}
      var _lz_=component[6];
      function _lA_(_lC_)
       {var _lD_=caml_call1(_lz_,_lC_);
        return function(_lE_){return caml_call2(_lD_,_lE_,0)}}
      var
       _lB_=
        state_machine0(_cJ_,component[3],component[4],default_model,_lA_);
      return caml_call3(Let_syntax$2[5][1],_cK_,_lB_,_ly_)}
    function actor1(here,M)
     {return function(A)
       {return function(default_model,recv,input)
         {function sexp_of_t(cb)
           {var _lx_=caml_call1(Ui_effect[21][1][2],cb);
            return caml_call1(A[1],_lx_)}
          var Action_with_callback=[0,sexp_of_t];
          function _lt_(model_and_inject)
           {function _lw_(param)
             {var inject=param[2],model=param[1];
              function inject$0(action)
               {return caml_call2(Ui_effect[21][2],action,inject)}
              return [0,model,inject$0]}
            return caml_call3(Let_syntax$2[5][6],_cL_,model_and_inject,_lw_)}
          function _lu_(param,schedule_event,input,model,callback)
           {var
             action=caml_call1(Ui_effect[21][1][2],callback),
             match=caml_call4(recv,schedule_event,input,model,action),
             response=match[2],
             new_model=match[1];
            caml_call1
             (schedule_event,
              caml_call2(Ui_effect[21][1][3],callback,response));
            return new_model}
          var
           _lv_=
            caml_call4
             (state_machine1(here,M),
              Action_with_callback,
              default_model,
              _lu_,
              input);
          return caml_call3(Let_syntax$2[5][1],_cM_,_lv_,_lt_)}}}
    function actor0(here,model,action,default_model,recv)
     {function recv$0(schedule_event,param)
       {return caml_call1(recv,schedule_event)}
      var _ls_=caml_call1(return$1,0);
      return caml_call4(actor1(here,model),action,default_model,recv$0,_ls_)}
    function lazy(t)
     {function equal_model(a_010,b_011)
       {function _lr_(a_012,b_013){return caml_call2(_al_[1],a_012,b_013)}
        return caml_call3(Core[452],_lr_,a_010,b_011)}
      function sexp_of_model(x_014)
       {return caml_call2(Core[454],_al_[2],x_014)}
      var
       dynamic_action=caml_call1(Action[2],Core[518]),
       static_action=caml_call1(Action[2],Core[518]);
      function _lo_(param){return 0}
      var
       model=
        [0,
         0,
         equal_model,
         caml_call2(Core_Type_equal[8][3],cst_lazy_model,sexp_of_model),
         sexp_of_model,
         _lo_];
      function apply_static(inject,schedule_event,model,action)
       {var
         _lp_=caml_obj_tag(t),
         match=
          250 === _lp_?t[1]:246 === _lp_?caml_call1(CamlinternalLazy[2],t):t,
         apply_static=match[5],
         model_info=match[4],
         action_info=match[3];
        function inject$0(action)
         {return caml_call1(inject,[0,action,action_info,0])}
        var
         action_type_id=action[2],
         action$0=action[1],
         _lq_=caml_call2(_al_[3],model_info,model_info[1]),
         match$0=caml_call2(Core_Option[34],model,_lq_),
         chosen_model_info=match$0[2],
         chosen_model=match$0[1];
        caml_call2(Core_Type_equal[8][10],action_type_id,action_info);
        caml_call2(Core_Type_equal[8][10],chosen_model_info[3],model_info[3]);
        var
         new_model=
          caml_call4
           (apply_static,inject$0,schedule_event,chosen_model,action$0);
        return [0,caml_call2(_al_[3],model_info,new_model)]}
      return [0,[13,t],dynamic_action,static_action,model,apply_static]}
    function wrap(model_module,default_model,apply_action,f)
     {var
       model_id=caml_call2(Core_Type_equal[8][3],cst_model_id,Core[150]),
       action_id=caml_call2(Core_Type_equal[8][3],cst_action_id,Core[150]),
       inject_id=caml_call2(Core_Type_equal[8][3],cst_inject_id,Core[150]),
       model_var=named(model_id),
       inject_var=named(inject_id),
       match=caml_call2(f,model_var,inject_var),
       apply_static=match[5],
       inner_model=match[4],
       inner_static_action=match[3],
       inner_dynamic_action=match[2],
       inner=match[1],
       dynamic_action=caml_call2(_ah_[2],action_id,inner_dynamic_action),
       _ln_=
        caml_call3
         (_ai_[4],model_module,default_model,cst_outer_model_for_wrap),
       model=caml_call2(_ai_[2],_ln_,inner_model);
      function apply_static$0(inject,schedule_event,param,action)
       {var m2=param[2],m1=param[1];
        return [0,m1,caml_call4(apply_static,inject,schedule_event,m2,action)]}
      return [0,
              [14,model_id,inject_id,inner,apply_action],
              dynamic_action,
              inner_static_action,
              model,
              apply_static$0]}
    function state(here,M)
     {return function(default_model)
       {function _ll_(param,_lm_,old_model,new_model){return new_model}
        return state_machine0(here,M,[0,M[2]],default_model,_ll_)}}
    function state_opt(here,default_model,M)
     {function equal(a_015,b_016)
       {function _lk_(a_017,b_018){return caml_call2(M[3],a_017,b_018)}
        return caml_call3(Core[452],_lk_,a_015,b_016)}
      function t_of_sexp(x_020){return caml_call2(Core[455],M[1],x_020)}
      function sexp_of_t(x_021){return caml_call2(Core[454],M[2],x_021)}
      return caml_call1
              (state(here,[0,t_of_sexp,sexp_of_t,equal]),default_model)}
    var path=[0,0,_ah_[1],_ah_[1],_ai_[1],unusable_static_apply_action];
    function _cN_(path)
     {function _lj_(path){return to_unique_identifier_string(path)}
      return caml_call3(Let_syntax$2[5][6],_cO_,path,_lj_)}
    var path_id=caml_call3(Let_syntax$2[5][1],_cP_,path,_cN_);
    function lifecycle$0(on_activate,on_deactivate,after_display,param)
     {function transpose_join(param)
       {if(! param)return caml_call1(return$1,0);var a=param[1];return a}
      function _la_(triple)
       {function _lf_(t)
         {return [0,
                  [16,t],
                  _ah_[1],
                  _ah_[1],
                  _ai_[1],
                  unusable_static_apply_action]}
        function _lg_(param)
         {var _li_=param[1];
          if(! _li_ && ! param[2] && ! param[3])return 0;
          var after_display=param[3],on_deactivate=param[2];
          return [0,[0,_li_,on_deactivate,after_display]]}
        var _lh_=caml_call3(Let_syntax$2[5][6],_cQ_,triple,_lg_);
        return caml_call3(Let_syntax$2[5][1],_cR_,_lh_,_lf_)}
      var
       let_syntax_025=transpose_join(on_activate),
       let_syntax_026=transpose_join(on_deactivate),
       let_syntax_027=transpose_join(after_display);
      function _lb_(param)
       {var match=param[2],c=match[2],b=match[1],a=param[1];return [0,a,b,c]}
      var
       _lc_=caml_call2(Let_syntax$2[5][5],let_syntax_026,let_syntax_027),
       _ld_=caml_call2(Let_syntax$2[5][5],let_syntax_025,_lc_),
       _le_=caml_call3(Let_syntax$2[5][6],_cS_,_ld_,_lb_);
      return caml_call3(Let_syntax$2[5][1],_cT_,_le_,_la_)}
    function lifecycle$1(on_activate,on_deactivate,after_display,param)
     {var _k0_=0,_k1_=Core_Option[53];
      function _k2_(_k$_){return caml_call2(map$0,_k$_,_k1_)}
      var
       _k3_=caml_call2(Core_Option[29],after_display,_k2_),
       _k4_=Core_Option[53];
      function _k5_(_k__){return caml_call2(map$0,_k__,_k4_)}
      var
       _k6_=caml_call2(Core_Option[29],on_deactivate,_k5_),
       _k7_=Core_Option[53];
      function _k8_(_k9_){return caml_call2(map$0,_k9_,_k7_)}
      return lifecycle$0
              (caml_call2(Core_Option[29],on_activate,_k8_),_k6_,_k3_,_k0_)}
    function after_display(event_opt_value)
     {return lifecycle$0(0,0,[0,event_opt_value],0)}
    function after_display$0(event_value)
     {var event_value$0=caml_call2(map$0,event_value,Core_Option[53]);
      return lifecycle$0(0,0,[0,event_value$0],0)}
    function on_change(here,M)
     {return function(let_syntax_042,let_syntax_043)
       {function _kq_(pattern_syntax_030)
         {function _ks_(state)
           {function _kw_(let_syntax_041)
             {function _kA_(update){return after_display(update)}
              function _kB_(pattern_syntax_034)
               {function _kE_(param)
                 {if(0 === param)
                   {var
                     _kI_=
                      function(param)
                       {var
                         match=param[2],
                         callback=match[2],
                         input=match[1],
                         set_state=param[1],
                         _kY_=[0,caml_call2(callback,0,input),0],
                         _kZ_=[0,caml_call1(set_state,[0,input]),_kY_];
                        return [0,[0,Ui_effect[2],_kZ_]]},
                     _kJ_=
                      caml_call2(Let_syntax$2[5][5],let_syntax_042,let_syntax_043),
                     _kK_=caml_call2(Let_syntax$2[5][5],let_syntax_041,_kJ_);
                    return caml_call3(Let_syntax$2[5][6],_cU_,_kK_,_kI_)}
                  if(1 !== param)throw [0,Assert_failure,_cY_];
                  function _kL_(let_syntax_040)
                   {function _kP_(param)
                     {var
                       _kT_=param[2],
                       match=_kT_[2],
                       callback=match[2],
                       input=match[1],
                       set_state=_kT_[1],
                       state=param[1];
                      if
                       (!
                        caml_call2(Core[246],state,input)
                        &&
                        !
                        caml_call2(M[3],state,input))
                       {var
                         _kU_=
                          [246,
                           function(_kV_)
                            {var
                              _kW_=[0,caml_call2(callback,[0,state],input),0],
                              _kX_=[0,caml_call1(set_state,[0,input]),_kW_];
                             return [0,Ui_effect[2],_kX_]}];
                        return [0,caml_call1(Ui_effect[15],_kU_)]}
                      return 0}
                    var
                     _kQ_=
                      caml_call2(Let_syntax$2[5][5],let_syntax_042,let_syntax_043),
                     _kR_=caml_call2(Let_syntax$2[5][5],let_syntax_041,_kQ_),
                     _kS_=caml_call2(Let_syntax$2[5][5],let_syntax_040,_kR_);
                    return caml_call3(Let_syntax$2[5][6],_cV_,_kS_,_kP_)}
                  function _kM_(param)
                   {if(! param)throw [0,Assert_failure,_cW_];
                    var pattern_syntax_035=param[1];
                    return pattern_syntax_035}
                  var
                   _kN_=caml_call2(Let_syntax$2[5][4],pattern_syntax_034,_kM_),
                   _kO_=caml_call1(Let_syntax$2[5][3],_kN_);
                  return caml_call3(Let_syntax$2[5][1],_cX_,_kO_,_kL_)}
                var _kF_=2;
                function _kG_(param){return param?1:0}
                var
                 _kH_=
                  caml_call2(Let_syntax$2[5][4],pattern_syntax_034,_kG_);
                return caml_call3(Let_syntax$2[5][2],_kH_,_kF_,_kE_)}
              var
               _kC_=caml_call1(Let_syntax$2[5][3],state),
               _kD_=caml_call3(Let_syntax$2[5][1],_cZ_,_kC_,_kB_);
              return caml_call3(Let_syntax$2[5][1],_c0_,_kD_,_kA_)}
            function _kx_(param)
             {var pattern_syntax_031=param[2];return pattern_syntax_031}
            var
             _ky_=caml_call2(Let_syntax$2[5][4],pattern_syntax_030,_kx_),
             _kz_=caml_call1(Let_syntax$2[5][3],_ky_);
            return caml_call3(Let_syntax$2[5][1],_c1_,_kz_,_kw_)}
          function _kt_(param)
           {var pattern_syntax_032=param[1];return pattern_syntax_032}
          var
           _ku_=caml_call2(Let_syntax$2[5][4],pattern_syntax_030,_kt_),
           _kv_=caml_call1(Let_syntax$2[5][3],_ku_);
          return caml_call3(Let_syntax$2[5][1],_c2_,_kv_,_ks_)}
        var _kr_=state_opt(here,0,M);
        return caml_call3(Let_syntax$2[5][1],_c3_,_kr_,_kq_)}}
    function on_change$0(here,model,input,callback)
     {var
       callback$0=
        caml_call2
         (map$0,
          callback,
          function(callback,prev,value){return caml_call1(callback,value)});
      return caml_call2(on_change(here,model),input,callback$0)}
    var empty$2=0;
    function initial(a){return [0,a]}
    var Starting=[0,empty$2,initial];
    function poll_effect_on_change_implemen(here,Input)
     {return function(Result)
       {return function(initial,wrap_result,let_syntax_077,input)
         {function _jS_(pattern_syntax_045)
           {function _jW_(let_syntax_078)
             {function t_of_sexp(sexp_048)
               {if(0 === sexp_048[0])
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[16],error_source_061,sexp_048);
                var
                 field_sexps_049=sexp_048[1],
                 last_seqnum_050=[0,0],
                 last_result_052=[0,0],
                 duplicates_054=[0,0],
                 extra_055=[0,0],
                 param=field_sexps_049;
                for(;;)
                 {if(param)
                   {var _ki_=param[1];
                    if(1 === _ki_[0])
                     {var _kj_=_ki_[1];
                      if(_kj_)
                       {var _kk_=_kj_[1];
                        if(0 === _kk_[0])
                         {var _kl_=_kj_[2],_km_=_kk_[1],switch$0=0;
                          if(! _kl_ || ! _kl_[2])switch$0 = 1;
                          if(switch$0)
                           {var
                             tail_063=param[2],
                             field_sexp_057$2=
                              function(_kp_)
                               {function field_sexp_057(param)
                                 {if(! _kp_)
                                   return caml_call2
                                           (Sexplib0_Sexp_conv_error[10],error_source_061,sexp_048);
                                  if(_kp_[2])throw [0,Assert_failure,_c4_];
                                  var x_064=_kp_[1];
                                  return x_064}
                                return field_sexp_057},
                             field_sexp_057=field_sexp_057$2(_kl_);
                            if(caml_string_notequal(_km_,cst_last_result))
                             if(caml_string_notequal(_km_,cst_last_seqnum))
                              {if(Sexplib0_Sexp_conv[26][1])
                                extra_055[1] = [0,_km_,extra_055[1]]}
                             else
                              if(last_seqnum_050[1])
                               duplicates_054[1] = [0,_km_,duplicates_054[1]];
                              else
                               {var
                                 field_sexp_057$0=field_sexp_057(0),
                                 fvalue_060=caml_call1(Core[357],field_sexp_057$0);
                                last_seqnum_050[1] = [0,fvalue_060]}
                            else
                             if(last_result_052[1])
                              duplicates_054[1] = [0,_km_,duplicates_054[1]];
                             else
                              {var
                                field_sexp_057$1=field_sexp_057(0),
                                fvalue_059=caml_call1(Result[1],field_sexp_057$1);
                               last_result_052[1] = [0,fvalue_059]}
                            var param=tail_063;
                            continue}}}}
                    caml_call2
                     (Sexplib0_Sexp_conv_error[10],error_source_061,_ki_)}
                  if(duplicates_054[1])
                   return caml_call3
                           (Sexplib0_Sexp_conv_error[12],
                            error_source_061,
                            duplicates_054[1],
                            sexp_048);
                  if(extra_055[1])
                   return caml_call3
                           (Sexplib0_Sexp_conv_error[13],
                            error_source_061,
                            extra_055[1],
                            sexp_048);
                  var _kn_=last_seqnum_050[1],_ko_=last_result_052[1];
                  if(_kn_ && _ko_)
                   {var last_result_053=_ko_[1],last_seqnum_051=_kn_[1];
                    return [0,last_seqnum_051,last_result_053]}
                  return caml_call3
                          (Sexplib0_Sexp_conv_error[15],
                           error_source_061,
                           sexp_048,
                           [0,
                            [0,0 === last_seqnum_050[1]?1:0,cst_last_seqnum$0],
                            [0,[0,0 === last_result_052[1]?1:0,cst_last_result$0],0]])}}
              function sexp_of_t(param)
               {var
                 last_result_068=param[2],
                 last_seqnum_066=param[1],
                 arg_069=caml_call1(Result[2],last_result_068),
                 bnds_065=[0,[1,[0,_c5_,[0,arg_069,0]]],0],
                 arg_067=caml_call1(Core[356],last_seqnum_066),
                 bnds_065$0=[0,[1,[0,_c6_,[0,arg_067,0]]],bnds_065];
                return [1,bnds_065$0]}
              function equal(a_070,b_071)
               {if(caml_call2(Ppx_compare_lib[1],a_070,b_071))return 1;
                var _kh_=caml_call2(Core[353],a_070[1],b_071[1]);
                return _kh_?caml_call2(Result[3],a_070[2],b_071[2]):_kh_}
              function sexp_of_t$0(param)
               {var
                 arg1_073=param[2],
                 arg0_072=param[1],
                 res0_074=caml_call1(Core[356],arg0_072),
                 res1_075=caml_call1(Result[2],arg1_073);
                return [1,[0,_c7_,[0,res0_074,[0,res1_075,0]]]]}
              var Action=[0,sexp_of_t$0];
              function _j0_(state)
               {function _j4_(param,input)
                 {var
                   _kc_=param[2],
                   match=_kc_[2],
                   inject_change=match[2],
                   next_seqnum=_kc_[1],
                   effect=param[1];
                  function _kd_(seqnum)
                   {function _kf_(result)
                     {return caml_call1
                              (inject_change,[0,seqnum,caml_call1(wrap_result,result)])}
                    var _kg_=caml_call1(effect,input);
                    return caml_call2(Ui_effect[13][4][2],_kg_,_kf_)}
                  var _ke_=caml_call1(next_seqnum,0);
                  return caml_call2(Ui_effect[13][4][2],_ke_,_kd_)}
                var
                 _j5_=caml_call2(Let_syntax$2[5][5],let_syntax_078,state),
                 _j6_=caml_call2(Let_syntax$2[5][5],let_syntax_077,_j5_),
                 callback=caml_call2(Let_syntax$2[5][4],_j6_,_j4_);
                function _j7_(pattern_syntax_083)
                 {function _j9_(param)
                   {function _kb_(param)
                     {var match=param[1],last_result=match[2];return last_result}
                    return caml_call3(Let_syntax$2[5][6],_c8_,state,_kb_)}
                  function _j__(param){return 0}
                  var
                   _j$_=caml_call2(Let_syntax$2[5][4],pattern_syntax_083,_j__),
                   _ka_=caml_call1(Let_syntax$2[5][3],_j$_);
                  return caml_call3(Let_syntax$2[5][1],_c9_,_ka_,_j9_)}
                var _j8_=on_change$0(here,Input,input,callback);
                return caml_call3(Let_syntax$2[5][1],_c__,_j8_,_j7_)}
              var
               _j1_=
                state_machine0
                 (here,
                  [0,t_of_sexp,sexp_of_t,equal],
                  Action,
                  [0,-1,initial],
                  function(param,_j3_,model,_j2_)
                   {var res=_j2_[2],seqnum=_j2_[1];
                    return caml_call2(Core[92],seqnum,model[1])
                            ?model
                            :[0,seqnum,res]});
              return caml_call3(Let_syntax$2[5][1],_c$_,_j1_,_j0_)}
            function _jX_(param)
             {var pattern_syntax_046=param[2];return pattern_syntax_046}
            var
             _jY_=caml_call2(Let_syntax$2[5][4],pattern_syntax_045,_jX_),
             _jZ_=caml_call1(Let_syntax$2[5][3],_jY_);
            return caml_call3(Let_syntax$2[5][1],_da_,_jZ_,_jW_)}
          function _jT_(param,i,_jV_){return [0,i + 1 | 0,i]}
          var
           _jU_=
            actor0
             (here,
              [0,Core_Int[79],Core_Int[80],Core_Int[90]],
              [0,Core_Unit[15]],
              0,
              _jT_);
          return caml_call3(Let_syntax$2[5][1],_db_,_jU_,_jS_)}}}
    function effect_on_change(here,Input)
     {return function(Result)
       {return function(kind,input,effect)
         {if(kind)
           {var initial=kind[1],_jN_=function(_jR_){return _jR_};
            return caml_call5
                    (poll_effect_on_change_implemen(here,Input),
                     Result,
                     initial,
                     _jN_,
                     effect,
                     input)}
          var _jO_=Core_Option[53],_jP_=0;
          function t_of_sexp(x_086)
           {return caml_call2(Core[455],Result[1],x_086)}
          function sexp_of_t(x_087)
           {return caml_call2(Core[454],Result[2],x_087)}
          function equal(a_088,b_089)
           {function _jQ_(a_090,b_091)
             {return caml_call2(Result[3],a_090,b_091)}
            return caml_call3(Core[452],_jQ_,a_088,b_089)}
          return caml_call5
                  (poll_effect_on_change_implemen(here,Input),
                   [0,t_of_sexp,sexp_of_t,equal],
                   _jP_,
                   _jO_,
                   effect,
                   input)}}}
    var
     Poll=[0,Starting,poll_effect_on_change_implemen,effect_on_change],
     Edge=
      [0,
       lifecycle$0,
       lifecycle$1,
       after_display,
       after_display$0,
       on_change,
       on_change$0,
       Poll];
    function value_cutoff(t,equal){return read(cutoff(equal,t))}
    function model_cutoff(param)
     {var
       apply_static=param[5],
       model=param[4],
       static_action=param[3],
       dynamic_action=param[2],
       t=param[1];
      return [0,[4,t,model],dynamic_action,static_action,model,apply_static]}
    function compute_with_clock(t,f)
     {function dynamic_apply_action(input,param)
       {function _jM_(param,model){return Core_Nothing[3]}
        return caml_call1(Ui_incr[11],_jM_)}
      function compute(clock,input,model,param)
       {return caml_call2(f,clock,input)}
      return [0,
              [3,t,dynamic_apply_action,compute,cst_incr_compute],
              _ah_[1],
              _ah_[1],
              _ai_[1],
              unusable_static_apply_action]}
    function compute(t,f)
     {return compute_with_clock
              (t,function(param,input){return caml_call1(f,input)})}
    function with_clock(f)
     {function _jL_(clock,param){return caml_call1(f,clock)}
      return compute_with_clock(caml_call1(return$1,0),_jL_)}
    function to_value(incr){return [0,[1,incr],0]}
    var
     Incr=
      [0,
       value_cutoff,
       model_cutoff,
       compute_with_clock,
       compute,
       with_clock,
       to_value];
    function fallback(param)
     {if(0 === param[0]){var fallback$0=param[2];return fallback$0}
      var get=param[2],base=param[1];
      return caml_call1(get,fallback(base))}
    function create$2(opt,name,fallback,param)
     {if(opt)var sth=opt[1],sexp_of=sth;else var sexp_of=Core[150];
      return [0,caml_call2(Core_Type_equal[8][3],name,sexp_of),fallback]}
    function derived(opt,base,get,set)
     {if(opt)var sth=opt[1],sexp_of=sth;else var sexp_of=Core[150];
      return [1,base,get,set,sexp_of]}
    function fetch(t,default$0,for_some)
     {var t$0=t,for_some$0=for_some;
      for(;;)
       {if(0 === t$0[0])
         {var id=t$0[1];
          return [0,
                  [9,id,default$0,for_some$0],
                  _ah_[1],
                  _ah_[1],
                  _ai_[1],
                  unusable_static_apply_action]}
        var
         get=t$0[2],
         t$1=t$0[1],
         for_some$2=
          function(for_some,get)
           {function for_some$0(x)
             {return caml_call1(for_some,caml_call1(get,x))}
            return for_some$0},
         for_some$1=for_some$2(for_some$0,get),
         t$0=t$1,
         for_some$0=for_some$1}}
    function lookup(var$0)
     {function _jJ_(_jK_){return _jK_}
      return fetch(var$0,fallback(var$0),_jJ_)}
    function store(var$0,let_syntax_095,c)
     {if(0 === var$0[0])
       {var id=var$0[1];
        return [0,[8,id,let_syntax_095,c[1]],c[2],c[3],c[4],c[5]]}
      var set=var$0[3],base=var$0[1];
      function _jD_(current)
       {function _jF_(new$0){return store(base,new$0,c)}
        function _jG_(param)
         {var value=param[2],current=param[1];
          return caml_call2(set,current,value)}
        var
         _jH_=caml_call2(Let_syntax$2[5][5],current,let_syntax_095),
         _jI_=caml_call3(Let_syntax$2[5][6],_dc_,_jH_,_jG_);
        return caml_call3(Let_syntax$2[5][1],_dd_,_jI_,_jF_)}
      var _jE_=lookup(base);
      return caml_call3(Let_syntax$2[5][1],_de_,_jE_,_jD_)}
    function modify(var$0,change,f)
     {function _jB_(current)
       {function revert(c){return store(var$0,current,c)}
        var value=caml_call1(change,current);
        return store(var$0,value,caml_call1(f,[0,revert]))}
      var _jC_=lookup(var$0);
      return caml_call3(Let_syntax$2[5][1],_df_,_jC_,_jB_)}
    function set$2(t,v,inside){return store(t,v,inside)}
    function set$3(var$0,value,f)
     {return modify(var$0,function(param){return value},f)}
    var
     Dynamic_scope=
      [0,fallback,create$2,derived,fetch,lookup,store,modify,set$2,set$3];
    function approx_now(tick_every)
     {function _jy_(clock)
       {function _jz_(param){return caml_call1(Ui_incr[80][6],clock)}
        var _jA_=caml_call2(Ui_incr[80][12],clock,tick_every);
        return caml_call2(Ui_incr[78][4][6],_jA_,_jz_)}
      return caml_call1(Incr[5],_jy_)}
    var now=caml_call1(Incr[5],Ui_incr[80][7]);
    function t_of_sexp$1(sexp_102)
     {if(0 === sexp_102[0])
       {var _ju_=sexp_102[1],switch$0=0;
        if(caml_string_notequal(_ju_,cst_After))
         {var switch$1=0;
          if(caml_string_notequal(_ju_,cst_Before))
           if(caml_string_notequal(_ju_,cst_after))
            {if(caml_string_notequal(_ju_,cst_before))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)return 0}
        if(! switch$0)return 1}
      else
       {var _jv_=sexp_102[1];
        if(! _jv_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_101,sexp_102);
        var _jw_=_jv_[1];
        if(0 !== _jw_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_101,sexp_102);
        var _jx_=_jw_[1],switch$2=0;
        if(caml_string_notequal(_jx_,cst_After$0))
         {var switch$3=0;
          if(caml_string_notequal(_jx_,cst_Before$0))
           if(caml_string_notequal(_jx_,cst_after$0))
            {if(caml_string_notequal(_jx_,cst_before$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_101,sexp_102)}
        if(! switch$2)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_101,sexp_102)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_101,sexp_102)}
    function sexp_of_t$10(param){return param?_dg_:_dh_}
    function equal$0(_jt_,_js_){return _jt_ === _js_?1:0}
    var Before_or_after=[0,t_of_sexp$1,sexp_of_t$10,equal$0];
    function at(time)
     {function _jo_(clock)
       {var _jp_=Ui_incr[28],_jq_=caml_call1(Ui_incr[80][10],clock);
        return function(_jr_){return caml_call2(_jp_,_jr_,_jq_)}}
      return caml_call2(Incr[3],time,_jo_)}
    var
     include$5=Core_Time_ns[90][3][1],
     bin_size_t=include$5[1],
     bin_write_t=include$5[2],
     bin_read_t=include$5[3],
     bin_read_t$0=include$5[4],
     bin_shape_t=include$5[5],
     bin_writer_t=include$5[6],
     bin_reader_t=include$5[7],
     bin_t=include$5[8],
     compare$2=include$5[9],
     hash_fold_t$0=include$5[10],
     hash$0=include$5[11],
     t_of_sexp$2=include$5[12],
     sexp_of_t$11=include$5[13],
     t_sexp_grammar=include$5[14],
     comparator=include$5[15],
     Map=include$5[16],
     Set=include$5[17],
     equal$1=Core_Time_ns[21],
     Time_ns_model=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare$2,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$2,
       sexp_of_t$11,
       t_sexp_grammar,
       comparator,
       Map,
       Set,
       equal$1];
    function _di_(clock)
     {var _jl_=0;
      function _jm_(param){return caml_call1(Ui_incr[80][6],clock)}
      var _jn_=caml_call2(Ui_effect[17],_jm_,_jl_);
      return caml_call1(Ui_incr[11],_jn_)}
    var get_current_time=caml_call1(Incr[5],_di_);
    function every(here,span,callback)
     {function _jf_(input)
       {function _jk_(callback,param){return callback}
        var callback$0=caml_call2(Let_syntax$2[5][4],callback,_jk_);
        return caml_call4
                (Edge[6],
                 here,
                 [0,Time_ns_model[12],Time_ns_model[13],Time_ns_model[18]],
                 input,
                 callback$0)}
      function _jg_(clock)
       {function _ji_(param){return caml_call1(Ui_incr[80][6],clock)}
        var _jj_=caml_call2(Ui_incr[80][12],clock,span);
        return caml_call2(Ui_incr[78][4][6],_jj_,_ji_)}
      var _jh_=caml_call1(Incr[5],_jg_);
      return caml_call3(Let_syntax$2[5][1],_dj_,_jh_,_jf_)}
    var
     Clock=
      [0,
       approx_now,
       now,
       Before_or_after,
       at,
       Time_ns_model,
       get_current_time,
       every];
    function map2$1(a,b,f)
     {function _jb_(let_syntax_110)
       {function _jc_(b)
         {function _jd_(param)
           {var b=param[2],a=param[1];return caml_call2(f,a,b)}
          var _je_=caml_call2(Let_syntax$2[5][5],let_syntax_110,b);
          return caml_call3(Let_syntax$2[5][6],_dk_,_je_,_jd_)}
        return caml_call3(Let_syntax$2[5][1],_dl_,b,_jc_)}
      return caml_call3(Let_syntax$2[5][1],_dm_,a,_jb_)}
    var
     map$6=
      [0,
       -198771759,
       function(a,f)
        {function _i$_(a)
          {function _ja_(a){return caml_call1(f,a)}
           return caml_call3(Let_syntax$2[5][6],_dn_,a,_ja_)}
         return caml_call3(Let_syntax$2[5][1],_do_,a,_i$_)}],
     include$6=caml_call1(Base_Applicative[11],[0,const$0,map2$1,map$6]),
     return$2=include$6[1],
     map$7=include$6[2],
     both$3=include$6[3],
     symbol$6=include$6[4],
     symbol$7=include$6[5],
     symbol$8=include$6[6],
     symbol_map$2=include$6[7],
     apply$0=include$6[8],
     map2$2=include$6[9],
     Applicative_infix$0=include$6[13];
    function map3$0(t1,t2,t3,f)
     {function _i8_(t1)
       {function _i9_(t2)
         {function _i__(t3){return read(map3(t1,t2,t3,f))}
          return caml_call3(Let_syntax$2[5][1],_dp_,t3,_i__)}
        return caml_call3(Let_syntax$2[5][1],_dq_,t2,_i9_)}
      return caml_call3(Let_syntax$2[5][1],_dr_,t1,_i8_)}
    function map4$0(t1,t2,t3,t4,f)
     {function _i4_(t1)
       {function _i5_(t2)
         {function _i6_(t3)
           {function _i7_(t4){return read(map4(t1,t2,t3,t4,f))}
            return caml_call3(Let_syntax$2[5][1],_ds_,t4,_i7_)}
          return caml_call3(Let_syntax$2[5][1],_dt_,t3,_i6_)}
        return caml_call3(Let_syntax$2[5][1],_du_,t2,_i5_)}
      return caml_call3(Let_syntax$2[5][1],_dv_,t1,_i4_)}
    function map5$0(t1,t2,t3,t4,t5,f)
     {function _iZ_(t1)
       {function _i0_(t2)
         {function _i1_(t3)
           {function _i2_(t4)
             {function _i3_(t5){return read(map5(t1,t2,t3,t4,t5,f))}
              return caml_call3(Let_syntax$2[5][1],_dw_,t5,_i3_)}
            return caml_call3(Let_syntax$2[5][1],_dx_,t4,_i2_)}
          return caml_call3(Let_syntax$2[5][1],_dy_,t3,_i1_)}
        return caml_call3(Let_syntax$2[5][1],_dz_,t2,_i0_)}
      return caml_call3(Let_syntax$2[5][1],_dA_,t1,_iZ_)}
    function map6$0(t1,t2,t3,t4,t5,t6,f)
     {function _iT_(t1)
       {function _iU_(t2)
         {function _iV_(t3)
           {function _iW_(t4)
             {function _iX_(t5)
               {function _iY_(t6){return read(map6(t1,t2,t3,t4,t5,t6,f))}
                return caml_call3(Let_syntax$2[5][1],_dB_,t6,_iY_)}
              return caml_call3(Let_syntax$2[5][1],_dC_,t5,_iX_)}
            return caml_call3(Let_syntax$2[5][1],_dD_,t4,_iW_)}
          return caml_call3(Let_syntax$2[5][1],_dE_,t3,_iV_)}
        return caml_call3(Let_syntax$2[5][1],_dF_,t2,_iU_)}
      return caml_call3(Let_syntax$2[5][1],_dG_,t1,_iT_)}
    function map7$0(t1,t2,t3,t4,t5,t6,t7,f)
     {function _iM_(t1)
       {function _iN_(t2)
         {function _iO_(t3)
           {function _iP_(t4)
             {function _iQ_(t5)
               {function _iR_(t6)
                 {function _iS_(t7){return read(map7(t1,t2,t3,t4,t5,t6,t7,f))}
                  return caml_call3(Let_syntax$2[5][1],_dH_,t7,_iS_)}
                return caml_call3(Let_syntax$2[5][1],_dI_,t6,_iR_)}
              return caml_call3(Let_syntax$2[5][1],_dJ_,t5,_iQ_)}
            return caml_call3(Let_syntax$2[5][1],_dK_,t4,_iP_)}
          return caml_call3(Let_syntax$2[5][1],_dL_,t3,_iO_)}
        return caml_call3(Let_syntax$2[5][1],_dM_,t2,_iN_)}
      return caml_call3(Let_syntax$2[5][1],_dN_,t1,_iM_)}
    var
     Mapn=[0,map2$2,map3$0,map4$0,map5$0,map6$0,map7$0],
     map2$3=Mapn[1],
     map3$1=Mapn[2],
     map4$1=Mapn[3],
     map5$1=Mapn[4],
     map6$1=Mapn[5],
     map7$1=Mapn[6];
    function all$0(param)
     {if(! param)return caml_call1(return$2,0);
      var _iz_=param[2],_iA_=param[1];
      if(! _iz_)return caml_call2(map$7,_iA_,function(a1){return [0,a1,0]});
      var _iB_=_iz_[2],_iC_=_iz_[1];
      if(! _iB_)
       return caml_call3
               (map2$3,_iA_,_iC_,function(a1,a2){return [0,a1,[0,a2,0]]});
      var _iD_=_iB_[2],_iE_=_iB_[1];
      if(! _iD_)
       return caml_call4
               (map3$1,
                _iA_,
                _iC_,
                _iE_,
                function(a1,a2,a3){return [0,a1,[0,a2,[0,a3,0]]]});
      var _iF_=_iD_[2],_iG_=_iD_[1];
      if(! _iF_)
       return caml_call5
               (map4$1,
                _iA_,
                _iC_,
                _iE_,
                _iG_,
                function(a1,a2,a3,a4){return [0,a1,[0,a2,[0,a3,[0,a4,0]]]]});
      var _iH_=_iF_[2],_iI_=_iF_[1];
      if(! _iH_)
       return caml_call6
               (map5$1,
                _iA_,
                _iC_,
                _iE_,
                _iG_,
                _iI_,
                function(a1,a2,a3,a4,a5)
                 {return [0,a1,[0,a2,[0,a3,[0,a4,[0,a5,0]]]]]});
      var _iJ_=_iH_[2],_iK_=_iH_[1];
      if(! _iJ_)
       return caml_call7
               (map6$1,
                _iA_,
                _iC_,
                _iE_,
                _iG_,
                _iI_,
                _iK_,
                function(a1,a2,a3,a4,a5,a6)
                 {return [0,a1,[0,a2,[0,a3,[0,a4,[0,a5,[0,a6,0]]]]]]});
      var _iL_=_iJ_[1];
      if(! _iJ_[2])
       return caml_call8
               (map7$1,
                _iA_,
                _iC_,
                _iE_,
                _iG_,
                _iI_,
                _iK_,
                _iL_,
                function(a1,a2,a3,a4,a5,a6,a7)
                 {return [0,a1,[0,a2,[0,a3,[0,a4,[0,a5,[0,a6,[0,a7,0]]]]]]]});
      var
       rest=_iJ_[2],
       left=
        caml_call8
         (map7$1,
          _iA_,
          _iC_,
          _iE_,
          _iG_,
          _iI_,
          _iK_,
          _iL_,
          function(a1,a2,a3,a4,a5,a6,a7)
           {return [0,a1,[0,a2,[0,a3,[0,a4,[0,a5,[0,a6,[0,a7,0]]]]]]]}),
       right=all$0(rest);
      return caml_call3
              (map2$3,
               left,
               right,
               function(left,right){return caml_call2(Core[157],left,right)})}
    function reduce_balanced(xs,f)
     {function _iw_(a,b)
       {function _ix_(a)
         {function _iy_(b){return caml_call2(f,a,b)}
          return caml_call3(Let_syntax$2[5][1],_dO_,b,_iy_)}
        return caml_call3(Let_syntax$2[5][1],_dP_,a,_ix_)}
      return caml_call2(Core_List[98],xs,_iw_)}
    function all_unit$0(xs)
     {function _iv_(param){return 0}return caml_call2(map$7,all$0(xs),_iv_)}
    function all_map(map_of_computations)
     {var
       _ir_=caml_call1(Core_Map[3],map_of_computations),
       _is_=caml_call1(Core_Map[8],_ir_);
      function _it_(param)
       {var data=param[2],key=param[1];
        return caml_call2(map$7,data,caml_call1(Core_Tuple[1][6],key))}
      var _iu_=caml_call2(Core_Map[74],0,map_of_computations);
      return caml_call2(map$7,all$0(caml_call2(Core_List[72],_iu_,_it_)),_is_)}
    var
     symbol$9=Applicative_infix$0[1],
     symbol$10=Applicative_infix$0[2],
     symbol$11=Applicative_infix$0[3],
     symbol_map$3=Applicative_infix$0[4],
     map2$4=Mapn[1],
     map3$2=Mapn[2],
     map4$2=Mapn[3],
     map5$2=Mapn[4],
     map6$2=Mapn[5],
     map7$2=Mapn[6],
     Let_syntax$3=
      [0,return$2,map$7,both$3,map2$4,map3$2,map4$2,map5$2,map6$2,map7$2],
     Let_syntax$4=
      [0,return$2,symbol$9,symbol$10,symbol$11,symbol_map$3,Let_syntax$3],
     Computation=
      [0,
       return$2,
       map$7,
       both$3,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol_map$2,
       apply$0,
       Applicative_infix$0,
       Mapn,
       map2$3,
       map3$1,
       map4$1,
       map5$1,
       map6$1,
       map7$1,
       all$0,
       reduce_balanced,
       all_unit$0,
       all_map,
       Let_syntax$4];
    function conceal_value(_iq_){return _iq_}
    function reveal_value(_ip_){return _ip_}
    function conceal_computation(_io_){return _io_}
    function reveal_computation(_in_){return _in_}
    var
     include$7=
      [0,conceal_value,reveal_value,conceal_computation,reveal_computation];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$55);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Proc$0);
    var
     Bonsai_Proc=
      [0,
       unusable_static_apply_action,
       sub,
       read,
       switch$0,
       Let_syntax$2,
       pure,
       const$0,
       with_model_resetter,
       assoc,
       enum$0,
       state_machine1,
       of_module1,
       of_module2,
       state_machine0,
       of_module0,
       actor1,
       actor0,
       lazy,
       wrap,
       state,
       state_opt,
       path,
       path_id,
       Edge,
       Incr,
       Dynamic_scope,
       Clock,
       Computation,
       include$7];
    caml_register_global(798,Bonsai_Proc,"Bonsai__Proc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Legacy_api_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$56);
    caml_call1(Expect_test_collector[5][1],cst_src_legacy_api_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$57,cst$32);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$58);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Legacy_api_intf$0);
    var Bonsai_Legacy_api_intf=[0];
    caml_register_global(799,Bonsai_Legacy_api_intf,"Bonsai__Legacy_api_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Legacy_api);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$59);
    caml_call1(Expect_test_collector[5][1],cst_src_legacy_api_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$60,cst$33);
    function const$1(x,param){return const$0(x)}
    function pure$0(f,i){return read(caml_call2(map$0,i,f))}
    function compose(a,b,i)
     {var _im_=caml_call1(a,i);return caml_call3(Let_syntax$2[5][1],0,_im_,b)}
    function map$8(a,f,i)
     {function _ik_(x){return read(caml_call2(map$0,x,f))}
      var _il_=caml_call1(a,i);
      return caml_call3(Let_syntax$2[5][1],0,_il_,_ik_)}
    function map_input(a,f,i){return caml_call1(a,caml_call2(map$0,i,f))}
    function state_machine(model,action,here)
     {return caml_call1(state_machine1(here,model),action)}
    function both$4(a,b,i)
     {function _if_(a)
       {function _ih_(b)
         {var _ij_=both(a,b);return caml_call1(Let_syntax$2[1],_ij_)}
        var _ii_=caml_call1(b,i);
        return caml_call3(Let_syntax$2[5][1],_dQ_,_ii_,_ih_)}
      var _ig_=caml_call1(a,i);
      return caml_call3(Let_syntax$2[5][1],_dR_,_ig_,_if_)}
    function enum$1(m,which,handle,input)
     {var match=caml_call2(map$0,input,which);
      function with$0(key){return caml_call2(handle,key,input)}
      return caml_call2(enum$0(m),match,with$0)}
    function if$0(choose,then,else$0,input)
     {var cond=caml_call2(map$0,input,choose);
      function _h$_(pattern_syntax_003)
       {function _ib_(param)
         {if(0 === param)return caml_call1(then,input);
          if(1 === param)return caml_call1(else$0,input);
          throw [0,Assert_failure,_dS_]}
        var _ic_=2;
        function _id_(param){return param?0:1}
        var _ie_=caml_call2(Let_syntax$2[5][4],pattern_syntax_003,_id_);
        return caml_call3(Let_syntax$2[5][2],_ie_,_ic_,_ib_)}
      var _ia_=caml_call1(Let_syntax$2[5][3],cond);
      return caml_call3(Let_syntax$2[5][1],_dT_,_ia_,_h$_)}
    function assoc_input(comparator,f,input)
     {return assoc(comparator,input,function(param){return f})}
    function associ_input(comparator,f,input)
     {return assoc
              (comparator,
               input,
               function(key,data){return caml_call1(f,both(key,data))})}
    function associ_input_with_extra(comparator,f,input)
     {function _h7_(param)
       {var pattern_syntax_004=param[2];return pattern_syntax_004}
      var extra=caml_call2(Let_syntax$2[5][4],input,_h7_);
      function _h8_(param)
       {var pattern_syntax_005=param[1];return pattern_syntax_005}
      var input$0=caml_call2(Let_syntax$2[5][4],input,_h8_);
      return assoc
              (comparator,
               input$0,
               function(key,data)
                {var
                  _h9_=caml_call2(Let_syntax$2[3],Core_Tuple[2][5],key),
                  _h__=caml_call2(Let_syntax$2[2],_h9_,data);
                 return caml_call1(f,caml_call2(Let_syntax$2[2],_h__,extra))})}
    var Map$0=[0,assoc_input,associ_input,associ_input_with_extra];
    function arr$0(f){return function(_h6_){return pure$0(f,_h6_)}}
    function symbol$12(a,f){return function(_h5_){return map$8(a,f,_h5_)}}
    function symbol$13(a,f){return function(_h4_){return map_input(a,f,_h4_)}}
    function first(f,i)
     {function _hZ_(param)
       {var pattern_syntax_006=param[1];return pattern_syntax_006}
      var fst=caml_call2(Let_syntax$2[5][4],i,_hZ_);
      function _h0_(param)
       {var pattern_syntax_007=param[2];return pattern_syntax_007}
      var snd=caml_call2(Let_syntax$2[5][4],i,_h0_);
      function _h1_(out)
       {var _h3_=both(out,snd);return caml_call1(Let_syntax$2[1],_h3_)}
      var _h2_=caml_call1(f,fst);
      return caml_call3(Let_syntax$2[5][1],_dU_,_h2_,_h1_)}
    function second(f,i)
     {function _hU_(param)
       {var pattern_syntax_009=param[1];return pattern_syntax_009}
      var fst=caml_call2(Let_syntax$2[5][4],i,_hU_);
      function _hV_(param)
       {var pattern_syntax_010=param[2];return pattern_syntax_010}
      var snd=caml_call2(Let_syntax$2[5][4],i,_hV_);
      function _hW_(out)
       {var _hY_=both(fst,out);return caml_call1(Let_syntax$2[1],_hY_)}
      var _hX_=caml_call1(f,snd);
      return caml_call3(Let_syntax$2[5][1],_dV_,_hX_,_hW_)}
    function symbol$14(f1,f2,i)
     {function _hN_(param)
       {var pattern_syntax_012=param[1];return pattern_syntax_012}
      var fst=caml_call2(Let_syntax$2[5][4],i,_hN_);
      function _hO_(param)
       {var pattern_syntax_013=param[2];return pattern_syntax_013}
      var snd=caml_call2(Let_syntax$2[5][4],i,_hO_);
      function _hP_(out1)
       {function _hR_(out2)
         {var _hT_=both(out1,out2);return caml_call1(Let_syntax$2[1],_hT_)}
        var _hS_=caml_call1(f2,snd);
        return caml_call3(Let_syntax$2[5][1],_dW_,_hS_,_hR_)}
      var _hQ_=caml_call1(f1,fst);
      return caml_call3(Let_syntax$2[5][1],_dX_,_hQ_,_hP_)}
    function extend_first(f,i)
     {function _hK_(out)
       {var _hM_=both(out,i);return caml_call1(Let_syntax$2[1],_hM_)}
      var _hL_=caml_call1(f,i);
      return caml_call3(Let_syntax$2[5][1],_dY_,_hL_,_hK_)}
    function extend_second(f,i)
     {function _hH_(out)
       {var _hJ_=both(i,out);return caml_call1(Let_syntax$2[1],_hJ_)}
      var _hI_=caml_call1(f,i);
      return caml_call3(Let_syntax$2[5][1],_dZ_,_hI_,_hH_)}
    function symbol$15(f1,f2,i)
     {function _hC_(out1)
       {function _hE_(out2)
         {var _hG_=both(out1,out2);return caml_call1(Let_syntax$2[1],_hG_)}
        var _hF_=caml_call1(f2,i);
        return caml_call3(Let_syntax$2[5][1],_d0_,_hF_,_hE_)}
      var _hD_=caml_call1(f1,i);
      return caml_call3(Let_syntax$2[5][1],_d1_,_hD_,_hC_)}
    function partial_compose_first(f1,f2,i)
     {function _hv_(out1)
       {function _hx_(param)
         {var pattern_syntax_021=param[2];return pattern_syntax_021}
        var out1$0=caml_call2(Let_syntax$2[5][4],out1,_hx_);
        function _hy_(param)
         {var pattern_syntax_022=param[1];return pattern_syntax_022}
        var shared=caml_call2(Let_syntax$2[5][4],out1,_hy_);
        function _hz_(out2)
         {var _hB_=both(out1$0,out2);return caml_call1(Let_syntax$2[1],_hB_)}
        var _hA_=caml_call1(f2,both(i,shared));
        return caml_call3(Let_syntax$2[5][1],_d2_,_hA_,_hz_)}
      var _hw_=caml_call1(f1,i);
      return caml_call3(Let_syntax$2[5][1],_d3_,_hw_,_hv_)}
    function pipe(f1,into,via,finalize,i)
     {function _hn_(r1)
       {var
         _hp_=caml_call2(Let_syntax$2[3],via,i),
         intermediate=caml_call2(Let_syntax$2[2],_hp_,r1);
        function _hq_(r2)
         {var
           _hs_=caml_call2(Let_syntax$2[3],finalize,i),
           _ht_=caml_call2(Let_syntax$2[2],_hs_,r1),
           _hu_=caml_call2(Let_syntax$2[2],_ht_,r2);
          return caml_call1(Let_syntax$2[1],_hu_)}
        var _hr_=caml_call1(into,intermediate);
        return caml_call3(Let_syntax$2[5][1],_d4_,_hr_,_hq_)}
      var _ho_=caml_call1(f1,i);
      return caml_call3(Let_syntax$2[5][1],_d5_,_ho_,_hn_)}
    function of_incr$0(i,param)
     {var _hm_=of_incr(i);return read(caml_call1(include$7[1],_hm_))}
    function of_module$1(M,default_model,input)
     {var input$0=caml_call1(include$7[2],input),_hh_=M[1];
      function _hi_(param){return M[7]}
      var
       t=[3,input$0,M[6],_hi_,_hh_],
       _hj_=caml_call3(_ai_[4],M[3],default_model,M[1]),
       _hk_=_ah_[1],
       _hl_=
        [0,
         t,
         caml_call2(_ah_[4],M[4],M[1]),
         _hk_,
         _hj_,
         unusable_static_apply_action];
      return caml_call1(include$7[3],_hl_)}
    function pure$1(f)
     {var Input=[0],Result=[0],_g$_=0;
      function apply_action(param,_hd_)
       {function _he_(param,_hg_,_hf_){return 0}
        return caml_call1(Ui_incr[11],_he_)}
      function compute(input,param,_hc_){return caml_call1(f,input)}
      var
       _ha_=
        [0,
         name,
         Input,
         [0,Core_Unit[14],Core_Unit[15],Core_Unit[25]],
         [0,Core_Nothing[13]],
         Result,
         apply_action,
         compute];
      return function(_hb_){return of_module$1(_ha_,_g$_,_hb_)}}
    function map$9(a,f)
     {var _g9_=pure$1(f);return function(_g__){return compose(a,_g9_,_g__)}}
    function model_cutoff$0(f,a)
     {var _g8_=caml_call1(f,a);return caml_call1(Incr[2],_g8_)}
    function value_cutoff$0(cutoff)
     {return map$9
              (read,
               function(input)
                {function _g6_(_g7_){return _g7_}
                 var input$0=caml_call2(Ui_incr[12],input,_g6_);
                 caml_call2(Ui_incr[61],input$0,cutoff);
                 return input$0})}
    function symbol_map$4(a,f){return function(_g5_){return map$8(a,f,_g5_)}}
    function symbol$16(f,a){return function(_g4_){return map_input(a,f,_g4_)}}
    var
     Infix=[0,compose,symbol_map$4,symbol$16],
     symbol$17=Infix[1],
     symbol_map$5=Infix[2],
     symbol$18=Infix[3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$61);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Legacy_api$0);
    var
     Let_syntax$5=
      [0,
       const$1,
       symbol$17,
       symbol_map$5,
       symbol$18,
       [0,const$1,map$8,both$4,Infix]],
     With_incr=
      [0,of_incr$0,of_module$1,map$9,pure$1,model_cutoff$0,value_cutoff$0],
     include$8=
      [0,
       const$1,
       read,
       pure$0,
       compose,
       map$8,
       map_input,
       of_module1,
       both$4,
       state_machine,
       enum$1,
       if$0,
       Map$0,
       arr$0,
       symbol$12,
       symbol$13,
       first,
       second,
       symbol$14,
       extend_first,
       extend_second,
       symbol$15,
       symbol$14,
       symbol$15,
       partial_compose_first,
       pipe,
       With_incr,
       Infix,
       Let_syntax$5];
    caml_register_global(800,include$8,"Bonsai__Legacy_api");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Graph_info);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$62);
    caml_call1(Expect_test_collector[5][1],cst_src_graph_info_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$63,cst$34);
    function t_of_sexp$3(sexp_002)
     {if(0 === sexp_002[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_021,sexp_002);
      var
       field_sexps_003=sexp_002[1],
       pos_fname_004=[0,0],
       pos_lnum_006=[0,0],
       pos_bol_008=[0,0],
       pos_cnum_010=[0,0],
       duplicates_012=[0,0],
       extra_013=[0,0],
       param=field_sexps_003;
      for(;;)
       {if(param)
         {var _gU_=param[1];
          if(1 === _gU_[0])
           {var _gV_=_gU_[1];
            if(_gV_)
             {var _gW_=_gV_[1];
              if(0 === _gW_[0])
               {var _gX_=_gV_[2],_gY_=_gW_[1],switch$0=0;
                if(! _gX_ || ! _gX_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_023=param[2],
                   field_sexp_015$4=
                    function(_g3_)
                     {function field_sexp_015(param)
                       {if(! _g3_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_021,sexp_002);
                        if(_g3_[2])throw [0,Assert_failure,_d6_];
                        var x_024=_g3_[1];
                        return x_024}
                      return field_sexp_015},
                   field_sexp_015=field_sexp_015$4(_gX_);
                  if(caml_string_notequal(_gY_,cst_pos_bol))
                   if(caml_string_notequal(_gY_,cst_pos_cnum))
                    if(caml_string_notequal(_gY_,cst_pos_fname))
                     if(caml_string_notequal(_gY_,cst_pos_lnum))
                      {if(Sexplib0_Sexp_conv[26][1])
                        extra_013[1] = [0,_gY_,extra_013[1]]}
                     else
                      if(pos_lnum_006[1])
                       duplicates_012[1] = [0,_gY_,duplicates_012[1]];
                      else
                       {var
                         field_sexp_015$0=field_sexp_015(0),
                         fvalue_019=caml_call1(Core[357],field_sexp_015$0);
                        pos_lnum_006[1] = [0,fvalue_019]}
                    else
                     if(pos_fname_004[1])
                      duplicates_012[1] = [0,_gY_,duplicates_012[1]];
                     else
                      {var
                        field_sexp_015$1=field_sexp_015(0),
                        fvalue_020=caml_call1(Core[472],field_sexp_015$1);
                       pos_fname_004[1] = [0,fvalue_020]}
                   else
                    if(pos_cnum_010[1])
                     duplicates_012[1] = [0,_gY_,duplicates_012[1]];
                    else
                     {var
                       field_sexp_015$2=field_sexp_015(0),
                       fvalue_017=caml_call1(Core[357],field_sexp_015$2);
                      pos_cnum_010[1] = [0,fvalue_017]}
                  else
                   if(pos_bol_008[1])
                    duplicates_012[1] = [0,_gY_,duplicates_012[1]];
                   else
                    {var
                      field_sexp_015$3=field_sexp_015(0),
                      fvalue_018=caml_call1(Core[357],field_sexp_015$3);
                     pos_bol_008[1] = [0,fvalue_018]}
                  var param=tail_023;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_021,_gU_)}
        if(duplicates_012[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_021,
                  duplicates_012[1],
                  sexp_002);
        if(extra_013[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_021,
                  extra_013[1],
                  sexp_002);
        var
         _gZ_=pos_fname_004[1],
         _g0_=pos_lnum_006[1],
         _g1_=pos_bol_008[1],
         _g2_=pos_cnum_010[1];
        if(_gZ_ && _g0_ && _g1_ && _g2_)
         {var
           pos_cnum_011=_g2_[1],
           pos_bol_009=_g1_[1],
           pos_lnum_007=_g0_[1],
           pos_fname_005=_gZ_[1];
          return [0,pos_fname_005,pos_lnum_007,pos_bol_009,pos_cnum_011]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_021,
                 sexp_002,
                 [0,
                  [0,0 === pos_fname_004[1]?1:0,cst_pos_fname$0],
                  [0,
                   [0,0 === pos_lnum_006[1]?1:0,cst_pos_lnum$0],
                   [0,
                    [0,0 === pos_bol_008[1]?1:0,cst_pos_bol$0],
                    [0,[0,0 === pos_cnum_010[1]?1:0,cst_pos_cnum$0],0]]]])}}
    function sexp_of_t$12(param)
     {var
       pos_cnum_032=param[4],
       pos_bol_030=param[3],
       pos_lnum_028=param[2],
       pos_fname_026=param[1],
       arg_033=caml_call1(Core[356],pos_cnum_032),
       bnds_025=[0,[1,[0,_d7_,[0,arg_033,0]]],0],
       arg_031=caml_call1(Core[356],pos_bol_030),
       bnds_025$0=[0,[1,[0,_d8_,[0,arg_031,0]]],bnds_025],
       arg_029=caml_call1(Core[356],pos_lnum_028),
       bnds_025$1=[0,[1,[0,_d9_,[0,arg_029,0]]],bnds_025$0],
       arg_027=caml_call1(Core[471],pos_fname_026),
       bnds_025$2=[0,[1,[0,_d__,[0,arg_027,0]]],bnds_025$1];
      return [1,bnds_025$2]}
    var
     _d$_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_pos_fname$1,Core[459]],
         [0,
          [0,cst_pos_lnum$1,Core[344]],
          [0,[0,cst_pos_bol$1,Core[344]],[0,[0,cst_pos_cnum$1,Core[344]],0]]]]),
     _ea_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t),0,_d$_],0],
     _eb_=caml_call1(Bin_prot_Shape[4][1],cst_src_graph_info_ml_6_2),
     group$0=caml_call2(Bin_prot_Shape[6],_eb_,_ea_),
     _ec_=caml_call1(Bin_prot_Shape[2][1],cst_t$0),
     bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_ec_),0);
    function bin_size_t$0(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _gQ_=caml_call1(Core[460],v1),
       size=caml_call2(Bin_prot_Common[23],0,_gQ_),
       _gR_=caml_call1(Core[345],v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_gR_),
       _gS_=caml_call1(Core[345],v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_gS_),
       _gT_=caml_call1(Core[345],v4);
      return caml_call2(Bin_prot_Common[23],size$1,_gT_)}
    function bin_write_t$0(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Core[461],buf,pos,v1),
       pos$1=caml_call3(Core[346],buf,pos$0,v2),
       pos$2=caml_call3(Core[346],buf,pos$1,v3);
      return caml_call3(Core[346],buf,pos$2,v4)}
    function bin_read_t$1(buf,pos_ref)
     {var
       v_pos_fname=caml_call2(Core[463],buf,pos_ref),
       v_pos_lnum=caml_call2(Core[348],buf,pos_ref),
       v_pos_bol=caml_call2(Core[348],buf,pos_ref),
       v_pos_cnum=caml_call2(Core[348],buf,pos_ref);
      return [0,v_pos_fname,v_pos_lnum,v_pos_bol,v_pos_cnum]}
    function t_of_sexp$4(sexp_035)
     {if(0 === sexp_035[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_048,sexp_035);
      var
       field_sexps_036=sexp_035[1],
       node_type_037=[0,0],
       here_039=[0,0],
       duplicates_041=[0,0],
       extra_042=[0,0],
       param=field_sexps_036;
      for(;;)
       {if(param)
         {var _gI_=param[1];
          if(1 === _gI_[0])
           {var _gJ_=_gI_[1];
            if(_gJ_)
             {var _gK_=_gJ_[1];
              if(0 === _gK_[0])
               {var _gL_=_gJ_[2],_gM_=_gK_[1],switch$0=0;
                if(! _gL_ || ! _gL_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_050=param[2],
                   field_sexp_044$2=
                    function(_gP_)
                     {function field_sexp_044(param)
                       {if(! _gP_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_048,sexp_035);
                        if(_gP_[2])throw [0,Assert_failure,_ed_];
                        var x_051=_gP_[1];
                        return x_051}
                      return field_sexp_044},
                   field_sexp_044=field_sexp_044$2(_gL_);
                  if(caml_string_notequal(_gM_,cst_here))
                   if(caml_string_notequal(_gM_,cst_node_type))
                    {if(Sexplib0_Sexp_conv[26][1])
                      extra_042[1] = [0,_gM_,extra_042[1]]}
                   else
                    if(node_type_037[1])
                     duplicates_041[1] = [0,_gM_,duplicates_041[1]];
                    else
                     {var
                       field_sexp_044$0=field_sexp_044(0),
                       fvalue_047=caml_call1(Core[472],field_sexp_044$0);
                      node_type_037[1] = [0,fvalue_047]}
                  else
                   if(here_039[1])
                    duplicates_041[1] = [0,_gM_,duplicates_041[1]];
                   else
                    {var
                      field_sexp_044$1=field_sexp_044(0),
                      fvalue_046=
                       caml_call2(Core[455],t_of_sexp$3,field_sexp_044$1);
                     here_039[1] = [0,fvalue_046]}
                  var param=tail_050;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_048,_gI_)}
        if(duplicates_041[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_048,
                  duplicates_041[1],
                  sexp_035);
        if(extra_042[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_048,
                  extra_042[1],
                  sexp_035);
        var _gN_=node_type_037[1],_gO_=here_039[1];
        if(_gN_ && _gO_)
         {var here_040=_gO_[1],node_type_038=_gN_[1];
          return [0,node_type_038,here_040]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_048,
                 sexp_035,
                 [0,
                  [0,0 === node_type_037[1]?1:0,cst_node_type$0],
                  [0,[0,0 === here_039[1]?1:0,cst_here$0],0]])}}
    function sexp_of_t$13(param)
     {var
       here_055=param[2],
       node_type_053=param[1],
       arg_056=caml_call2(Core[454],sexp_of_t$12,here_055),
       bnds_052=[0,[1,[0,_ee_,[0,arg_056,0]]],0],
       arg_054=caml_call1(Core[471],node_type_053),
       bnds_052$0=[0,[1,[0,_ef_,[0,arg_054,0]]],bnds_052];
      return [1,bnds_052$0]}
    var
     _eg_=[0,[0,cst_here$1,caml_call1(Core[443],bin_shape_t$0)],0],
     _eh_=caml_call1(Bin_prot_Shape[8],[0,[0,cst_node_type$1,Core[459]],_eg_]),
     _ei_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$1),0,_eh_],0],
     _ej_=caml_call1(Bin_prot_Shape[4][1],cst_src_graph_info_ml_16_2),
     group$1=caml_call2(Bin_prot_Shape[6],_ej_,_ei_),
     _ek_=caml_call1(Bin_prot_Shape[2][1],cst_t$2),
     bin_shape_t$1=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_ek_),0);
    function bin_size_t$1(param)
     {var
       v2=param[2],
       v1=param[1],
       _gG_=caml_call1(Core[460],v1),
       size=caml_call2(Bin_prot_Common[23],0,_gG_),
       _gH_=caml_call2(Core[444],bin_size_t$0,v2);
      return caml_call2(Bin_prot_Common[23],size,_gH_)}
    function bin_write_t$1(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Core[461],buf,pos,v1);
      return caml_call3(caml_call1(Core[445],bin_write_t$0),buf,pos$0,v2)}
    var bin_writer_t$0=[0,bin_size_t$1,bin_write_t$1];
    function bin_read_t$2(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_graph_info_ml_Node_inf,pos_ref[1])}
    function bin_read_t$3(buf,pos_ref)
     {var
       v_node_type=caml_call2(Core[463],buf,pos_ref),
       v_here=caml_call2(caml_call1(Core[447],bin_read_t$1),buf,pos_ref);
      return [0,v_node_type,v_here]}
    var
     bin_reader_t$0=[0,bin_read_t$3,bin_read_t$2],
     bin_t$0=[0,bin_shape_t$1,bin_writer_t$0,bin_reader_t$0];
    function of_value(param)
     {var here=param[2],value=param[1];
      switch(value[0])
       {case 0:var node_type=cst_constant$0;break;
        case 1:var node_type=cst_incr$1;break;
        case 2:var node_type=cst_named$2;break;
        case 3:var node_type=cst_both$1;break;
        case 4:var node_type=cst_cutoff$1;break;
        case 5:var node_type=cst_map$1;break;
        case 6:var node_type=cst_map2$1;break;
        case 7:var node_type=cst_map3$1;break;
        case 8:var node_type=cst_map4$1;break;
        case 9:var node_type=cst_map5$1;break;
        case 10:var node_type=cst_map6$1;break;
        default:var node_type=cst_map7$1}
      return [0,node_type,here]}
    function of_computation(computation)
     {var switch$0=0;
      if(typeof computation !== "number")
       switch(computation[0])
        {case 5:
         case 6:
         case 7:var here$0=computation[4],here=here$0;switch$0 = 1;break
         }
      if(! switch$0)var here=0;
      if(typeof computation === "number")
       var node_type=cst_path$3;
      else
       switch(computation[0])
        {case 0:var node_type=cst_return;break;
         case 1:var node_type=cst_leaf1;break;
         case 2:var node_type=cst_leaf0$0;break;
         case 3:var node_type=cst_leaf_incr$0;break;
         case 4:var node_type=cst_model_cutoff$0;break;
         case 5:var node_type=cst_subst$0;break;
         case 6:var node_type=cst_subst_stateless_from;break;
         case 7:var node_type=cst_subst_stateless_into;break;
         case 8:var node_type=cst_store;break;
         case 9:var node_type=cst_fetch$0;break;
         case 10:var node_type=cst_assoc$0;break;
         case 11:var node_type=cst_assoc_simpl$0;break;
         case 12:var node_type=cst_switch$0;break;
         case 13:var node_type=cst_lazy$0;break;
         case 14:var node_type=cst_wrap$0;break;
         case 15:var node_type=cst_with_model_resetter$0;break;
         default:var node_type=cst_lifecycle$2}
      return [0,node_type,here]}
    var
     _el_=[0,[0,cst_info,caml_call1(_bP_[108],bin_shape_t$1)],0],
     _em_=caml_call1(Core[410],_cb_),
     _en_=[0,[0,cst_dag,caml_call1(_bP_[108],_em_)],_el_],
     _eo_=[0,[0,cst_tree,caml_call1(_bP_[108],_cb_)],_en_],
     _ep_=caml_call1(Bin_prot_Shape[8],_eo_),
     _eq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$3),0,_ep_],0],
     _er_=caml_call1(Bin_prot_Shape[4][1],cst_src_graph_info_ml_77_0),
     group$2=caml_call2(Bin_prot_Shape[6],_er_,_eq_),
     _es_=caml_call1(Bin_prot_Shape[2][1],cst_t$4),
     bin_shape_t$2=caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_es_),0);
    function bin_size_t$2(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _gC_=caml_call2(_bP_[109],_cf_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_gC_),
       _gD_=caml_call1(Core[411],_cf_),
       _gE_=caml_call2(_bP_[109],_gD_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_gE_),
       _gF_=caml_call2(_bP_[109],bin_size_t$1,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_gF_)}
    function bin_write_t$2(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(caml_call1(_bP_[110],_ce_),buf,pos,v1),
       _gB_=caml_call1(Core[412],_ce_),
       pos$1=caml_call3(caml_call1(_bP_[110],_gB_),buf,pos$0,v2);
      return caml_call3(caml_call1(_bP_[110],bin_write_t$1),buf,pos$1,v3)}
    var bin_writer_t$1=[0,bin_size_t$2,bin_write_t$2];
    function bin_read_t$4(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_graph_info_ml_t,pos_ref[1])}
    function bin_read_t$5(buf,pos_ref)
     {var
       v_tree=caml_call2(caml_call1(_bP_[111],_cd_),buf,pos_ref),
       _gA_=caml_call1(Core[414],_cd_),
       v_dag=caml_call2(caml_call1(_bP_[111],_gA_),buf,pos_ref),
       v_info=caml_call2(caml_call1(_bP_[111],bin_read_t$3),buf,pos_ref);
      return [0,v_tree,v_dag,v_info]}
    var
     bin_reader_t$1=[0,bin_read_t$5,bin_read_t$4],
     bin_t$1=[0,bin_shape_t$2,bin_writer_t$1,bin_reader_t$1];
    function t_of_sexp$5(sexp_058)
     {if(0 === sexp_058[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_074,sexp_058);
      var
       field_sexps_059=sexp_058[1],
       tree_060=[0,0],
       dag_062=[0,0],
       info_064=[0,0],
       duplicates_066=[0,0],
       extra_067=[0,0],
       param=field_sexps_059;
      for(;;)
       {if(param)
         {var _gq_=param[1];
          if(1 === _gq_[0])
           {var _gr_=_gq_[1];
            if(_gr_)
             {var _gs_=_gr_[1];
              if(0 === _gs_[0])
               {var _gt_=_gr_[2],_gu_=_gs_[1],switch$0=0;
                if(! _gt_ || ! _gt_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_076=param[2],
                   field_sexp_069$3=
                    function(_gz_)
                     {function field_sexp_069(param)
                       {if(! _gz_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_074,sexp_058);
                        if(_gz_[2])throw [0,Assert_failure,_et_];
                        var x_077=_gz_[1];
                        return x_077}
                      return field_sexp_069},
                   field_sexp_069=field_sexp_069$3(_gt_);
                  if(caml_string_notequal(_gu_,cst_dag$0))
                   if(caml_string_notequal(_gu_,cst_info$0))
                    if(caml_string_notequal(_gu_,cst_tree$0))
                     {if(Sexplib0_Sexp_conv[26][1])
                       extra_067[1] = [0,_gu_,extra_067[1]]}
                    else
                     if(tree_060[1])
                      duplicates_066[1] = [0,_gu_,duplicates_066[1]];
                     else
                      {var
                        field_sexp_069$0=field_sexp_069(0),
                        fvalue_073=caml_call2(_bP_[106],_ch_,field_sexp_069$0);
                       tree_060[1] = [0,fvalue_073]}
                   else
                    if(info_064[1])
                     duplicates_066[1] = [0,_gu_,duplicates_066[1]];
                    else
                     {var
                       field_sexp_069$1=field_sexp_069(0),
                       fvalue_071=
                        caml_call2(_bP_[106],t_of_sexp$4,field_sexp_069$1);
                      info_064[1] = [0,fvalue_071]}
                  else
                   if(dag_062[1])
                    duplicates_066[1] = [0,_gu_,duplicates_066[1]];
                   else
                    {var
                      field_sexp_069$2=field_sexp_069(0),
                      _gv_=caml_call1(Core[422],_ch_),
                      fvalue_072=caml_call2(_bP_[106],_gv_,field_sexp_069$2);
                     dag_062[1] = [0,fvalue_072]}
                  var param=tail_076;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_074,_gq_)}
        if(duplicates_066[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_074,
                  duplicates_066[1],
                  sexp_058);
        if(extra_067[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_074,
                  extra_067[1],
                  sexp_058);
        var _gw_=tree_060[1],_gx_=dag_062[1],_gy_=info_064[1];
        if(_gw_ && _gx_ && _gy_)
         {var info_065=_gy_[1],dag_063=_gx_[1],tree_061=_gw_[1];
          return [0,tree_061,dag_063,info_065]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_074,
                 sexp_058,
                 [0,
                  [0,0 === tree_060[1]?1:0,cst_tree$1],
                  [0,
                   [0,0 === dag_062[1]?1:0,cst_dag$1],
                   [0,[0,0 === info_064[1]?1:0,cst_info$1],0]]])}}
    function sexp_of_t$14(param)
     {var
       info_083=param[3],
       dag_081=param[2],
       tree_079=param[1],
       arg_084=caml_call2(_bP_[107],sexp_of_t$13,info_083),
       bnds_078=[0,[1,[0,_eu_,[0,arg_084,0]]],0],
       _gp_=caml_call1(Core[421],_cg_),
       arg_082=caml_call2(_bP_[107],_gp_,dag_081),
       bnds_078$0=[0,[1,[0,_ev_,[0,arg_082,0]]],bnds_078],
       arg_080=caml_call2(_bP_[107],_cg_,tree_079),
       bnds_078$1=[0,[1,[0,_ew_,[0,arg_080,0]]],bnds_078$0];
      return [1,bnds_078$1]}
    var empty$3=[0,_bP_[3],_bP_[3],_bP_[3]];
    function value_map$0
     (recurse,var_from_parent,parent_path,current_path,state,wrapped_value)
     {var
       here=wrapped_value[2],
       value=wrapped_value[1],
       add_dag_relationship=state[3],
       add_tree_relationship=state[2],
       environment=state[1],
       node_info=of_value(wrapped_value);
      if(typeof var_from_parent !== "number")
       if(0 === var_from_parent[0])
        {var var_from_parent$0=var_from_parent[1];
         caml_call3
          (Core_Hashtbl[34],environment,var_from_parent$0,current_path)}
       else
        {var snd=var_from_parent[2],fst=var_from_parent[1];
         caml_call3(Core_Hashtbl[34],environment,fst,current_path);
         caml_call3(Core_Hashtbl[34],environment,snd,current_path)}
      caml_call3(add_tree_relationship,current_path,parent_path,node_info);
      caml_call2(add_dag_relationship,current_path,parent_path);
      if(2 === value[0])
       {var
         id=value[1],
         _gm_=caml_call1(Core_Type_equal[8][2],id),
         match=caml_call2(Core_Hashtbl[53],environment,_gm_);
        if(match)
         {var named_id=match[1];
          caml_call2(add_dag_relationship,named_id,current_path)}
        else
         {var
           _gn_=
            [0,
             caml_call1(Sexplib0_Sexp_conv[7],cst_src_graph_info_ml_113_41),
             0],
           _go_=[1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_BUG),_gn_]];
          caml_call2(Core[248],0,_go_)}}
      return caml_call2(recurse[1],state,[0,value,here])}
    function computation_map$0
     (recurse,var_from_parent,parent_path,current_path,state,computation)
     {var
       add_dag_relationship=state[3],
       add_tree_relationship=state[2],
       environment=state[1],
       node_info=of_computation(computation);
      caml_call3(add_tree_relationship,current_path,parent_path,node_info);
      caml_call2(add_dag_relationship,current_path,parent_path);
      if(typeof var_from_parent !== "number")
       if(0 === var_from_parent[0])
        {var var_from_parent$0=var_from_parent[1];
         caml_call3
          (Core_Hashtbl[34],environment,var_from_parent$0,current_path)}
       else
        {var snd=var_from_parent[2],fst=var_from_parent[1];
         caml_call3(Core_Hashtbl[34],environment,fst,current_path);
         caml_call3(Core_Hashtbl[34],environment,snd,current_path)}
      var c=caml_call2(recurse[1],state,computation);
      if(typeof c !== "number" && 9 === c[0])
       {var
         v_id=c[1],
         uid=caml_call1(Core_Type_equal[8][2],v_id),
         match=caml_call2(Core_Hashtbl[53],environment,uid);
        if(match)
         {var named_id=match[1];
          caml_call2(add_dag_relationship,named_id,current_path)}
        return computation}
      return c}
    function iter_graph_updates(t,on_update)
     {var graph_info=[0,empty$3];
      function add_dag_relationship(from,to)
       {var
         _gh_=caml_obj_tag(to),
         _gi_=
          250 === _gh_
           ?to[1]
           :246 === _gh_?caml_call1(CamlinternalLazy[2],to):to,
         _gj_=caml_obj_tag(from),
         from$0=
          250 === _gj_
           ?from[1]
           :246 === _gj_?caml_call1(CamlinternalLazy[2],from):from,
         gm=graph_info[1],
         _gk_=gm[3],
         _gl_=caml_call3(Core_Map[33],gm[2],from$0,_gi_);
        graph_info[1] = [0,gm[1],_gl_,_gk_];
        return caml_call1(on_update,graph_info[1])}
      function add_tree_relationship(from,to,from_info)
       {var
         _gc_=caml_obj_tag(to),
         _gd_=
          250 === _gc_
           ?to[1]
           :246 === _gc_?caml_call1(CamlinternalLazy[2],to):to,
         _ge_=caml_obj_tag(from),
         from$0=
          250 === _ge_
           ?from[1]
           :246 === _ge_?caml_call1(CamlinternalLazy[2],from):from,
         gm=graph_info[1],
         _gf_=caml_call3(Core_Map[31],gm[3],from$0,from_info),
         _gg_=gm[2];
        graph_info[1]
        =
        [0,caml_call3(Core_Map[31],gm[1],from$0,_gd_),_gg_,_gf_];
        return caml_call1(on_update,graph_info[1])}
      var environment=caml_call3(Core_Type_equal[8][11][28][4],0,0,0);
      return map$3
              ([0,computation_map$0],
               [0,value_map$0],
               [0,environment,add_tree_relationship,add_dag_relationship],
               t)}
    function iter_graph_updates_packed(param,on_update)
     {var _f__=param[5],_f$_=param[4],_ga_=param[3],_gb_=param[2];
      return [0,iter_graph_updates(param[1],on_update),_gb_,_ga_,_f$_,_f__]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$64);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Graph_info$0);
    var
     _ex_=
      [0,
       t_of_sexp$4,
       sexp_of_t$13,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$2,
       bin_shape_t$1,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       of_computation,
       of_value],
     Bonsai_Graph_info=
      [0,
       _ex_,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$4,
       bin_shape_t$2,
       bin_writer_t$1,
       bin_reader_t$1,
       bin_t$1,
       t_of_sexp$5,
       sexp_of_t$14,
       empty$3,
       iter_graph_updates,
       iter_graph_updates_packed];
    caml_register_global(801,Bonsai_Graph_info,"Bonsai__Graph_info");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Instrumentation);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$65);
    caml_call1(Expect_test_collector[5][1],cst_src_instrumentation_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$66,cst$35);
    function to_string$1(param)
     {var
       node_type=param[2],
       id=param[1],
       _f9_=[0,cst$37,[0,node_type,[0,cst$36,[0,caml_call1(_bM_,id),0]]]];
      return caml_call2(Stdlib_String[6],cst$38,_f9_)}
    function extract_node_path_from_entry_l(label)
     {if(! caml_call2(Core_String[57],label,cst$39))return 0;
      var match=caml_call2(Core_String[62],label,32);
      if(match)
       {var _f8_=match[2];
        if(_f8_ && ! _f8_[2])
         {var node_path=_f8_[1];return [0,caml_call1(_bN_,node_path)]}}
      return 0}
    function instrument_computation(t,start_timer,stop_timer)
     {function computation_map
       (recurse,param,_f2_,current_path,_f1_,computation)
       {var node_info=caml_call1(_ex_[11],computation);
        function entry_label(node_type)
         {var
           _f7_=caml_obj_tag(current_path),
           current_path$0=
            250 === _f7_
             ?current_path[1]
             :246 === _f7_
               ?caml_call1(CamlinternalLazy[2],current_path)
               :current_path;
          return to_string$1([0,current_path$0,node_type])}
        var
         compute_label=
          entry_label
           (caml_call2(Stdlib_String[6],cst$40,[0,node_info[1],_ey_])),
         apply_action_label=
          entry_label
           (caml_call2(Stdlib_String[6],cst$41,[0,node_info[1],_ez_])),
         by_label=
          entry_label
           (caml_call2(Stdlib_String[6],cst$42,[0,node_info[1],_eA_])),
         c=caml_call2(recurse[1],0,computation);
        if(typeof c !== "number")
         switch(c[0])
          {case 1:
            var
             _f3_=c[4],
             _f4_=c[3],
             _f5_=c[2],
             _f6_=
              function(inject,schedule_event,input,model$0,action)
               {caml_call1(start_timer,apply_action_label);
                var
                 model=
                  caml_call5(_f5_,inject,schedule_event,input,model$0,action);
                caml_call1(stop_timer,apply_action_label);
                return model};
            return [1,c[1],_f6_,_f4_,_f3_];
           case 2:
            var
             kind=c[3],
             name=c[2],
             compute=c[1],
             compute$0=
              function(inject,model)
               {caml_call1(start_timer,compute_label);
                var computed=caml_call2(compute,inject,model);
                caml_call1(stop_timer,compute_label);
                return computed};
            return [2,compute$0,name,kind];
           case 3:
            var
             name$0=c[4],
             compute$1=c[3],
             dynamic_apply_action=c[2],
             input=c[1],
             dynamic_apply_action$0=
              function(input,inject)
               {caml_call1(start_timer,apply_action_label);
                var model_incr=caml_call2(dynamic_apply_action,input,inject);
                caml_call1(stop_timer,apply_action_label);
                return model_incr},
             compute$2=
              function(clock,input,model,inject)
               {caml_call1(start_timer,compute_label);
                var computed=caml_call4(compute$1,clock,input,model,inject);
                caml_call1(stop_timer,compute_label);
                return computed};
            return [3,input,dynamic_apply_action$0,compute$2,name$0];
           case 9:return c;
           case 11:
            var
             by=
              function(path,key,value)
               {caml_call1(start_timer,by_label);
                var by=caml_call3(c[4],path,key,value);
                caml_call1(stop_timer,by_label);
                return by};
            return [11,c[1],c[2],c[3],by,c[5]]
           }
        return c}
      function value_map(recurse,param,_fZ_,current_path,_fY_,wrapped_value)
       {var
         here=wrapped_value[2],
         value=wrapped_value[1],
         _f0_=caml_obj_tag(current_path),
         current_path$0=
          250 === _f0_
           ?current_path[1]
           :246 === _f0_
             ?caml_call1(CamlinternalLazy[2],current_path)
             :current_path,
         node_info=caml_call1(_ex_[12],wrapped_value),
         entry_label=to_string$1([0,current_path$0,node_info[1]]);
        switch(value[0])
         {case 5:
           var
            f=
             function(a)
              {caml_call1(start_timer,entry_label);
               var x=caml_call1(value[2],a);
               caml_call1(stop_timer,entry_label);
               return x},
            value$0=[5,value[1],f];
           break;
          case 6:
           var
            f$0=
             function(a,b)
              {caml_call1(start_timer,entry_label);
               var x=caml_call2(value[3],a,b);
               caml_call1(stop_timer,entry_label);
               return x},
            value$0=[6,value[1],value[2],f$0];
           break;
          case 7:
           var
            f$1=
             function(a,b,c)
              {caml_call1(start_timer,entry_label);
               var x=caml_call3(value[4],a,b,c);
               caml_call1(stop_timer,entry_label);
               return x},
            value$0=[7,value[1],value[2],value[3],f$1];
           break;
          case 8:
           var
            f$2=
             function(a,b,c,d)
              {caml_call1(start_timer,entry_label);
               var x=caml_call4(value[5],a,b,c,d);
               caml_call1(stop_timer,entry_label);
               return x},
            value$0=[8,value[1],value[2],value[3],value[4],f$2];
           break;
          case 9:
           var
            f$3=
             function(a,b,c,d,e)
              {caml_call1(start_timer,entry_label);
               var x=caml_call5(value[6],a,b,c,d,e);
               caml_call1(stop_timer,entry_label);
               return x},
            value$0=[9,value[1],value[2],value[3],value[4],value[5],f$3];
           break;
          case 10:
           var
            f$4=
             function(a,b,c,d,e,f)
              {caml_call1(start_timer,entry_label);
               var x=caml_call6(value[7],a,b,c,d,e,f);
               caml_call1(stop_timer,entry_label);
               return x},
            value$0=
             [10,value[1],value[2],value[3],value[4],value[5],value[6],f$4];
           break;
          case 11:
           var
            f$5=
             function(a,b,c,d,e,f,g)
              {caml_call1(start_timer,entry_label);
               var x=caml_call7(value[8],a,b,c,d,e,f,g);
               caml_call1(stop_timer,entry_label);
               return x},
            value$0=
             [11,
              value[1],
              value[2],
              value[3],
              value[4],
              value[5],
              value[6],
              value[7],
              f$5];
           break;
          default:var value$0=value}
        return caml_call2(recurse[1],0,[0,value$0,here])}
      return map$3([0,computation_map],[0,value_map],0,t)}
    function instrument_packed(param,start_timer,stop_timer)
     {var _fU_=param[5],_fV_=param[4],_fW_=param[3],_fX_=param[2];
      return [0,
              instrument_computation(param[1],start_timer,stop_timer),
              _fX_,
              _fW_,
              _fV_,
              _fU_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$67);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Instrumentation$0);
    var
     Bonsai_Instrumentation=
      [0,
       instrument_computation,
       instrument_packed,
       extract_node_path_from_entry_l];
    caml_register_global(802,Bonsai_Instrumentation,"Bonsai__Instrumentation");
    var Bonsai_Import_stable=[0];
    caml_register_global(803,Bonsai_Import_stable,"Bonsai__Import_stable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai_Eval);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$68);
    caml_call1(Expect_test_collector[5][1],cst_src_eval_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$69,cst$43);
    caml_call2(Ui_incr[4][7],Ui_incr[4][3],1024);
    var do_nothing_lifecycle=caml_call1(Ui_incr[11],_aO_[2]);
    function raise_duplicate_path(path)
     {var
       _fS_=[0,[1,[0,_eB_,[0,sexp_of_t$6(path),0]]],0],
       _fT_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_Bonsai_Path_t_should_b),
          _fS_]];
      return caml_call1(Core[253],_fT_)}
    function merge_lifecycles(a,b)
     {function _fQ_(key,param)
       {var _fR_=param[1];
        if(737457313 === _fR_)return raise_duplicate_path(key);
        if(847852583 <= _fR_){var a=param[2];return [0,a]}
        var a$0=param[2];
        return [0,a$0]}
      return caml_call5(Incr_map[23],0,0,a,b,_fQ_)}
    var unit_model=caml_call1(Ui_incr[11],0);
    function _eC_
     (environment,path,clock,model,inject_dynamic,inject_static,computation)
     {var environment$0=environment,model$0=model,computation$0=computation;
      for(;;)
       {annotate(5,model$0);
        if(typeof computation$0 === "number")
         {var result=caml_call1(Ui_incr[11],path);
          annotate(12,result);
          return create$1(impossible,0,result)}
        switch(computation$0[0])
         {case 0:
           var value=computation$0[1],result$0=eval$0(environment$0,value);
           return create$1(impossible,0,result$0);
          case 1:
           var
            dynamic_apply_action=computation$0[2],
            input=computation$0[1],
            input$0=eval$0(environment$0,input),
            _eV_=function(model){return [0,model,inject_dynamic]},
            result$1=caml_call2(Ui_incr[78][4][6],model$0,_eV_),
            _eW_=
             function(input)
              {var _fM_=caml_call1(dynamic_apply_action,inject_dynamic);
               return function(_fN_){return caml_call2(_fM_,_fN_,input)}},
            apply_action=caml_call2(Ui_incr[78][4][6],input$0,_eW_),
            apply_action$0=[0,apply_action];
           return create$1(apply_action$0,0,result$1);
          case 2:
           var
            compute=computation$0[1],
            _eX_=
             function(model){return caml_call2(compute,inject_static,model)},
            result$2=caml_call2(Ui_incr[78][4][6],model$0,_eX_);
           return create$1(impossible,0,result$2);
          case 3:
           var
            compute$0=computation$0[3],
            dynamic_apply_action$0=computation$0[2],
            input$1=computation$0[1],
            input$2=eval$0(environment$0,input$1),
            result$3=
             caml_call4(compute$0,clock,input$2,model$0,inject_dynamic),
            apply_action$1=
             [0,caml_call2(dynamic_apply_action$0,input$2,inject_dynamic)];
           return create$1(apply_action$1,0,result$3);
          case 4:
           var
            match$1=computation$0[2],
            equal=match$1[2],
            t=computation$0[1],
            _eY_=function(_fL_){return _fL_},
            model$1=caml_call2(Ui_incr[12],model$0,_eY_),
            _eZ_=caml_call1(Ui_incr[60][5],equal);
           caml_call2(Ui_incr[61],model$1,_eZ_);
           var model$0=model$1,computation$0=t;
           continue;
          case 5:
           var
            here=computation$0[4],
            into=computation$0[3],
            via=computation$0[2],
            from=computation$0[1],
            inject_dynamic$0=
             function(e){return caml_call1(inject_dynamic,[0,e])},
            inject_static$0=
             function(e){return caml_call1(inject_static,[0,e])},
            _e0_=function(_fK_){return _fK_[1]},
            model$2=caml_call2(Ui_incr[12],model$0,_e0_),
            path$0=append(path,0),
            from$0=
             _eC_
              (environment$0,
               path$0,
               clock,
               model$2,
               inject_dynamic$0,
               inject_static$0,
               from);
           attribute_positions(here,from$0);
           var
            from_result=from$0[3],
            environment$1=caml_call3(_v_,environment$0,via,from_result),
            inject_dynamic$1=
             function(e){return caml_call1(inject_dynamic,[1,e])},
            inject_static$1=
             function(e){return caml_call1(inject_static,[1,e])},
            _e1_=function(_fJ_){return _fJ_[2]},
            model$3=caml_call2(Ui_incr[12],model$0,_e1_),
            path$1=append(path,1),
            into$0=
             _eC_
              (environment$1,
               path$1,
               clock,
               model$3,
               inject_dynamic$1,
               inject_static$1,
               into),
            apply_action$2=merge(from$0[1],into$0[1]),
            result$4=into$0[3],
            match$2=from$0[2],
            match$3=into$0[2],
            switch$0=0;
           if(match$2)
            {var _e2_=match$2[1];
             if(match$3)
              var l2=match$3[1],lifecycle=[0,merge_lifecycles(_e2_,l2)];
             else
              {var l=_e2_;switch$0 = 1}}
           else
            if(match$3){var l=match$3[1];switch$0 = 1}else var lifecycle=0;
           if(switch$0)var lifecycle=[0,l];
           return create$1(apply_action$2,lifecycle,result$4);
          case 6:
           var
            here$0=computation$0[4],
            into$1=computation$0[3],
            via$0=computation$0[2],
            from$1=computation$0[1],
            path$2=append(path,0),
            from$2=
             _eC_
              (environment$0,
               path$2,
               clock,
               unit_model,
               Core_Nothing[3],
               Core_Nothing[3],
               from$1);
           attribute_positions(here$0,from$2);
           var
            from_result$0=from$2[3],
            environment$2=caml_call3(_v_,environment$0,via$0,from_result$0),
            path$3=append(path,1),
            into$2=
             _eC_
              (environment$2,
               path$3,
               clock,
               model$0,
               inject_dynamic,
               inject_static,
               into$1),
            apply_action$3=into$2[1],
            result$5=into$2[3],
            match$4=from$2[2],
            match$5=into$2[2],
            switch$1=0;
           if(match$4)
            {var _e3_=match$4[1];
             if(match$5)
              var l2$0=match$5[1],lifecycle$0=[0,merge_lifecycles(_e3_,l2$0)];
             else
              {var l$0=_e3_;switch$1 = 1}}
           else
            if(match$5)
             {var l$0=match$5[1];switch$1 = 1}
            else
             var lifecycle$0=0;
           if(switch$1)var lifecycle$0=[0,l$0];
           return create$1(apply_action$3,lifecycle$0,result$5);
          case 7:
           var
            here$1=computation$0[4],
            into$3=computation$0[3],
            via$1=computation$0[2],
            from$3=computation$0[1],
            path$4=append(path,0),
            from$4=
             _eC_
              (environment$0,
               path$4,
               clock,
               model$0,
               inject_dynamic,
               inject_static,
               from$3);
           attribute_positions(here$1,from$4);
           var
            from_result$1=from$4[3],
            environment$3=caml_call3(_v_,environment$0,via$1,from_result$1),
            path$5=append(path,1),
            into$4=
             _eC_
              (environment$3,
               path$5,
               clock,
               unit_model,
               Core_Nothing[3],
               Core_Nothing[3],
               into$3),
            apply_action$4=from$4[1],
            result$6=into$4[3],
            match$6=from$4[2],
            match$7=into$4[2],
            switch$2=0;
           if(match$6)
            {var _e4_=match$6[1];
             if(match$7)
              var l2$1=match$7[1],lifecycle$1=[0,merge_lifecycles(_e4_,l2$1)];
             else
              {var l$1=_e4_;switch$2 = 1}}
           else
            if(match$7)
             {var l$1=match$7[1];switch$2 = 1}
            else
             var lifecycle$1=0;
           if(switch$2)var lifecycle$1=[0,l$1];
           return create$1(apply_action$4,lifecycle$1,result$6);
          case 8:
           var
            inner=computation$0[3],
            value$0=computation$0[2],
            id=computation$0[1],
            value$1=eval$0(environment$0,value$0),
            environment$4=add_overwriting(environment$0,id,value$1),
            environment$0=environment$4,
            computation$0=inner;
           continue;
          case 9:
           var
            for_some=computation$0[3],
            default$0=computation$0[2],
            id$0=computation$0[1],
            match$8=caml_call2(_u_,environment$0,id$0);
           if(match$8)
            var
             x=match$8[1],
             _e5_=function(a){return caml_call1(for_some,a)},
             result$7=caml_call2(Ui_incr[12],x,_e5_);
           else
            var result$7=caml_call1(Ui_incr[11],default$0);
           return create$1(impossible,0,result$7);
          case 10:
           var
            action_info=computation$0[7],
            model_info=computation$0[6],
            by=computation$0[5],
            data_id=computation$0[4],
            key_id=computation$0[3],
            key_compare=computation$0[2],
            map=computation$0[1],
            map_input=eval$0(environment$0,map),
            _e6_=
             function(param,_fH_)
              {var _fI_=_fH_[1];
               if(737457313 === _fI_)
                {var input_and_models=_fH_[2];return [0,input_and_models]}
               if(847852583 > _fI_)return 0;
               var input=_fH_[2];
               return [0,[0,input,model_info[1]]]},
            map$0=caml_call5(Incr_map[23],0,0,map_input,model$0,_e6_),
            _e7_=caml_call2(_aM_[2],key_compare,key_id),
            create_keyed=caml_call1(Core[259],_e7_),
            _eU_=
             function(key,input_and_model)
              {annotate(6,input_and_model);
               var path$0=append(path,[0,caml_call1(create_keyed,key)]);
               function _fF_(param)
                {var pattern_syntax_004=param[2];return pattern_syntax_004}
               var model=caml_call2(Ui_incr[78][4][6],input_and_model,_fF_);
               function _fG_(param)
                {var pattern_syntax_005=param[1];return pattern_syntax_005}
               var
                value=caml_call2(Ui_incr[78][4][6],input_and_model,_fG_),
                key_incr=caml_call1(Ui_incr[10],key);
               annotate(7,key_incr);
               annotate(8,value);
               var
                environment=
                 caml_call3
                  (_v_,
                   caml_call3(_v_,environment$0,key_id,key_incr),
                   data_id,
                   value);
               function inject_dynamic$0(action)
                {return caml_call1(inject_dynamic,[0,key,action])}
               function inject_static$0(action)
                {return caml_call1(inject_static,[0,key,action])}
               var
                snapshot=
                 _eC_
                  (environment,
                   path$0,
                   clock,
                   model,
                   inject_dynamic$0,
                   inject_static$0,
                   by),
                c=lifecycle_or_empty(snapshot),
                b=to_incremental(snapshot[1]),
                a=snapshot[3],
                bc=caml_call2(Ui_incr[42],b,c);
               annotate(14,bc);
               return [0,a,bc]},
            match=caml_call4(Incr_map[27],0,0,map$0,_eU_),
            second_and_third=match[2],
            results_map=match[1],
            match$0=caml_call3(Incr_map[25],0,0,second_and_third),
            lifecycle_map=match$0[2],
            apply_action_map=match$0[1];
           annotate(9,results_map);
           annotate(10,lifecycle_map);
           annotate(11,apply_action_map);
           var
            _e8_=
             function(apply_action_map,schedule_event,model,action)
              {var
                action$0=action[2],
                id=action[1],
                _fA_=model_info[1],
                _fB_=caml_call2(Core_Map[38],model,id),
                specific_model=caml_call2(Core_Option[34],_fB_,_fA_),
                match=caml_call2(Core_Map[38],apply_action_map,id);
               if(match)
                {var
                  apply_action=match[1],
                  data=
                   caml_call3
                    (apply_action,schedule_event,specific_model,action$0);
                 return caml_call2(model_info[2],data,model_info[1])
                         ?caml_call2(Core_Map[41],model,id)
                         :caml_call3(Core_Map[32],model,id,data)}
               var
                key=caml_call2(Core_Type_equal[8][6],key_id,id),
                action$1=
                 caml_call2(Core_Type_equal[8][6],action_info,action$0),
                _fC_=
                 [0,[1,[0,_eD_,[0,caml_call1(Core_Sexp[90],action$1),0]]],0],
                _fD_=[0,[1,[0,_eE_,[0,caml_call1(Core_Sexp[90],key),0]]],_fC_],
                _fE_=
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_an_action_inside_of_Bonsai),
                   _fD_]];
               caml_call2(Core[249],0,_fE_);
               return model},
            apply_action$5=caml_call2(Ui_incr[78][4][6],apply_action_map,_e8_),
            _e9_=
             function(param,key,_fz_,acc){return caml_call2(_aK_[43],acc,key)},
            _e__=
             function(param,key,data,acc)
              {function _fy_(param)
                {return param?raise_duplicate_path(key):data}
               return caml_call3(_aK_[40],acc,key,_fy_)},
            lifecycle$2=
             caml_call7(Incr_map[38],0,0,0,lifecycle_map,_aK_[4],_e__,_e9_);
           annotate(10,lifecycle$2);
           var apply_action$6=[0,apply_action$5];
           return create$1(apply_action$6,[0,lifecycle$2],results_map);
          case 11:
           var
            by$0=computation$0[4],
            map$1=computation$0[1],
            map_input$0=eval$0(environment$0,map$1),
            _e$_=function(key,data){return caml_call3(by$0,path,key,data)},
            result$8=caml_call3(Incr_map[3],0,map_input$0,_e$_);
           return create$1(impossible,0,result$8);
          case 12:
           var
            arms=computation$0[2],
            match$9=computation$0[1],
            index=eval$0(environment$0,match$9),
            _fa_=
             function(index)
              {var
                path$0=append(path,[1,index]),
                match=caml_call2(Core_Map[39],arms,index),
                model_info=match[4],
                static_action_info=match[3],
                dynamic_action_info=match[2],
                t=match[1];
               function _fr_(map)
                {var
                  match=caml_call2(Multi_model[3],map,index),
                  info=match[2],
                  model=match[1],
                  equal=
                   caml_call2(Core_Type_equal[8][10],info[3],model_info[3]);
                 return caml_call2(Core_Type_equal[5],equal,model)}
               var chosen_model=caml_call2(Incremental[10],model$0,_fr_);
               function inject_dynamic$0(action)
                {return caml_call1
                         (inject_dynamic,[0,action,dynamic_action_info,index])}
               function inject_static$0(action)
                {return caml_call1
                         (inject_static,[0,action,static_action_info,index])}
               var
                snapshot=
                 _eC_
                  (environment$0,
                   path$0,
                   clock,
                   chosen_model,
                   inject_dynamic$0,
                   inject_static$0,
                   t);
               function _fs_(apply_action,schedule_event,model,param)
                {var
                  index$0=param[3],
                  action_type_id=param[2],
                  action=param[1],
                  match=caml_call2(Multi_model[3],model,index),
                  chosen_model_info=match[2],
                  chosen_model=match[1],
                  match$0=caml_call2(Core[90],index,index$0),
                  match$1=
                   caml_call2
                    (Core_Type_equal[8][9],action_type_id,dynamic_action_info),
                  match$2=
                   caml_call2
                    (Core_Type_equal[8][9],chosen_model_info[3],model_info[3]);
                 if(match$0 && match$1 && match$2)
                  {var
                    new_model=
                     caml_call3(apply_action,schedule_event,chosen_model,action),
                    new_model$0=caml_call2(_al_[3],model_info,new_model);
                   return caml_call3(Multi_model[4],model,index,new_model$0)}
                 var
                  action$0=
                   caml_call2(Core_Type_equal[8][6],action_type_id,action),
                  _fv_=
                   [0,[1,[0,_eF_,[0,caml_call1(Core_Sexp[90],action$0),0]]],0],
                  _fw_=[0,[1,[0,_eG_,[0,caml_call1(Core[356],index),0]]],_fv_],
                  _fx_=
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_an_action_inside_of_Bonsai$0),
                     _fw_]];
                 caml_call2(Core[249],0,_fx_);
                 return model}
               var
                _ft_=to_incremental(snapshot[1]),
                apply_action=caml_call2(Ui_incr[78][4][6],_ft_,_fs_),
                let_syntax_013=snapshot[3],
                let_syntax_014=lifecycle_or_empty(snapshot);
               function _fu_(result,lifecycle,apply_action)
                {return [0,result,apply_action,lifecycle]}
               return caml_call4
                       (Ui_incr[78][4][8],
                        let_syntax_013,
                        let_syntax_014,
                        apply_action,
                        _fu_)},
            pattern_syntax_007=caml_call2(Ui_incr[78][4][1],index,_fa_),
            _fb_=
             function(param)
              {var pattern_syntax_008=param[2];return pattern_syntax_008},
            apply_action$7=
             caml_call2(Ui_incr[78][4][6],pattern_syntax_007,_fb_),
            _fc_=
             function(param)
              {var pattern_syntax_009=param[3];return pattern_syntax_009},
            lifecycle$3=caml_call2(Ui_incr[78][4][6],pattern_syntax_007,_fc_),
            _fd_=
             function(param)
              {var pattern_syntax_010=param[1];return pattern_syntax_010},
            result$9=caml_call2(Ui_incr[78][4][6],pattern_syntax_007,_fd_),
            apply_action$8=[0,apply_action$7];
           return create$1(apply_action$8,[0,lifecycle$3],result$9);
          case 13:
           var
            lazy_computation=computation$0[1],
            match$10=caml_call1(Core[237],lazy_computation),
            model_info$0=match$10[4],
            static_action_info=match$10[3],
            dynamic_action_info=match$10[2],
            t$0=match$10[1],
            _fe_=
             function(model)
              {var
                _fq_=caml_call2(_al_[3],model_info$0,model_info$0[1]),
                match=caml_call2(Core_Option[34],model,_fq_),
                info=match[2],
                model$0=match[1],
                witness=
                 caml_call2(Core_Type_equal[8][10],info[3],model_info$0[3]);
               return caml_call2(Core_Type_equal[5],witness,model$0)},
            input_model=caml_call2(Ui_incr[78][4][6],model$0,_fe_),
            inject_dynamic$2=
             function(action)
              {return caml_call1
                       (inject_dynamic,[0,action,dynamic_action_info,0])},
            inject_static$2=
             function(action)
              {return caml_call1
                       (inject_static,[0,action,static_action_info,0])},
            snapshot=
             _eC_
              (environment$0,
               path,
               clock,
               input_model,
               inject_dynamic$2,
               inject_static$2,
               t$0),
            _ff_=
             function(apply_action,schedule_event,model,action)
              {var
                action_type_id=action[2],
                action$0=action[1],
                _fo_=caml_call2(_al_[3],model_info$0,model_info$0[1]),
                match=caml_call2(Core_Option[34],model,_fo_),
                chosen_model_info=match[2],
                chosen_model=match[1],
                match$0=
                 caml_call2
                  (Core_Type_equal[8][9],action_type_id,dynamic_action_info),
                match$1=
                 caml_call2
                  (Core_Type_equal[8][9],chosen_model_info[3],model_info$0[3]);
               if(match$0 && match$1)
                {var
                  new_model=
                   caml_call3
                    (apply_action,schedule_event,chosen_model,action$0);
                 return [0,caml_call2(_al_[3],model_info$0,new_model)]}
               var
                _fp_=
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_BUG_type_id_mismatch_in_Bo);
               caml_call2(Core[248],0,_fp_);
               return model},
            apply_action$9=map$4(snapshot[1],_ff_);
           return create$1(apply_action$9,snapshot[2],snapshot[3]);
          case 14:
           var
            dynamic_apply_action$1=computation$0[4],
            inner$0=computation$0[3],
            inject_id=computation$0[2],
            model_id=computation$0[1],
            _fg_=
             function(param)
              {var pattern_syntax_020=param[2];return pattern_syntax_020},
            inner_model=caml_call2(Ui_incr[78][4][6],model$0,_fg_),
            _fh_=
             function(param)
              {var pattern_syntax_021=param[1];return pattern_syntax_021},
            outer_model=caml_call2(Ui_incr[78][4][6],model$0,_fh_),
            dynamic_inject_outer=
             function(a){return caml_call1(inject_dynamic,[0,a])},
            dynamic_inject_inner=
             function(a){return caml_call1(inject_dynamic,[1,a])},
            _fi_=caml_call1(Ui_incr[11],dynamic_inject_outer),
            environment$5=
             caml_call3
              (_v_,
               caml_call3(_v_,environment$0,model_id,outer_model),
               inject_id,
               _fi_),
            inner_snapshot=
             _eC_
              (environment$5,
               path,
               clock,
               inner_model,
               dynamic_inject_inner,
               inject_static,
               inner$0),
            inner_result=inner_snapshot[3],
            let_syntax_023=to_incremental(inner_snapshot[1]),
            _fj_=
             function
              (inner_result,inner_apply_action,schedule_event,param,action)
              {var inner_model=param[2],outer_model=param[1];
               if(0 === action[0])
                {var
                  action1=action[1],
                  new_outer_model=
                   caml_call5
                    (dynamic_apply_action$1,
                     dynamic_inject_outer,
                     schedule_event,
                     inner_result,
                     outer_model,
                     action1);
                 return [0,new_outer_model,inner_model]}
               var
                action2=action[1],
                new_inner_model=
                 caml_call3
                  (inner_apply_action,schedule_event,inner_model,action2);
               return [0,outer_model,new_inner_model]},
            apply_action$10=
             caml_call3(Ui_incr[78][4][7],inner_result,let_syntax_023,_fj_);
           return create$1([0,apply_action$10],inner_snapshot[2],inner_result);
          case 15:
           var
            t$1=computation$0[1],
            reset_event=caml_call1(inject_static,_eH_),
            inject_static$3=
             function(a){return caml_call1(inject_static,[1,a])},
            snapshot$0=
             _eC_
              (environment$0,
               path,
               clock,
               model$0,
               inject_dynamic,
               inject_static$3,
               t$1),
            apply_action$11=snapshot$0[1],
            _fk_=function(result){return [0,result,reset_event]},
            result$10=caml_call2(Ui_incr[78][4][6],snapshot$0[3],_fk_);
           return create$1(apply_action$11,snapshot$0[2],result$10);
          default:
           var
            lifecycle$4=computation$0[1],
            pattern_syntax_027=eval$0(environment$0,lifecycle$4),
            _fl_=
             function(param)
              {if(0 === param)
                {var
                  _fO_=
                   function(param)
                    {if(! param)throw [0,Assert_failure,_eI_];
                     var pattern_syntax_028=param[1];
                     return pattern_syntax_028},
                  lifecycle=
                   caml_call2(Ui_incr[78][4][6],pattern_syntax_027,_fO_),
                  _fP_=
                   function(lifecycle)
                    {return caml_call2(_aK_[5],path,lifecycle)};
                 return caml_call2(Ui_incr[78][4][6],lifecycle,_fP_)}
               if(1 === param)return do_nothing_lifecycle;
               throw [0,Assert_failure,_eJ_]},
            _fm_=function(param){return param?0:1},
            _fn_=caml_call2(Ui_incr[78][4][6],pattern_syntax_027,_fm_),
            lifecycle$5=caml_call2(Ui_incr[78][4][1],_fn_,_fl_);
           return create$1
                   (impossible,[0,lifecycle$5],caml_call1(Ui_incr[11],0))}}}
    function eval$1
     (environment,path,clock,model,inject_dynamic,inject_static,computation)
     {return _eC_
              (environment,
               path,
               clock,
               model,
               inject_dynamic,
               inject_static,
               flatten_values(computation))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$70);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai_Eval$0);
    var Bonsai_Eval=[0,eval$1];
    caml_register_global(805,Bonsai_Eval,"Bonsai__Eval");
    caml_call1(Ppx_module_timer_runtime[4],cst_Bonsai);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bonsai$71);
    caml_call1(Expect_test_collector[5][1],cst_src_bonsai_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bonsai$72,cst$44);
    var
     conceal_value$0=include$7[1],
     reveal_value$0=include$7[2],
     conceal_computation$0=include$7[3],
     reveal_computation$0=include$7[4],
     _eK_=Clock[7],
     _eL_=Clock[6],
     _eM_=Clock[4],
     _eN_=Clock[3],
     _eO_=Clock[2],
     _eP_=Clock[1];
    function to_dot$0(c){return to_dot(caml_call1(reveal_computation$0,c))}
    function instrument_computation$0(c,start_timer,stop_timer)
     {return instrument_packed
              (caml_call1(reveal_computation$0,c),start_timer,stop_timer)}
    var
     Arrow_deprecated=
      [0,
       const$1,
       read,
       pure$0,
       compose,
       map$8,
       map_input,
       of_module1,
       both$4,
       state_machine,
       enum$1,
       if$0,
       Map$0,
       arr$0,
       symbol$12,
       symbol$13,
       first,
       second,
       symbol$14,
       extend_first,
       extend_second,
       symbol$15,
       symbol$14,
       symbol$15,
       partial_compose_first,
       pipe,
       With_incr,
       Infix,
       Let_syntax$5];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bonsai$73);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bonsai$0);
    var
     _eQ_=Let_syntax$2[5],
     _eR_=Edge[7],
     _eS_=Computation[21],
     _eT_=_eS_[6],
     Bonsai$0=
      [0,
       [0,
        return$1,
        map$0,
        both,
        symbol,
        symbol$0,
        symbol$1,
        symbol_map,
        apply,
        map2$0,
        all,
        all_unit,
        Applicative_infix,
        map3,
        map4,
        map5,
        map6,
        map7,
        cutoff],
       [0,
        Computation[1],
        Computation[2],
        Computation[3],
        Computation[4],
        Computation[5],
        Computation[6],
        Computation[7],
        Computation[8],
        Computation[11],
        Computation[17],
        Computation[19],
        Computation[9],
        Computation[20],
        Computation[18],
        [0,
         _eS_[1],
         _eS_[2],
         _eS_[3],
         _eS_[4],
         _eS_[5],
         [0,_eT_[1],_eT_[2],_eT_[3],_eT_[5],_eT_[6],_eT_[7],_eT_[8],_eT_[9]]],
        Computation[12],
        Computation[13],
        Computation[14],
        Computation[15],
        Computation[16]],
       Bonsai_Var,
       read,
       const$0,
       path_id,
       pure,
       of_module0,
       of_module1,
       of_module2,
       state_machine0,
       actor0,
       actor1,
       state,
       state_opt,
       state_machine1,
       lazy,
       assoc,
       enum$0,
       wrap,
       with_model_resetter,
       [0,_eP_,_eO_,_eN_,_eM_,_eK_,_eL_],
       [0,Edge[6],Edge[5],Edge[2],Edge[1],Edge[4],Edge[3],[0,_eR_[1],_eR_[3]]],
       [0,
        Dynamic_scope[2],
        Dynamic_scope[3],
        Dynamic_scope[8],
        Dynamic_scope[9],
        Dynamic_scope[5],
        Dynamic_scope[7]],
       [0,Incr[1],Incr[2],Incr[4],Incr[6],Incr[5]],
       [0,
        Let_syntax$2[1],
        Let_syntax$2[4],
        Let_syntax$2[2],
        Let_syntax$2[3],
        [0,
         _eQ_[1],
         _eQ_[2],
         _eQ_[4],
         _eQ_[3],
         _eQ_[5],
         _eQ_[6],
         _eQ_[7],
         _eQ_[8],
         _eQ_[9],
         _eQ_[10],
         _eQ_[11]]],
       [0,
        instrument_computation$0,
        to_dot$0,
        enable_incremental_annotations,
        disable_incremental_annotation],
       [0,
        reveal_value$0,
        conceal_value$0,
        reveal_computation$0,
        conceal_computation$0,
        path,
        eval$1],
       Arrow_deprecated];
    caml_register_global(806,Bonsai$0,"Bonsai");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
