// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_attempt_to_compute_balance=
      caml_string_of_jsbytes
       ("attempt to compute balanced reducer with unset elements"),
     cst_attempt_to_access_negative=
      caml_string_of_jsbytes
       ("attempt to access negative index in balanced reducer"),
     cst_attempt_to_access_out_of_b=
      caml_string_of_jsbytes
       ("attempt to access out of bounds index in balanced reducer"),
     cst_non_positive_number_of_lea=
      caml_string_of_jsbytes
       ("non-positive number of leaves in balanced reducer"),
     cst_Balanced_reducer=caml_string_of_jsbytes("Balanced_reducer"),
     cst_balanced_reducer=caml_string_of_jsbytes("balanced_reducer"),
     cst_balanced_reducer_src_balan=
      caml_string_of_jsbytes("balanced_reducer/src/balanced_reducer.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_balanced_reducer$0=caml_string_of_jsbytes("balanced_reducer"),
     cst_balanced_reducer$1=caml_string_of_jsbytes("balanced_reducer"),
     cst_Balanced_reducer$0=caml_string_of_jsbytes("Balanced_reducer"),
     Base_Option_array=global_data.Base__Option_array,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Base=global_data.Base,
     Base_Int=global_data.Base__Int,
     Assert_failure=global_data.Assert_failure,
     Base_List=global_data.Base__List,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime;
    caml_call1(Ppx_module_timer_runtime[4],cst_Balanced_reducer);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_balanced_reducer);
    caml_call1(Expect_test_collector[5][1],cst_balanced_reducer_src_balan);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_balanced_reducer$0,cst);
    var
     _i_=[0,caml_string_of_jsbytes("balanced_reducer")],
     _e_=[0,caml_string_of_jsbytes("index")],
     _f_=[0,caml_string_of_jsbytes("length")],
     _g_=[0,caml_string_of_jsbytes("index")],
     _d_=[0,caml_string_of_jsbytes("_")],
     _c_=[0,caml_string_of_jsbytes("num_leaves")],
     _a_=
      [0,
       caml_string_of_jsbytes("balanced_reducer/src/balanced_reducer.ml"),
       76,
       9],
     _b_=
      [0,
       caml_string_of_jsbytes("balanced_reducer/src/balanced_reducer.ml"),
       78,
       6];
    function left_child_index(parent_index)
     {return (parent_index * 2 | 0) + 1 | 0}
    function num_branches(t){return t[2] - 1 | 0}
    function index_is_leaf(t,i){return num_branches(t) <= i?1:0}
    function leaf_index(t,i)
     {var
       offset_from_start_of_leaves_in=i + t[3] | 0,
       rotated_index=
        offset_from_start_of_leaves_in < t[2]
         ?offset_from_start_of_leaves_in
         :offset_from_start_of_leaves_in - t[2] | 0;
      return rotated_index + num_branches(t) | 0}
    function sexp_of_t(sexp_of_a,t)
     {function _C_(i)
       {var _E_=leaf_index(t,i);
        return caml_call2(Base_Option_array[33],t[1],_E_)}
      var
       x_001=caml_call2(Base_List[123],t[2],_C_),
       _D_=caml_call1(Base[152],sexp_of_a);
      return caml_call2(Base[139],_D_,x_001)}
    function invariant(invariant_a,t)
     {var data=t[1],_x_=caml_call1(Base_Option_array[6],data) - 1 | 0,_w_=0;
      if(_x_ >= 0)
       {var i$0=_w_;
        for(;;)
         {var match=caml_call2(Base_Option_array[33],data,i$0);
          if(match){var a=match[1];caml_call1(invariant_a,a)}
          var _B_=i$0 + 1 | 0;
          if(_x_ !== i$0){var i$0=_B_;continue}
          break}}
      var _z_=num_branches(t) - 1 | 0,_y_=0;
      if(_z_ >= 0)
       {var i=_y_;
        for(;;)
         {var
           left=left_child_index(i),
           right=left + 1 | 0,
           left_is_none=caml_call2(Base_Option_array[35],data,left),
           right_is_none=caml_call2(Base_Option_array[35],data,right);
          if(caml_call2(Base_Option_array[36],data,i))
           {var switch$0=0;
            if(! left_is_none && ! right_is_none)switch$0 = 1;
            if(! switch$0)throw [0,Assert_failure,_a_]}
          else
           if
            (!
             index_is_leaf(t,left)
             &&
             !
             index_is_leaf(t,right)
             &&
             !
             left_is_none
             &&
             !
             right_is_none)
            throw [0,Assert_failure,_b_];
          var _A_=i + 1 | 0;
          if(_z_ !== i){var i=_A_;continue}
          break}}
      return 0}
    function create_exn(opt,param,num_leaves,reduce)
     {if(opt)
       var sth=opt[1],sexp_of_a=sth;
      else
       var sexp_of_a=function(param){return _d_};
      if(num_leaves < 1)
       {var
         _u_=[0,[1,[0,_c_,[0,caml_call1(Base[119],num_leaves),0]]],0],
         _v_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_non_positive_number_of_lea),
            _u_]];
        caml_call1(Base[202],_v_)}
      var
       num_branches=num_leaves - 1 | 0,
       num_leaves_not_in_bottom_level=
        caml_call1(Base_Int[63],num_leaves)
        -
        num_leaves
        |
        0,
       data=caml_call1(Base_Option_array[5],num_branches + num_leaves | 0);
      return [0,
              data,
              num_leaves,
              num_leaves_not_in_bottom_level,
              reduce,
              sexp_of_a]}
    function validate_index(t,i)
     {if(i < 0)
       {var
         _o_=[0,[1,[0,_e_,[0,caml_call1(Base[119],i),0]]],0],
         _p_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_attempt_to_access_negative),
            _o_]];
        caml_call1(Base[202],_p_)}
      var length=t[2],_q_=length <= i?1:0;
      if(! _q_)return _q_;
      var
       _r_=[0,[1,[0,_f_,[0,caml_call1(Base[119],length),0]]],0],
       _s_=[0,[1,[0,_g_,[0,caml_call1(Base[119],i),0]]],_r_],
       _t_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_attempt_to_access_out_of_b),
          _s_]];
      return caml_call1(Base[202],_t_)}
    function set_exn(t,i,a)
     {validate_index(t,i);
      var data=t[1],i$0=[0,leaf_index(t,i)];
      caml_call3(Base_Option_array[42],data,i$0[1],a);
      for(;;)
       {if(0 === i$0[1])return 0;
        var parent=(i$0[1] - 1 | 0) / 2 | 0;
        if(caml_call2(Base_Option_array[35],data,parent))
         i$0[1] = 0;
        else
         {caml_call2(Base_Option_array[50],data,parent);i$0[1] = parent}}}
    function get_exn(t,i)
     {validate_index(t,i);
      var _n_=leaf_index(t,i);
      return caml_call2(Base_Option_array[34],t[1],_n_)}
    function _h_(t,i)
     {if(caml_call2(Base_Option_array[36],t[1],i))
       return caml_call2(Base_Option_array[38],t[1],i);
      var left=left_child_index(i),right=left + 1 | 0;
      if(caml_call1(Base_Option_array[6],t[1]) <= left)
       {var
         sexp_of_a=t[5],
         _j_=[0,[1,[0,_i_,[0,sexp_of_t(sexp_of_a,t),0]]],0],
         _k_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_attempt_to_compute_balance),
            _j_]];
        caml_call1(Base[202],_k_)}
      var _l_=_h_(t,right),_m_=_h_(t,left),a=caml_call2(t[4],_m_,_l_);
      caml_call3(Base_Option_array[49],t[1],i,a);
      return a}
    function compute_exn(t){return _h_(t,0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_balanced_reducer$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Balanced_reducer$0);
    var
     Balanced_reducer=
      [0,sexp_of_t,invariant,create_exn,set_exn,get_exn,compute_exn];
    runtime.caml_register_global(29,Balanced_reducer,"Balanced_reducer");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
