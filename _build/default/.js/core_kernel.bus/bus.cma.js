// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    var
     global_data=runtime.caml_get_global_data(),
     pos$0=caml_string_of_jsbytes("bus/src/bus.ml:802:21"),
     pos=caml_string_of_jsbytes("bus/src/bus.ml:801:21"),
     cst_bus_src_bus_ml$0=caml_string_of_jsbytes("bus/src/bus.ml"),
     cst_write_doesn_t_allocate_whe=
      caml_string_of_jsbytes("write doesn't allocate when inlined"),
     cst_Bus_fold_exn_called_after_=
      caml_string_of_jsbytes("Bus.fold_exn called after first write"),
     cst_Bus_iter_exn_called_after_=
      caml_string_of_jsbytes("Bus.iter_exn called after first write"),
     cst_Bus_subscribe_exn_called_a=
      caml_string_of_jsbytes("Bus.subscribe_exn called after first write"),
     cst_Bus_subscriber_raised=caml_string_of_jsbytes("Bus subscriber raised"),
     cst_Bus_subscriber_s_on_callba=
      caml_string_of_jsbytes("Bus subscriber's [on_callback_raise] raised"),
     cst_Bus_write_called_on_closed=
      caml_string_of_jsbytes("[Bus.write] called on closed bus"),
     cst_Bus_write_called_from_call=
      caml_string_of_jsbytes
       ("[Bus.write] called from callback on the same bus"),
     cst_Bus=caml_string_of_jsbytes("Bus"),
     cst_bus=caml_string_of_jsbytes("bus"),
     cst_bus_src_bus_ml=caml_string_of_jsbytes("bus/src/bus.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_bus$0=caml_string_of_jsbytes("bus"),
     all=[0,0,[0,1,[0,2,0]]],
     cst_callback=caml_string_of_jsbytes("callback"),
     cst_callbacks=caml_string_of_jsbytes("callbacks"),
     cst_subscribers=caml_string_of_jsbytes("subscribers"),
     cst_num_subscribers=caml_string_of_jsbytes("num_subscribers"),
     cst_bus_src_bus_ml$1=caml_string_of_jsbytes("bus/src/bus.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_bus$1=caml_string_of_jsbytes("bus"),
     cst_Bus$0=caml_string_of_jsbytes("Bus"),
     Core_Error=global_data.Core__Error,
     Core=global_data.Core,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Inline_test_config=global_data.Inline_test_config,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Core_Sexp=global_data.Core__Sexp,
     Core_Source_code_position=global_data.Core__Source_code_position,
     Core_Option_array=global_data.Core__Option_array,
     Core_Int=global_data.Core__Int,
     Base_Backtrace=global_data.Base__Backtrace,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Core_List=global_data.Core__List,
     Assert_failure=global_data.Assert_failure,
     Core_Option=global_data.Core__Option,
     Base_Invariant=global_data.Base__Invariant,
     Core_Array=global_data.Core__Array,
     Core_Info=global_data.Core__Info;
    global_data.Base__Field;
    var
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Core_Unique_id=global_data.Core__Unique_id;
    caml_call1(Ppx_module_timer_runtime[4],cst_Bus);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_bus);
    caml_call1(Expect_test_collector[5][1],cst_bus_src_bus_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_bus$0,cst);
    var
     _ay_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),816,24899,24923],
     _az_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),817,24941,24965],
     _aA_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),818,24983,25007],
     _aB_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),819,25025,25049],
     _aC_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),820,25067,25091],
     _ax_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),795,23925,23959],
     _au_=[0,caml_string_of_jsbytes("_")],
     _at_=[0,caml_string_of_jsbytes("_")],
     _av_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),777,23305,23325],
     _ao_=[0,caml_string_of_jsbytes("Arity1")],
     _ap_=[0,caml_string_of_jsbytes("Arity2")],
     _aq_=[0,caml_string_of_jsbytes("Arity3")],
     _ar_=[0,caml_string_of_jsbytes("Arity4")],
     _as_=[0,caml_string_of_jsbytes("Arity5")],
     _am_=[0,caml_string_of_jsbytes("_")],
     _al_=[0,caml_string_of_jsbytes("_")],
     _an_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),747,22416,22436],
     _ah_=[0,caml_string_of_jsbytes("_")],
     _ag_=[0,caml_string_of_jsbytes("_")],
     _ai_=[0,caml_string_of_jsbytes("bus")],
     _aj_=[0,caml_string_of_jsbytes("subscribed_from")],
     _ak_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),703,20814,20826],
     _ac_=[0,caml_string_of_jsbytes("_")],
     _ad_=[0,caml_string_of_jsbytes("subscriber")],
     _ae_=[0,caml_string_of_jsbytes("backtrace")],
     _af_=[0,caml_string_of_jsbytes("exn")],
     _$_=[0,caml_string_of_jsbytes("original_error")],
     _aa_=[0,caml_string_of_jsbytes("backtrace")],
     _ab_=[0,caml_string_of_jsbytes("exn")],
     ___=[0,caml_string_of_jsbytes("bus/src/bus.ml"),415,19],
     _Z_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),401,2],
     _W_=[0,caml_string_of_jsbytes("_")],
     _V_=[0,caml_string_of_jsbytes("_")],
     _T_=[0,caml_string_of_jsbytes("_")],
     _S_=[0,caml_string_of_jsbytes("_")],
     _U_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),325,9326,9346],
     _X_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),328,9451,9463],
     _Y_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),332,19],
     _Q_=[0,caml_string_of_jsbytes("_")],
     _P_=[0,caml_string_of_jsbytes("_")],
     _O_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),289,54],
     _M_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),302,15],
     _N_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),303,18],
     _L_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),281,11],
     _K_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),285,18],
     _R_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),274,7543,7565],
     _H_=[0,caml_string_of_jsbytes("_")],
     _B_=[0,caml_string_of_jsbytes("_")],
     _C_=[0,caml_string_of_jsbytes("subscribers")],
     _D_=[0,caml_string_of_jsbytes("write_ever_called")],
     _E_=[0,caml_string_of_jsbytes("state")],
     _F_=[0,caml_string_of_jsbytes("on_subscription_after_first_write")],
     _G_=[0,caml_string_of_jsbytes("created_from")],
     _I_=[0,caml_string_of_jsbytes("callback_arity")],
     _J_=[0,caml_string_of_jsbytes("name")],
     _t_=[0,caml_string_of_jsbytes("_")],
     _u_=[0,caml_string_of_jsbytes("bus/src/bus.ml"),185,5063,5087],
     _n_=[0,1],
     _o_=[0,caml_string_of_jsbytes("subscribed_from")],
     _p_=[0,caml_string_of_jsbytes("extract_exn")],
     _q_=[0,caml_string_of_jsbytes("on_callback_raise")],
     _r_=[0,caml_string_of_jsbytes("subscribers_index")],
     _s_=[0,caml_string_of_jsbytes("Bus.Subscriber.t")],
     _i_=[0,caml_string_of_jsbytes("Allow")],
     _j_=[0,caml_string_of_jsbytes("Allow_and_send_last_value")],
     _k_=[0,caml_string_of_jsbytes("Raise")],
     _d_=[0,caml_string_of_jsbytes("Arity1")],
     _e_=[0,caml_string_of_jsbytes("Arity2")],
     _f_=[0,caml_string_of_jsbytes("Arity3")],
     _g_=[0,caml_string_of_jsbytes("Arity4")],
     _h_=[0,caml_string_of_jsbytes("Arity5")],
     _a_=[0,caml_string_of_jsbytes("Closed")],
     _b_=[0,caml_string_of_jsbytes("Write_in_progress")],
     _c_=[0,caml_string_of_jsbytes("Ok_to_write")];
    function sexp_of_t(of_a_002,param)
     {switch(param)
       {case 0:return _d_;
        case 1:return _e_;
        case 2:return _f_;
        case 3:return _g_;
        default:return _h_}}
    var Callback_arity=[0,sexp_of_t];
    function sexp_of_t$0(param)
     {switch(param){case 0:return _i_;case 1:return _j_;default:return _k_}}
    function set1(t,a)
     {var _ct_=t[1];
      if(_ct_){var match=_ct_[1];match[1] = a;return 0}
      t[1] = [0,[0,a]];
      return 0}
    function set2(t,a,b)
     {var _cs_=t[1];
      if(_cs_){var match=_cs_[1];match[1] = a;match[2] = b;return 0}
      t[1] = [0,[1,a,b]];
      return 0}
    function set3(t,a,b,c)
     {var _cr_=t[1];
      if(_cr_)
       {var match=_cr_[1];match[1] = a;match[2] = b;match[3] = c;return 0}
      t[1] = [0,[2,a,b,c]];
      return 0}
    function set4(t,a,b,c,d)
     {var _cq_=t[1];
      if(_cq_)
       {var match=_cq_[1];
        match[1] = a;
        match[2] = b;
        match[3] = c;
        match[4] = d;
        return 0}
      t[1] = [0,[3,a,b,c,d]];
      return 0}
    function set5(t,arg1,arg2,arg3,arg4,arg5)
     {var _cp_=t[1];
      if(_cp_)
       {var match=_cp_[1];
        match[1] = arg1;
        match[2] = arg2;
        match[3] = arg3;
        match[4] = arg4;
        match[5] = arg5;
        return 0}
      t[1] = [0,[4,arg1,arg2,arg3,arg4,arg5]];
      return 0}
    var Bus_id=caml_call1(Core_Unique_id[2],[0]);
    function callback(r){return r[2]}
    function _l_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7]]}
    var
     _m_=0,
     callback$0=[0,function(param){return 0},cst_callback,_m_,callback,_l_];
    function sexp_of_t$1(param,_ce_)
     {var
       extract_exn=_ce_[3],
       subscribers_index=_ce_[4],
       subscribed_from=_ce_[7],
       on_callback_raise=_ce_[5],
       _cf_=0,
       _cg_=Core[540]?0:[0,subscribers_index],
       _ch_=extract_exn?_n_:0,
       match=
        [0,
         [1,
          [0,
           _o_,
           [0,caml_call1(Core_Source_code_position[1],subscribed_from),0]]],
         0];
      if(_ch_)
       var v=_ch_[1],_ci_=[0,[1,[0,_p_,[0,caml_call1(Core[305],v),0]]],match];
      else
       var _ci_=match;
      if(on_callback_raise)
       var
        _cj_=0,
        _ck_=function(_co_){return 0},
        _cl_=
         [0,[1,[0,_q_,[0,caml_call1(Sexplib0_Sexp_conv[24],_ck_),_cj_]]],_ci_];
      else
       var _cl_=_ci_;
      if(_cg_)
       var
        v$0=_cg_[1],
        _cm_=[0,[1,[0,_r_,[0,caml_call1(Core[356],v$0),0]]],_cl_];
      else
       var _cm_=_cl_;
      if(_cm_[2])var _cn_=[1,_cm_];else var h=_cm_[1],_cn_=h;
      return [1,[0,_s_,[0,_cn_,_cf_]]]}
    function callbacks(r){return r[12]}
    function set_callbacks(r,v){r[12] = v;return 0}
    function subscribers(r){return r[11]}
    function set_subscribers(r,v){r[11] = v;return 0}
    function num_subscribers(r){return r[10]}
    function set_num_subscribers(r,v){r[10] = v;return 0}
    function callback_arity(r){return r[3]}
    function _v_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13]]}
    var
     _w_=[0,set_callbacks],
     callbacks$0=[0,function(param){return 0},cst_callbacks,_w_,callbacks,_v_];
    function _x_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13]]}
    var
     _y_=[0,set_subscribers],
     subscribers$0=
      [0,function(param){return 0},cst_subscribers,_y_,subscribers,_x_];
    function _z_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13]]}
    var
     _A_=[0,set_num_subscribers],
     num_subscribers$0=
      [0,
       function(param){return 0},
       cst_num_subscribers,
       _A_,
       num_subscribers,
       _z_];
    function sexp_of_bus(param,_b0_,_bZ_)
     {var
       on_subscription_after_first_wr=_bZ_[5],
       created_from=_bZ_[4],
       callback_arity=_bZ_[3],
       name=_bZ_[2],
       state=_bZ_[8],
       write_ever_called=_bZ_[9],
       num_subscribers=_bZ_[10],
       subscribers=_bZ_[11];
      function _b1_(i){return caml_call2(Core_Option_array[42],subscribers,i)}
      var x_006=caml_call2(Core_Array[40],num_subscribers,_b1_),_b2_=0,_b3_=0;
      function _b4_(param){return _B_}
      function _b5_(_cd_){return sexp_of_t$1(_b4_,_cd_)}
      var
       _b6_=
        [0,[1,[0,_C_,[0,caml_call2(Core_Array[16],_b5_,x_006),_b3_]]],_b2_],
       _b7_=[0,[1,[0,_D_,[0,caml_call1(Core[305],write_ever_called),0]]],_b6_],
       _b8_=0;
      switch(state)
       {case 0:var _b9_=_a_;break;
        case 1:var _b9_=_b_;break;
        default:var _b9_=_c_}
      var
       _b__=
        [0,
         [1,[0,_F_,[0,sexp_of_t$0(on_subscription_after_first_wr),0]]],
         [0,[1,[0,_E_,[0,_b9_,_b8_]]],_b7_]],
       _b$_=
        [0,
         [1,
          [0,_G_,[0,caml_call1(Core_Source_code_position[1],created_from),0]]],
         _b__],
       _ca_=0;
      function _cb_(param){return _H_}
      var
       match=
        [0,
         [1,
          [0,_I_,[0,caml_call2(Callback_arity[1],_cb_,callback_arity),_ca_]]],
         _b$_];
      if(name)
       var
        v=name[1],
        _cc_=[0,[1,[0,_J_,[0,caml_call1(Core_Info[6],v),0]]],match];
      else
       var _cc_=match;
      if(_cc_[2])return [1,_cc_];
      var h=_cc_[1];
      return h}
    function read_only(t){return t}
    function invariant(invariant_a,param,t)
     {function _bM_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         callbacks_fun=
          check
           (function(callbacks)
             {var
               _bU_=caml_call1(Core_Option_array[14],t[11]),
               _bV_=caml_call1(Core_Option_array[14],callbacks);
              if(! caml_call2(Core[90],_bV_,_bU_))
               throw [0,Assert_failure,_L_];
              var
               _bX_=caml_call1(Core_Option_array[14],callbacks) - 1 | 0,
               _bW_=0;
              if(_bX_ >= 0)
               {var i=_bW_;
                for(;;)
                 {if(caml_call2(Core[92],i,t[10]))
                   caml_call1
                    (invariant_a,caml_call2(Core_Option_array[42],callbacks,i));
                  else
                   if(! caml_call2(Core_Option_array[43],callbacks,i))
                    throw [0,Assert_failure,_K_];
                  var _bY_=i + 1 | 0;
                  if(_bX_ !== i){var i=_bY_;continue}
                  break}}
              return 0}),
         subscribers_fun=
          check
           (function(subscribers)
             {var
               _bS_=caml_call1(Core_Option_array[14],subscribers) - 1 | 0,
               _bR_=0;
              if(_bS_ >= 0)
               {var i=_bR_;
                for(;;)
                 {if(caml_call2(Core[92],i,t[10]))
                   {var
                     t$0=caml_call2(Core_Option_array[42],subscribers,i),
                     _bP_=
                      function(t)
                        {return function(param)
                          {var
                            callback_fun=
                             caml_call2(Base_Invariant[2],t,invariant_a);
                           caml_call1(callback_fun,callback$0);
                           return 0}}
                       (t$0),
                     _bQ_=
                      function(x_004)
                       {return sexp_of_t$1(function(param){return _t_},x_004)};
                    caml_call4(Base_Invariant[1],_u_,t$0,_bQ_,_bP_);
                    if(! caml_call2(Core[90],i,t$0[4]))
                     throw [0,Assert_failure,_M_]}
                  else
                   if(! caml_call2(Core_Option_array[43],subscribers,i))
                    throw [0,Assert_failure,_N_];
                  var _bT_=i + 1 | 0;
                  if(_bS_ !== i){var i=_bT_;continue}
                  break}}
              return 0}),
         num_subscribers_fun=
          check
           (function(num_subscribers)
             {if(caml_call2(Core[88],num_subscribers,0))return 0;
              throw [0,Assert_failure,_O_]});
        caml_call1(num_subscribers_fun,num_subscribers$0);
        caml_call1(subscribers_fun,subscribers$0);
        caml_call1(callbacks_fun,callbacks$0);
        return 0}
      function _bN_(x_010)
       {function _bO_(param){return _P_}
        return sexp_of_bus(function(param){return _Q_},_bO_,x_010)}
      return caml_call4(Base_Invariant[1],_R_,t,_bN_,_bM_)}
    function is_closed(t)
     {switch(t[8]){case 0:return 1;case 1:return 0;default:return 0}}
    function sexp_of_t$2(of_callback_011,x_012)
     {return sexp_of_bus(of_callback_011,Core[202],x_012)}
    function invariant$0(invariant_a,t)
     {return invariant(invariant_a,function(_bL_){return 0},t)}
    var Read_write=[0,sexp_of_t$2,invariant$0];
    function sexp_of_t$3(of_callback_013,x_014)
     {return sexp_of_bus(of_callback_013,Core[171],x_014)}
    function invariant$1(invariant_a,t)
     {return invariant(invariant_a,function(_bK_){return 0},t)}
    var Read_only=[0,sexp_of_t$3,invariant$1];
    function start_write_failing(t)
     {switch(t[8])
       {case 0:
         var
          _bG_=
           function(x_015)
            {function _bJ_(param){return _S_}
             return sexp_of_bus(function(param){return _T_},_bJ_,x_015)};
         return caml_call5
                 (Core[236],0,_U_,cst_Bus_write_called_on_closed,t,_bG_);
        case 1:
         var
          _bH_=
           function(x_016)
            {function _bI_(param){return _V_}
             return sexp_of_bus(function(param){return _W_},_bI_,x_016)};
         return caml_call5
                 (Core[236],0,_X_,cst_Bus_write_called_from_call,t,_bH_);
        default:throw [0,Assert_failure,_Y_]}}
    function capacity(t){return caml_call1(Core_Option_array[14],t[11])}
    function maybe_shrink_capacity(t)
     {var _bD_=capacity(t),_bE_=caml_call2(Core[89],t[10] * 4 | 0,_bD_);
      if(_bE_)
       {var
         desired_capacity=t[10],
         copy_and_shrink=
          function(array)
           {var new_array=caml_call1(Core_Option_array[13],desired_capacity);
            caml_call5(Core_Option_array[59],array,0,new_array,0,t[10]);
            return new_array};
        t[11] = copy_and_shrink(t[11]);
        t[12] = copy_and_shrink(t[12]);
        var _bF_=0}
      else
       var _bF_=_bE_;
      return _bF_}
    function add_subscriber(t,subscriber,at_subscribers_index)
     {subscriber[4] = at_subscribers_index;
      caml_call3(Core_Option_array[50],t[11],at_subscribers_index,subscriber);
      return caml_call3
              (Core_Option_array[50],t[12],at_subscribers_index,subscriber[2])}
    function remove_subscriber(t,subscriber)
     {var subscribers_index=subscriber[4];
      subscriber[4] = -1;
      caml_call2(Core_Option_array[51],t[11],subscribers_index);
      return caml_call2(Core_Option_array[51],t[12],subscribers_index)}
    function unsubscribe_assuming_valid_sub(t,subscriber)
     {var subscriber_index=subscriber[4],last_subscriber_index=t[10] - 1 | 0;
      remove_subscriber(t,subscriber);
      if(caml_call2(Core[92],subscriber_index,last_subscriber_index))
       {var
         last_subscriber=
          caml_call2(Core_Option_array[42],t[11],last_subscriber_index);
        remove_subscriber(t,last_subscriber);
        add_subscriber(t,last_subscriber,subscriber_index)}
      t[10] = t[10] - 1 | 0;
      return maybe_shrink_capacity(t)}
    function unsubscribe(t,subscriber)
     {var
       _bB_=t[1],
       _bA_=caml_call2(Core[88],subscriber[4],0),
       _bC_=_bA_?caml_call2(Bus_id[19],subscriber[1],_bB_):_bA_;
      if(_bC_)
       switch(t[8])
        {case 0:return 0;
         case 1:t[13] = [0,subscriber,t[13]];return 0;
         default:return unsubscribe_assuming_valid_sub(t,subscriber)}
      return _bC_}
    function unsubscribe_all(t)
     {if(! is_closed(t))throw [0,Assert_failure,_Z_];
      var _bx_=t[10] - 1 | 0,_bw_=0;
      if(_bx_ >= 0)
       {var i=_bw_;
        for(;;)
         {var
           subscriber=caml_call2(Core_Option_array[42],t[11],i),
           _by_=function(on_close){return caml_call1(on_close,0)};
          caml_call2(Core_Option[41],subscriber[6],_by_);
          remove_subscriber(t,subscriber);
          var _bz_=i + 1 | 0;
          if(_bx_ !== i){var i=_bz_;continue}
          break}}
      t[10] = 0;
      return maybe_shrink_capacity(t)}
    function finish_write(t)
     {if(1 - caml_call1(Core_List[8],t[13]))
       {var
         _bu_=
          function(_bv_){return unsubscribe_assuming_valid_sub(t,_bv_)};
        caml_call2(Core_List[9],t[13],_bu_);
        t[13] = 0}
      switch(t[8])
       {case 0:return unsubscribe_all(t);
        case 1:t[8] = 2;return 0;
        default:throw [0,Assert_failure,___]}}
    function close(t)
     {switch(t[8])
       {case 0:return 0;
        case 1:t[8] = 0;return 0;
        default:t[8] = 0;return unsubscribe_all(t)}}
    function call_on_callback_raise(t,error)
     {try
       {var _bt_=caml_call1(t[6],error);return _bt_}
      catch(exn){exn = caml_wrap_exception(exn);close(t);throw exn}}
    function callback_raised(t,i,exn)
     {var subscriber=caml_call2(Core_Option_array[42],t[11],i - 1 | 0);
      if(subscriber[3])
       var error=caml_call2(Core_Error[25],0,exn);
      else
       var
        backtrace$0=caml_call1(Base_Backtrace[6][4],0),
        _bn_=0,
        _bo_=0,
        _bp_=
         [0,
          [1,
           [0,
            _ad_,
            [0,
             function(x_017)
               {return sexp_of_t$1(function(param){return _ac_},x_017)}
              (subscriber),
             _bo_]]],
          _bn_],
        _bq_=
         [0,[1,[0,_ae_,[0,caml_call1(Base_Backtrace[1],backtrace$0),0]]],_bp_],
        _br_=[0,[1,[0,_af_,[0,caml_call1(Core[537],exn),0]]],_bq_],
        _bs_=
         [1,
          [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Bus_subscriber_raised),_br_]],
        error=caml_call1(Core_Error[5],_bs_);
      var _bh_=subscriber[5];
      if(! _bh_)return call_on_callback_raise(t,error);
      var f=_bh_[1];
      try
       {var _bm_=caml_call1(f,error);return _bm_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         backtrace=caml_call1(Base_Backtrace[6][4],0),
         _bi_=[0,[1,[0,_$_,[0,caml_call1(Core_Error[6],error),0]]],0],
         _bj_=
          [0,[1,[0,_aa_,[0,caml_call1(Base_Backtrace[1],backtrace),0]]],_bi_],
         _bk_=[0,[1,[0,_ab_,[0,caml_call1(Core[537],exn),0]]],_bj_],
         _bl_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Bus_subscriber_s_on_callba),
            _bk_]];
        return call_on_callback_raise(t,caml_call1(Core_Error[5],_bl_))}}
    function unsafe_get_callback(a,i)
     {return caml_call2(Core_Option_array[47],a,i)}
    function write(t,a1)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 > t[8])return start_write_failing(t);
      t[8] = 1;
      if(caml_call2(Core[90],t[10],1))
       {try
         {caml_call1(unsafe_get_callback(callbacks,0),a1)}
        catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
        finish_write(t)}
      else
       {var len=t[10],i=[0,0];
        for(;;)
         {if(caml_call2(Core[92],i[1],len))
           {try
             {var callback=unsafe_get_callback(callbacks,i[1]);
              i[1]++;
              caml_call1(callback,a1)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              callback_raised(t,i[1],exn);
              continue}
            continue}
          finish_write(t);
          break}}
      var _bg_=t[7];
      if(! _bg_)return 0;
      var last_value=_bg_[1];
      return set1(last_value,a1)}
    function write2(t,a1,a2)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 > t[8])return start_write_failing(t);
      t[8] = 1;
      if(caml_call2(Core[90],t[10],1))
       {try
         {caml_call2(unsafe_get_callback(callbacks,0),a1,a2)}
        catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
        finish_write(t)}
      else
       {var len=t[10],i=[0,0];
        for(;;)
         {if(caml_call2(Core[92],i[1],len))
           {try
             {var callback=unsafe_get_callback(callbacks,i[1]);
              i[1]++;
              caml_call2(callback,a1,a2)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              callback_raised(t,i[1],exn);
              continue}
            continue}
          finish_write(t);
          break}}
      var _bf_=t[7];
      if(! _bf_)return 0;
      var last_value=_bf_[1];
      return set2(last_value,a1,a2)}
    function write3(t,a1,a2,a3)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 > t[8])return start_write_failing(t);
      t[8] = 1;
      if(caml_call2(Core[90],t[10],1))
       {try
         {caml_call3(unsafe_get_callback(callbacks,0),a1,a2,a3)}
        catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
        finish_write(t)}
      else
       {var len=t[10],i=[0,0];
        for(;;)
         {if(caml_call2(Core[92],i[1],len))
           {try
             {var callback=unsafe_get_callback(callbacks,i[1]);
              i[1]++;
              caml_call3(callback,a1,a2,a3)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              callback_raised(t,i[1],exn);
              continue}
            continue}
          finish_write(t);
          break}}
      var _be_=t[7];
      if(! _be_)return 0;
      var last_value=_be_[1];
      return set3(last_value,a1,a2,a3)}
    function write4(t,a1,a2,a3,a4)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 > t[8])return start_write_failing(t);
      t[8] = 1;
      if(caml_call2(Core[90],t[10],1))
       {try
         {caml_call4(unsafe_get_callback(callbacks,0),a1,a2,a3,a4)}
        catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
        finish_write(t)}
      else
       {var len=t[10],i=[0,0];
        for(;;)
         {if(caml_call2(Core[92],i[1],len))
           {try
             {var callback=unsafe_get_callback(callbacks,i[1]);
              i[1]++;
              caml_call4(callback,a1,a2,a3,a4)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              callback_raised(t,i[1],exn);
              continue}
            continue}
          finish_write(t);
          break}}
      var _bd_=t[7];
      if(! _bd_)return 0;
      var last_value=_bd_[1];
      return set4(last_value,a1,a2,a3,a4)}
    function write5(t,a1,a2,a3,a4,a5)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 > t[8])return start_write_failing(t);
      t[8] = 1;
      if(caml_call2(Core[90],t[10],1))
       {try
         {caml_call5(unsafe_get_callback(callbacks,0),a1,a2,a3,a4,a5)}
        catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
        finish_write(t)}
      else
       {var len=t[10],i=[0,0];
        for(;;)
         {if(caml_call2(Core[92],i[1],len))
           {try
             {var callback=unsafe_get_callback(callbacks,i[1]);
              i[1]++;
              caml_call5(callback,a1,a2,a3,a4,a5)}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              callback_raised(t,i[1],exn);
              continue}
            continue}
          finish_write(t);
          break}}
      var _bc_=t[7];
      if(! _bc_)return 0;
      var last_value=_bc_[1];
      return set5(last_value,a1,a2,a3,a4,a5)}
    function create
     (name,
      created_from,
      callback_arity,
      on_subscription_after_first_wr,
      on_callback_raise)
     {switch(on_subscription_after_first_wr)
       {case 0:var last_value=0;break;
        case 1:var last_value=[0,[0,0]];break;
        default:var last_value=0}
      var
       _ba_=caml_call1(Core_Option_array[13],0),
       _bb_=caml_call1(Core_Option_array[13],0);
      return [0,
              caml_call1(Bus_id[45],0),
              name,
              callback_arity,
              created_from,
              on_subscription_after_first_wr,
              on_callback_raise,
              last_value,
              2,
              0,
              0,
              _bb_,
              _ba_,
              0]}
    function can_subscribe(t)
     {switch(t[5])
       {case 0:var _a__=1;break;case 1:var _a__=1;break;default:var _a__=0}
      var _a$_=_a__ || 1 - t[9];
      return _a$_}
    function subscribe_exn
     (opt,on_callback_raise,on_close,t,subscribed_from,callback)
     {if(opt)var sth=opt[1],extract_exn=sth;else var extract_exn=0;
      if(1 - can_subscribe(t))
       {var
         _a0_=Core_Sexp[90],
         _a1_=0,
         _a2_=0,
         _a3_=0,
         _a4_=function(param){return _ag_},
         _a5_=
          [0,
           [1,
            [0,
             [1,
              [0,
               _ai_,
               [0,sexp_of_bus(function(param){return _ah_},_a4_,t),_a3_]]],
             _a2_]],
           _a1_],
         _a6_=
          [1,
           [0,
            [1,
             [0,
              _aj_,
              [0,caml_call1(Core_Source_code_position[1],subscribed_from),0]]],
            _a5_]];
        caml_call5(Core[236],0,_ak_,cst_Bus_subscribe_exn_called_a,_a6_,_a0_)}
      if(! t[8])
       return [0,
               t[1],
               callback,
               extract_exn,
               -1,
               on_callback_raise,
               on_close,
               subscribed_from];
      var
       subscriber=
        [0,
         t[1],
         callback,
         extract_exn,
         t[10],
         on_callback_raise,
         on_close,
         subscribed_from],
       _a7_=t[10],
       _a8_=capacity(t);
      if(caml_call2(Core[90],_a8_,_a7_))
       {var
         capacity$0=capacity(t),
         new_capacity=caml_call2(Core_Int[93],1,capacity$0 * 2 | 0),
         copy_and_double=
          function(array)
           {var new_array=caml_call1(Core_Option_array[13],new_capacity);
            caml_call5(Core_Option_array[59],array,0,new_array,0,capacity$0);
            return new_array};
        t[11] = copy_and_double(t[11]);
        t[12] = copy_and_double(t[12])}
      add_subscriber(t,subscriber,t[10]);
      t[10] = t[10] + 1 | 0;
      var _a9_=t[7];
      if(_a9_)
       {var last_value=_a9_[1],_aY_=last_value[1];
        if(_aY_)
         {var _aZ_=_aY_[1];
          switch(_aZ_[0])
           {case 0:var arg1=_aZ_[1];caml_call1(callback,arg1);break;
            case 1:
             var arg1$0=_aZ_[1],arg2=_aZ_[2];
             caml_call2(callback,arg1$0,arg2);
             break;
            case 2:
             var arg1$1=_aZ_[1],arg2$0=_aZ_[2],arg3=_aZ_[3];
             caml_call3(callback,arg1$1,arg2$0,arg3);
             break;
            case 3:
             var arg1$2=_aZ_[1],arg2$1=_aZ_[2],arg3$0=_aZ_[3],arg4=_aZ_[4];
             caml_call4(callback,arg1$2,arg2$1,arg3$0,arg4);
             break;
            default:
             var
              arg1$3=_aZ_[1],
              arg2$2=_aZ_[2],
              arg3$1=_aZ_[3],
              arg4$0=_aZ_[4],
              arg5=_aZ_[5];
             caml_call5(callback,arg1$3,arg2$2,arg3$1,arg4$0,arg5)}}}
      return subscriber}
    function iter_exn(extract_exn,t,subscribed_from,f)
     {if(1 - can_subscribe(t))
       {var
         _aW_=
          function(x_019)
           {function _aX_(param){return _al_}
            return sexp_of_bus(function(param){return _am_},_aX_,x_019)};
        caml_call5(Core[236],0,_an_,cst_Bus_iter_exn_called_after_,t,_aW_)}
      subscribe_exn(extract_exn,0,0,t,subscribed_from,f);
      return 0}
    function sexp_of_t$4(of_a_023,of_b_024,of_c_025,param)
     {switch(param)
       {case 0:return _ao_;
        case 1:return _ap_;
        case 2:return _aq_;
        case 3:return _ar_;
        default:return _as_}}
    var Fold_arity=[0,sexp_of_t$4];
    function fold_exn(extract_exn,t,subscribed_from,fold_arity,init,f)
     {var state=[0,init];
      if(1 - can_subscribe(t))
       {var
         _aT_=
          function(x_029)
           {function _aV_(param){return _at_}
            return sexp_of_bus(function(param){return _au_},_aV_,x_029)};
        caml_call5(Core[236],0,_av_,cst_Bus_fold_exn_called_after_,t,_aT_)}
      switch(fold_arity)
       {case 0:
         var _aU_=function(a1){state[1] = caml_call2(f,state[1],a1);return 0};
         break;
        case 1:
         var
          _aU_=
           function(a1,a2){state[1] = caml_call3(f,state[1],a1,a2);return 0};
         break;
        case 2:
         var
          _aU_=
           function(a1,a2,a3)
            {state[1] = caml_call4(f,state[1],a1,a2,a3);return 0};
         break;
        case 3:
         var
          _aU_=
           function(a1,a2,a3,a4)
            {state[1] = caml_call5(f,state[1],a1,a2,a3,a4);return 0};
         break;
        default:
         var
          _aU_=
           function(a1,a2,a3,a4,a5)
            {state[1] = caml_call6(f,state[1],a1,a2,a3,a4,a5);return 0}}
      return iter_exn(extract_exn,t,subscribed_from,_aU_)}
    function _aw_(param)
     {function assert_no_allocation(bus_r,callback,write)
       {subscribe_exn(0,0,0,bus_r,_ax_,callback);
        var
         starting_minor_words=runtime.core_gc_minor_words(0),
         starting_major_words=runtime.core_gc_major_words(0);
        caml_call1(write,0);
        var
         ending_minor_words=runtime.core_gc_minor_words(0),
         ending_major_words=runtime.core_gc_major_words(0),
         got=ending_minor_words - starting_minor_words | 0,
         sexpifier=Core[356],
         expect=0,
         equal=0,
         message=0,
         here=0;
        function comparator(a_030,b_031)
         {return caml_call2(Core[352],a_030,b_031)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect,
          got);
        var
         got$0=ending_major_words - starting_major_words | 0,
         sexpifier$0=Core[356],
         expect$0=0,
         equal$0=0,
         message$0=0,
         here$0=0;
        function comparator$0(a_032,b_033)
         {return caml_call2(Core[352],a_032,b_033)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$0,
                 sexpifier$0,
                 comparator$0,
                 here$0,
                 message$0,
                 equal$0,
                 expect$0,
                 got$0)}
      function _aD_(param)
       {function create$0(created_from,arity)
         {return create(0,created_from,arity,2,Core_Error[28])}
        var
         bus1=create$0(_ay_,0),
         bus2=create$0(_az_,1),
         bus3=create$0(_aA_,2),
         bus4=create$0(_aB_,3),
         bus5=create$0(_aC_,4);
        function _aE_(param){return write(bus1,0)}
        assert_no_allocation(bus1,function(param){return 0},_aE_);
        function _aF_(param){return write2(bus2,0,0)}
        assert_no_allocation(bus2,function(param,_aS_){return 0},_aF_);
        function _aG_(param){return write3(bus3,0,0,0)}
        assert_no_allocation(bus3,function(param,_aR_,_aQ_){return 0},_aG_);
        function _aH_(param){return write4(bus4,0,0,0,0)}
        assert_no_allocation
         (bus4,function(param,_aP_,_aO_,_aN_){return 0},_aH_);
        function _aI_(param){return write5(bus5,0,0,0,0,0)}
        assert_no_allocation
         (bus5,function(param,_aM_,_aL_,_aK_,_aJ_){return 0},_aI_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_write_doesn_t_allocate_whe,
        0,
        cst_bus_src_bus_ml$0,
        808,
        4,
        941,
        _aD_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$0,
      0,
      cst_bus_src_bus_ml$1,
      791,
      0,
      1799,
      _aw_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_bus$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Bus$0);
    var
     Bus=
      [0,
       Callback_arity,
       sexp_of_bus,
       Read_write,
       Read_only,
       [0,all,sexp_of_t$0],
       read_only,
       create,
       callback_arity,
       num_subscribers,
       is_closed,
       close,
       write,
       write2,
       write3,
       write4,
       write5,
       [0,sexp_of_t$1],
       subscribe_exn,
       iter_exn,
       Fold_arity,
       fold_exn,
       unsubscribe];
    runtime.caml_register_global(139,Bus,"Bus");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
