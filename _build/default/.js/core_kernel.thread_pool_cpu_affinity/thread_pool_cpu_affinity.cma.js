// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_register_global=runtime.caml_register_global,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Thread_pool_cpu_affinity_I=
      caml_string_of_jsbytes("Thread_pool_cpu_affinity__Import"),
     cst_thread_pool_cpu_affinity=
      caml_string_of_jsbytes("thread_pool_cpu_affinity"),
     cst_thread_pool_cpu_affinity_s=
      caml_string_of_jsbytes("thread_pool_cpu_affinity/src/import.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_thread_pool_cpu_affinity$0=
      caml_string_of_jsbytes("thread_pool_cpu_affinity"),
     cst_thread_pool_cpu_affinity$1=
      caml_string_of_jsbytes("thread_pool_cpu_affinity"),
     cst_Thread_pool_cpu_affinity_I$0=
      caml_string_of_jsbytes("Thread_pool_cpu_affinity__Import"),
     cst_Cpuset=caml_string_of_jsbytes("Cpuset"),
     cst_Inherit=caml_string_of_jsbytes("Inherit"),
     cst_cpuset=caml_string_of_jsbytes("cpuset"),
     cst_inherit=caml_string_of_jsbytes("inherit"),
     cst_Cpuset$0=caml_string_of_jsbytes("Cpuset"),
     cst_Inherit$0=caml_string_of_jsbytes("Inherit"),
     cst_cpuset$0=caml_string_of_jsbytes("cpuset"),
     cst_inherit$0=caml_string_of_jsbytes("inherit"),
     cst_Thread_pool_cpuset=caml_string_of_jsbytes("Thread_pool_cpuset"),
     cst_Thread_pool_cpu_affinity=
      caml_string_of_jsbytes("Thread_pool_cpu_affinity"),
     cst_thread_pool_cpu_affinity$2=
      caml_string_of_jsbytes("thread_pool_cpu_affinity"),
     cst_thread_pool_cpu_affinity_s$0=
      caml_string_of_jsbytes
       ("thread_pool_cpu_affinity/src/thread_pool_cpu_affinity.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_thread_pool_cpu_affinity$3=
      caml_string_of_jsbytes("thread_pool_cpu_affinity"),
     here=
      [0,
       caml_string_of_jsbytes
        ("thread_pool_cpu_affinity/src/thread_pool_cpu_affinity.ml"),
       8,
       125,
       142],
     error_source_004=
      caml_string_of_jsbytes
       ("thread_pool_cpu_affinity/src/thread_pool_cpu_affinity.ml.t"),
     cst_thread_pool_cpu_affinity$4=
      caml_string_of_jsbytes("thread_pool_cpu_affinity"),
     cst_Thread_pool_cpu_affinity$0=
      caml_string_of_jsbytes("Thread_pool_cpu_affinity"),
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Core_Int=global_data.Core__Int,
     Core_List=global_data.Core__List,
     Validate=global_data.Validate,
     Core_Validated=global_data.Core__Validated,
     Thread_pool_cpu_affinity=[0];
    caml_register_global
     (28,Thread_pool_cpu_affinity,"Thread_pool_cpu_affinity__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Thread_pool_cpu_affinity_I);
    caml_call1
     (Ppx_bench_lib_Benchmark_accumu[1][1],cst_thread_pool_cpu_affinity);
    caml_call1(Expect_test_collector[5][1],cst_thread_pool_cpu_affinity_s);
    caml_call2
     (Ppx_inline_test_lib_Runtime[2],cst_thread_pool_cpu_affinity$0,cst);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_thread_pool_cpu_affinity$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Thread_pool_cpu_affinity_I$0);
    var Thread_pool_cpu_affinity_Impor=[0];
    caml_register_global
     (33,Thread_pool_cpu_affinity_Impor,"Thread_pool_cpu_affinity__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Thread_pool_cpu_affinity);
    caml_call1
     (Ppx_bench_lib_Benchmark_accumu[1][1],cst_thread_pool_cpu_affinity$2);
    caml_call1(Expect_test_collector[5][1],cst_thread_pool_cpu_affinity_s$0);
    caml_call2
     (Ppx_inline_test_lib_Runtime[2],cst_thread_pool_cpu_affinity$3,cst$0);
    var
     t_of_sexp=Core_Int[102][74],
     sexp_of_t=Core_Int[102][75],
     _b_=[0,caml_string_of_jsbytes("Cpuset")],
     _c_=[0,caml_string_of_jsbytes("Inherit")],
     _a_=[0,1];
    function validate(t)
     {var
       _j_=Core_Int[113],
       _k_=caml_call1(Core_Int[102][14],t),
       _l_=caml_call2(Core_List[72],_k_,_j_),
       _m_=caml_call2(Validate[9],cst_Thread_pool_cpuset,_l_),
       _n_=caml_call1(Core_Int[102][3],t),
       _o_=caml_call2(Core_Int[109],_a_,_n_);
      return caml_call2(Validate[30],_o_,_m_)}
    var
     include=
      caml_call1(Core_Validated[2],[0,t_of_sexp,sexp_of_t,here,validate]),
     t_of_sexp$0=include[1],
     sexp_of_t$0=include[2],
     create=include[3],
     create_exn=include[4],
     raw=include[5];
    function equal(t1,t2)
     {var _h_=caml_call1(raw,t2),_i_=caml_call1(raw,t1);
      return caml_call2(Core_Int[102][25],_i_,_h_)}
    var Cpuset=[0,t_of_sexp$0,sexp_of_t$0,create,create_exn,raw,equal];
    function t_of_sexp$1(sexp_006)
     {if(0 === sexp_006[0])
       {var _d_=sexp_006[1],switch$0=0;
        if(caml_string_notequal(_d_,cst_Cpuset))
         {var switch$1=0;
          if(caml_string_notequal(_d_,cst_Inherit))
           if(caml_string_notequal(_d_,cst_cpuset))
            {if(caml_string_notequal(_d_,cst_inherit))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)return 0}
        if(! switch$0)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],error_source_004,sexp_006)}
      else
       {var _e_=sexp_006[1];
        if(! _e_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_004,sexp_006);
        var _f_=_e_[1];
        if(0 !== _f_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_004,sexp_006);
        var _g_=_f_[1],switch$2=0;
        if(caml_string_notequal(_g_,cst_Cpuset$0))
         {var switch$3=0;
          if(caml_string_notequal(_g_,cst_Inherit$0))
           if(caml_string_notequal(_g_,cst_cpuset$0))
            {if(caml_string_notequal(_g_,cst_inherit$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_004,sexp_006)}
        if(! switch$2)
         {var sexp_args_008=_e_[2];
          if(sexp_args_008 && ! sexp_args_008[2])
           {var
             arg0_009=sexp_args_008[1],
             res0_010=caml_call1(Cpuset[1],arg0_009);
            return [0,res0_010]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],error_source_004,_g_,sexp_006)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_004,sexp_006)}
    function sexp_of_t$1(param)
     {if(! param)return _c_;
      var arg0_011=param[1],res0_012=caml_call1(Cpuset[2],arg0_011);
      return [1,[0,_b_,[0,res0_012,0]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_thread_pool_cpu_affinity$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Thread_pool_cpu_affinity$0);
    var Thread_pool_cpu_affinity$0=[0,Cpuset,t_of_sexp$1,sexp_of_t$1];
    caml_register_global
     (39,Thread_pool_cpu_affinity$0,"Thread_pool_cpu_affinity");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ0aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHkuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImhlcmUiLCJlcnJvcl9zb3VyY2VfMDA0IiwidF9vZl9zZXhwIiwic2V4cF9vZl90IiwidmFsaWRhdGUiLCJ0IiwiZXF1YWwiLCJ0MSIsInQyIiwidF9vZl9zZXhwJDEiLCJzZXhwXzAwNiIsInNleHBfYXJnc18wMDgiLCJhcmcwXzAwOSIsInJlczBfMDEwIiwic2V4cF9vZl90JDEiLCJhcmcwXzAxMSIsInJlczBfMDEyIl0sInNvdXJjZXMiOlsiL2hvbWUvYmVuLy5vcGFtLzQuMTQvbGliL2NvcmVfa2VybmVsL3RocmVhZF9wb29sX2NwdV9hZmZpbml0eS90aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHkubWwiXSwibWFwcGluZ3MiOiI7Ozs7O0k7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQU9VQTs7Ozs7OztLQWNWQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQWhCTUM7Ozs7O2FBSUlFLFNBQVNDO01BQ1g7O09BRUcsaUNBSFFBO09BR1I7T0FBRDtPQURtQyxnQ0FGMUJBO09BRVQ7NkNBRzRDOzs7c0NBVGhESCxvQkFFSUYsS0FFQUk7Ozs7OzthQVNKRSxNQUFNQyxHQUFHQztNQUErQix1QkFBL0JBLElBQW1CLG1CQUF0QkQ7TUFBc0IsNENBQXVCO2dFQUFuREQ7YUFHTkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4RUFHaUI7YUFIakJLO2lCQUNFO01BQ0E7dUNBQ2U7Ozs7OzZDQUhqQkw7OztVIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiEgQ29yZVxub3BlbiEgSW1wb3J0XG5cbm1vZHVsZSBDcHVzZXQgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBWYWxpZGF0ZWQuTWFrZSAoc3RydWN0XG4gICAgICB0eXBlIHQgPSBJbnQuU2V0LnQgW0BAZGVyaXZpbmcgc2V4cF1cblxuICAgICAgbGV0IGhlcmUgPSBbJWhlcmVdXG5cbiAgICAgIGxldCB2YWxpZGF0ZSB0ID1cbiAgICAgICAgVmFsaWRhdGUuZmlyc3RfZmFpbHVyZVxuICAgICAgICAgIChJbnQudmFsaWRhdGVfbGJvdW5kIH5taW46KEluY2wgMSkgKEludC5TZXQubGVuZ3RoIHQpKVxuICAgICAgICAgIChJbnQuU2V0LnRvX2xpc3QgdFxuICAgICAgICAgICB8PiBMaXN0Lm1hcCB+ZjpJbnQudmFsaWRhdGVfbm9uX25lZ2F0aXZlXG4gICAgICAgICAgIHw+IFZhbGlkYXRlLm5hbWVfbGlzdCBcIlRocmVhZF9wb29sX2NwdXNldFwiKVxuICAgICAgOztcbiAgICBlbmQpXG5cbiAgbGV0IGVxdWFsIHQxIHQyID0gSW50LlNldC5lcXVhbCAodDEgfD4gcmF3KSAodDIgfD4gcmF3KVxuZW5kXG5cbnR5cGUgdCA9XG4gIHwgSW5oZXJpdFxuICB8IENwdXNldCBvZiBDcHVzZXQudFxuW0BAZGVyaXZpbmcgc2V4cF1cbiJdfQ==
