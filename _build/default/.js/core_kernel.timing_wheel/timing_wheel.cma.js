// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_register_global=runtime.caml_register_global,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Timing_wheel_Import=caml_string_of_jsbytes("Timing_wheel__Import"),
     cst_timing_wheel=caml_string_of_jsbytes("timing_wheel"),
     cst_timing_wheel_src_import_ml=
      caml_string_of_jsbytes("timing_wheel/src/import.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_timing_wheel$0=caml_string_of_jsbytes("timing_wheel"),
     cst_timing_wheel$1=caml_string_of_jsbytes("timing_wheel"),
     cst_Timing_wheel_Import$0=caml_string_of_jsbytes("Timing_wheel__Import"),
     cst_Timing_wheel_Timing_wheel_=
      caml_string_of_jsbytes("Timing_wheel__Timing_wheel_intf"),
     cst_timing_wheel$2=caml_string_of_jsbytes("timing_wheel"),
     cst_timing_wheel_src_timing_wh=
      caml_string_of_jsbytes("timing_wheel/src/timing_wheel_intf.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_timing_wheel$3=caml_string_of_jsbytes("timing_wheel"),
     cst_timing_wheel$4=caml_string_of_jsbytes("timing_wheel"),
     cst_Timing_wheel_Timing_wheel_$0=
      caml_string_of_jsbytes("Timing_wheel__Timing_wheel_intf"),
     cst_Timing_wheel_max_alarm_tim$0=
      caml_string_of_jsbytes
       ("Timing_wheel.max_alarm_time_in_min_interval_exn of empty timing wheel"),
     cst_Timing_wheel_max_alarm_tim=
      caml_string_of_jsbytes
       ("Timing_wheel.max_alarm_time_in_min_interval_exn of empty timing wheel"),
     cst_Timing_wheel_min_alarm_int=
      caml_string_of_jsbytes
       ("Timing_wheel.min_alarm_interval_num_exn of empty timing_wheel"),
     cst_Timing_wheel_cannot_resche=
      caml_string_of_jsbytes
       ("Timing_wheel cannot reschedule alarm not in timing wheel"),
     cst_Timing_wheel_cannot_schedu$0=
      caml_string_of_jsbytes
       ("Timing_wheel cannot schedule alarm before start of current interval"),
     cst_Timing_wheel_cannot_schedu=
      caml_string_of_jsbytes
       ("Timing_wheel cannot schedule alarm that far in the future"),
     cst_Timing_wheel_create_got_st=
      caml_string_of_jsbytes("Timing_wheel.create got start before the epoch"),
     pos$9=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:1631:26"),
     pos$8=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:1628:26"),
     pos$7=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:1644:26"),
     pos$6=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:1649:26"),
     cst_Timing_wheel_interval_num_$1=
      caml_string_of_jsbytes
       ("Timing_wheel.interval_num_start got too large interval_num"),
     cst_Timing_wheel_interval_num_$0=
      caml_string_of_jsbytes
       ("Timing_wheel.interval_num_start got too small interval_num"),
     cst_Timing_wheel_interval_num_=
      caml_string_of_jsbytes
       ("Timing_wheel.interval_num got time too far in the past"),
     cst_Timing_wheel_next_alarm_fi$0=
      caml_string_of_jsbytes
       ("Timing_wheel.next_alarm_fires_at_exn with all alarms in max interval"),
     cst_Timing_wheel_next_alarm_fi=
      caml_string_of_jsbytes
       ("Timing_wheel.next_alarm_fires_at_exn of empty timing wheel"),
     cst_Timing_wheel_add_at_interv=
      caml_string_of_jsbytes
       ("Timing_wheel.add_at_interval_num got invalid interval num"),
     cst_Priority_queue_add_elt_key$0=
      caml_string_of_jsbytes("Priority_queue.add_elt key out of level bounds"),
     arg_108=[0,caml_string_of_jsbytes("_")],
     cst_Priority_queue_add_elt_key=
      caml_string_of_jsbytes("Priority_queue.add_elt key out of bounds"),
     pos$5=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:1006:32"),
     pos$4=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:1003:32"),
     pos$3=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:902:31"),
     pos$2=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:909:30"),
     pos$1=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:921:31"),
     pos$0=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:939:32"),
     pos=caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml:944:30"),
     cst_Timing_wheel_got_invalid_a=
      caml_string_of_jsbytes("Timing_wheel got invalid alarm"),
     cst_alarm_precision=caml_string_of_jsbytes("alarm_precision"),
     cst_capacity=caml_string_of_jsbytes("capacity"),
     cst_level_bits$0=caml_string_of_jsbytes("level_bits"),
     cst_alarm_precision$0=caml_string_of_jsbytes("alarm_precision"),
     cst_Alarm_precision_of_span_fl=
      caml_string_of_jsbytes
       ("[Alarm_precision.of_span_floor_pow2_ns] got non-positive span"),
     cst_Alarm_precision_to_span_of=
      caml_string_of_jsbytes
       ("[Alarm_precision.to_span] of negative power of two nanoseconds"),
     cst_Level_bits_create_exn_requ=
      caml_string_of_jsbytes("Level_bits.create_exn requires a nonempty list"),
     cst_Level_bits_create_exn_got_=
      caml_string_of_jsbytes("Level_bits.create_exn got nonpositive num bits"),
     cst_Level_bits_create_exn_got_$0=
      caml_string_of_jsbytes("Level_bits.create_exn got too many bits"),
     cst_Timing_wheel=caml_string_of_jsbytes("Timing_wheel"),
     cst_timing_wheel$5=caml_string_of_jsbytes("timing_wheel"),
     cst_timing_wheel_src_timing_wh$0=
      caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_timing_wheel$6=caml_string_of_jsbytes("timing_wheel"),
     cst_level_bits=caml_string_of_jsbytes("level_bits"),
     error_source_039=
      caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml.Config.t"),
     cst_slots=caml_string_of_jsbytes("slots"),
     cst_max_allowed_key=caml_string_of_jsbytes("max_allowed_key"),
     cst_min_allowed_key=caml_string_of_jsbytes("min_allowed_key"),
     cst_length=caml_string_of_jsbytes("length"),
     cst_diff_max_min_allowed_key=
      caml_string_of_jsbytes("diff_max_min_allowed_key"),
     cst_min_key_in_same_slot_mask=
      caml_string_of_jsbytes("min_key_in_same_slot_mask"),
     cst_keys_per_slot=caml_string_of_jsbytes("keys_per_slot"),
     cst_bits_per_slot=caml_string_of_jsbytes("bits_per_slot"),
     cst_slots_mask=caml_string_of_jsbytes("slots_mask"),
     cst_bits=caml_string_of_jsbytes("bits"),
     cst_index=caml_string_of_jsbytes("index"),
     cst_levels=caml_string_of_jsbytes("levels"),
     cst_elt_key_lower_bound=caml_string_of_jsbytes("elt_key_lower_bound"),
     cst_min_elt=caml_string_of_jsbytes("min_elt"),
     cst_pool=caml_string_of_jsbytes("pool"),
     cst_length$0=caml_string_of_jsbytes("length"),
     cst_priority_queue=caml_string_of_jsbytes("priority_queue"),
     cst_max_allowed_alarm_time=
      caml_string_of_jsbytes("max_allowed_alarm_time"),
     cst_now_interval_num_start=
      caml_string_of_jsbytes("now_interval_num_start"),
     cst_now=caml_string_of_jsbytes("now"),
     cst_max_interval_num=caml_string_of_jsbytes("max_interval_num"),
     cst_start=caml_string_of_jsbytes("start"),
     cst_config=caml_string_of_jsbytes("config"),
     cst_timing_wheel$7=caml_string_of_jsbytes("timing_wheel"),
     cst_Timing_wheel$0=caml_string_of_jsbytes("Timing_wheel"),
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Core=global_data.Core,
     Core_Time_ns_alternate_sexp=global_data.Core__Time_ns_alternate_sexp,
     Assert_failure=global_data.Assert_failure,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Base_Invariant=global_data.Base__Invariant,
     Core_Time_ns=global_data.Core__Time_ns,
     Core_List=global_data.Core__List;
    global_data.Base__Field;
    var
     Core_Int63=global_data.Core__Int63,
     Core_Array=global_data.Core__Array,
     Tuple_pool=global_data.Tuple_pool,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Core_Int=global_data.Core__Int,
     Core_Binable=global_data.Core__Binable,
     Base_Sexpable=global_data.Base__Sexpable,
     Timing_wheel=[0];
    caml_register_global(213,Timing_wheel,"Timing_wheel__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Timing_wheel_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_timing_wheel);
    caml_call1(Expect_test_collector[5][1],cst_timing_wheel_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_timing_wheel$0,cst);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_timing_wheel$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Timing_wheel_Import$0);
    var Timing_wheel_Import=[0];
    caml_register_global(218,Timing_wheel_Import,"Timing_wheel__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Timing_wheel_Timing_wheel_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_timing_wheel$2);
    caml_call1(Expect_test_collector[5][1],cst_timing_wheel_src_timing_wh);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_timing_wheel$3,cst$0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_timing_wheel$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Timing_wheel_Timing_wheel_$0);
    var Timing_wheel_Timing_wheel_intf=[0];
    caml_register_global
     (219,Timing_wheel_Timing_wheel_intf,"Timing_wheel__Timing_wheel_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Timing_wheel);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_timing_wheel$5);
    caml_call1(Expect_test_collector[5][1],cst_timing_wheel_src_timing_wh$0);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_timing_wheel$6,cst$1);
    var
     max_time=Core_Time_ns_alternate_sexp[45],
     min_time=Core_Time_ns_alternate_sexp[43],
     zero=Core_Int[55],
     to_int=Core_Int[61],
     t_of_sexp=Core_Int[79],
     sexp_of_t=Core_Int[80],
     symbol=Core_Int[84],
     symbol$0=Core_Int[85],
     symbol$1=Core_Int[87],
     equal=Core_Int[90],
     max_num_bits=Core_Int63[58] - 1 | 0,
     _b3_=[0,caml_string_of_jsbytes("_")],
     _b4_=[0,caml_string_of_jsbytes("timing_wheel")],
     _b1_=[0,caml_string_of_jsbytes("_")],
     _b2_=[0,caml_string_of_jsbytes("timing_wheel")],
     _bZ_=[0,caml_string_of_jsbytes("_")],
     _b0_=[0,caml_string_of_jsbytes("timing_wheel")],
     _bX_=[0,caml_string_of_jsbytes("now_interval_num_start")],
     _bY_=[0,caml_string_of_jsbytes("at")],
     _bV_=[0,caml_string_of_jsbytes("max_allowed_alarm_time")],
     _bW_=[0,caml_string_of_jsbytes("at")],
     _bU_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1707,53],
     _bT_=[0,caml_string_of_jsbytes("start")],
     _bR_=[0,caml_string_of_jsbytes("_")],
     _bQ_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1654,6],
     _bP_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1658,6],
     _bO_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1662,6],
     _bN_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1624,11],
     _bM_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1625,11],
     _bL_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1636,11],
     _bK_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1637,11],
     _bJ_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),1638,11],
     _bS_=
      [0,
       caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),
       1618,
       58357,
       58379],
     _bH_=[0,caml_string_of_jsbytes("t.max_interval_num")],
     _bI_=[0,caml_string_of_jsbytes("interval_num")],
     _bF_=[0,caml_string_of_jsbytes("min_interval_num")],
     _bG_=[0,caml_string_of_jsbytes("interval_num")],
     _bE_=[0,caml_string_of_jsbytes("time")],
     _bC_=[0,caml_string_of_jsbytes("_")],
     _bD_=[0,caml_string_of_jsbytes("timing_wheel")],
     _bA_=[0,caml_string_of_jsbytes("_")],
     _bB_=[0,caml_string_of_jsbytes("timing_wheel")],
     _bv_=[0,caml_string_of_jsbytes("alarms")],
     _bw_=[0,caml_string_of_jsbytes("now")],
     _bx_=[0,caml_string_of_jsbytes("max_interval_num")],
     _by_=[0,caml_string_of_jsbytes("start")],
     _bz_=[0,caml_string_of_jsbytes("config")],
     _bt_=[0,caml_string_of_jsbytes("value")],
     _bu_=[0,caml_string_of_jsbytes("at")],
     _bb_=[0,caml_string_of_jsbytes("max_allowed_alarm_interval_num")],
     _bc_=[0,caml_string_of_jsbytes("min_allowed_alarm_interval_num")],
     _bd_=[0,caml_string_of_jsbytes("interval_num")],
     _a__=[0,caml_string_of_jsbytes("_")],
     _a$_=[0,caml_string_of_jsbytes("level")],
     _ba_=[0,caml_string_of_jsbytes("key")],
     _a6_=[0,caml_string_of_jsbytes("priority_queue")],
     _a7_=[0,caml_string_of_jsbytes("max_allowed_key t")],
     _a8_=[0,caml_string_of_jsbytes("min_allowed_key t")],
     _a9_=[0,caml_string_of_jsbytes("key")],
     _a4_=[0,caml_string_of_jsbytes("_")],
     _a1_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),977,38],
     _a0_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),983,15],
     _aZ_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),984,15],
     _aY_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),987,13],
     _aX_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),988,13],
     _aW_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),991,15],
     _aU_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),997,15],
     _aV_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),995,13],
     _a3_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),974,6],
     _a2_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),975,6],
     _aS_=[0,caml_string_of_jsbytes("_")],
     _aR_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),898,38],
     _aQ_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),899,36],
     _aP_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),906,15],
     _aO_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),914,15],
     _aN_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),928,15],
     _aM_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),936,15],
     _aL_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),957,21],
     _aK_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),961,21],
     _aJ_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),965,21],
     _aI_=
      [0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),969,21],
     _aT_=
      [0,
       caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),
       895,
       31577,
       31603],
     _a5_=
      [0,
       caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),
       972,
       34918,
       34942],
     _aF_=[0,caml_string_of_jsbytes("elts")],
     _aG_=[0,caml_string_of_jsbytes("max_allowed_key")],
     _aH_=[0,caml_string_of_jsbytes("min_allowed_key")],
     _aD_=[0,caml_string_of_jsbytes("value")],
     _aE_=[0,caml_string_of_jsbytes("key")],
     _ay_=[0,caml_string_of_jsbytes("levels")],
     _az_=[0,caml_string_of_jsbytes("elt_key_lower_bound")],
     _aA_=[0,caml_string_of_jsbytes("min_elt")],
     _aB_=[0,caml_string_of_jsbytes("pool")],
     _aC_=[0,caml_string_of_jsbytes("length")],
     _ad_=[0,caml_string_of_jsbytes("slots")],
     _ae_=[0,caml_string_of_jsbytes("max_allowed_key")],
     _af_=[0,caml_string_of_jsbytes("min_allowed_key")],
     _ag_=[0,caml_string_of_jsbytes("length")],
     _ah_=[0,caml_string_of_jsbytes("diff_max_min_allowed_key")],
     _ai_=[0,caml_string_of_jsbytes("min_key_in_same_slot_mask")],
     _aj_=[0,caml_string_of_jsbytes("keys_per_slot")],
     _ak_=[0,caml_string_of_jsbytes("bits_per_slot")],
     _al_=[0,caml_string_of_jsbytes("slots_mask")],
     _am_=[0,caml_string_of_jsbytes("bits")],
     _an_=[0,caml_string_of_jsbytes("index")],
     _H_=[0,caml_string_of_jsbytes("_")],
     _G_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),648,8],
     _F_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),651,8],
     _E_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),653,8],
     _I_=
      [0,
       caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),
       647,
       23049,
       23075],
     _u_=[0,10,[0,10,[0,6,[0,6,[0,5,0]]]]],
     _s_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),257,6],
     _t_=
      [0,
       caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),
       256,
       8261,
       8285],
     _p_=[0,caml_string_of_jsbytes("capacity")],
     _q_=[0,caml_string_of_jsbytes("level_bits")],
     _r_=[0,caml_string_of_jsbytes("alarm_precision")],
     _o_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),235,2],
     _h_=[0,caml_string_of_jsbytes("span")],
     _e_=[0,caml_string_of_jsbytes("max_num_bits")],
     _f_=[0,caml_string_of_jsbytes("got")],
     _d_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),117,6],
     _c_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),114,4],
     _b_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),82,4],
     _a_=[0,caml_string_of_jsbytes("timing_wheel/src/timing_wheel.ml"),83,4],
     _g_=[0,11,[0,10,[0,10,[0,10,[0,10,[0,10,[0,1,0]]]]]]],
     min_value=0;
    function invariant(t)
     {if(! caml_call2(symbol,t,min_value))throw [0,Assert_failure,_b_];
      if(caml_call2(symbol$0,t,max_num_bits))return 0;
      throw [0,Assert_failure,_a_]}
    function of_int(i){invariant(i);return i}
    function symbol$2(t1,t2){var t=t1 + t2 | 0;invariant(t);return t}
    function symbol$3(t1,t2){var t=t1 - t2 | 0;invariant(t);return t}
    function pow2(t){return caml_call2(Core_Int63[47],Core_Int63[14],t)}
    function sexp_of_t$0(x_007){return caml_call2(Core[421],sexp_of_t,x_007)}
    function num_bits_internal(t)
     {return caml_call3(Core_List[10],t,zero,symbol$2)}
    function num_bits(t){return num_bits_internal(t)}
    function f(t)
     {if(caml_call1(Core_List[8],t))throw [0,Assert_failure,_c_];
      function _fM_(num_key_bits)
       {invariant(num_key_bits);
        if(caml_call2(symbol$1,num_key_bits,zero))return 0;
        throw [0,Assert_failure,_d_]}
      caml_call2(Core_List[9],t,_fM_);
      return invariant(num_bits_internal(t))}
    function t_of_sexp$0(sexp)
     {var t=caml_call2(Core[422],t_of_sexp,sexp);f(t);return t}
    function create_exn(opt,ints)
     {if(opt)
       var sth=opt[1],extend_to_max_num_bits=sth;
      else
       var extend_to_max_num_bits=0;
      if(caml_call1(Core_List[8],ints))
       caml_call1(Core[6],cst_Level_bits_create_exn_requ);
      function _fA_(bits){return caml_call2(Core[89],bits,0)}
      if(caml_call2(Core_List[13],ints,_fA_))
       {var
         _fB_=[0,caml_call2(Core[421],Core[356],ints),0],
         _fC_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Level_bits_create_exn_got_),
            _fB_]];
        caml_call1(Core[253],_fC_)}
      function _fD_(_fL_,_fK_){return _fL_ + _fK_ | 0}
      var num_bits=caml_call3(Core_List[10],ints,0,_fD_);
      if(caml_call2(Core[91],num_bits,max_num_bits))
       {var
         _fE_=[0,[1,[0,_e_,[0,caml_call1(Core[356],max_num_bits),0]]],0],
         _fF_=[0,[1,[0,_f_,[0,caml_call1(Core[356],num_bits),0]]],_fE_],
         _fG_=[0,caml_call2(Core[421],Core[356],ints),_fF_],
         _fH_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Level_bits_create_exn_got_$0),
            _fG_]];
        caml_call1(Core[253],_fH_)}
      if(extend_to_max_num_bits)
       var
        _fI_=caml_call1(Core[230],1),
        _fJ_=caml_call2(Core_List[119],max_num_bits - num_bits | 0,_fI_),
        ints$0=caml_call2(Core[157],ints,_fJ_);
      else
       var ints$0=ints;
      return caml_call2(Core_List[72],ints$0,of_int)}
    var level_bits_default=create_exn(0,_g_),compare=Core[352];
    function equal$0(x_012,x_013)
     {var match=caml_call2(compare,x_012,x_013);return 0 === match?1:0}
    function num_key_bits(t){return of_int(t)}
    function to_sexpable(t)
     {if(caml_call2(Core[92],t,0))
       {var
         _fx_=[0,caml_call1(Core[356],t),0],
         _fy_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Alarm_precision_to_span_of),
            _fx_]];
        caml_call1(Core[253],_fy_)}
      var _fz_=caml_call1(caml_call1(Core_Int63[47],Core_Int63[14]),t);
      return caml_call1(Core_Time_ns[1][127],_fz_)}
    function sexp_of_t$1(t)
     {var _fw_=to_sexpable(t);return caml_call1(Core_Time_ns[1][10],_fw_)}
    var
     one_nanosecond=0,
     about_one_microsecond=10,
     about_one_millisecond=20,
     about_one_second=30,
     about_one_day=46;
    function mul(t,pow2){return t + pow2 | 0}
    function div(t,pow2){return t - pow2 | 0}
    function of_sexpable(span)
     {if(caml_call2(Core_Time_ns[1][16],span,Core_Time_ns[1][75]))
       {var
         _ft_=[0,[1,[0,_h_,[0,caml_call1(Core_Time_ns[1][10],span),0]]],0],
         _fu_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Alarm_precision_of_span_fl),
            _ft_]];
        caml_call1(Core[253],_fu_)}
      var _fv_=caml_call1(Core_Time_ns[1][126],span);
      return caml_call1(Core_Int63[86],_fv_)}
    var
     _i_=Core_Time_ns[1],
     _j_=
      caml_call1
       (caml_call1(Core_Binable[6],[0,_i_[5],_i_[1],_i_[2],_i_[3],_i_[4]]),
        [0,to_sexpable,of_sexpable]),
     bin_size_t=_j_[1],
     bin_write_t=_j_[2],
     bin_read_t=_j_[3],
     bin_read_t$0=_j_[4],
     bin_shape_t=_j_[5],
     bin_writer_t=_j_[6],
     bin_reader_t=_j_[7],
     bin_t=_j_[8],
     _k_=Core_Time_ns[1],
     include=
      caml_call1
       (caml_call1(Base_Sexpable[1],[0,_k_[9],_k_[10]]),
        [0,to_sexpable,of_sexpable]),
     t_of_sexp$1=include[1],
     sexp_of_t$2=include[2],
     _l_=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       t_of_sexp$1,
       sexp_of_t$2];
    function level_bits(r){return r[2]}
    function _m_(r,v){return [0,r[1],v,r[3]]}
    var
     _n_=0,
     level_bits$0=
      [0,function(param){return 0},cst_level_bits,_n_,level_bits,_m_];
    function t_of_sexp$2(sexp_019)
     {if(0 === sexp_019[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_039,sexp_019);
      var
       field_sexps_020=sexp_019[1],
       alarm_precision_021=[0,0],
       level_bits_023=[0,0],
       capacity_025=[0,0],
       duplicates_027=[0,0],
       extra_028=[0,0],
       param=field_sexps_020;
      for(;;)
       {if(param)
         {var _fk_=param[1];
          if(1 === _fk_[0])
           {var _fl_=_fk_[1];
            if(_fl_)
             {var _fm_=_fl_[1];
              if(0 === _fm_[0])
               {var _fn_=_fl_[2],_fo_=_fm_[1],switch$0=0;
                if(! _fn_ || ! _fn_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_041=param[2],
                   field_sexp_030$3=
                    function(_fs_)
                     {function field_sexp_030(param)
                       {if(! _fs_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_039,sexp_019);
                        if(_fs_[2])throw [0,Assert_failure,_o_];
                        var x_042=_fs_[1];
                        return x_042}
                      return field_sexp_030},
                   field_sexp_030=field_sexp_030$3(_fn_);
                  if(caml_string_notequal(_fo_,cst_alarm_precision))
                   if(caml_string_notequal(_fo_,cst_capacity))
                    if(caml_string_notequal(_fo_,cst_level_bits$0))
                     {if(Sexplib0_Sexp_conv[26][1])
                       extra_028[1] = [0,_fo_,extra_028[1]]}
                    else
                     if(level_bits_023[1])
                      duplicates_027[1] = [0,_fo_,duplicates_027[1]];
                     else
                      {var
                        field_sexp_030$0=field_sexp_030(0),
                        fvalue_034=t_of_sexp$0(field_sexp_030$0);
                       level_bits_023[1] = [0,fvalue_034]}
                   else
                    if(capacity_025[1])
                     duplicates_027[1] = [0,_fo_,duplicates_027[1]];
                    else
                     {var
                       field_sexp_030$1=field_sexp_030(0),
                       fvalue_032=caml_call1(Core[357],field_sexp_030$1);
                      capacity_025[1] = [0,fvalue_032]}
                  else
                   if(alarm_precision_021[1])
                    duplicates_027[1] = [0,_fo_,duplicates_027[1]];
                   else
                    {var
                      field_sexp_030$2=field_sexp_030(0),
                      fvalue_035=caml_call1(_l_[10],field_sexp_030$2);
                     alarm_precision_021[1] = [0,fvalue_035]}
                  var param=tail_041;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_039,_fk_)}
        if(duplicates_027[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_039,
                  duplicates_027[1],
                  sexp_019);
        if(extra_028[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_039,
                  extra_028[1],
                  sexp_019);
        var
         _fp_=alarm_precision_021[1],
         _fq_=level_bits_023[1],
         _fr_=capacity_025[1];
        if(! _fp_)
         return caml_call3
                 (Sexplib0_Sexp_conv_error[15],
                  error_source_039,
                  sexp_019,
                  [0,
                   [0,0 === alarm_precision_021[1]?1:0,cst_alarm_precision$0],
                   0]);
        var alarm_precision_022=_fp_[1];
        if(_fq_)
         var v_038=_fq_[1],v_038$0=v_038;
        else
         var v_038$0=level_bits_default;
        return [0,alarm_precision_022,v_038$0,_fr_]}}
    function sexp_of_t$3(param)
     {var
       capacity_048=param[3],
       level_bits_046=param[2],
       alarm_precision_044=param[1],
       bnds_043=0;
      if(capacity_048)
       var
        v_049=capacity_048[1],
        arg_051=caml_call1(Core[356],v_049),
        bnd_050=[1,[0,_p_,[0,arg_051,0]]],
        bnds_043$0=[0,bnd_050,bnds_043];
      else
       var bnds_043$0=bnds_043;
      var
       arg_047=sexp_of_t$0(level_bits_046),
       bnds_043$1=[0,[1,[0,_q_,[0,arg_047,0]]],bnds_043$0],
       arg_045=caml_call1(_l_[11],alarm_precision_044),
       bnds_043$2=[0,[1,[0,_r_,[0,arg_045,0]]],bnds_043$1];
      return [1,bnds_043$2]}
    function alarm_precision(t){return to_sexpable(t[1])}
    function max_num_level_bits(alarm_precision)
     {return symbol$3(max_num_bits,num_key_bits(alarm_precision))}
    function invariant$0(t)
     {function _fi_(param)
       {var _fj_=max_num_level_bits(t[1]);
        if(! caml_call2(symbol$0,num_bits_internal(t[2]),_fj_))
         throw [0,Assert_failure,_s_];
        var level_bits_fun=caml_call2(Base_Invariant[2],t,f);
        caml_call1(level_bits_fun,level_bits$0);
        return 0}
      return caml_call4(Base_Invariant[1],_t_,t,sexp_of_t$3,_fi_)}
    function create(capacity,opt,alarm_precision,param)
     {if(opt)
       var sth=opt[1],level_bits=sth;
      else
       var level_bits=level_bits_default;
      var max_num_bits=max_num_level_bits(alarm_precision);
      if(caml_call2(symbol$0,num_bits_internal(level_bits),max_num_bits))
       var level_bits$0=level_bits;
      else
       var
        loop=
         function(t,remaining)
          {if(! t)return 0;
           var t$0=t[2],b=t[1];
           return caml_call2(symbol,b,remaining)
                   ?[0,remaining,0]
                   :[0,b,loop(t$0,symbol$3(remaining,b))]},
        level_bits$0=loop(level_bits,max_num_bits);
      return [0,alarm_precision,level_bits$0,capacity]}
    function microsecond_precision(param)
     {return create(0,[0,create_exn(0,_u_)],about_one_microsecond,0)}
    function durations(t)
     {function _ff_(num_bits_accum,level_num_bits)
       {var
         num_bits_accum$0=
          num_bits_accum
          +
          caml_call1(to_int,level_num_bits)
          |
          0,
         _fh_=
          caml_call2(Core[90],num_bits_accum$0,Core_Int63[58] - 1 | 0)
           ?Core_Int63[59]
           :caml_call2(Core_Int63[47],Core_Int63[14],num_bits_accum$0),
         duration=caml_call1(Core_Time_ns[1][127],_fh_);
        return [0,num_bits_accum$0,duration]}
      var _fg_=caml_call1(to_int,num_key_bits(t[1]));
      return caml_call3(Core_List[73],t[2],_fg_,_ff_)}
    var compare$0=Core_Int63[110],sexpifier=Core_Int63[99];
    function create$0(level_bits)
     {var _fd_=Core_Int63[14],_fe_=pow2(level_bits);
      return caml_call2(Core_Int63[17],_fe_,_fd_)}
    function num_keys(num_bits){return pow2(num_bits)}
    var
     one=Core_Int63[14],
     symbol$4=Core_Int63[17],
     bit_not=Core_Int63[45],
     sexp_of_t$4=Core_Int63[99],
     equal$1=Core_Int63[109];
    function create$1(bits_per_slot)
     {return caml_call1(bit_not,caml_call2(symbol$4,pow2(bits_per_slot),one))}
    var
     to_int_exn=Core_Int63[5],
     zero$0=Core_Int63[13],
     one$0=Core_Int63[14],
     symbol$5=Core_Int63[16],
     symbol$6=Core_Int63[18],
     succ=Core_Int63[39],
     pred=Core_Int63[40],
     max_value=Core_Int63[59],
     of_int$0=Core_Int63[69],
     sexp_of_t$5=Core_Int63[99],
     symbol$7=Core_Int63[103],
     symbol$8=Core_Int63[104],
     symbol$9=Core_Int63[105],
     symbol$10=Core_Int63[106],
     symbol$11=Core_Int63[107],
     symbol$12=Core_Int63[108],
     equal$2=Core_Int63[109],
     compare$1=Core_Int63[110],
     min=Core_Int63[111],
     max=Core_Int63[112],
     ascending=Core_Int63[113],
     descending=Core_Int63[114],
     between=Core_Int63[115],
     clamp_exn=Core_Int63[116],
     clamp=Core_Int63[117],
     Replace_polymorphic_compare=Core_Int63[118],
     comparator=Core_Int63[119],
     Map=Core_Int63[120],
     Set=Core_Int63[121],
     validate_lbound=Core_Int63[128],
     validate_ubound=Core_Int63[129],
     validate_bound=Core_Int63[130];
    function to_int63(t){return t}
    function of_int63(i){return i}
    function scale_int(t,i)
     {return caml_call2(symbol$6,t,caml_call1(of_int$0,i))}
    var
     to_int_exn$0=Core_Int63[5],
     zero$1=Core_Int63[13],
     one$1=Core_Int63[14],
     symbol$13=Core_Int63[16],
     symbol$14=Core_Int63[17],
     rem=Core_Int63[25],
     succ$0=Core_Int63[39],
     pred$0=Core_Int63[40],
     bit_and=Core_Int63[42],
     shift_right=Core_Int63[48],
     max_value$0=Core_Int63[59],
     min_value$0=Core_Int63[60],
     of_int$1=Core_Int63[69],
     sexpifier$0=Core_Int63[99],
     symbol$15=Core_Int63[103],
     symbol$16=Core_Int63[104],
     symbol$17=Core_Int63[105],
     symbol$18=Core_Int63[106],
     symbol$19=Core_Int63[107],
     symbol$20=Core_Int63[108],
     equal$3=Core_Int63[109],
     compare$2=Core_Int63[110],
     min$0=Core_Int63[111],
     max$0=Core_Int63[112],
     ascending$0=Core_Int63[113],
     descending$0=Core_Int63[114],
     between$0=Core_Int63[115],
     clamp_exn$0=Core_Int63[116],
     clamp$0=Core_Int63[117],
     Replace_polymorphic_compare$0=Core_Int63[118],
     comparator$0=Core_Int63[119],
     Map$0=Core_Int63[120],
     Set$0=Core_Int63[121],
     hash_fold_t=Core_Int63[122],
     hash=Core_Int63[123],
     hashable=Core_Int63[124],
     Table=Core_Int63[125],
     Hash_set=Core_Int63[126],
     Hash_queue=Core_Int63[127],
     validate_lbound$0=Core_Int63[128],
     validate_ubound$0=Core_Int63[129],
     validate_bound$0=Core_Int63[130];
    function of_int63$0(i){return i}
    function to_int63$0(t){return t}
    function add(t,i){return caml_call2(symbol$13,t,i)}
    function add_clamp_to_max(t,i)
     {return caml_call2(symbol$18,t,caml_call2(symbol$14,max_value$0,i))
              ?max_value$0
              :caml_call2(symbol$13,t,i)}
    function sub(t,i){return caml_call2(symbol$14,t,i)}
    function diff(t1,t2){return caml_call2(symbol$14,t1,t2)}
    function min_key_in_same_slot(t,min_key_in_same_slot_mask)
     {return caml_call2(bit_and,t,min_key_in_same_slot_mask)}
    var
     _x_=Set$0[1],
     _z_=Map$0[1],
     _B_=Set[1],
     _C_=Map[1],
     _D_=
      [0,
       sexp_of_t$5,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       equal$2,
       compare$1,
       min,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       [0,
        [0,_C_[9],_C_[10],_C_[11]],
        Map[2],
        Map[3],
        Map[4],
        Map[5],
        Map[6],
        Map[7],
        Map[8],
        Map[9],
        Map[10],
        Map[11],
        Map[12],
        Map[13],
        Map[14],
        Map[15],
        Map[16],
        Map[17],
        Map[18],
        Map[19],
        Map[20],
        Map[21],
        Map[22],
        Map[23],
        Map[24],
        Map[25],
        Map[26],
        Map[27],
        Map[28],
        Map[29],
        Map[30],
        Map[31],
        Map[32],
        Map[33],
        Map[34],
        Map[35],
        Map[36],
        Map[37],
        Map[38],
        Map[39],
        Map[40],
        Map[41],
        Map[42],
        Map[43],
        Map[44],
        Map[45],
        Map[46],
        Map[47],
        Map[48],
        Map[49],
        Map[50],
        Map[51],
        Map[52],
        Map[53],
        Map[54],
        Map[55],
        Map[56],
        Map[57],
        Map[58],
        Map[59],
        Map[60],
        Map[61],
        Map[62],
        Map[63],
        Map[64],
        Map[65],
        Map[66],
        Map[67],
        Map[68],
        Map[69],
        Map[70],
        Map[71],
        Map[72],
        Map[73],
        Map[74],
        Map[75],
        Map[76],
        Map[77],
        Map[78],
        Map[79],
        Map[80],
        Map[81],
        Map[82],
        Map[83],
        Map[84],
        Map[85],
        Map[86],
        Map[87],
        Map[88],
        Map[89],
        Map[90],
        Map[91],
        Map[92],
        Map[93],
        Map[94],
        Map[95],
        Map[96],
        Map[97],
        Map[98],
        Map[99],
        Map[100],
        Map[101],
        Map[102],
        Map[103],
        Map[104],
        Map[105],
        Map[106],
        Map[107]],
       [0,
        [0,_B_[1],_B_[2],_B_[11]],
        Set[2],
        Set[3],
        Set[4],
        Set[5],
        Set[6],
        Set[7],
        Set[8],
        Set[9],
        Set[10],
        Set[11],
        Set[12],
        Set[13],
        Set[14],
        Set[15],
        Set[16],
        Set[17],
        Set[18],
        Set[19],
        Set[20],
        Set[21],
        Set[22],
        Set[23],
        Set[24],
        Set[25],
        Set[26],
        Set[27],
        Set[28],
        Set[29],
        Set[30],
        Set[31],
        Set[32],
        Set[33],
        Set[34],
        Set[35],
        Set[36],
        Set[37],
        Set[38],
        Set[39],
        Set[40],
        Set[41],
        Set[42],
        Set[43],
        Set[44],
        Set[45],
        Set[46],
        Set[47],
        Set[48],
        Set[49],
        Set[50],
        Set[51],
        Set[52],
        Set[53],
        Set[54],
        Set[55],
        Set[56],
        Set[57],
        Set[58],
        Set[59],
        Set[60],
        Set[61],
        Set[62],
        Set[63],
        Set[64],
        Set[65],
        Set[66],
        Set[67],
        Set[68],
        Set[69],
        Set[70],
        Set[71],
        Set[72],
        Set[73],
        Set[74],
        Set[75]],
       max,
       zero$0,
       one$0,
       max_value,
       of_int63,
       to_int63,
       of_int$0,
       to_int_exn,
       scale_int,
       pred,
       succ,
       symbol$5],
     _v_=
      [0,
       Hash_set[1],
       Hash_set[2],
       Hash_set[3],
       Hash_set[4],
       Hash_set[5],
       Hash_set[6],
       Hash_set[7]],
     _w_=
      [0,
       Table[1],
       Table[2],
       Table[3],
       Table[4],
       Table[5],
       Table[6],
       Table[7],
       Table[8],
       Table[9],
       Table[10],
       Table[11],
       Table[12],
       Table[13],
       Table[14],
       Table[15],
       Table[16],
       Table[17],
       Table[18],
       Table[19],
       Table[20],
       Table[21],
       Table[22],
       Table[23],
       Table[24],
       Table[25],
       Table[26],
       Table[27],
       Table[28],
       Table[29],
       Table[30],
       Table[31],
       Table[32],
       Table[33],
       Table[34],
       Table[35],
       Table[36],
       Table[37],
       Table[38],
       Table[39],
       Table[40],
       Table[41],
       Table[42],
       Table[43],
       Table[44],
       Table[45],
       Table[46],
       Table[47],
       Table[48],
       Table[49],
       Table[50],
       Table[51],
       Table[52],
       Table[53],
       Table[54],
       Table[55],
       Table[56],
       Table[57],
       Table[58],
       Table[59],
       Table[60],
       Table[61],
       Table[62],
       Table[63],
       Table[64],
       Table[65],
       Table[66],
       Table[67],
       Table[68],
       Table[69],
       Table[70],
       Table[71],
       Table[72],
       Table[73],
       Table[74],
       Table[75],
       Table[76],
       Table[77],
       Table[78],
       Table[79],
       Table[80],
       Table[81],
       Table[82],
       Table[83],
       Table[84]],
     _y_=
      [0,
       [0,_x_[1],_x_[2],_x_[11]],
       Set$0[2],
       Set$0[3],
       Set$0[4],
       Set$0[5],
       Set$0[6],
       Set$0[7],
       Set$0[8],
       Set$0[9],
       Set$0[10],
       Set$0[11],
       Set$0[12],
       Set$0[13],
       Set$0[14],
       Set$0[15],
       Set$0[16],
       Set$0[17],
       Set$0[18],
       Set$0[19],
       Set$0[20],
       Set$0[21],
       Set$0[22],
       Set$0[23],
       Set$0[24],
       Set$0[25],
       Set$0[26],
       Set$0[27],
       Set$0[28],
       Set$0[29],
       Set$0[30],
       Set$0[31],
       Set$0[32],
       Set$0[33],
       Set$0[34],
       Set$0[35],
       Set$0[36],
       Set$0[37],
       Set$0[38],
       Set$0[39],
       Set$0[40],
       Set$0[41],
       Set$0[42],
       Set$0[43],
       Set$0[44],
       Set$0[45],
       Set$0[46],
       Set$0[47],
       Set$0[48],
       Set$0[49],
       Set$0[50],
       Set$0[51],
       Set$0[52],
       Set$0[53],
       Set$0[54],
       Set$0[55],
       Set$0[56],
       Set$0[57],
       Set$0[58],
       Set$0[59],
       Set$0[60],
       Set$0[61],
       Set$0[62],
       Set$0[63],
       Set$0[64],
       Set$0[65],
       Set$0[66],
       Set$0[67],
       Set$0[68],
       Set$0[69],
       Set$0[70],
       Set$0[71],
       Set$0[72],
       Set$0[73],
       Set$0[74],
       Set$0[75]],
     _A_=
      [0,
       [0,_z_[9],_z_[10],_z_[11]],
       Map$0[2],
       Map$0[3],
       Map$0[4],
       Map$0[5],
       Map$0[6],
       Map$0[7],
       Map$0[8],
       Map$0[9],
       Map$0[10],
       Map$0[11],
       Map$0[12],
       Map$0[13],
       Map$0[14],
       Map$0[15],
       Map$0[16],
       Map$0[17],
       Map$0[18],
       Map$0[19],
       Map$0[20],
       Map$0[21],
       Map$0[22],
       Map$0[23],
       Map$0[24],
       Map$0[25],
       Map$0[26],
       Map$0[27],
       Map$0[28],
       Map$0[29],
       Map$0[30],
       Map$0[31],
       Map$0[32],
       Map$0[33],
       Map$0[34],
       Map$0[35],
       Map$0[36],
       Map$0[37],
       Map$0[38],
       Map$0[39],
       Map$0[40],
       Map$0[41],
       Map$0[42],
       Map$0[43],
       Map$0[44],
       Map$0[45],
       Map$0[46],
       Map$0[47],
       Map$0[48],
       Map$0[49],
       Map$0[50],
       Map$0[51],
       Map$0[52],
       Map$0[53],
       Map$0[54],
       Map$0[55],
       Map$0[56],
       Map$0[57],
       Map$0[58],
       Map$0[59],
       Map$0[60],
       Map$0[61],
       Map$0[62],
       Map$0[63],
       Map$0[64],
       Map$0[65],
       Map$0[66],
       Map$0[67],
       Map$0[68],
       Map$0[69],
       Map$0[70],
       Map$0[71],
       Map$0[72],
       Map$0[73],
       Map$0[74],
       Map$0[75],
       Map$0[76],
       Map$0[77],
       Map$0[78],
       Map$0[79],
       Map$0[80],
       Map$0[81],
       Map$0[82],
       Map$0[83],
       Map$0[84],
       Map$0[85],
       Map$0[86],
       Map$0[87],
       Map$0[88],
       Map$0[89],
       Map$0[90],
       Map$0[91],
       Map$0[92],
       Map$0[93],
       Map$0[94],
       Map$0[95],
       Map$0[96],
       Map$0[97],
       Map$0[98],
       Map$0[99],
       Map$0[100],
       Map$0[101],
       Map$0[102],
       Map$0[103],
       Map$0[104],
       Map$0[105],
       Map$0[106],
       Map$0[107]];
    function sexp_of_pool_slots(of_a_054,x_055)
     {function _e9_(_fc_){return sexp_of_pool_slots(of_a_054,_fc_)}
      var _e__=caml_call1(Tuple_pool[36][3][1],_e9_);
      function _e$_(_fb_){return sexp_of_pool_slots(of_a_054,_fb_)}
      var _fa_=caml_call1(Tuple_pool[36][3][1],_e$_);
      return caml_call7
              (Tuple_pool[36][1][8],
               sexpifier$0,
               Core_Time_ns_alternate_sexp[92],
               of_a_054,
               Core[356],
               _fa_,
               _e__,
               x_055)}
    function sexp_of_t$6(of_a_056,x_057)
     {function _e7_(_e8_){return sexp_of_pool_slots(of_a_056,_e8_)}
      return caml_call2(Tuple_pool[36][3][1],_e7_,x_057)}
    var
     null$0=Tuple_pool[36][3][4],
     null$1=Tuple_pool[36][3][4],
     is_null=Tuple_pool[36][3][5],
     free=Tuple_pool[36][14];
    function key(p,t)
     {return caml_call3(Tuple_pool[36][31],p,t,Tuple_pool[36][2][3])}
    function at(p,t)
     {return caml_call3(Tuple_pool[36][31],p,t,Tuple_pool[36][2][4])}
    function value(p,t)
     {return caml_call3(Tuple_pool[36][31],p,t,Tuple_pool[36][2][5])}
    function level_index(p,t)
     {return caml_call3(Tuple_pool[36][31],p,t,Tuple_pool[36][2][6])}
    function prev(p,t)
     {return caml_call3(Tuple_pool[36][31],p,t,Tuple_pool[36][2][7])}
    function set_prev(p,t,x)
     {return caml_call4(Tuple_pool[36][33],p,t,Tuple_pool[36][2][7],x)}
    function next(p,t)
     {return caml_call3(Tuple_pool[36][31],p,t,Tuple_pool[36][2][8])}
    function set_next(p,t,x)
     {return caml_call4(Tuple_pool[36][33],p,t,Tuple_pool[36][2][8],x)}
    function is_valid(p,t){return caml_call2(Tuple_pool[36][6],p,t)}
    var grow=Tuple_pool[36][12],is_full=Tuple_pool[36][13];
    function of_external_exn(pool,t)
     {if(is_valid(pool,t))return t;
      var
       _e6_=
        caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_got_invalid_a);
      return caml_call1(Core[253],_e6_)}
    function link(pool,prev,next)
     {set_next(pool,prev,next);return set_prev(pool,next,prev)}
    function iter(pool,first,f)
     {var current=[0,first],continue$0=[0,1];
      for(;;)
       {if(! continue$0[1])return 0;
        var next$0=next(pool,current[1]);
        caml_call1(f,current[1]);
        if(caml_call2(Core[246],next$0,first))
         continue$0[1] = 0;
        else
         current[1] = next$0}}
    function slots(r){return r[11]}
    function max_allowed_key(r){return r[10]}
    function set_max_allowed_key(r,v){r[10] = v;return 0}
    function min_allowed_key(r){return r[9]}
    function set_min_allowed_key(r,v){r[9] = v;return 0}
    function length(r){return r[8]}
    function set_length(r,v){r[8] = v;return 0}
    function diff_max_min_allowed_key(r){return r[7]}
    function min_key_in_same_slot_mask(r){return r[6]}
    function keys_per_slot(r){return r[5]}
    function bits_per_slot(r){return r[4]}
    function slots_mask(r){return r[3]}
    function bits(r){return r[2]}
    function index(r){return r[1]}
    function _J_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],v]}
    var _K_=0,slots$0=[0,function(param){return 0},cst_slots,_K_,slots,_J_];
    function _L_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v,r[11]]}
    var
     _M_=[0,set_max_allowed_key],
     max_allowed_key$0=
      [0,
       function(param){return 0},
       cst_max_allowed_key,
       _M_,
       max_allowed_key,
       _L_];
    function _N_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10],r[11]]}
    var
     _O_=[0,set_min_allowed_key],
     min_allowed_key$0=
      [0,
       function(param){return 0},
       cst_min_allowed_key,
       _O_,
       min_allowed_key,
       _N_];
    function _P_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10],r[11]]}
    var
     _Q_=[0,set_length],
     length$0=[0,function(param){return 0},cst_length,_Q_,length,_P_];
    function _R_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10],r[11]]}
    var
     _S_=0,
     diff_max_min_allowed_key$0=
      [0,
       function(param){return 0},
       cst_diff_max_min_allowed_key,
       _S_,
       diff_max_min_allowed_key,
       _R_];
    function _T_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10],r[11]]}
    var
     _U_=0,
     min_key_in_same_slot_mask$0=
      [0,
       function(param){return 0},
       cst_min_key_in_same_slot_mask,
       _U_,
       min_key_in_same_slot_mask,
       _T_];
    function _V_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _W_=0,
     keys_per_slot$0=
      [0,function(param){return 0},cst_keys_per_slot,_W_,keys_per_slot,_V_];
    function _X_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _Y_=0,
     bits_per_slot$0=
      [0,function(param){return 0},cst_bits_per_slot,_Y_,bits_per_slot,_X_];
    function _Z_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     ___=0,
     slots_mask$0=
      [0,function(param){return 0},cst_slots_mask,___,slots_mask,_Z_];
    function _$_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var _aa_=0,bits$0=[0,function(param){return 0},cst_bits,_aa_,bits,_$_];
    function _ab_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _ac_=0,
     index$0=[0,function(param){return 0},cst_index,_ac_,index,_ab_];
    function sexp_of_t$7(of_a_065,param)
     {var
       diff_max_min_allowed_key_079=param[7],
       min_key_in_same_slot_mask_077=param[6],
       keys_per_slot_075=param[5],
       bits_per_slot_073=param[4],
       slots_mask_071=param[3],
       bits_069=param[2],
       index_067=param[1],
       length_081=param[8],
       min_allowed_key_083=param[9],
       max_allowed_key_085=param[10],
       slots_087=param[11],
       arg_088=caml_call1(Sexplib0_Sexp_conv[23],slots_087),
       bnds_066=[0,[1,[0,_ad_,[0,arg_088,0]]],0],
       arg_086=caml_call1(sexpifier$0,max_allowed_key_085),
       bnds_066$0=[0,[1,[0,_ae_,[0,arg_086,0]]],bnds_066],
       arg_084=caml_call1(sexpifier$0,min_allowed_key_083),
       bnds_066$1=[0,[1,[0,_af_,[0,arg_084,0]]],bnds_066$0],
       arg_082=caml_call1(Core[356],length_081),
       bnds_066$2=[0,[1,[0,_ag_,[0,arg_082,0]]],bnds_066$1],
       arg_080=caml_call1(_D_[1],diff_max_min_allowed_key_079),
       bnds_066$3=[0,[1,[0,_ah_,[0,arg_080,0]]],bnds_066$2],
       arg_078=caml_call1(sexp_of_t$4,min_key_in_same_slot_mask_077),
       bnds_066$4=[0,[1,[0,_ai_,[0,arg_078,0]]],bnds_066$3],
       arg_076=caml_call1(_D_[1],keys_per_slot_075),
       bnds_066$5=[0,[1,[0,_aj_,[0,arg_076,0]]],bnds_066$4],
       arg_074=caml_call1(sexp_of_t,bits_per_slot_073),
       bnds_066$6=[0,[1,[0,_ak_,[0,arg_074,0]]],bnds_066$5],
       arg_072=caml_call1(sexpifier,slots_mask_071),
       bnds_066$7=[0,[1,[0,_al_,[0,arg_072,0]]],bnds_066$6],
       arg_070=caml_call1(sexp_of_t,bits_069),
       bnds_066$8=[0,[1,[0,_am_,[0,arg_070,0]]],bnds_066$7],
       arg_068=caml_call1(Core[356],index_067),
       bnds_066$9=[0,[1,[0,_an_,[0,arg_068,0]]],bnds_066$8];
      return [1,bnds_066$9]}
    function slot(t,key)
     {var _e5_=t[3];
      return caml_call1
              (to_int_exn$0,
               caml_call2(bit_and,caml_call2(shift_right,key,t[4]),_e5_))}
    function next_slot(t,slot)
     {return (slot + 1 | 0) & caml_call1(Core_Int63[5],t[3])}
    function min_key_in_same_slot$0(t,key)
     {return min_key_in_same_slot(key,t[6])}
    function compute_min_allowed_key(t,prev_level_max_allowed_key)
     {return caml_call2(equal$3,prev_level_max_allowed_key,max_value$0)
              ?max_value$0
              :min_key_in_same_slot$0
                (t,caml_call1(succ$0,prev_level_max_allowed_key))}
    function levels(r){return r[5]}
    function elt_key_lower_bound(r){return r[4]}
    function set_elt_key_lower_bound(r,v){r[4] = v;return 0}
    function min_elt(r){return r[3]}
    function set_min_elt(r,v){r[3] = v;return 0}
    function pool(r){return r[2]}
    function set_pool(r,v){r[2] = v;return 0}
    function length$1(r){return r[1]}
    function set_length$0(r,v){r[1] = v;return 0}
    function _ao_(r,v){return [0,r[1],r[2],r[3],r[4],v]}
    var
     _ap_=0,
     levels$0=[0,function(param){return 0},cst_levels,_ap_,levels,_ao_];
    function _aq_(r,v){return [0,r[1],r[2],r[3],v,r[5]]}
    var
     _ar_=[0,set_elt_key_lower_bound],
     elt_key_lower_bound$0=
      [0,
       function(param){return 0},
       cst_elt_key_lower_bound,
       _ar_,
       elt_key_lower_bound,
       _aq_];
    function _as_(r,v){return [0,r[1],r[2],v,r[4],r[5]]}
    var
     _at_=[0,set_min_elt],
     min_elt$0=[0,function(param){return 0},cst_min_elt,_at_,min_elt,_as_];
    function _au_(r,v){return [0,r[1],v,r[3],r[4],r[5]]}
    var
     _av_=[0,set_pool],
     pool$0=[0,function(param){return 0},cst_pool,_av_,pool,_au_];
    function _aw_(r,v){return [0,v,r[2],r[3],r[4],r[5]]}
    var
     _ax_=[0,set_length$0],
     length$2=[0,function(param){return 0},cst_length$0,_ax_,length$1,_aw_];
    function is_empty(t){return caml_call2(Core[90],t[1],0)}
    function num_levels(t){return t[5].length - 1}
    function min_allowed_key$1(t){return caml_check_bound(t[5],0)[1][9]}
    function max_allowed_key$1(t)
     {var _e4_=num_levels(t) - 1 | 0;
      return caml_check_bound(t[5],_e4_)[1 + _e4_][10]}
    function internal_iter(t,f)
     {var _eW_=caml_call2(Core[91],t[1],0);
      if(_eW_)
       {var pool=t[2],levels=t[5],_eY_=levels.length - 1 - 1 | 0,_eX_=0;
        if(_eY_ >= 0)
         {var level_index=_eX_;
          for(;;)
           {var level=caml_check_bound(levels,level_index)[1 + level_index];
            if(caml_call2(Core[91],level[8],0))
             {var slots=level[11],_e1_=slots.length - 1 - 1 | 0,_e0_=0;
              if(_e1_ >= 0)
               {var slot_index=_e0_;
                for(;;)
                 {var elt=caml_check_bound(slots,slot_index)[1 + slot_index];
                  if(1 - caml_call1(is_null,elt))iter(pool,elt,f);
                  var _e3_=slot_index + 1 | 0;
                  if(_e1_ !== slot_index){var slot_index=_e3_;continue}
                  break}}}
            var _e2_=level_index + 1 | 0;
            if(_eY_ !== level_index){var level_index=_e2_;continue}
            break}}
        var _eZ_=0}
      else
       var _eZ_=_eW_;
      return _eZ_}
    function compute_diff_max_min_allowed_k(level_bits,bits_per_slot)
     {var bits=symbol$2(level_bits,bits_per_slot);
      if(caml_call2(equal,bits,max_num_bits))return _D_[26];
      var _eV_=num_keys(bits);
      return caml_call1(_D_[32],_eV_)}
    function min_elt$1(t)
     {if(is_empty(t))return caml_call1(null$1,0);
      if(! caml_call1(is_null,t[3]))return t[3];
      var
       pool=t[2],
       min_elt_already_found=[0,caml_call1(null$1,0)],
       min_key_already_found=[0,max_value$0],
       level_index=[0,0],
       num_levels$0=num_levels(t);
      for(;;)
       {if(! caml_call2(Core[92],level_index[1],num_levels$0))
         {t[3] = min_elt_already_found[1];
          t[4] = min_key_already_found[1];
          return t[3]}
        var _eS_=level_index[1],level=caml_check_bound(t[5],_eS_)[1 + _eS_];
        if(caml_call2(symbol$18,level[9],min_key_already_found[1]))
         level_index[1] = num_levels$0;
        else
         if(caml_call2(Core[90],level[8],0))
          level_index[1]++;
         else
          {var
            slots=level[11],
            slot_min_key=
             [0,min_key_in_same_slot$0(level,caml_call2(max$0,level[9],t[4]))],
            slot$0=[0,slot(level,slot_min_key[1])];
           for(;;)
            {var _eT_=slot$0[1];
             if
              (caml_call1(is_null,caml_check_bound(slots,_eT_)[1 + _eT_])
               &&
               caml_call2(symbol$19,slot_min_key[1],min_key_already_found[1]))
              {slot$0[1] = next_slot(level,slot$0[1]);
               slot_min_key[1] = add(slot_min_key[1],level[5]);
               continue}
             var _eU_=slot$0[1],first=caml_check_bound(slots,_eU_)[1 + _eU_];
             if(1 - caml_call1(is_null,first))
              {var continue$0=[0,1],current=[0,first];
               for(;;)
                {if(continue$0[1])
                  {var current_key=key(pool,current[1]);
                   if
                    (caml_call2(symbol$16,current_key,min_key_already_found[1]))
                    {min_elt_already_found[1] = current[1];
                     min_key_already_found[1] = current_key}
                   var next$0=next(pool,current[1]),switch$0=0;
                   if
                    (!
                     caml_call2(Core[246],next$0,first)
                     &&
                     !
                     caml_call2(Core[90],level_index[1],0))
                    {current[1] = next$0;switch$0 = 1}
                   if(! switch$0)continue$0[1] = 0;
                   continue}
                 break}}
             level_index[1]++;
             break}}}}
    function add_elt(t,to_add)
     {var
       pool$0=t[2],
       key$0=key(pool$0,to_add),
       _eL_=caml_call2(symbol$15,key$0,min_allowed_key$1(t)),
       _eM_=_eL_?caml_call2(symbol$16,key$0,max_allowed_key$1(t)):_eL_;
      if(1 - _eM_)
       {var pool=t[2],r=[0,0],_eA_=0,_eB_=0;
        internal_iter
         (t,
          function(elt)
           {var _eQ_=r[1],_eR_=value(pool,elt);
            r[1] = [0,[0,key(pool,elt),_eR_],_eQ_];
            return 0});
        var
         elts_115=caml_call1(Core_List[34],r[1]),
         max_allowed_key_113=max_allowed_key$1(t),
         min_allowed_key_111=min_allowed_key$1(t),
         bnds_110=0,
         _ez_=
          function(param)
           {var
             key_105=param[1],
             bnds_104=[0,[1,[0,_aD_,[0,arg_108,0]]],0],
             arg_106=caml_call1(sexpifier$0,key_105),
             bnds_104$0=[0,[1,[0,_aE_,[0,arg_106,0]]],bnds_104];
            return [1,bnds_104$0]},
         arg_116=caml_call2(Core[421],_ez_,elts_115),
         bnds_110$0=[0,[1,[0,_aF_,[0,arg_116,0]]],bnds_110],
         arg_114=caml_call1(sexpifier$0,max_allowed_key_113),
         bnds_110$1=[0,[1,[0,_aG_,[0,arg_114,0]]],bnds_110$0],
         arg_112=caml_call1(sexpifier$0,min_allowed_key_111),
         bnds_110$2=[0,[1,[0,_aH_,[0,arg_112,0]]],bnds_110$1],
         _eC_=
          [0,
           [1,[0,_a7_,[0,caml_call1(sexpifier$0,max_allowed_key$1(t)),0]]],
           [0,[1,[0,_a6_,[0,[1,bnds_110$2],_eB_]]],_eA_]],
         _eD_=
          [0,
           [1,[0,_a8_,[0,caml_call1(sexpifier$0,min_allowed_key$1(t)),0]]],
           _eC_],
         _eE_=[0,[1,[0,_a9_,[0,caml_call1(sexpifier$0,key$0),0]]],_eD_],
         _eF_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Priority_queue_add_elt_key),
            _eE_]];
        caml_call1(Core[253],_eF_)}
      var level_index=[0,0];
      for(;;)
       {var _eN_=level_index[1];
        if
         (caml_call2
           (symbol$18,key$0,caml_check_bound(t[5],_eN_)[1 + _eN_][10]))
         {level_index[1]++;continue}
        var
         level_index$0=level_index[1],
         level=caml_check_bound(t[5],level_index$0)[1 + level_index$0],
         _eO_=caml_call2(symbol$15,key$0,level[9]),
         _eP_=_eO_?caml_call2(symbol$16,key$0,level[10]):_eO_;
        if(1 - _eP_)
         {var
           _eG_=0,
           _eH_=0,
           _eI_=
            [0,
             [1,
              [0,
               _a$_,
               [0,sexp_of_t$7(function(param){return _a__},level),_eH_]]],
             _eG_],
           _eJ_=[0,[1,[0,_ba_,[0,caml_call1(sexpifier$0,key$0),0]]],_eI_],
           _eK_=
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7],cst_Priority_queue_add_elt_key$0),
              _eJ_]];
          caml_call1(Core[253],_eK_)}
        level[8] = level[8] + 1 | 0;
        caml_call4
         (Tuple_pool[36][33],pool$0,to_add,Tuple_pool[36][2][6],level_index$0);
        var
         slot$0=slot(level,key$0),
         slots=level[11],
         t$0=caml_check_bound(slots,slot$0)[1 + slot$0];
        if(caml_call1(is_null,t$0))
         {caml_check_bound(slots,slot$0)[1 + slot$0] = to_add;
          return link(pool$0,to_add,to_add)}
        var prev$0=prev(pool$0,t$0);
        link(pool$0,prev$0,to_add);
        return link(pool$0,to_add,t$0)}}
    function internal_add_elt(t,elt)
     {var key$0=key(t[2],elt);
      if(caml_call2(symbol$19,key$0,t[4])){t[3] = elt;t[4] = key$0}
      add_elt(t,elt);
      t[1] = t[1] + 1 | 0;
      return 0}
    function ensure_valid_key(t,key)
     {var
       _ex_=caml_call2(symbol$19,key,min_allowed_key$1(t)),
       _ey_=_ex_ || caml_call2(symbol$18,key,max_allowed_key$1(t));
      if(! _ey_)return _ey_;
      var
       _et_=
        [0,[1,[0,_bb_,[0,caml_call1(sexpifier$0,max_allowed_key$1(t)),0]]],0],
       _eu_=
        [0,
         [1,[0,_bc_,[0,caml_call1(sexpifier$0,min_allowed_key$1(t)),0]]],
         _et_],
       _ev_=[0,[1,[0,_bd_,[0,caml_call1(sexpifier$0,key),0]]],_eu_],
       _ew_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_add_at_interv),
          _ev_]];
      return caml_call1(Core[253],_ew_)}
    function internal_add(t,key,at,value)
     {ensure_valid_key(t,key);
      if(caml_call1(is_full,t[2]))t[2] = caml_call2(grow,0,t[2]);
      var
       _es_=t[2],
       _eq_=caml_call1(null$1,0),
       _er_=caml_call1(null$1,0),
       elt=caml_call7(Tuple_pool[36][21],_es_,key,at,value,-1,_er_,_eq_);
      internal_add_elt(t,elt);
      return elt}
    function internal_remove(t$0,t)
     {var pool=t$0[2];
      if(caml_call2(Tuple_pool[36][3][7],t,t$0[3]))
       t$0[3] = caml_call1(null$1,0);
      t$0[1] = t$0[1] - 1 | 0;
      var
       _em_=level_index(pool,t),
       level=caml_check_bound(t$0[5],_em_)[1 + _em_];
      level[8] = level[8] - 1 | 0;
      var
       slots=level[11],
       slot$0=slot(level,key(pool,t)),
       first=caml_check_bound(slots,slot$0)[1 + slot$0],
       _en_=next(pool,t);
      if(caml_call2(Core[246],t,_en_))
       {var _eo_=caml_call1(null$1,0);
        caml_check_bound(slots,slot$0)[1 + slot$0] = _eo_;
        return 0}
      if(caml_call2(Core[246],t,first))
       {var _ep_=next(pool,t);
        caml_check_bound(slots,slot$0)[1 + slot$0] = _ep_}
      var _ek_=next(pool,t);
      set_next(pool,prev(pool,t),_ek_);
      var _el_=prev(pool,t);
      return set_prev(pool,next(pool,t),_el_)}
    var
     _be_=
      [0,
       _D_,
       sexpifier$0,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$3,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       _A_,
       _y_,
       compare$2,
       hash_fold_t,
       hash,
       hashable,
       _w_,
       _v_,
       Hash_queue,
       max$0,
       min$0,
       zero$1,
       one$1,
       min_value$0,
       max_value$0,
       of_int63$0,
       to_int63$0,
       of_int$1,
       to_int_exn$0,
       add,
       sub,
       diff,
       succ$0,
       pred$0,
       rem],
     min_interval_num=_be_[31];
    function priority_queue(r){return r[7]}
    function max_allowed_alarm_time(r){return r[6]}
    function set_max_allowed_alarm_time(r,v){r[6] = v;return 0}
    function now_interval_num_start(r){return r[5]}
    function set_now_interval_num_start(r,v){r[5] = v;return 0}
    function now(r){return r[4]}
    function set_now(r,v){r[4] = v;return 0}
    function max_interval_num(r){return r[3]}
    function start(r){return r[2]}
    function config(r){return r[1]}
    function _bf_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v]}
    var
     _bg_=0,
     priority_queue$0=
      [0,
       function(param){return 0},
       cst_priority_queue,
       _bg_,
       priority_queue,
       _bf_];
    function _bh_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7]]}
    var
     _bi_=[0,set_max_allowed_alarm_time],
     max_allowed_alarm_time$0=
      [0,
       function(param){return 0},
       cst_max_allowed_alarm_time,
       _bi_,
       max_allowed_alarm_time,
       _bh_];
    function _bj_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7]]}
    var
     _bk_=[0,set_now_interval_num_start],
     now_interval_num_start$0=
      [0,
       function(param){return 0},
       cst_now_interval_num_start,
       _bk_,
       now_interval_num_start,
       _bj_];
    function _bl_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7]]}
    var
     _bm_=[0,set_now],
     now$0=[0,function(param){return 0},cst_now,_bm_,now,_bl_];
    function _bn_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7]]}
    var
     _bo_=0,
     max_interval_num$0=
      [0,
       function(param){return 0},
       cst_max_interval_num,
       _bo_,
       max_interval_num,
       _bn_];
    function _bp_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7]]}
    var
     _bq_=0,
     start$0=[0,function(param){return 0},cst_start,_bq_,start,_bp_];
    function _br_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7]]}
    var
     _bs_=0,
     config$0=[0,function(param){return 0},cst_config,_bs_,config,_br_];
    function sexp_of_t_now(param,t)
     {return caml_call1(Core_Time_ns_alternate_sexp[92],t[4])}
    function alarm_precision$0(t){return alarm_precision(t[1])}
    function at$0(tw,t)
     {var _ej_=tw[7],_ei_=of_external_exn(_ej_[2],t);return at(_ej_[2],_ei_)}
    function value$0(tw,t)
     {var _eh_=tw[7],_eg_=of_external_exn(_eh_[2],t);
      return value(_eh_[2],_eg_)}
    function interval_num(tw,t)
     {var _ef_=tw[7],_ee_=of_external_exn(_ef_[2],t);return key(_ef_[2],_ee_)}
    function iter$0(t,f){return internal_iter(t[7],f)}
    function compare$3(t1,t2)
     {return caml_call2(Core_Time_ns_alternate_sexp[101],t1[1],t2[1])}
    function sexp_of_t$8(sexp_of_a,t)
     {var
       max_interval_num_167=t[3],
       start_165=t[2],
       config_163=t[1],
       now_169=t[4],
       r=[0,0];
      iter$0
       (t,
        function(a)
         {var _ed_=r[1],_ec_=value$0(t,a);
          r[1] = [0,[0,at$0(t,a),_ec_],_ed_];
          return 0});
      var alarms_171=caml_call2(Core_List[58],r[1],compare$3),bnds_162=0;
      function _eb_(param)
       {var
         value_159=param[2],
         at_157=param[1],
         arg_160=caml_call1(sexp_of_a,value_159),
         bnds_156=[0,[1,[0,_bt_,[0,arg_160,0]]],0],
         arg_158=caml_call1(Core_Time_ns_alternate_sexp[92],at_157),
         bnds_156$0=[0,[1,[0,_bu_,[0,arg_158,0]]],bnds_156];
        return [1,bnds_156$0]}
      var
       arg_172=caml_call2(Core[421],_eb_,alarms_171),
       bnds_162$0=[0,[1,[0,_bv_,[0,arg_172,0]]],bnds_162],
       arg_170=caml_call1(Core_Time_ns_alternate_sexp[92],now_169),
       bnds_162$1=[0,[1,[0,_bw_,[0,arg_170,0]]],bnds_162$0],
       arg_168=caml_call1(_be_[2],max_interval_num_167),
       bnds_162$2=[0,[1,[0,_bx_,[0,arg_168,0]]],bnds_162$1],
       arg_166=caml_call1(Core_Time_ns_alternate_sexp[92],start_165),
       bnds_162$3=[0,[1,[0,_by_,[0,arg_166,0]]],bnds_162$2],
       arg_164=sexp_of_t$3(config_163),
       bnds_162$4=[0,[1,[0,_bz_,[0,arg_164,0]]],bnds_162$3];
      return [1,bnds_162$4]}
    function length$3(t){return t[7][1]}
    function is_empty$0(t)
     {var _ea_=length$3(t);return caml_call2(Core[90],_ea_,0)}
    function pool$1(t){return t[7][2]}
    function interval_num_internal(time,alarm_precision)
     {var
       _d__=caml_call1(Core_Time_ns_alternate_sexp[61],time),
       _d$_=caml_call2(Core_Int63[48],_d__,alarm_precision);
      return caml_call1(_be_[35],_d$_)}
    function interval_num_unchecked(t,time)
     {return interval_num_internal(time,t[1][1])}
    function interval_num$0(t,time)
     {if(caml_call2(Core_Time_ns_alternate_sexp[98],time,min_time))
       {var
         _d8_=
          [0,
           [1,[0,_bE_,[0,caml_call1(Core_Time_ns_alternate_sexp[92],time),0]]],
           0],
         _d9_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_interval_num_),
            _d8_]];
        caml_call1(Core[253],_d9_)}
      return interval_num_unchecked(t,time)}
    function interval_num_start_unchecked(t,interval_num)
     {var
       interval_num$0=caml_call1(_be_[36],interval_num),
       _d7_=caml_call2(Core_Int63[47],interval_num$0,t[1][1]);
      return caml_call1(Core_Time_ns_alternate_sexp[62],_d7_)}
    function interval_num_start(t,interval_num)
     {if(caml_call2(_be_[7],interval_num,min_interval_num))
       {var
         _d1_=[0,[1,[0,_bF_,[0,caml_call1(_be_[2],min_interval_num),0]]],0],
         _d2_=[0,[1,[0,_bG_,[0,caml_call1(_be_[2],interval_num),0]]],_d1_],
         _d3_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_interval_num_$0),
            _d2_]];
        caml_call1(Core[253],_d3_)}
      if(caml_call2(_be_[6],interval_num,t[3]))
       {var
         _d4_=[0,[1,[0,_bH_,[0,caml_call1(_be_[2],t[3]),0]]],0],
         _d5_=[0,[1,[0,_bI_,[0,caml_call1(_be_[2],interval_num),0]]],_d4_],
         _d6_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_interval_num_$1),
            _d5_]];
        caml_call1(Core[253],_d6_)}
      return interval_num_start_unchecked(t,interval_num)}
    function next_alarm_fires_at_internal(t,key)
     {return interval_num_start(t,caml_call1(_be_[42],key))}
    function next_alarm_fires_at(t)
     {var elt=min_elt$1(t[7]);
      if(caml_call1(is_null,elt))return 0;
      var key$0=key(pool$1(t),elt);
      return caml_call2(_be_[9],key$0,t[3])
              ?0
              :[0,next_alarm_fires_at_internal(t,key$0)]}
    function next_alarm_fires_at_exn(t)
     {var elt=min_elt$1(t[7]);
      if(caml_call1(is_null,elt))
       {var
         _dT_=0,
         _dU_=0,
         _dV_=
          [0,
           [1,[0,_bB_,[0,sexp_of_t$8(function(param){return _bA_},t),_dU_]]],
           _dT_],
         _dW_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_next_alarm_fi),
            _dV_]];
        caml_call1(Core[253],_dW_)}
      var key$0=key(pool$1(t),elt);
      if(caml_call2(_be_[9],key$0,t[3]))
       {var
         _dX_=0,
         _dY_=0,
         _dZ_=
          [0,
           [1,[0,_bD_,[0,sexp_of_t$8(function(param){return _bC_},t),_dY_]]],
           _dX_],
         _d0_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_next_alarm_fi$0),
            _dZ_]];
        caml_call1(Core[253],_d0_)}
      return next_alarm_fires_at_internal(t,key$0)}
    function compute_max_allowed_alarm_time(t)
     {var max_allowed_key=max_allowed_key$1(t[7]);
      if(caml_call2(_be_[3],max_allowed_key,t[3]))return max_time;
      var
       _dP_=Core_Time_ns[1][67],
       _dQ_=alarm_precision$0(t),
       _dR_=caml_call2(Core_Time_ns[1][98],_dQ_,_dP_),
       _dS_=interval_num_start_unchecked(t,max_allowed_key);
      return caml_call2(Core_Time_ns_alternate_sexp[51],_dS_,_dR_)}
    function min_allowed_alarm_interval_num(t){return min_allowed_key$1(t[7])}
    function max_allowed_alarm_interval_num(t){return interval_num$0(t,t[6])}
    function interval_start(t,time)
     {return interval_num_start_unchecked(t,interval_num$0(t,time))}
    function invariant$1(invariant_a,t)
     {function _c7_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         priority_queue_fun=
          check
           (function(t)
             {var pool=t[2];
              function _dg_(param)
               {function check(f){return caml_call2(Base_Invariant[2],t,f)}
                if(! caml_call2(symbol$15,min_allowed_key$1(t),zero$1))
                 throw [0,Assert_failure,_a3_];
                var _dm_=min_allowed_key$1(t);
                if(! caml_call2(symbol$15,max_allowed_key$1(t),_dm_))
                 throw [0,Assert_failure,_a2_];
                var
                 levels_fun=
                  check
                   (function(levels)
                     {var _ds_=num_levels(t);
                      if(! caml_call2(Core[91],_ds_,0))
                       throw [0,Assert_failure,_aV_];
                      function _dt_(level_index$0,level)
                       {if(! caml_call2(Core[90],level_index$0,level[1]))
                         throw [0,Assert_failure,_aU_];
                        function _du_(param)
                         {function check(f)
                           {return caml_call2(Base_Invariant[2],level,f)}
                          var
                           slots_fun=
                            check
                             (function(slots)
                               {function _dE_(t$0)
                                 {var _dH_=1 - caml_call1(is_null,t$0);
                                  if(! _dH_)return _dH_;
                                  function _dF_(param)
                                   {if(! is_valid(pool,t$0))throw [0,Assert_failure,_G_];
                                    caml_call1(invariant_a,value(pool,t$0));
                                    var n=next(pool,t$0);
                                    if(! caml_call1(is_null,n))
                                     {var _dO_=prev(pool,n);
                                      if(! caml_call2(Tuple_pool[36][3][7],t$0,_dO_))
                                       throw [0,Assert_failure,_F_]}
                                    var p=prev(pool,t$0);
                                    if(! caml_call1(is_null,p))
                                     {var _dN_=next(pool,p);
                                      if(! caml_call2(Tuple_pool[36][3][7],t$0,_dN_))
                                       throw [0,Assert_failure,_E_]}
                                    return 0}
                                  function _dG_(x_062)
                                   {return sexp_of_t$6(function(param){return _H_},x_062)}
                                  caml_call4(Base_Invariant[1],_I_,t$0,_dG_,_dF_);
                                  return iter
                                          (pool,
                                           t$0,
                                           function(elt)
                                            {var _dI_=level[9];
                                             if(! caml_call2(symbol$15,key(pool,elt),_dI_))
                                              throw [0,Assert_failure,_aL_];
                                             var _dJ_=level[10];
                                             if(! caml_call2(symbol$16,key(pool,elt),_dJ_))
                                              throw [0,Assert_failure,_aK_];
                                             var _dK_=t[4];
                                             if(! caml_call2(symbol$15,key(pool,elt),_dK_))
                                              throw [0,Assert_failure,_aJ_];
                                             var _dL_=level[1],_dM_=level_index(pool,elt);
                                             if(caml_call2(Core[90],_dM_,_dL_))
                                              return caml_call1(invariant_a,value(pool,elt));
                                             throw [0,Assert_failure,_aI_]})}
                                return caml_call2(Core_Array[22],slots,_dE_)}),
                           max_allowed_key_fun=
                            check
                             (function(got)
                               {var
                                 expect=add_clamp_to_max(level[9],level[7]),
                                 equal=0,
                                 message=0,
                                 here=0;
                                function comparator(a_128,b_129)
                                 {return caml_call2(compare$2,a_128,b_129)}
                                return caml_call8
                                        (Ppx_assert_lib_Runtime[3],
                                         pos,
                                         sexpifier$0,
                                         comparator,
                                         here,
                                         message,
                                         equal,
                                         expect,
                                         got)}),
                           min_allowed_key_fun=
                            check
                             (function(min_allowed_key)
                               {if(! caml_call2(symbol$15,min_allowed_key,zero$1))
                                 throw [0,Assert_failure,_aM_];
                                var _dC_=caml_call2(symbol$19,min_allowed_key,max_value$0);
                                if(! _dC_)return _dC_;
                                var
                                 got=caml_call2(rem,min_allowed_key,level[5]),
                                 sexpifier=_D_[1],
                                 _dD_=_D_[24],
                                 equal=0,
                                 message=0,
                                 here=0;
                                function comparator(a_126,b_127)
                                 {return caml_call2(_D_[9],a_126,b_127)}
                                return caml_call8
                                        (Ppx_assert_lib_Runtime[3],
                                         pos$0,
                                         sexpifier,
                                         comparator,
                                         here,
                                         message,
                                         equal,
                                         _dD_,
                                         got)}),
                           length_fun=
                            check
                             (function(length)
                               {function _dA_(n,first)
                                 {if(caml_call1(is_null,first))return n;
                                  var r=[0,0],current=[0,first],continue$0=[0,1];
                                  for(;;)
                                   {if(! continue$0[1])return n + r[1] | 0;
                                    r[1]++;
                                    var next$0=next(pool,current[1]);
                                    if(caml_call2(Core[246],next$0,first))
                                     continue$0[1] = 0;
                                    else
                                     current[1] = next$0}}
                                var _dB_=caml_call3(Core_Array[23],level[11],0,_dA_);
                                if(caml_call2(Core[90],length,_dB_))return 0;
                                throw [0,Assert_failure,_aN_]}),
                           expect=compute_diff_max_min_allowed_k(level[2],level[4]),
                           diff_max_min_allowed_key_fun=
                            check
                             (function(got)
                               {var sexpifier=_D_[1],equal=0,message=0,here=0;
                                function comparator(a_124,b_125)
                                 {return caml_call2(_D_[9],a_124,b_125)}
                                return caml_call8
                                        (Ppx_assert_lib_Runtime[3],
                                         pos$1,
                                         sexpifier,
                                         comparator,
                                         here,
                                         message,
                                         equal,
                                         expect,
                                         got)}),
                           min_key_in_same_slot_mask_fun=
                            check
                             (function(min_key_in_same_slot_mask)
                               {if
                                 (caml_call2
                                   (equal$1,min_key_in_same_slot_mask,create$1(level[4])))
                                 return 0;
                                throw [0,Assert_failure,_aO_]}),
                           keys_per_slot_fun=
                            check
                             (function(got)
                               {var
                                 expect=num_keys(level[4]),
                                 sexpifier=_D_[1],
                                 equal=0,
                                 message=0,
                                 here=0;
                                function comparator(a_122,b_123)
                                 {return caml_call2(_D_[9],a_122,b_123)}
                                return caml_call8
                                        (Ppx_assert_lib_Runtime[3],
                                         pos$2,
                                         sexpifier,
                                         comparator,
                                         here,
                                         message,
                                         equal,
                                         expect,
                                         got)}),
                           bits_per_slot_fun=
                            check
                             (function(bits_per_slot)
                               {if(caml_call2(symbol,bits_per_slot,zero))return 0;
                                throw [0,Assert_failure,_aP_]}),
                           expect$0=create$0(level[2]),
                           slots_mask_fun=
                            check
                             (function(got)
                               {var equal=0,message=0,here=0;
                                function comparator(a_120,b_121)
                                 {return caml_call2(compare$0,a_120,b_121)}
                                return caml_call8
                                        (Ppx_assert_lib_Runtime[3],
                                         pos$3,
                                         sexpifier,
                                         comparator,
                                         here,
                                         message,
                                         equal,
                                         expect$0,
                                         got)}),
                           bits_fun=
                            check
                             (function(bits)
                               {if(caml_call2(symbol$1,bits,zero))return 0;
                                throw [0,Assert_failure,_aQ_]}),
                           index_fun=
                            check
                             (function(index)
                               {if(caml_call2(Core[88],index,0))return 0;
                                throw [0,Assert_failure,_aR_]});
                          caml_call1(index_fun,index$0);
                          caml_call1(bits_fun,bits$0);
                          caml_call1(slots_mask_fun,slots_mask$0);
                          caml_call1(bits_per_slot_fun,bits_per_slot$0);
                          caml_call1(keys_per_slot_fun,keys_per_slot$0);
                          caml_call1
                           (min_key_in_same_slot_mask_fun,min_key_in_same_slot_mask$0);
                          caml_call1
                           (diff_max_min_allowed_key_fun,diff_max_min_allowed_key$0);
                          caml_call1(length_fun,length$0);
                          caml_call1(min_allowed_key_fun,min_allowed_key$0);
                          caml_call1(max_allowed_key_fun,max_allowed_key$0);
                          return caml_call1(slots_fun,slots$0)}
                        function _dv_(x_119)
                         {return sexp_of_t$7(function(param){return _aS_},x_119)}
                        caml_call4(Base_Invariant[1],_aT_,level,_dv_,_du_);
                        var _dw_=caml_call2(Core[91],level_index$0,0);
                        if(! _dw_)return _dw_;
                        var
                         _dx_=level_index$0 - 1 | 0,
                         prev_level=caml_check_bound(levels,_dx_)[1 + _dx_],
                         _dy_=level[5],
                         expect=caml_call1(_D_[33],prev_level[7]),
                         sexpifier$1=_D_[1],
                         equal=0,
                         message=0,
                         here=0;
                        function comparator(a_131,b_132)
                         {return caml_call2(_D_[9],a_131,b_132)}
                        caml_call8
                         (Ppx_assert_lib_Runtime[3],
                          pos$4,
                          sexpifier$1,
                          comparator,
                          here,
                          message,
                          equal,
                          expect,
                          _dy_);
                        var
                         _dz_=level[9],
                         expect$0=compute_min_allowed_key(level,prev_level[10]),
                         equal$0=0,
                         message$0=0,
                         here$0=0;
                        function comparator$0(a_133,b_134)
                         {return caml_call2(compare$2,a_133,b_134)}
                        return caml_call8
                                (Ppx_assert_lib_Runtime[3],
                                 pos$5,
                                 sexpifier$0,
                                 comparator$0,
                                 here$0,
                                 message$0,
                                 equal$0,
                                 expect$0,
                                 _dz_)}
                      return caml_call2(Core_Array[58],levels,_dt_)}),
                 elt_key_lower_bound_fun=
                  check
                   (function(elt_key_lower_bound)
                     {if
                       (!
                        caml_call2
                         (symbol$15,elt_key_lower_bound,min_allowed_key$1(t)))
                       throw [0,Assert_failure,_aY_];
                      if
                       (!
                        caml_call2
                         (symbol$16,elt_key_lower_bound,max_allowed_key$1(t)))
                       throw [0,Assert_failure,_aX_];
                      var _dr_=1 - caml_call1(is_null,t[3]);
                      if(! _dr_)return _dr_;
                      if(caml_call2(equal$3,elt_key_lower_bound,key(t[2],t[3])))
                       return 0;
                      throw [0,Assert_failure,_aW_]}),
                 min_elt_fun=
                  check
                   (function(elt)
                     {var _dp_=1 - caml_call1(is_null,elt);
                      if(! _dp_)return _dp_;
                      if(! is_valid(t[2],elt))throw [0,Assert_failure,_a0_];
                      var _dq_=key(t[2],elt);
                      if(caml_call2(equal$3,t[4],_dq_))return 0;
                      throw [0,Assert_failure,_aZ_]}),
                 pool_fun=
                  check
                   (function(t)
                     {function _dn_(_do_){return 0}
                      return caml_call2(Tuple_pool[36][5],_dn_,t)}),
                 length_fun=
                  check
                   (function(length)
                     {if(caml_call2(Core[88],length,0))return 0;
                      throw [0,Assert_failure,_a1_]});
                caml_call1(length_fun,length$2);
                caml_call1(pool_fun,pool$0);
                caml_call1(min_elt_fun,min_elt$0);
                caml_call1(elt_key_lower_bound_fun,elt_key_lower_bound$0);
                return caml_call1(levels_fun,levels$0)}
              function _dh_(x_130)
               {function of_a_063(param){return _a4_}
                var
                 length_091=x_130[1],
                 pool_093=x_130[2],
                 min_elt_095=x_130[3],
                 elt_key_lower_bound_097=x_130[4],
                 levels_099=x_130[5],
                 bnds_090=0;
                function _dj_(_dl_){return sexp_of_t$7(of_a_063,_dl_)}
                var
                 arg_100=caml_call2(Core[288],_dj_,levels_099),
                 bnds_090$0=[0,[1,[0,_ay_,[0,arg_100,0]]],bnds_090],
                 arg_098=caml_call1(sexpifier$0,elt_key_lower_bound_097),
                 bnds_090$1=[0,[1,[0,_az_,[0,arg_098,0]]],bnds_090$0],
                 arg_096=sexp_of_t$6(of_a_063,min_elt_095),
                 bnds_090$2=[0,[1,[0,_aA_,[0,arg_096,0]]],bnds_090$1];
                function _di_(_dk_){return sexp_of_pool_slots(of_a_063,_dk_)}
                var
                 arg_094=caml_call2(Tuple_pool[36][4],_di_,pool_093),
                 bnds_090$3=[0,[1,[0,_aB_,[0,arg_094,0]]],bnds_090$2],
                 arg_092=caml_call1(Core[356],length_091),
                 bnds_090$4=[0,[1,[0,_aC_,[0,arg_092,0]]],bnds_090$3];
                return [1,bnds_090$4]}
              return caml_call4(Base_Invariant[1],_a5_,t,_dh_,_dg_)}),
         max_allowed_alarm_time_fun=
          check
           (function(got)
             {var
               expect=compute_max_allowed_alarm_time(t),
               sexpifier=Core_Time_ns_alternate_sexp[92],
               equal=0,
               message=0,
               here=0;
              function comparator(a_183,b_184)
               {return caml_call2
                        (Core_Time_ns_alternate_sexp[101],a_183,b_184)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$6,
                       sexpifier,
                       comparator,
                       here,
                       message,
                       equal,
                       expect,
                       got)}),
         now_interval_num_start_fun=
          check
           (function(got)
             {var
               expect=interval_num_start(t,min_allowed_alarm_interval_num(t)),
               sexpifier=Core_Time_ns_alternate_sexp[92],
               equal=0,
               message=0,
               here=0;
              function comparator(a_181,b_182)
               {return caml_call2
                        (Core_Time_ns_alternate_sexp[101],a_181,b_182)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$7,
                       sexpifier,
                       comparator,
                       here,
                       message,
                       equal,
                       expect,
                       got)}),
         now_fun=
          check
           (function(now)
             {if(! caml_call2(Core_Time_ns_alternate_sexp[94],now,t[2]))
               throw [0,Assert_failure,_bL_];
              if(! caml_call2(Core_Time_ns_alternate_sexp[95],now,max_time))
               throw [0,Assert_failure,_bK_];
              var _de_=min_allowed_key$1(t[7]),_df_=interval_num$0(t,t[4]);
              if(caml_call2(_be_[9],_df_,_de_))return 0;
              throw [0,Assert_failure,_bJ_]}),
         max_interval_num_fun=
          check
           (function(expect)
             {var
               got=interval_num$0(t,max_time),
               sexpifier=_be_[2],
               equal=0,
               message=0,
               here=0;
              function comparator(a_177,b_178)
               {return caml_call2(_be_[22],a_177,b_178)}
              caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos$8,
                sexpifier,
                comparator,
                here,
                message,
                equal,
                expect,
                got);
              var
               got$0=interval_num$0(t,interval_num_start(t,expect)),
               sexpifier$0=_be_[2],
               equal$0=0,
               message$0=0,
               here$0=0;
              function comparator$0(a_179,b_180)
               {return caml_call2(_be_[22],a_179,b_180)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$9,
                       sexpifier$0,
                       comparator$0,
                       here$0,
                       message$0,
                       equal$0,
                       expect,
                       got$0)}),
         start_fun=
          check
           (function(start)
             {if(! caml_call2(Core_Time_ns_alternate_sexp[94],start,min_time))
               throw [0,Assert_failure,_bN_];
              if(caml_call2(Core_Time_ns_alternate_sexp[95],start,max_time))
               return 0;
              throw [0,Assert_failure,_bM_]}),
         config_fun=check(invariant$0);
        caml_call1(config_fun,config$0);
        caml_call1(start_fun,start$0);
        caml_call1(max_interval_num_fun,max_interval_num$0);
        caml_call1(now_fun,now$0);
        caml_call1(now_interval_num_start_fun,now_interval_num_start$0);
        caml_call1(max_allowed_alarm_time_fun,max_allowed_alarm_time$0);
        caml_call1(priority_queue_fun,priority_queue$0);
        return iter$0
                (t,
                 function(alarm)
                  {var
                    _c9_=interval_num$0(t,at$0(t,alarm)),
                    _c__=interval_num(t,alarm);
                   if(! caml_call2(_be_[9],_c__,_c9_))
                    throw [0,Assert_failure,_bQ_];
                   var
                    _c$_=interval_start(t,t[4]),
                    _da_=interval_start(t,at$0(t,alarm));
                   if(! caml_call2(Core_Time_ns_alternate_sexp[94],_da_,_c$_))
                    throw [0,Assert_failure,_bP_];
                   var
                    _db_=alarm_precision$0(t),
                    _dc_=caml_call2(Core_Time_ns_alternate_sexp[54],t[4],_db_),
                    _dd_=at$0(t,alarm);
                   if(caml_call2(Core_Time_ns_alternate_sexp[97],_dd_,_dc_))
                    return 0;
                   throw [0,Assert_failure,_bO_]})}
      function _c8_(x_176)
       {return sexp_of_t$8(function(param){return _bR_},x_176)}
      return caml_call4(Base_Invariant[1],_bS_,t,_c8_,_c7_)}
    var debug=0;
    function advance_clock(t,to,handle_fired)
     {var _c4_=caml_call2(Core_Time_ns_alternate_sexp[97],to,t[4]);
      if(_c4_)
       {t[4] = to;
        var key$0=interval_num_unchecked(t,to);
        t[5] = interval_num_start_unchecked(t,key$0);
        var _c5_=t[7];
        if(caml_call2(symbol$16,key$0,min_allowed_key$1(_c5_)))
         var match=0;
        else
         {var
           level_index=[0,0],
           result=[0,1],
           prev_level_max_allowed_key=[0,caml_call1(pred$0,key$0)],
           levels=_c5_[5],
           num_levels$0=num_levels(_c5_);
          a:
          for(;;)
           {if(caml_call2(Core[92],level_index[1],num_levels$0))
             {var
               _c3_=level_index[1],
               level=caml_check_bound(levels,_c3_)[1 + _c3_],
               min_allowed_key_before=level[9],
               desired_min_allowed_key=
                compute_min_allowed_key(level,prev_level_max_allowed_key[1]),
               level_min_allowed_key=
                min_key_in_same_slot$0
                 (level,
                  caml_call2
                   (min$0,
                    desired_min_allowed_key,
                    caml_call2(max$0,level[9],_c5_[4]))),
               level_min_allowed_key$0=[0,level_min_allowed_key],
               slot$0=[0,slot(level,level_min_allowed_key$0[1])],
               keys_per_slot=level[5],
               slots=level[11];
              for(;;)
               {if
                 (!
                  caml_call2
                   (symbol$19,
                    level_min_allowed_key$0[1],
                    desired_min_allowed_key))
                 {level[9] = desired_min_allowed_key;
                  level[10]
                  =
                  add_clamp_to_max(desired_min_allowed_key,level[7]);
                  if(caml_call2(equal$3,level[9],min_allowed_key_before))
                   {level_index[1] = num_levels$0;result[1] = 0}
                  else
                   {level_index[1] = level_index[1] + 1 | 0;
                    prev_level_max_allowed_key[1] = level[10]}
                  continue a}
                if(caml_call2(Core[90],level[8],0))
                 {level_min_allowed_key$0[1] = desired_min_allowed_key;
                  continue}
                var
                 _c0_=slot$0[1],
                 first=caml_check_bound(slots,_c0_)[1 + _c0_];
                if(1 - caml_call1(is_null,first))
                 {var _c1_=caml_call1(null$1,0),_c2_=slot$0[1];
                  caml_check_bound(slots,_c2_)[1 + _c2_] = _c1_;
                  var pool=_c5_[2],current=[0,first],continue$0=[0,1];
                  for(;;)
                   {if(continue$0[1])
                     {var next$0=next(pool,current[1]);
                      level[8] = level[8] - 1 | 0;
                      if(caml_call2(symbol$15,key(pool,current[1]),key$0))
                       add_elt(_c5_,current[1]);
                      else
                       {_c5_[1] = _c5_[1] - 1 | 0;
                        caml_call1(handle_fired,current[1]);
                        caml_call2(free,pool,current[1])}
                      if(caml_call2(Core[246],next$0,first))
                       continue$0[1] = 0;
                      else
                       current[1] = next$0;
                      continue}
                    break}}
                slot$0[1] = next_slot(level,slot$0[1]);
                level_min_allowed_key$0[1]
                =
                add_clamp_to_max(level_min_allowed_key$0[1],keys_per_slot)}}
            if(caml_call2(symbol$18,key$0,_c5_[4]))
             {_c5_[3] = caml_call1(null$1,0);
              _c5_[4] = min_allowed_key$1(_c5_)}
            var match=result[1];
            break}}
        if(match){t[6] = compute_max_allowed_alarm_time(t);return 0}
        var _c6_=debug}
      else
       var _c6_=_c4_;
      return _c6_}
    function create$2(config,start)
     {if
       (caml_call2
         (Core_Time_ns_alternate_sexp[98],
          start,
          Core_Time_ns_alternate_sexp[43]))
       {var
         _cP_=
          [0,
           [1,
            [0,_bT_,[0,caml_call1(Core_Time_ns_alternate_sexp[92],start),0]]],
           0],
         _cQ_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_create_got_st),
            _cP_]];
        caml_call1(Core[253],_cQ_)}
      var l=config[2],_cR_=config[3];
      function _cL_(index,param,level_bits)
       {var
         levels=param[3],
         max_level_min_allowed_key=param[2],
         bits_per_slot=param[1],
         keys_per_slot=num_keys(bits_per_slot),
         diff_max_min_allowed_key=
          compute_diff_max_min_allowed_k(level_bits,bits_per_slot),
         min_key_in_same_slot_mask=create$1(bits_per_slot),
         min_allowed_key=
          min_key_in_same_slot
           (max_level_min_allowed_key,min_key_in_same_slot_mask),
         t=add_clamp_to_max(min_allowed_key,diff_max_min_allowed_key),
         _cU_=caml_call1(null$1,0),
         _cV_=pow2(level_bits),
         _cW_=caml_call1(Core_Int63[5],_cV_),
         _cX_=caml_call2(Core_Array[38],_cW_,_cU_),
         level=
          [0,
           index,
           level_bits,
           create$0(level_bits),
           bits_per_slot,
           keys_per_slot,
           min_key_in_same_slot_mask,
           diff_max_min_allowed_key,
           0,
           min_allowed_key,
           t,
           _cX_],
         _cY_=[0,level,levels],
         _cZ_=
          caml_call2(symbol$17,t,max_value$0)?max_value$0:caml_call1(succ$0,t);
        return [0,symbol$2(level_bits,bits_per_slot),_cZ_,_cY_]}
      var
       match=caml_call3(Core_List[95],l,[0,zero,zero$1,0],_cL_),
       levels=match[3],
       _cM_=caml_call1(Core_Array[90],levels),
       _cN_=caml_call1(null$1,0);
      if(_cR_)var sth=_cR_[1],capacity=sth;else var capacity=1;
      var
       _cO_=
        [0,
         0,
         caml_call2(Tuple_pool[36][35],Tuple_pool[36][1][22],capacity),
         _cN_,
         zero$1,
         _cM_],
       _cS_=Core_Time_ns_alternate_sexp[46],
       _cT_=Core_Time_ns_alternate_sexp[46],
       t=
        [0,
         config,
         start,
         interval_num_internal(max_time,config[1]),
         _cT_,
         _cS_,
         max_time,
         _cO_];
      t[6] = compute_max_allowed_alarm_time(t);
      advance_clock(t,start,function(param){throw [0,Assert_failure,_bU_]});
      return t}
    function add_at_interval_num(t,at,value)
     {var _cK_=interval_num_start(t,at);
      return internal_add(t[7],at,_cK_,value)}
    function ensure_can_schedule_alarm(t,at)
     {if(caml_call2(Core_Time_ns_alternate_sexp[97],at,t[6]))
       {var
         _cD_=
          [0,
           [1,[0,_bV_,[0,caml_call1(Core_Time_ns_alternate_sexp[92],t[6]),0]]],
           0],
         _cE_=
          [0,
           [1,[0,_bW_,[0,caml_call1(Core_Time_ns_alternate_sexp[92],at),0]]],
           _cD_],
         _cF_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_cannot_schedu),
            _cE_]];
        caml_call1(Core[253],_cF_)}
      var _cJ_=caml_call2(Core_Time_ns_alternate_sexp[98],at,t[5]);
      if(! _cJ_)return _cJ_;
      var
       _cG_=
        [0,
         [1,[0,_bX_,[0,caml_call1(Core_Time_ns_alternate_sexp[92],t[5]),0]]],
         0],
       _cH_=
        [0,
         [1,[0,_bY_,[0,caml_call1(Core_Time_ns_alternate_sexp[92],at),0]]],
         _cG_],
       _cI_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_cannot_schedu$0),
          _cH_]];
      return caml_call1(Core[253],_cI_)}
    function add$0(t,at,value)
     {ensure_can_schedule_alarm(t,at);
      var _cC_=interval_num_unchecked(t,at);
      return internal_add(t[7],_cC_,at,value)}
    function remove(t,alarm)
     {var _cB_=t[7],pool=_cB_[2],elt=of_external_exn(pool,alarm);
      internal_remove(_cB_,elt);
      return caml_call2(free,pool,elt)}
    function clear(t)
     {var _cA_=t[7],_cr_=1 - is_empty(_cA_);
      if(_cr_)
       {_cA_[1] = 0;
        var
         pool=_cA_[2],
         free_elt=function(elt){return caml_call2(free,pool,elt)},
         levels=_cA_[5],
         _ct_=levels.length - 1 - 1 | 0,
         _cs_=0;
        if(_ct_ >= 0)
         {var level_index=_cs_;
          for(;;)
           {var level=caml_check_bound(levels,level_index)[1 + level_index];
            if(caml_call2(Core[91],level[8],0))
             {level[8] = 0;
              var slots=level[11],_cw_=slots.length - 1 - 1 | 0,_cv_=0;
              if(_cw_ >= 0)
               {var slot_index=_cv_;
                for(;;)
                 {var elt=caml_check_bound(slots,slot_index)[1 + slot_index];
                  if(1 - caml_call1(is_null,elt))
                   {iter(pool,elt,free_elt);
                    var _cy_=caml_call1(null$1,0);
                    caml_check_bound(slots,slot_index)[1 + slot_index] = _cy_}
                  var _cz_=slot_index + 1 | 0;
                  if(_cw_ !== slot_index){var slot_index=_cz_;continue}
                  break}}}
            var _cx_=level_index + 1 | 0;
            if(_ct_ !== level_index){var level_index=_cx_;continue}
            break}}
        var _cu_=0}
      else
       var _cu_=_cr_;
      return _cu_}
    function mem(t,alarm){return is_valid(t[7][2],alarm)}
    function reschedule_gen(t$0,alarm,k,x)
     {if(1 - mem(t$0,alarm))
       caml_call1(Core[6],cst_Timing_wheel_cannot_resche);
      ensure_can_schedule_alarm(t$0,x);
      var _cq_=t$0[7];
      ensure_valid_key(_cq_,k);
      var pool=_cq_[2],t=of_external_exn(pool,alarm);
      internal_remove(_cq_,t);
      caml_call4(Tuple_pool[36][33],pool,t,Tuple_pool[36][2][3],k);
      caml_call4(Tuple_pool[36][33],pool,t,Tuple_pool[36][2][4],x);
      return internal_add_elt(_cq_,t)}
    function reschedule(t,alarm,at)
     {return reschedule_gen(t,alarm,interval_num_unchecked(t,at),at)}
    function reschedule_at_interval_num(t,alarm,at)
     {return reschedule_gen(t,alarm,at,interval_num_start(t,at))}
    function min_alarm_interval_num(t)
     {var elt=min_elt$1(t[7]);
      return caml_call1(is_null,elt)?0:[0,key(pool$1(t),elt)]}
    function min_alarm_interval_num_exn(t)
     {var elt=min_elt$1(t[7]);
      if(! caml_call1(is_null,elt))return key(pool$1(t),elt);
      var
       _cm_=0,
       _cn_=0,
       _co_=
        [0,
         [1,[0,_b0_,[0,sexp_of_t$8(function(param){return _bZ_},t),_cn_]]],
         _cm_],
       _cp_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_min_alarm_int),
          _co_]];
      return caml_call1(Core[253],_cp_)}
    function max_alarm_time_in_list(t,first)
     {var
       pool=pool$1(t),
       with_key=key(pool,first),
       max_alarm_time=[0,Core_Time_ns_alternate_sexp[43]],
       current=[0,first],
       continue$0=[0,1];
      for(;;)
       {if(! continue$0[1])return max_alarm_time[1];
        var next$0=next(pool,current[1]);
        if(caml_call2(equal$3,key(pool,current[1]),with_key))
         {var _ck_=max_alarm_time[1],_cl_=at(pool,current[1]);
          max_alarm_time[1]
          =
          caml_call2(Core_Time_ns_alternate_sexp[103],_cl_,_ck_)}
        if(caml_call2(Core[246],next$0,first))
         continue$0[1] = 0;
        else
         current[1] = next$0}}
    function min_alarm_time_in_list(t,first)
     {var
       pool=pool$1(t),
       with_key=key(pool,first),
       min_alarm_time=[0,Core_Time_ns_alternate_sexp[45]],
       current=[0,first],
       continue$0=[0,1];
      for(;;)
       {if(! continue$0[1])return min_alarm_time[1];
        var next$0=next(pool,current[1]);
        if(caml_call2(equal$3,key(pool,current[1]),with_key))
         {var _ci_=min_alarm_time[1],_cj_=at(pool,current[1]);
          min_alarm_time[1]
          =
          caml_call2(Core_Time_ns_alternate_sexp[102],_cj_,_ci_)}
        if(caml_call2(Core[246],next$0,first))
         continue$0[1] = 0;
        else
         current[1] = next$0}}
    function max_alarm_time_in_min_interval(t)
     {var elt=min_elt$1(t[7]);
      return caml_call1(is_null,elt)?0:[0,max_alarm_time_in_list(t,elt)]}
    function min_alarm_time_in_min_interval(t)
     {var elt=min_elt$1(t[7]);
      return caml_call1(is_null,elt)?0:[0,min_alarm_time_in_list(t,elt)]}
    function max_alarm_time_in_min_interval$0(t)
     {var elt=min_elt$1(t[7]);
      if(caml_call1(is_null,elt))
       {var
         _ce_=0,
         _cf_=0,
         _cg_=
          [0,
           [1,[0,_b2_,[0,sexp_of_t$8(function(param){return _b1_},t),_cf_]]],
           _ce_],
         _ch_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_max_alarm_tim),
            _cg_]];
        caml_call1(Core[253],_ch_)}
      return max_alarm_time_in_list(t,elt)}
    function min_alarm_time_in_min_interval$0(t)
     {var elt=min_elt$1(t[7]);
      if(caml_call1(is_null,elt))
       {var
         _ca_=0,
         _cb_=0,
         _cc_=
          [0,
           [1,[0,_b4_,[0,sexp_of_t$8(function(param){return _b3_},t),_cb_]]],
           _ca_],
         _cd_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Timing_wheel_max_alarm_tim$0),
            _cc_]];
        caml_call1(Core[253],_cd_)}
      return min_alarm_time_in_list(t,elt)}
    function fire_past_alarms(t,handle_fired)
     {var
       _b__=t[4],
       key=min_allowed_alarm_interval_num(t),
       _b$_=t[7],
       level=caml_check_bound(_b$_[5],0)[1],
       _b5_=caml_call2(Core[91],level[8],0);
      if(_b5_)
       {var
         slot$0=slot(level,key),
         slots=level[11],
         pool=_b$_[2],
         first=[0,caml_check_bound(slots,slot$0)[1 + slot$0]],
         _b6_=1 - caml_call1(is_null,first[1]);
        if(_b6_)
         {var current=[0,first[1]],continue$0=[0,1];
          for(;;)
           {if(continue$0[1])
             {var elt=current[1],next$0=next(pool,elt);
              if(caml_call2(Core[246],next$0,first[1]))
               continue$0[1] = 0;
              else
               current[1] = next$0;
              var _b7_=at(pool,elt);
              if(caml_call2(Core_Time_ns_alternate_sexp[95],_b7_,_b__))
               {caml_call1(handle_fired,elt);
                internal_remove(_b$_,elt);
                caml_call2(free,pool,elt);
                first[1] = caml_check_bound(slots,slot$0)[1 + slot$0]}
              continue}
            var _b8_=0;
            break}}
        else
         var _b8_=_b6_;
        var _b9_=_b8_}
      else
       var _b9_=_b5_;
      return _b9_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_timing_wheel$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Timing_wheel$0);
    var
     Timing_wheel$0=
      [0,
       [0,
        compare,
        sexp_of_t$1,
        equal$0,
        of_sexpable,
        of_sexpable,
        to_sexpable,
        one_nanosecond,
        about_one_day,
        about_one_microsecond,
        about_one_millisecond,
        about_one_second,
        mul,
        div,
        _l_],
       sexp_of_t$8,
       sexp_of_t_now,
       _be_,
       [0,sexp_of_t$6,null$0,at$0,interval_num,value$0],
       invariant$1,
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        f,
        max_num_bits,
        create_exn,
        level_bits_default,
        num_bits],
       [0,
        t_of_sexp$2,
        sexp_of_t$3,
        invariant$0,
        create,
        alarm_precision,
        level_bits,
        durations,
        microsecond_precision],
       create$2,
       alarm_precision$0,
       now,
       start,
       is_empty$0,
       length$3,
       iter$0,
       interval_num$0,
       min_allowed_alarm_interval_num,
       interval_num_start,
       interval_start,
       advance_clock,
       fire_past_alarms,
       max_allowed_alarm_time,
       min_allowed_alarm_interval_num,
       max_allowed_alarm_interval_num,
       add$0,
       add_at_interval_num,
       mem,
       remove,
       reschedule,
       reschedule_at_interval_num,
       clear,
       min_alarm_interval_num,
       min_alarm_interval_num_exn,
       max_alarm_time_in_min_interval,
       min_alarm_time_in_min_interval,
       max_alarm_time_in_min_interval$0,
       min_alarm_time_in_min_interval$0,
       next_alarm_fires_at,
       next_alarm_fires_at_exn,
       [0,max_time,interval_num_internal,[0,invariant,zero]]];
    caml_register_global(236,Timing_wheel$0,"Timing_wheel");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
