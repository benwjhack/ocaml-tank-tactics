// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_div=runtime.caml_div,
     caml_mul=runtime.caml_mul,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {return f.length == 10
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
    function caml_call11(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
     {return f.length == 11
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10])}
    function caml_call12(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
     {return f.length == 12
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11])}
    function caml_call13(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
     {return f.length == 13
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12])}
    function caml_call14(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
     {return f.length == 14
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13])}
    function caml_call15(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)
     {return f.length == 15
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Tuple_pool_Import=caml_string_of_jsbytes("Tuple_pool__Import"),
     cst_tuple_pool=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool_src_import_ml=
      caml_string_of_jsbytes("tuple_pool/src/import.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_tuple_pool$0=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool$1=caml_string_of_jsbytes("tuple_pool"),
     cst_Tuple_pool_Import$0=caml_string_of_jsbytes("Tuple_pool__Import"),
     cst_Tuple_pool_Tuple_type_intf=
      caml_string_of_jsbytes("Tuple_pool__Tuple_type_intf"),
     cst_tuple_pool$2=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool_src_tuple_type_=
      caml_string_of_jsbytes("tuple_pool/src/tuple_type_intf.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_tuple_pool$3=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool$4=caml_string_of_jsbytes("tuple_pool"),
     cst_Tuple_pool_Tuple_type_intf$0=
      caml_string_of_jsbytes("Tuple_pool__Tuple_type_intf"),
     cst_Tuple_pool_Tuple_type=
      caml_string_of_jsbytes("Tuple_pool__Tuple_type"),
     cst_tuple_pool$5=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool_src_tuple_type_$0=
      caml_string_of_jsbytes("tuple_pool/src/tuple_type.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_tuple_pool$6=caml_string_of_jsbytes("tuple_pool"),
     t1=[0,301584533,[0,1]],
     t2=[0,301584533,[0,2]],
     t3=[0,301584533,[0,3]],
     t4=[0,301584533,[0,4]],
     t5=[0,301584533,[0,5]],
     t6=[0,301584533,[0,6]],
     t7=[0,301584533,[0,7]],
     t8=[0,301584533,[0,8]],
     t9=[0,301584533,[0,9]],
     t10=[0,301584533,[0,10]],
     t11=[0,301584533,[0,11]],
     t12=[0,301584533,[0,12]],
     t13=[0,301584533,[0,13]],
     t14=[0,301584533,[0,14]],
     cst_tuple_pool$7=caml_string_of_jsbytes("tuple_pool"),
     cst_Tuple_pool_Tuple_type$0=
      caml_string_of_jsbytes("Tuple_pool__Tuple_type"),
     cst_Tuple_pool_Tuple_pool_intf=
      caml_string_of_jsbytes("Tuple_pool__Tuple_pool_intf"),
     cst_tuple_pool$8=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool_src_tuple_pool_=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool_intf.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_tuple_pool$9=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool$10=caml_string_of_jsbytes("tuple_pool"),
     cst_Tuple_pool_Tuple_pool_intf$0=
      caml_string_of_jsbytes("Tuple_pool__Tuple_pool_intf"),
     cst_attempt_to_use_invalid_poi=
      caml_string_of_jsbytes("attempt to use invalid pointer"),
     cst_is_valid=caml_string_of_jsbytes("is_valid"),
     cst_pointer=caml_string_of_jsbytes("pointer"),
     name$1=
      caml_string_of_jsbytes
       ("tuple_pool/src/tuple_pool.ml.Error_check.Pointer.t"),
     cst_unsafe_set=caml_string_of_jsbytes("unsafe_set"),
     cst_set=caml_string_of_jsbytes("set"),
     cst_unsafe_get=caml_string_of_jsbytes("unsafe_get"),
     cst_get=caml_string_of_jsbytes("get"),
     cst_get_tuple=caml_string_of_jsbytes("get_tuple"),
     cst_new=caml_string_of_jsbytes("new"),
     cst_free=caml_string_of_jsbytes("free"),
     cst_unsafe_free=caml_string_of_jsbytes("unsafe_free"),
     cst_is_full=caml_string_of_jsbytes("is_full"),
     cst_grow=caml_string_of_jsbytes("grow"),
     cst_capacity$0=caml_string_of_jsbytes("capacity"),
     cst_max_capacity=caml_string_of_jsbytes("max_capacity"),
     cst_create=caml_string_of_jsbytes("create"),
     cst_pointer_is_valid=caml_string_of_jsbytes("pointer_is_valid"),
     cst_pointer_of_id_exn=caml_string_of_jsbytes("pointer_of_id_exn"),
     cst_id_of_pointer=caml_string_of_jsbytes("id_of_pointer"),
     cst_Pointer_Id_to_int63=caml_string_of_jsbytes("Pointer.Id.to_int63"),
     cst_Pointer_Id_of_int63=caml_string_of_jsbytes("Pointer.Id.of_int63"),
     cst_Pointer_is_null=caml_string_of_jsbytes("Pointer.is_null"),
     cst_Pointer_phys_equal=caml_string_of_jsbytes("Pointer.phys_equal"),
     cst_Pointer_phys_compare=caml_string_of_jsbytes("Pointer.phys_compare"),
     prefix=caml_string_of_jsbytes("Pool."),
     name$0=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml.Debug.Pointer.t"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_tuple_pool_src_tuple_pool_$10=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml:986:6"),
     cst_t$0=caml_string_of_jsbytes("t"),
     cst_Pool_free_of_invalid_point=
      caml_string_of_jsbytes("Pool.free of invalid pointer"),
     cst_Pool_malloc_of_full_pool=
      caml_string_of_jsbytes("Pool.malloc of full pool"),
     cst_Pool_grow_cannot_grow_pool=
      caml_string_of_jsbytes
       ("Pool.grow cannot grow pool; capacity already at maximum"),
     cst_Pool_create_got_invalid_ca=
      caml_string_of_jsbytes("Pool.create got invalid capacity"),
     cst_Pool_create_got_too_large_=
      caml_string_of_jsbytes("Pool.create got too large capacity"),
     cst_cycle_in_free_list=caml_string_of_jsbytes("cycle in free list"),
     cst_Pool_invariant_failed=caml_string_of_jsbytes("Pool.invariant failed"),
     cst_invalid_header_index=caml_string_of_jsbytes("invalid header index"),
     cst_pointer_not_live=caml_string_of_jsbytes("pointer not live"),
     cst_Pool_pointer_of_id_exn_got=
      caml_string_of_jsbytes("Pool.pointer_of_id_exn got invalid id"),
     cst_should_equal=caml_string_of_jsbytes("should equal"),
     cst_Pointer_of_id_exn_got_stra=
      caml_string_of_jsbytes("Pointer.of_id_exn got strange id"),
     cst_Tuple_id_of_int_got_negati=
      caml_string_of_jsbytes("Tuple_id.of_int got negative int"),
     cst_Pool_grow_got_too_small_ca=
      caml_string_of_jsbytes("Pool.grow got too small capacity"),
     cst_Tuple_pool=caml_string_of_jsbytes("Tuple_pool"),
     cst_tuple_pool$11=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool_src_tuple_pool_$0=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_tuple_pool$12=caml_string_of_jsbytes("tuple_pool"),
     cst_tuple_pool_src_tuple_pool_$1=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_t13_max_slot=caml_string_of_jsbytes("<<t13 = max_slot>>"),
     cst_tuple_pool_src_tuple_pool_$2=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_array_index_num_bits_0=
      caml_string_of_jsbytes("<<array_index_num_bits > 0>>"),
     cst_tuple_pool_src_tuple_pool_$3=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_masked_tuple_id_num_bits_0=
      caml_string_of_jsbytes("<<masked_tuple_id_num_bits > 0>>"),
     cst_tuple_pool_src_tuple_pool_$4=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_array_index_num_bits_maske=
      caml_string_of_jsbytes
       ("<<(array_index_num_bits + masked_tuple_id_num_b[...]>>"),
     name=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml.Pool.Pointer.t"),
     cst_tuple_pool_src_tuple_pool_$5=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_null_max_slot_0=
      caml_string_of_jsbytes("<<((null ()) + max_slot) < 0>>"),
     cst_tuple_pool_src_tuple_pool_$6=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_invariant_ignore_null=
      caml_string_of_jsbytes("<<invariant ignore (null ())>>"),
     cst_tuple_pool_src_tuple_pool_$7=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_List_iter_Tuple_id_example=
      caml_string_of_jsbytes
       ("<<List.iter Tuple_id.examples   ~f:(fun tuple_i[...]>>"),
     cst_tuple_pool_src_tuple_pool_$8=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_List_iter_Tuple_id_example$0=
      caml_string_of_jsbytes
       ("<<List.iter Tuple_id.examples   ~f:(fun id ->  [...]>>"),
     cst_tuple_pool_src_tuple_pool_$9=
      caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
     cst_for_slots_per_tuple_1_to_m=
      caml_string_of_jsbytes
       ("<<for slots_per_tuple = 1 to max_slot do   asse[...]>>"),
     cst_dummy=caml_string_of_jsbytes("dummy"),
     cst_first_free=caml_string_of_jsbytes("first_free"),
     cst_next_id=caml_string_of_jsbytes("next_id"),
     cst_length=caml_string_of_jsbytes("length"),
     cst_capacity=caml_string_of_jsbytes("capacity"),
     cst_slots_per_tuple=caml_string_of_jsbytes("slots_per_tuple"),
     cst_tuple_pool$13=caml_string_of_jsbytes("tuple_pool"),
     cst_Tuple_pool$0=caml_string_of_jsbytes("Tuple_pool"),
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Core=global_data.Core,
     Typerep_lib_Typename=global_data.Typerep_lib__Typename,
     Typerep_lib_Std=global_data.Typerep_lib__Std,
     Typerep_lib_Typerep_obj=global_data.Typerep_lib__Typerep_obj,
     Typerep_lib_Make_typename=global_data.Typerep_lib__Make_typename,
     Core_Int63=global_data.Core__Int63,
     Core_Result=global_data.Core__Result,
     Core_List=global_data.Core__List,
     Core_Debug=global_data.Core__Debug,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Core_Uniform_array=global_data.Core__Uniform_array,
     Assert_failure=global_data.Assert_failure,
     Core_Array=global_data.Core__Array,
     Base_Field=global_data.Base__Field,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Base_String=global_data.Base__String,
     Core_Error=global_data.Core__Error,
     Core_Core_sys=global_data.Core__Core_sys,
     Core_Int=global_data.Core__Int,
     Core_Printf=global_data.Core__Printf,
     Inline_test_config=global_data.Inline_test_config,
     Tuple_pool=[0];
    caml_register_global(196,Tuple_pool,"Tuple_pool__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Tuple_pool_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_tuple_pool);
    caml_call1(Expect_test_collector[5][1],cst_tuple_pool_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_tuple_pool$0,cst);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_tuple_pool$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Tuple_pool_Import$0);
    var Tuple_pool_Import=[0];
    caml_register_global(201,Tuple_pool_Import,"Tuple_pool__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Tuple_pool_Tuple_type_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_tuple_pool$2);
    caml_call1(Expect_test_collector[5][1],cst_tuple_pool_src_tuple_type_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_tuple_pool$3,cst$0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_tuple_pool$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Tuple_pool_Tuple_type_intf$0);
    var Tuple_pool_Tuple_type_intf=[0];
    caml_register_global
     (202,Tuple_pool_Tuple_type_intf,"Tuple_pool__Tuple_type_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Tuple_pool_Tuple_type);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_tuple_pool$5);
    caml_call1(Expect_test_collector[5][1],cst_tuple_pool_src_tuple_type_$0);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_tuple_pool$6,cst$1);
    var
     _b_=[0,caml_string_of_jsbytes("Slots")],
     _a_=[0,caml_string_of_jsbytes("slots_per_tuple")],
     _aT_=[0,caml_string_of_jsbytes("_")],
     _aU_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       1150,
       38369,
       38396],
     _aR_=[0,caml_string_of_jsbytes("pointer")],
     _aS_=[0,caml_string_of_jsbytes("is_valid")],
     _aQ_=[0,caml_string_of_jsbytes("_")],
     _aP_=[0,caml_string_of_jsbytes("_")],
     _aO_=[0,caml_string_of_jsbytes("_")],
     _aN_=[0,caml_string_of_jsbytes("_")],
     _aM_=[0,caml_string_of_jsbytes("_")],
     _aL_=[0,caml_string_of_jsbytes("_")],
     _aK_=[0,caml_string_of_jsbytes("_")],
     _aJ_=[0,caml_string_of_jsbytes("_")],
     _aI_=[0,caml_string_of_jsbytes("_")],
     _aH_=[0,caml_string_of_jsbytes("capacity")],
     _aG_=[0,caml_string_of_jsbytes("_")],
     _aF_=[0,caml_string_of_jsbytes("_")],
     _aE_=[0,caml_string_of_jsbytes("_")],
     _aD_=[0,caml_string_of_jsbytes("_")],
     _aC_=[0,caml_string_of_jsbytes("_")],
     _aB_=[0,caml_string_of_jsbytes("_")],
     _aA_=[0,caml_string_of_jsbytes("_")],
     _az_=[0,caml_string_of_jsbytes("_")],
     _ay_=[0,caml_string_of_jsbytes("_")],
     _ax_=[0,caml_string_of_jsbytes("_")],
     _aw_=[0,caml_string_of_jsbytes("_")],
     _av_=[0,caml_string_of_jsbytes(" result"),0],
     _at_=[0,caml_string_of_jsbytes("_")],
     _as_=[0,caml_string_of_jsbytes("_")],
     _au_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       700,
       23089,
       23103],
     _aq_=[0,caml_string_of_jsbytes("_")],
     _ar_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       657,
       21456,
       21476],
     _ap_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       625,
       20520,
       20534],
     _an_=[0,caml_string_of_jsbytes("max")],
     _am_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       540,
       17887,
       17909],
     _ao_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       546,
       18147,
       18161],
     _aa_=[0,caml_string_of_jsbytes("_")],
     _al_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),450,56],
     _ak_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),453,13],
     _aj_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),454,13],
     _ai_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),457,13],
     _ah_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),458,13],
     _ag_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),466,15],
     _af_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),468,15],
     _ae_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       472,
       15394,
       15427],
     _ac_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),479,15],
     _ad_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),488,21],
     _ab_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       493,
       16348,
       16370],
     _Z_=[0,caml_string_of_jsbytes("_")],
     _$_=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       433,
       13853,
       13882],
     ___=
      [0,
       caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),
       439,
       14080,
       14094],
     _T_=[0,caml_string_of_jsbytes("dummy")],
     _U_=[0,caml_string_of_jsbytes("first_free")],
     _V_=[0,caml_string_of_jsbytes("next_id")],
     _W_=[0,caml_string_of_jsbytes("length")],
     _X_=[0,caml_string_of_jsbytes("capacity")],
     _Y_=[0,caml_string_of_jsbytes("slots_per_tuple")],
     _G_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),329,6],
     _C_=[0,caml_string_of_jsbytes("null")],
     _D_=[0,caml_string_of_jsbytes("Free")],
     _E_=[0,caml_string_of_jsbytes("Used")],
     _B_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),307,8],
     _A_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),308,8],
     _w_=[0,caml_string_of_jsbytes("_")],
     _x_=
      [0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),251,7700,7731],
     _v_=
      [0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),255,7828,7844],
     _s_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),219,48],
     _p_=
      [0,
       [11,
        caml_string_of_jsbytes("<Pool.Pointer.t: 0x"),
        [4,6,[0,2,8],0,[12,62,0]]],
       caml_string_of_jsbytes("<Pool.Pointer.t: 0x%08x>")],
     _o_=
      [0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),145,4421,4448],
     _n_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),136,22],
     _f_=[0,caml_string_of_jsbytes("capacity")],
     _g_=[0,caml_string_of_jsbytes("old_capacity")],
     _h_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),29,638,654],
     _e_=[0,caml_string_of_jsbytes("")],
     _aW_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),104,6],
     _aX_=[0,caml_string_of_jsbytes("tuple_pool/src/tuple_pool.ml"),107,6];
    function sexp_of_t(param)
     {var
       v_006=param[2],
       slots_per_tuple_002=v_006[1],
       arg_003=caml_call1(Core[356],slots_per_tuple_002),
       bnds_001=[0,[1,[0,_a_,[0,arg_003,0]]],0];
      return [1,[0,_b_,[0,[1,bnds_001],0]]]}
    function sexp_of_t$0(of_tuple_007,of_variant_008){return sexp_of_t}
    function slots_per_tuple(param){var match=param[2],n=match[1];return n}
    function sexp_of_t1(of_a0_009){return sexp_of_t}
    function sexp_of_t2(of_a0_010,of_a1_011){return sexp_of_t}
    function sexp_of_t3(of_a0_012,of_a1_013,of_a2_014){return sexp_of_t}
    function sexp_of_t4(of_a0_015,of_a1_016,of_a2_017,of_a3_018)
     {return sexp_of_t}
    function sexp_of_t5(of_a0_019,of_a1_020,of_a2_021,of_a3_022,of_a4_023)
     {return sexp_of_t}
    function sexp_of_t6
     (of_a0_024,of_a1_025,of_a2_026,of_a3_027,of_a4_028,of_a5_029)
     {return sexp_of_t}
    function sexp_of_t7
     (of_a0_030,of_a1_031,of_a2_032,of_a3_033,of_a4_034,of_a5_035,of_a6_036)
     {return sexp_of_t}
    function sexp_of_t8
     (of_a0_037,
      of_a1_038,
      of_a2_039,
      of_a3_040,
      of_a4_041,
      of_a5_042,
      of_a6_043,
      of_a7_044)
     {return sexp_of_t}
    function sexp_of_t9
     (of_a0_045,
      of_a1_046,
      of_a2_047,
      of_a3_048,
      of_a4_049,
      of_a5_050,
      of_a6_051,
      of_a7_052,
      of_a8_053)
     {return sexp_of_t}
    function sexp_of_t10
     (of_a0_054,
      of_a1_055,
      of_a2_056,
      of_a3_057,
      of_a4_058,
      of_a5_059,
      of_a6_060,
      of_a7_061,
      of_a8_062,
      of_a9_063)
     {return sexp_of_t}
    function sexp_of_t11
     (of_a0_064,
      of_a1_065,
      of_a2_066,
      of_a3_067,
      of_a4_068,
      of_a5_069,
      of_a6_070,
      of_a7_071,
      of_a8_072,
      of_a9_073,
      of_a10_074)
     {return sexp_of_t}
    function sexp_of_t12
     (of_a0_075,
      of_a1_076,
      of_a2_077,
      of_a3_078,
      of_a4_079,
      of_a5_080,
      of_a6_081,
      of_a7_082,
      of_a8_083,
      of_a9_084,
      of_a10_085,
      of_a11_086)
     {return sexp_of_t}
    function sexp_of_t13
     (of_a0_087,
      of_a1_088,
      of_a2_089,
      of_a3_090,
      of_a4_091,
      of_a5_092,
      of_a6_093,
      of_a7_094,
      of_a8_095,
      of_a9_096,
      of_a10_097,
      of_a11_098,
      of_a12_099)
     {return sexp_of_t}
    function sexp_of_t14
     (of_a0_100,
      of_a1_101,
      of_a2_102,
      of_a3_103,
      of_a4_104,
      of_a5_105,
      of_a6_106,
      of_a7_107,
      of_a8_108,
      of_a9_109,
      of_a10_110,
      of_a11_111,
      of_a12_112,
      of_a13_113)
     {return sexp_of_t}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_tuple_pool$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Tuple_pool_Tuple_type$0);
    var
     _c_=
      [0,
       sexp_of_t$0,
       slots_per_tuple,
       sexp_of_t1,
       sexp_of_t2,
       sexp_of_t3,
       sexp_of_t4,
       sexp_of_t5,
       sexp_of_t6,
       sexp_of_t7,
       sexp_of_t8,
       sexp_of_t9,
       sexp_of_t10,
       sexp_of_t11,
       sexp_of_t12,
       sexp_of_t13,
       sexp_of_t14,
       t1,
       t2,
       t3,
       t4,
       t5,
       t6,
       t7,
       t8,
       t9,
       t10,
       t11,
       t12,
       t13,
       t14],
     Tuple_pool_Tuple_type=[0,_c_];
    caml_register_global(204,Tuple_pool_Tuple_type,"Tuple_pool__Tuple_type");
    caml_call1(Ppx_module_timer_runtime[4],cst_Tuple_pool_Tuple_pool_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_tuple_pool$8);
    caml_call1(Expect_test_collector[5][1],cst_tuple_pool_src_tuple_pool_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_tuple_pool$9,cst$2);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_tuple_pool$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Tuple_pool_Tuple_pool_intf$0);
    var Tuple_pool_Tuple_pool_intf=[0];
    caml_register_global
     (205,Tuple_pool_Tuple_pool_intf,"Tuple_pool__Tuple_pool_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Tuple_pool);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_tuple_pool$11);
    caml_call1(Expect_test_collector[5][1],cst_tuple_pool_src_tuple_pool_$0);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_tuple_pool$12,cst$3);
    var
     _d_=Core_Error[41],
     arch_sixtyfour=caml_call2(Core[90],Core_Core_sys[9],64),
     num_bits=Core_Int[40],
     max_value=Core[1][19],
     to_string=Core[22],
     sprintf=Core_Printf[2];
    function concat(l){return caml_call2(Base_String[54],_e_,l)}
    var max_slot=14;
    function sexp_of_t$1(of_slots_007,of_a_008){return Core[356]}
    function equal(t1,t2){return caml_call2(Core[90],t1,t2)}
    var
     t0=1,
     t1$0=2,
     t2$0=3,
     t3$0=4,
     t4$0=5,
     t5$0=6,
     t6$0=7,
     t7$0=8,
     t8$0=9,
     t9$0=10,
     t10$0=11,
     t11$0=12,
     t12$0=13,
     t13$0=14;
    function _i_(param){return caml_call2(Core[90],t13$0,max_slot)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_t13_max_slot,
      0,
      cst_tuple_pool_src_tuple_pool_$1,
      87,
      4,
      31,
      _i_);
    var
     Slot=
      [0,
       sexp_of_t$1,
       equal,
       t0,
       t1$0,
       t2$0,
       t3$0,
       t4$0,
       t5$0,
       t6$0,
       t7$0,
       t8$0,
       t9$0,
       t10$0,
       t11$0,
       t12$0,
       t13$0];
    if(arch_sixtyfour)
     {if(! caml_call2(Core[90],num_bits,63))throw [0,Assert_failure,_aW_];
      var _j_=30}
    else
     {if
       (!
        caml_call2(Core[90],num_bits,31)
        &&
        !
        caml_call2(Core[90],num_bits,32))
       throw [0,Assert_failure,_aX_];
      var _j_=22}
    var masked_tuple_id_num_bits=num_bits - _j_ | 0;
    function _k_(param){return caml_call2(Core[91],_j_,0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_array_index_num_bits_0,
      0,
      cst_tuple_pool_src_tuple_pool_$2,
      113,
      2,
      39,
      _k_);
    function _l_(param)
     {return caml_call2(Core[91],masked_tuple_id_num_bits,0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_masked_tuple_id_num_bits_0,
      0,
      cst_tuple_pool_src_tuple_pool_$3,
      114,
      2,
      43,
      _l_);
    function _m_(param)
     {return caml_call2(Core[89],_j_ + masked_tuple_id_num_bits | 0,num_bits)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_array_index_num_bits_maske,
      0,
      cst_tuple_pool_src_tuple_pool_$4,
      115,
      2,
      78,
      _m_);
    var max_array_length=1 << _j_,sexp_of_t$2=Core[356];
    function invariant(t)
     {if(caml_call2(Core[88],t,0))return 0;throw [0,Assert_failure,_n_]}
    var init=0;
    function of_int(i)
     {if(caml_call2(Core[92],i,0))
       caml_call5(_d_,0,_o_,cst_Tuple_id_of_int_got_negati,i,Core[356]);
      return i}
    var
     examples=[0,0,[0,1,[0,536870911,[0,max_value,0]]]],
     tuple_id_mask=(1 << masked_tuple_id_num_bits) - 1 | 0,
     Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name]),
     typename_of_t=Typename_of_t[2];
    function typerep_of_t(of_slots)
     {var name_of_t=caml_call1(Typename_of_t[1],of_slots);
      return [9,[0,name_of_t,[0,Core[359]]]]}
    function sexp_of_t$3(param,t){return [0,caml_call2(sprintf,_p_,t)]}
    function phys_equal(t1,t2){return t1 === t2?1:0}
    var _q_=Core[95];
    function null$0(param){return -15}
    function is_null(t){return t === -15?1:0}
    function _r_(param){return caml_call2(Core[92],-1,0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_null_max_slot_0,
      0,
      cst_tuple_pool_src_tuple_pool_$5,
      209,
      4,
      39,
      _r_);
    function create(header_index,tuple_id)
     {return header_index | (tuple_id & tuple_id_mask) << _j_}
    var header_index_mask=(1 << _j_) - 1 | 0;
    function masked_tuple_id(t){return t >>> _j_ | 0}
    function header_index(t){return t & header_index_mask}
    function invariant$0(param,t)
     {var _c6_=1 - (t === -15?1:0);
      if(! _c6_)return _c6_;
      var _c7_=header_index(t);
      if(caml_call2(Core[91],_c7_,0))return 0;
      throw [0,Assert_failure,_s_]}
    function _t_(param)
     {var _c4_=-15;invariant$0(function(_c5_){return 0},_c4_);return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_invariant_ignore_null,
      0,
      cst_tuple_pool_src_tuple_pool_$6,
      221,
      4,
      48,
      _t_);
    function _u_(param)
     {function _c1_(tuple_id)
       {var _c2_=create(1,tuple_id);
        return invariant$0(function(_c3_){return 0},_c2_)}
      caml_call2(Core_List[9],examples,_c1_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_Tuple_id_example,
      0,
      cst_tuple_pool_src_tuple_pool_$7,
      223,
      4,
      135,
      _u_);
    function slot_index(t,slot){return header_index(t) + slot | 0}
    function first_slot_index(t){return slot_index(t,Slot[3])}
    var
     to_int_exn=Core_Int63[5],
     of_int$0=Core_Int63[69],
     bin_size_t=Core_Int63[90],
     bin_write_t=Core_Int63[91],
     bin_read_t=Core_Int63[92],
     bin_read_t$0=Core_Int63[93],
     bin_shape_t=Core_Int63[94],
     bin_writer_t=Core_Int63[95],
     bin_reader_t=Core_Int63[96],
     bin_t=Core_Int63[97],
     t_of_sexp=Core_Int63[98],
     sexp_of_t$4=Core_Int63[99];
    function to_int63(t){return t}
    function of_int63(i){return i}
    var
     _y_=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       t_of_sexp,
       sexp_of_t$4,
       to_int63,
       of_int63],
     null$1=0;
    function is_null$0(t){return caml_call2(Core[90],t,0)}
    function is_free(t){return caml_call2(Core[91],t,0)}
    function is_used(t){return caml_call2(Core[92],t,0)}
    function tuple_id(t){return of_int(- (t + 1 | 0) | 0)}
    function _z_(param)
     {function _c0_(id)
       {var t=-1 - id | 0;
        if(! is_used(t))throw [0,Assert_failure,_B_];
        var t1=tuple_id(t);
        if(caml_call2(Core[90],t1,id))return 0;
        throw [0,Assert_failure,_A_]}
      caml_call2(Core_List[9],examples,_c0_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_Tuple_id_example$0,
      0,
      cst_tuple_pool_src_tuple_pool_$8,
      304,
      4,
      173,
      _z_);
    var metadata_index=0,start_of_tuples_index=1;
    function max_capacity(slots_per_tuple)
     {return caml_div(max_array_length - 1 | 0,1 + slots_per_tuple | 0)}
    function _F_(param)
     {var slots_per_tuple=1;
      for(;;)
       {var
         _cY_=
          1
          +
          caml_mul(1 + slots_per_tuple | 0,max_capacity(slots_per_tuple))
          |
          0;
        if(! caml_call2(Core[89],_cY_,max_array_length))
         throw [0,Assert_failure,_G_];
        var _cZ_=slots_per_tuple + 1 | 0;
        if(14 === slots_per_tuple)return 0;
        var slots_per_tuple=_cZ_}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_for_slots_per_tuple_1_to_m,
      0,
      cst_tuple_pool_src_tuple_pool_$9,
      327,
      2,
      203,
      _F_);
    function dummy(r){return r[6]}
    function first_free(r){return r[5]}
    function set_first_free(r,v){r[5] = v;return 0}
    function next_id(r){return r[4]}
    function set_next_id(r,v){r[4] = v;return 0}
    function length(r){return r[3]}
    function set_length(r,v){r[3] = v;return 0}
    function capacity(r){return r[2]}
    function slots_per_tuple$0(r){return r[1]}
    function _H_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v]}
    var _I_=0,dummy$0=[0,function(param){return 0},cst_dummy,_I_,dummy,_H_];
    function _J_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6]]}
    var
     _K_=[0,set_first_free],
     first_free$0=
      [0,function(param){return 0},cst_first_free,_K_,first_free,_J_];
    function _L_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6]]}
    var
     _M_=[0,set_next_id],
     next_id$0=[0,function(param){return 0},cst_next_id,_M_,next_id,_L_];
    function _N_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6]]}
    var
     _O_=[0,set_length],
     length$0=[0,function(param){return 0},cst_length,_O_,length,_N_];
    function _P_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6]]}
    var
     _Q_=0,
     capacity$0=[0,function(param){return 0},cst_capacity,_Q_,capacity,_P_];
    function _R_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6]]}
    var
     _S_=0,
     slots_per_tuple$1=
      [0,
       function(param){return 0},
       cst_slots_per_tuple,
       _S_,
       slots_per_tuple$0,
       _R_];
    function iter
     (slots_per_tuple_fun,
      capacity_fun,
      length_fun,
      next_id_fun,
      first_free_fun,
      dummy_fun)
     {caml_call1(slots_per_tuple_fun,slots_per_tuple$1);
      caml_call1(capacity_fun,capacity$0);
      caml_call1(length_fun,length$0);
      caml_call1(next_id_fun,next_id$0);
      caml_call1(first_free_fun,first_free$0);
      return caml_call1(dummy_fun,dummy$0)}
    function array_indices_per_tuple(t){return 1 + t[1] | 0}
    function array_length(t)
     {var _cX_=array_indices_per_tuple(t);return 1 + caml_mul(t[2],_cX_) | 0}
    function tuple_num_to_header_index(t,tuple_num)
     {return 1 + caml_mul(tuple_num,array_indices_per_tuple(t)) | 0}
    function tuple_num_to_first_slot_index(t,tuple_num)
     {return tuple_num_to_header_index(t,tuple_num) + 1 | 0}
    function metadata(t)
     {return caml_call2(Core_Uniform_array[20],t,metadata_index)}
    function length$1(t){return metadata(t)[3]}
    function sexp_of_t$5(sexp_of_ty,t)
     {var
       param=metadata(t),
       capacity_018=param[2],
       slots_per_tuple_016=param[1],
       length_020=param[3],
       next_id_022=param[4],
       first_free_024=param[5],
       dummy_026=param[6],
       arg_027=caml_call2(Core[454],Sexplib0_Sexp_conv[23],dummy_026),
       bnds_015=[0,[1,[0,_T_,[0,arg_027,0]]],0],
       arg_025=
        is_null$0(first_free_024)
         ?_C_
         :is_free(first_free_024)
           ?[1,[0,_D_,[0,[0,caml_call1(to_string,first_free_024)],0]]]
           :[1,
             [0,_E_,[0,[0,caml_call1(to_string,tuple_id(first_free_024))],0]]],
       bnds_015$0=[0,[1,[0,_U_,[0,arg_025,0]]],bnds_015],
       arg_023=caml_call1(sexp_of_t$2,next_id_022),
       bnds_015$1=[0,[1,[0,_V_,[0,arg_023,0]]],bnds_015$0],
       arg_021=caml_call1(Core[356],length_020),
       bnds_015$2=[0,[1,[0,_W_,[0,arg_021,0]]],bnds_015$1],
       arg_019=caml_call1(Core[356],capacity_018),
       bnds_015$3=[0,[1,[0,_X_,[0,arg_019,0]]],bnds_015$2],
       arg_017=caml_call1(Core[356],slots_per_tuple_016),
       bnds_015$4=[0,[1,[0,_Y_,[0,arg_017,0]]],bnds_015$3];
      return [1,bnds_015$4]}
    function unsafe_header(t,header_index)
     {return caml_call2(Core_Uniform_array[20],t,header_index)}
    function unsafe_set_header(t,header_index,header)
     {return caml_call3(Core_Uniform_array[45],t,header_index,header)}
    function header_index_is_in_bounds(t,header_index)
     {var _cV_=caml_call2(Core[88],header_index,start_of_tuples_index);
      if(! _cV_)return _cV_;
      var _cW_=caml_call1(Core_Uniform_array[18],t);
      return caml_call2(Core[92],header_index,_cW_)}
    function unsafe_pointer_is_live(t,pointer)
     {var
       header_index$0=header_index(pointer),
       header=unsafe_header(t,header_index$0),
       _cS_=is_used(header);
      if(! _cS_)return _cS_;
      var _cT_=masked_tuple_id(pointer),_cU_=tuple_id(header) & tuple_id_mask;
      return caml_call2(Core[90],_cU_,_cT_)}
    function pointer_is_valid(t,pointer)
     {var _cR_=header_index_is_in_bounds(t,header_index(pointer));
      return _cR_?unsafe_pointer_is_live(t,pointer):_cR_}
    function id_of_pointer(t,pointer){return caml_call1(of_int$0,pointer)}
    function is_valid_header_index(t,header_index)
     {var
       metadata$0=metadata(t),
       _cP_=header_index_is_in_bounds(t,header_index);
      if(! _cP_)return _cP_;
      var
       _cQ_=
        runtime.caml_mod
         (header_index - 1 | 0,array_indices_per_tuple(metadata$0));
      return caml_call2(Core[90],0,_cQ_)}
    function pointer_of_id_exn(t$2,id)
     {try
       {try
         {var t=caml_call1(to_int_exn,id);
          if(t === -15)
           var t$0=t;
          else
           var
            _cO_=of_int(masked_tuple_id(t)),
            should_equal=create(header_index(t),_cO_),
            t$1=
             t === should_equal
              ?t
              :caml_call5
                (_d_,
                 0,
                 _x_,
                 cst_should_equal,
                 should_equal,
                 function(x_009)
                  {return sexp_of_t$3(function(param){return _w_},x_009)}),
            t$0=t$1;
          var pointer=t$0}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var
           pointer=
            caml_call5
             (_d_,
              0,
              _v_,
              cst_Pointer_of_id_exn_got_stra,
              [0,id,exn],
              function(param)
               {var
                 arg1_011=param[2],
                 arg0_010=param[1],
                 res0_012=caml_call1(sexp_of_t$4,arg0_010),
                 res1_013=caml_call1(Core[537],arg1_011);
                return [1,[0,res0_012,[0,res1_013,0]]]})}
        if(1 - (pointer === -15?1:0))
         {var header_index$0=header_index(pointer);
          if(1 - is_valid_header_index(t$2,header_index$0))
           caml_call5
            (_d_,0,_$_,cst_invalid_header_index,header_index$0,Core[356]);
          if(1 - unsafe_pointer_is_live(t$2,pointer))
           caml_call1(Core[6],cst_pointer_not_live)}
        return pointer}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call5
                (_d_,
                 0,
                 ___,
                 cst_Pool_pointer_of_id_exn_got,
                 [0,id,t$2,exn],
                 function(param)
                  {var
                    arg2_030=param[3],
                    arg1_029=param[2],
                    arg0_028=param[1],
                    res0_031=caml_call1(_y_[10],arg0_028),
                    res1_032=sexp_of_t$5(function(param){return _Z_},arg1_029),
                    res2_033=caml_call1(Core[537],arg2_030);
                   return [1,[0,res0_031,[0,res1_032,[0,res2_033,0]]]]})}}
    function invariant$1(invariant_a,t)
     {try
       {var
         t$0=metadata(t),
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t$0))},
         _cn_=
          function(param)
           {if(param)
             {var
               dummy=param[1],
               _cG_=t$0[1],
               _cH_=caml_call1(Core_Uniform_array[18],dummy);
              if(caml_call2(Core[90],_cH_,_cG_))return 0;
              throw [0,Assert_failure,_ac_]}
            var _cJ_=t$0[2] - 1 | 0,_cI_=0;
            if(_cJ_ >= 0)
             {var tuple_num=_cI_;
              for(;;)
               {var
                 header_index=tuple_num_to_header_index(t$0,tuple_num),
                 header=unsafe_header(t,header_index);
                if(is_free(header))
                 {var
                   first_slot=tuple_num_to_first_slot_index(t$0,tuple_num),
                   _cL_=t$0[1] - 1 | 0,
                   _cK_=0;
                  if(_cL_ >= 0)
                   {var slot=_cK_;
                    for(;;)
                     {if
                       (typeof
                        caml_call2(Core_Uniform_array[19],t,first_slot + slot | 0)
                        !==
                        "number")
                       throw [0,Assert_failure,_ad_];
                      var _cN_=slot + 1 | 0;
                      if(_cL_ !== slot){var slot=_cN_;continue}
                      break}}}
                var _cM_=tuple_num + 1 | 0;
                if(_cJ_ !== tuple_num){var tuple_num=_cM_;continue}
                break}}
            return 0},
         _co_=function(_cF_){return check(_cn_,_cF_)},
         _cp_=
          function(first_free)
           {var free=caml_call2(Core_Array[38],t$0[2],0),r=[0,first_free];
            for(;;)
             {if(is_null$0(r[1]))return 0;
              var header=r[1];
              if(! is_free(header))throw [0,Assert_failure,_ag_];
              if(! is_valid_header_index(t,header))
               throw [0,Assert_failure,_af_];
              var
               tuple_num=
                caml_div(header - 1 | 0,array_indices_per_tuple(t$0));
              if(caml_check_bound(free,tuple_num)[1 + tuple_num])
               caml_call5
                (_d_,0,_ae_,cst_cycle_in_free_list,tuple_num,Core[356]);
              caml_check_bound(free,tuple_num)[1 + tuple_num] = 1;
              r[1] = unsafe_header(t,header)}},
         _cq_=function(_cE_){return check(_cp_,_cE_)},
         _cr_=function(_cD_){return check(invariant,_cD_)},
         _cs_=
          function(length)
           {if(! caml_call2(Core[88],length,0))throw [0,Assert_failure,_ai_];
            if(caml_call2(Core[89],length,t$0[2]))return 0;
            throw [0,Assert_failure,_ah_]},
         _ct_=function(_cC_){return check(_cs_,_cC_)},
         _cu_=
          function(capacity)
           {if(! caml_call2(Core[88],capacity,0))
             throw [0,Assert_failure,_ak_];
            var
             _cA_=array_length(t$0),
             _cB_=caml_call1(Core_Uniform_array[18],t);
            if(caml_call2(Core[90],_cB_,_cA_))return 0;
            throw [0,Assert_failure,_aj_]},
         _cv_=function(_cz_){return check(_cu_,_cz_)},
         _cw_=
          function(slots_per_tuple)
           {if(caml_call2(Core[91],slots_per_tuple,0))return 0;
            throw [0,Assert_failure,_al_]},
         _cx_=
          iter
           (function(_cy_){return check(_cw_,_cy_)},_cv_,_ct_,_cr_,_cq_,_co_);
        return _cx_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call5
                (_d_,
                 0,
                 _ab_,
                 cst_Pool_invariant_failed,
                 [0,exn,t],
                 function(param)
                  {var
                    arg1_035=param[2],
                    arg0_034=param[1],
                    res0_036=caml_call1(Core[537],arg0_034),
                    res1_037=sexp_of_t$5(function(param){return _aa_},arg1_035);
                   return [1,[0,res0_036,[0,res1_037,0]]]})}}
    function capacity$1(t){return metadata(t)[2]}
    function is_full(t)
     {var t$0=metadata(t);return caml_call2(Core[90],t$0[3],t$0[2])}
    function unsafe_add_to_free_list(t,metadata,header_index)
     {unsafe_set_header(t,header_index,metadata[5]);
      metadata[5] = header_index;
      return 0}
    function set_metadata(t,metadata)
     {return caml_call3(Core_Uniform_array[21],t,metadata_index,metadata)}
    function create_array(metadata)
     {var
       _cm_=array_length(metadata),
       t=caml_call1(Core_Uniform_array[43],_cm_);
      set_metadata(t,metadata);
      return t}
    function unsafe_init_range(t,metadata,lo,hi)
     {var _cf_=metadata[6];
      if(_cf_)
       {var dummy=_cf_[1],_cg_=hi - 1 | 0;
        if(_cg_ >= lo)
         {var tuple_num$0=lo;
          for(;;)
           {var
             _cj_=metadata[1],
             _ck_=tuple_num_to_first_slot_index(metadata,tuple_num$0);
            caml_call5(Core_Uniform_array[36],dummy,0,t,_ck_,_cj_);
            var _cl_=tuple_num$0 + 1 | 0;
            if(_cg_ !== tuple_num$0){var tuple_num$0=_cl_;continue}
            break}}}
      var _ch_=hi - 1 | 0;
      if(_ch_ >= lo)
       {var tuple_num=_ch_;
        for(;;)
         {unsafe_add_to_free_list
           (t,metadata,tuple_num_to_header_index(metadata,tuple_num));
          var _ci_=tuple_num - 1 | 0;
          if(lo !== tuple_num){var tuple_num=_ci_;continue}
          break}}
      return 0}
    function create_with_dummy(slots,capacity,dummy)
     {if(caml_call2(Core[92],capacity,0))
       caml_call5
        (_d_,0,_am_,cst_Pool_create_got_invalid_ca,capacity,Core[356]);
      var
       slots_per_tuple=caml_call1(_c_[2],slots),
       max_capacity$0=max_capacity(slots_per_tuple);
      if(caml_call2(Core[91],capacity,max_capacity$0))
       caml_call5
        (_d_,
         0,
         _ao_,
         cst_Pool_create_got_too_large_,
         [0,capacity,[0,5442212,max_capacity$0]],
         function(param)
          {var
            arg1_040=param[2],
            arg0_039=param[1],
            res0_041=caml_call1(Core[356],arg0_039),
            v_038=arg1_040[2],
            res1_042=[1,[0,_an_,[0,caml_call1(Core[356],v_038),0]]];
           return [1,[0,res0_041,[0,res1_042,0]]]});
      var
       metadata=[0,slots_per_tuple,capacity,0,init,null$1,dummy],
       t=create_array(metadata);
      unsafe_init_range(t,metadata,0,capacity);
      return t}
    function create$0(slots,capacity,dummy)
     {var
       _ce_=caml_call1(_c_[2],slots),
       dummy$0=
        caml_call2(Core[90],_ce_,1)
         ?caml_call1(Core_Uniform_array[16],dummy)
         :dummy;
      return create_with_dummy(slots,capacity,[0,dummy$0])}
    function grow(capacity$0,t)
     {var
       match=metadata(t),
       old_capacity=match[2],
       slots_per_tuple=match[1],
       length=match[3],
       next_id=match[4],
       dummy$0=match[6];
      if(capacity$0)
       {var capacity=capacity$0[1];
        if(caml_call2(Core[89],capacity,old_capacity))
         caml_call5
          (_d_,
           0,
           _h_,
           cst_Pool_grow_got_too_small_ca,
           [0,[0,-1011154630,capacity],[0,138253074,old_capacity]],
           function(param)
            {var
              arg1_004=param[2],
              arg0_003=param[1],
              v_001=arg0_003[2],
              res0_005=[1,[0,_f_,[0,caml_call1(Core[356],v_001),0]]],
              v_002=arg1_004[2],
              res1_006=[1,[0,_g_,[0,caml_call1(Core[356],v_002),0]]];
             return [1,[0,res0_005,[0,res1_006,0]]]});
        var _b$_=capacity}
      else
       var _b$_=caml_call2(Core[90],old_capacity,0)?1:old_capacity * 2 | 0;
      var
       _ca_=max_capacity(slots_per_tuple),
       capacity$1=caml_call2(Core[96],_ca_,_b$_);
      if(caml_call2(Core[90],capacity$1,old_capacity))
       caml_call5
        (_d_,0,_ap_,cst_Pool_grow_cannot_grow_pool,capacity$1,Core[356]);
      var
       metadata$2=[0,slots_per_tuple,capacity$1,length,next_id,null$1,dummy$0],
       t$0=create_array(metadata$2),
       _cb_=caml_mul(old_capacity,array_indices_per_tuple(metadata$2));
      caml_call5
       (Core_Uniform_array[36],
        t,
        start_of_tuples_index,
        t$0,
        start_of_tuples_index,
        _cb_);
      var metadata$0=metadata(t),_b5_=metadata$0[6];
      if(_b5_)
       {var dummy=_b5_[1],_b7_=metadata$0[2] - 1 | 0,_b6_=0;
        if(_b7_ >= 0)
         {var tuple_num=_b6_;
          for(;;)
           {var header_index=tuple_num_to_header_index(metadata$0,tuple_num);
            unsafe_set_header(t,header_index,null$1);
            caml_call5
             (Core_Uniform_array[36],
              dummy,
              0,
              t,
              header_index + 1 | 0,
              metadata$0[1]);
            var _b8_=tuple_num + 1 | 0;
            if(_b7_ !== tuple_num){var tuple_num=_b8_;continue}
            break}}}
      else
       {var _b9_=caml_call1(Core_Uniform_array[18],t) - 1 | 0;
        if(_b9_ >= 1)
         {var i=start_of_tuples_index;
          for(;;)
           {caml_call3(Core_Uniform_array[22],t,i,0);
            var _b__=i + 1 | 0;
            if(_b9_ !== i){var i=_b__;continue}
            break}}}
      var metadata$1=[0,metadata$0[1],0,0,metadata$0[4],null$1,metadata$0[6]];
      set_metadata(t,metadata$1);
      unsafe_init_range(t$0,metadata$2,old_capacity,capacity$1);
      var _cc_=old_capacity - 1 | 0;
      if(_cc_ >= 0)
       {var tuple_num$0=_cc_;
        for(;;)
         {var
           header_index$0=tuple_num_to_header_index(metadata$2,tuple_num$0),
           header=unsafe_header(t$0,header_index$0);
          if(1 - is_used(header))
           unsafe_add_to_free_list(t$0,metadata$2,header_index$0);
          var _cd_=tuple_num$0 - 1 | 0;
          if(0 !== tuple_num$0){var tuple_num$0=_cd_;continue}
          break}}
      return t$0}
    function malloc(t)
     {var metadata$0=metadata(t),first_free=metadata$0[5];
      if(is_null$0(first_free))
       caml_call5
        (_d_,
         0,
         _ar_,
         cst_Pool_malloc_of_full_pool,
         t,
         function(x_043)
          {return sexp_of_t$5(function(param){return _aq_},x_043)});
      metadata$0[5] = unsafe_header(t,first_free);
      metadata$0[3] = metadata$0[3] + 1 | 0;
      var tuple_id=metadata$0[4];
      unsafe_set_header(t,first_free,-1 - tuple_id | 0);
      var
       _b4_=
        arch_sixtyfour
         ?tuple_id + 1 | 0
         :caml_call2(Core[90],tuple_id,max_value)?0:tuple_id + 1 | 0;
      metadata$0[4] = _b4_;
      return create(first_free,tuple_id)}
    function unsafe_free(t,pointer)
     {var metadata$0=metadata(t);
      metadata$0[3] = metadata$0[3] - 1 | 0;
      unsafe_add_to_free_list(t,metadata$0,header_index(pointer));
      var _bY_=metadata$0[6];
      if(_bY_)
       {var dummy=_bY_[1],_bZ_=metadata$0[1],_b0_=first_slot_index(pointer);
        return caml_call5(Core_Uniform_array[38],dummy,0,t,_b0_,_bZ_)}
      var pos=first_slot_index(pointer),_b2_=metadata$0[1] - 1 | 0,_b1_=0;
      if(_b2_ >= 0)
       {var i=_b1_;
        for(;;)
         {caml_call2(Core_Uniform_array[47],t,pos + i | 0);
          var _b3_=i + 1 | 0;
          if(_b2_ !== i){var i=_b3_;continue}
          break}}
      return 0}
    function free(t,pointer)
     {if(1 - pointer_is_valid(t,pointer))
       caml_call5
        (_d_,
         0,
         _au_,
         cst_Pool_free_of_invalid_point,
         [0,pointer,t],
         function(param)
          {var
            arg1_045=param[2],
            arg0_044=param[1],
            res0_046=sexp_of_t$3(function(param){return _as_},arg0_044),
            res1_047=sexp_of_t$5(function(param){return _at_},arg1_045);
           return [1,[0,res0_046,[0,res1_047,0]]]});
      return unsafe_free(t,pointer)}
    function new1(t,a0)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      return pointer}
    function new2(t,a0,a1)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      return pointer}
    function new3(t,a0,a1,a2)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      return pointer}
    function new4(t,a0,a1,a2,a3)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      return pointer}
    function new5(t,a0,a1,a2,a3,a4)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      return pointer}
    function new6(t,a0,a1,a2,a3,a4,a5)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      return pointer}
    function new7(t,a0,a1,a2,a3,a4,a5,a6)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      caml_call3(Core_Uniform_array[22],t,offset + 7 | 0,a6);
      return pointer}
    function new8(t,a0,a1,a2,a3,a4,a5,a6,a7)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      caml_call3(Core_Uniform_array[22],t,offset + 7 | 0,a6);
      caml_call3(Core_Uniform_array[22],t,offset + 8 | 0,a7);
      return pointer}
    function new9(t,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      caml_call3(Core_Uniform_array[22],t,offset + 7 | 0,a6);
      caml_call3(Core_Uniform_array[22],t,offset + 8 | 0,a7);
      caml_call3(Core_Uniform_array[22],t,offset + 9 | 0,a8);
      return pointer}
    function new10(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      caml_call3(Core_Uniform_array[22],t,offset + 7 | 0,a6);
      caml_call3(Core_Uniform_array[22],t,offset + 8 | 0,a7);
      caml_call3(Core_Uniform_array[22],t,offset + 9 | 0,a8);
      caml_call3(Core_Uniform_array[22],t,offset + 10 | 0,a9);
      return pointer}
    function new11(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      caml_call3(Core_Uniform_array[22],t,offset + 7 | 0,a6);
      caml_call3(Core_Uniform_array[22],t,offset + 8 | 0,a7);
      caml_call3(Core_Uniform_array[22],t,offset + 9 | 0,a8);
      caml_call3(Core_Uniform_array[22],t,offset + 10 | 0,a9);
      caml_call3(Core_Uniform_array[22],t,offset + 11 | 0,a10);
      return pointer}
    function new12(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      caml_call3(Core_Uniform_array[22],t,offset + 7 | 0,a6);
      caml_call3(Core_Uniform_array[22],t,offset + 8 | 0,a7);
      caml_call3(Core_Uniform_array[22],t,offset + 9 | 0,a8);
      caml_call3(Core_Uniform_array[22],t,offset + 10 | 0,a9);
      caml_call3(Core_Uniform_array[22],t,offset + 11 | 0,a10);
      caml_call3(Core_Uniform_array[22],t,offset + 12 | 0,a11);
      return pointer}
    function new13(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      caml_call3(Core_Uniform_array[22],t,offset + 7 | 0,a6);
      caml_call3(Core_Uniform_array[22],t,offset + 8 | 0,a7);
      caml_call3(Core_Uniform_array[22],t,offset + 9 | 0,a8);
      caml_call3(Core_Uniform_array[22],t,offset + 10 | 0,a9);
      caml_call3(Core_Uniform_array[22],t,offset + 11 | 0,a10);
      caml_call3(Core_Uniform_array[22],t,offset + 12 | 0,a11);
      caml_call3(Core_Uniform_array[22],t,offset + 13 | 0,a12);
      return pointer}
    function new14(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
     {var pointer=malloc(t),offset=header_index(pointer);
      caml_call3(Core_Uniform_array[22],t,offset + 1 | 0,a0);
      caml_call3(Core_Uniform_array[22],t,offset + 2 | 0,a1);
      caml_call3(Core_Uniform_array[22],t,offset + 3 | 0,a2);
      caml_call3(Core_Uniform_array[22],t,offset + 4 | 0,a3);
      caml_call3(Core_Uniform_array[22],t,offset + 5 | 0,a4);
      caml_call3(Core_Uniform_array[22],t,offset + 6 | 0,a5);
      caml_call3(Core_Uniform_array[22],t,offset + 7 | 0,a6);
      caml_call3(Core_Uniform_array[22],t,offset + 8 | 0,a7);
      caml_call3(Core_Uniform_array[22],t,offset + 9 | 0,a8);
      caml_call3(Core_Uniform_array[22],t,offset + 10 | 0,a9);
      caml_call3(Core_Uniform_array[22],t,offset + 11 | 0,a10);
      caml_call3(Core_Uniform_array[22],t,offset + 12 | 0,a11);
      caml_call3(Core_Uniform_array[22],t,offset + 13 | 0,a12);
      caml_call3(Core_Uniform_array[22],t,offset + 14 | 0,a13);
      return pointer}
    function get(t,p,slot)
     {var _bX_=slot_index(p,slot);
      return caml_call2(Core_Uniform_array[19],t,_bX_)}
    function unsafe_get(t,p,slot)
     {var _bW_=slot_index(p,slot);
      return caml_call2(Core_Uniform_array[20],t,_bW_)}
    function set(t,p,slot,x)
     {var _bV_=slot_index(p,slot);
      return caml_call3(Core_Uniform_array[21],t,_bV_,x)}
    function unsafe_set(t,p,slot,x)
     {var _bU_=slot_index(p,slot);
      return caml_call3(Core_Uniform_array[22],t,_bU_,x)}
    function get_tuple(t,pointer)
     {var metadata$0=metadata(t),len=metadata$0[1];
      if(caml_call2(Core[90],len,1))return get(t,pointer,Slot[3]);
      var _bT_=first_slot_index(pointer);
      return caml_call3(Core_Uniform_array[39],t,_bT_,len)}
    function create$1(slots,capacity)
     {return create_with_dummy(slots,capacity,0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_tuple_pool$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Tuple_pool$0);
    function _aV_(Pool)
     {var Slots=Pool[1],Slot=Pool[2];
      function sexp_of_t(of_slots_077,param)
       {var
         is_valid_079=param[1],
         pointer_081=param[2],
         arg_082=caml_call2(Pool[3][1],of_slots_077,pointer_081),
         bnds_078=[0,[1,[0,_aR_,[0,arg_082,0]]],0],
         arg_080=caml_call1(Core[305],is_valid_079),
         bnds_078$0=[0,[1,[0,_aS_,[0,arg_080,0]]],bnds_078];
        return [1,bnds_078$0]}
      var
       Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$1]),
       typename_of_t=Typename_of_t[2];
      function typerep_of_t(of_slots)
       {var name_of_t=caml_call1(Typename_of_t[1],of_slots);
        return [9,
                [0,
                 name_of_t,
                 [0,
                  [246,
                   function(_bL_)
                    {var _bM_=1;
                     function _bN_(t){return t[1]}
                     var
                      _bO_=caml_call2(Typerep_lib_Typename[1],0,0),
                      field0=
                       caml_call1
                        (Typerep_lib_Std[1][8][7],
                         [0,cst_is_valid,Core[308],0,_bO_,_bN_,_bM_]),
                      _bP_=0;
                     function _bQ_(t){return t[2]}
                     var
                      _bR_=caml_call2(Typerep_lib_Typename[1],0,0),
                      _bS_=
                       [0,
                        cst_pointer,
                        caml_call1(Pool[3][2],of_slots),
                        1,
                        _bR_,
                        _bQ_,
                        _bP_],
                      field1=caml_call1(Typerep_lib_Std[1][8][7],_bS_),
                      typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t),
                      has_double_array_tag=
                       caml_call1
                        (Typerep_lib_Typerep_obj[4],
                         [0,Typerep_lib_Typerep_obj[3],Typerep_lib_Typerep_obj[3]]),
                      fields=[0,[0,field0],[0,field1]];
                     function create(param)
                      {var
                        get=param[1],
                        is_valid=caml_call1(get,field0),
                        pointer=caml_call1(get,field1);
                       return [0,is_valid,pointer]}
                     return [7,
                             caml_call1
                              (Typerep_lib_Std[1][10][7],
                               [0,typename,fields,has_double_array_tag,create])]}]]]]}
      function create(pointer){return [0,1,pointer]}
      function null$0(param){return [0,0,caml_call1(Pool[3][4],0)]}
      function phys_compare(t1,t2){return caml_call2(Pool[3][6],t1[2],t2[2])}
      function phys_equal(t1,t2){return caml_call2(Pool[3][7],t1[2],t2[2])}
      function is_null(t){return caml_call1(Pool[3][5],t[2])}
      function follow(t)
       {if(1 - t[1])
         caml_call5
          (_d_,
           0,
           _aU_,
           cst_attempt_to_use_invalid_poi,
           t,
           function(x_083)
            {return sexp_of_t(function(param){return _aT_},x_083)});
        return t[2]}
      function invalidate(t){t[1] = 0;return 0}
      var Id=Pool[3][8],sexp_of_t$0=Pool[4],invariant=Pool[5],length=Pool[12];
      function pointer_is_valid(t,param)
       {var is_valid=param[1],pointer=param[2];
        return is_valid?caml_call2(Pool[6],t,pointer):is_valid}
      function id_of_pointer(t,pointer)
       {return caml_call2(Pool[7],t,pointer[2])}
      function pointer_of_id_exn(t,id)
       {var
         pointer=caml_call2(Pool[8],t,id),
         is_valid=caml_call2(Pool[6],t,pointer);
        return [0,is_valid,pointer]}
      var
       create$0=Pool[9],
       capacity=Pool[11],
       max_capacity=Pool[10],
       grow=Pool[13],
       is_full=Pool[14];
      function get_tuple(t,p)
       {var _bK_=follow(p);return caml_call2(Pool[31],t,_bK_)}
      function get(t,p){var _bJ_=follow(p);return caml_call2(Pool[32],t,_bJ_)}
      function unsafe_get(t,p)
       {var _bI_=follow(p);return caml_call2(Pool[33],t,_bI_)}
      function set(t,p,slot,v)
       {var _bH_=follow(p);return caml_call4(Pool[34],t,_bH_,slot,v)}
      function unsafe_set(t,p,slot,v)
       {var _bG_=follow(p);return caml_call4(Pool[35],t,_bG_,slot,v)}
      function unsafe_free(t,p)
       {var _bF_=follow(p);caml_call2(Pool[16],t,_bF_);return invalidate(p)}
      function free(t,p)
       {var _bE_=follow(p);caml_call2(Pool[15],t,_bE_);return invalidate(p)}
      function new1(t,a0){return create(caml_call2(Pool[17],t,a0))}
      function new2(t,a0,a1){return create(caml_call3(Pool[18],t,a0,a1))}
      function new3(t,a0,a1,a2)
       {return create(caml_call4(Pool[19],t,a0,a1,a2))}
      function new4(t,a0,a1,a2,a3)
       {return create(caml_call5(Pool[20],t,a0,a1,a2,a3))}
      function new5(t,a0,a1,a2,a3,a4)
       {return create(caml_call6(Pool[21],t,a0,a1,a2,a3,a4))}
      function new6(t,a0,a1,a2,a3,a4,a5)
       {return create(caml_call7(Pool[22],t,a0,a1,a2,a3,a4,a5))}
      function new7(t,a0,a1,a2,a3,a4,a5,a6)
       {return create(caml_call8(Pool[23],t,a0,a1,a2,a3,a4,a5,a6))}
      function new8(t,a0,a1,a2,a3,a4,a5,a6,a7)
       {return create(caml_call9(Pool[24],t,a0,a1,a2,a3,a4,a5,a6,a7))}
      function new9(t,a0,a1,a2,a3,a4,a5,a6,a7,a8)
       {return create(caml_call10(Pool[25],t,a0,a1,a2,a3,a4,a5,a6,a7,a8))}
      function new10(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
       {return create(caml_call11(Pool[26],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9))}
      function new11(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
       {return create
                (caml_call12(Pool[27],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10))}
      function new12(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
       {return create
                (caml_call13(Pool[28],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11))}
      function new13(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
       {return create
                (caml_call14
                  (Pool[29],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12))}
      function new14(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
       {return create
                (caml_call15
                  (Pool[30],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13))}
      return [0,
              Slots,
              Slot,
              [0,
               sexp_of_t,
               typerep_of_t,
               typename_of_t,
               null$0,
               is_null,
               phys_compare,
               phys_equal,
               Id],
              sexp_of_t$0,
              invariant,
              pointer_is_valid,
              id_of_pointer,
              pointer_of_id_exn,
              create$0,
              max_capacity,
              capacity,
              length,
              grow,
              is_full,
              free,
              unsafe_free,
              new1,
              new2,
              new3,
              new4,
              new5,
              new6,
              new7,
              new8,
              new9,
              new10,
              new11,
              new12,
              new13,
              new14,
              get_tuple,
              get,
              unsafe_get,
              set,
              unsafe_set]}
    var
     Tuple_pool$0=
      [0,
       _c_,
       Slot,
       [0,
        sexp_of_t$3,
        typerep_of_t,
        typename_of_t,
        null$0,
        is_null,
        _q_,
        phys_equal,
        _y_],
       sexp_of_t$5,
       invariant$1,
       pointer_is_valid,
       id_of_pointer,
       pointer_of_id_exn,
       create$0,
       max_capacity,
       capacity$1,
       length$1,
       grow,
       is_full,
       free,
       unsafe_free,
       new1,
       new2,
       new3,
       new4,
       new5,
       new6,
       new7,
       new8,
       new9,
       new10,
       new11,
       new12,
       new13,
       new14,
       get_tuple,
       get,
       unsafe_get,
       set,
       unsafe_set,
       [0,
        _c_,
        Slot,
        [0,
         sexp_of_t$3,
         typerep_of_t,
         typename_of_t,
         null$0,
         is_null,
         _q_,
         phys_equal,
         _y_],
        sexp_of_t$5,
        invariant$1,
        pointer_is_valid,
        id_of_pointer,
        pointer_of_id_exn,
        max_capacity,
        capacity$1,
        length$1,
        grow,
        is_full,
        free,
        unsafe_free,
        new1,
        new2,
        new3,
        new4,
        new5,
        new6,
        new7,
        new8,
        new9,
        new10,
        new11,
        new12,
        new13,
        new14,
        get_tuple,
        get,
        unsafe_get,
        set,
        unsafe_set,
        create$1],
       function(Pool)
        {var check_invariant=[0,1],show_messages=[0,1];
         function debug(name,ts,arg,sexp_of_arg,sexp_of_result,f)
          {if(check_invariant[1])
            {var _by_=function(_bD_){return 0},_bz_=caml_call1(Pool[5],_by_);
             caml_call2(Core_List[9],ts,_bz_)}
           if(show_messages[1])
            {var _bA_=concat([0,prefix,[0,name,0]]);
             caml_call3(Core_Debug[2],_bA_,arg,sexp_of_arg)}
           var result_or_exn=caml_call1(Core_Result[47],f);
           if(show_messages[1])
            {var
              _bB_=
               function(x_048)
                {return caml_call3
                         (Core_Result[10],sexp_of_result,Core[537],x_048)},
              _bC_=concat([0,prefix,[0,name,_av_]]);
             caml_call3(Core_Debug[2],_bC_,result_or_exn,_bB_)}
           return caml_call1(Core_Result[32],result_or_exn)}
         var
          Slots=Pool[1],
          Slot=Pool[2],
          sexp_of_t=Pool[3][1],
          Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$0]),
          typename_of_t=Typename_of_t[2];
         function typerep_of_t(of_slots)
          {var name_of_t=caml_call1(Typename_of_t[1],of_slots);
           return [9,
                   [0,
                    name_of_t,
                    [0,
                     [246,function(_bx_){return caml_call1(Pool[3][2],of_slots)}]]]]}
         function phys_compare(t1,t2)
          {function _bv_(param){return caml_call2(Pool[3][6],t1,t2)}
           var _bw_=Core[356];
           return debug
                   (cst_Pointer_phys_compare,
                    0,
                    [0,t1,t2],
                    function(param)
                     {var
                       arg1_052=param[2],
                       arg0_051=param[1],
                       res0_053=
                        caml_call2(sexp_of_t,function(param){return _aw_},arg0_051),
                       res1_054=
                        caml_call2(sexp_of_t,function(param){return _ax_},arg1_052);
                      return [1,[0,res0_053,[0,res1_054,0]]]},
                    _bw_,
                    _bv_)}
         function phys_equal(t1,t2)
          {function _bt_(param){return caml_call2(Pool[3][7],t1,t2)}
           var _bu_=Core[305];
           return debug
                   (cst_Pointer_phys_equal,
                    0,
                    [0,t1,t2],
                    function(param)
                     {var
                       arg1_056=param[2],
                       arg0_055=param[1],
                       res0_057=
                        caml_call2(sexp_of_t,function(param){return _ay_},arg0_055),
                       res1_058=
                        caml_call2(sexp_of_t,function(param){return _az_},arg1_056);
                      return [1,[0,res0_057,[0,res1_058,0]]]},
                    _bu_,
                    _bt_)}
         function is_null(t)
          {function _br_(param){return caml_call1(Pool[3][5],t)}
           var _bs_=Core[305];
           return debug
                   (cst_Pointer_is_null,
                    0,
                    t,
                    function(x_059)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aA_},x_059)},
                    _bs_,
                    _br_)}
         var
          _aY_=Pool[3][4],
          _aZ_=Pool[3][8][5],
          _a0_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t),0,_aZ_],0],
          _a1_=
           caml_call1(Bin_prot_Shape[4][1],cst_tuple_pool_src_tuple_pool_$10),
          group=caml_call2(Bin_prot_Shape[6],_a1_,_a0_),
          _a2_=caml_call1(Bin_prot_Shape[2][1],cst_t$0),
          bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_a2_),0),
          bin_size_t=Pool[3][8][1],
          bin_write_t=Pool[3][8][2],
          bin_writer_t=[0,bin_size_t,bin_write_t],
          bin_read_t=Pool[3][8][4],
          bin_read_t$0=Pool[3][8][3],
          bin_reader_t=[0,bin_read_t$0,bin_read_t],
          bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
          t_of_sexp=Pool[3][8][9],
          sexp_of_t$0=Pool[3][8][10];
         function of_int63(i)
          {function _bq_(param){return caml_call1(Pool[3][8][12],i)}
           return debug
                   (cst_Pointer_Id_of_int63,
                    0,
                    i,
                    Core_Int63[99],
                    sexp_of_t$0,
                    _bq_)}
         function to_int63(t)
          {function _bp_(param){return caml_call1(Pool[3][8][11],t)}
           return debug
                   (cst_Pointer_Id_to_int63,
                    0,
                    t,
                    sexp_of_t$0,
                    Core_Int63[99],
                    _bp_)}
         var sexp_of_t$1=Pool[4],invariant=Pool[5],length=Pool[12];
         function id_of_pointer(t,pointer)
          {function _bo_(param){return caml_call2(Pool[7],t,pointer)}
           return debug
                   (cst_id_of_pointer,
                    [0,t,0],
                    pointer,
                    function(x_063)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aB_},x_063)},
                    sexp_of_t$0,
                    _bo_)}
         function pointer_of_id_exn(t,id)
          {function _bn_(param){return caml_call2(Pool[8],t,id)}
           return debug
                   (cst_pointer_of_id_exn,
                    [0,t,0],
                    id,
                    sexp_of_t$0,
                    function(x_064)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aC_},x_064)},
                    _bn_)}
         function pointer_is_valid(t,pointer)
          {function _bl_(param){return caml_call2(Pool[6],t,pointer)}
           var _bm_=Core[305];
           return debug
                   (cst_pointer_is_valid,
                    [0,t,0],
                    pointer,
                    function(x_065)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aD_},x_065)},
                    _bm_,
                    _bl_)}
         function create(slots,capacity,dummy)
          {function _bj_(param)
            {return caml_call3(Pool[9],slots,capacity,dummy)}
           function _bk_(x_066)
            {return caml_call2(sexp_of_t$1,function(param){return _aE_},x_066)}
           return debug(cst_create,0,capacity,Core[356],_bk_,_bj_)}
         function max_capacity(slots_per_tuple)
          {function _bi_(param){return caml_call1(Pool[10],slots_per_tuple)}
           return debug
                   (cst_max_capacity,
                    0,
                    slots_per_tuple,
                    Core[356],
                    Core[356],
                    _bi_)}
         function capacity(t)
          {function _bg_(param){return caml_call1(Pool[11],t)}
           var _bh_=Core[356];
           return debug
                   (cst_capacity$0,
                    [0,t,0],
                    t,
                    function(x_067)
                     {return caml_call2
                              (sexp_of_t$1,function(param){return _aF_},x_067)},
                    _bh_,
                    _bg_)}
         function grow(capacity,t)
          {function _be_(param){return caml_call2(Pool[13],capacity,t)}
           function _bf_(x_069)
            {return caml_call2(sexp_of_t$1,function(param){return _aG_},x_069)}
           return debug
                   (cst_grow,
                    [0,t,0],
                    [0,-1011154630,capacity],
                    function(param)
                     {var v_068=param[2];
                      return [1,
                              [0,_aH_,[0,caml_call2(Core[454],Core[356],v_068),0]]]},
                    _bf_,
                    _be_)}
         function is_full(t)
          {function _bc_(param){return caml_call1(Pool[14],t)}
           var _bd_=Core[305];
           return debug
                   (cst_is_full,
                    [0,t,0],
                    t,
                    function(x_070)
                     {return caml_call2
                              (sexp_of_t$1,function(param){return _aI_},x_070)},
                    _bd_,
                    _bc_)}
         function unsafe_free(t,p)
          {function _ba_(param){return caml_call2(Pool[16],t,p)}
           var _bb_=Core[518];
           return debug
                   (cst_unsafe_free,
                    [0,t,0],
                    p,
                    function(x_071)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aJ_},x_071)},
                    _bb_,
                    _ba_)}
         function free(t,p)
          {function _a__(param){return caml_call2(Pool[15],t,p)}
           var _a$_=Core[518];
           return debug
                   (cst_free,
                    [0,t,0],
                    p,
                    function(x_072)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aK_},x_072)},
                    _a$_,
                    _a__)}
         function debug_new(t,f)
          {function _a9_(x_073)
            {return caml_call2(sexp_of_t,function(param){return _aL_},x_073)}
           return debug(cst_new,[0,t,0],0,Core[518],_a9_,f)}
         function new1(t,a0)
          {return debug_new
                   (t,function(param){return caml_call2(Pool[17],t,a0)})}
         function new2(t,a0,a1)
          {return debug_new
                   (t,function(param){return caml_call3(Pool[18],t,a0,a1)})}
         function new3(t,a0,a1,a2)
          {return debug_new
                   (t,function(param){return caml_call4(Pool[19],t,a0,a1,a2)})}
         function new4(t,a0,a1,a2,a3)
          {return debug_new
                   (t,
                    function(param){return caml_call5(Pool[20],t,a0,a1,a2,a3)})}
         function new5(t,a0,a1,a2,a3,a4)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call6(Pool[21],t,a0,a1,a2,a3,a4)})}
         function new6(t,a0,a1,a2,a3,a4,a5)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call7(Pool[22],t,a0,a1,a2,a3,a4,a5)})}
         function new7(t,a0,a1,a2,a3,a4,a5,a6)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call8(Pool[23],t,a0,a1,a2,a3,a4,a5,a6)})}
         function new8(t,a0,a1,a2,a3,a4,a5,a6,a7)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call9(Pool[24],t,a0,a1,a2,a3,a4,a5,a6,a7)})}
         function new9(t,a0,a1,a2,a3,a4,a5,a6,a7,a8)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call10(Pool[25],t,a0,a1,a2,a3,a4,a5,a6,a7,a8)})}
         function new10(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call11
                              (Pool[26],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)})}
         function new11(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call12
                              (Pool[27],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)})}
         function new12(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call13
                              (Pool[28],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)})}
         function new13(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call14
                              (Pool[29],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)})}
         function new14(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call15
                              (Pool[30],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)})}
         function get_tuple(t,pointer)
          {function _a7_(param){return caml_call2(Pool[31],t,pointer)}
           function _a8_(param){return _aM_}
           return debug
                   (cst_get_tuple,
                    [0,t,0],
                    pointer,
                    function(x_074)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aN_},x_074)},
                    _a8_,
                    _a7_)}
         function debug_get(name,f,t,pointer)
          {function _a5_(param){return caml_call2(f,t,pointer)}
           function _a6_(param){return _aO_}
           return debug
                   (name,
                    [0,t,0],
                    pointer,
                    function(x_075)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aP_},x_075)},
                    _a6_,
                    _a5_)}
         function get(t,pointer,slot)
          {return caml_call1(debug_get(cst_get,Pool[32],t,pointer),slot)}
         function unsafe_get(t,pointer,slot)
          {return caml_call1
                   (debug_get(cst_unsafe_get,Pool[33],t,pointer),slot)}
         function debug_set(name,f,t,pointer,slot,a)
          {function _a3_(param){return caml_call4(f,t,pointer,slot,a)}
           var _a4_=Core[518];
           return debug
                   (name,
                    [0,t,0],
                    pointer,
                    function(x_076)
                     {return caml_call2
                              (sexp_of_t,function(param){return _aQ_},x_076)},
                    _a4_,
                    _a3_)}
         function set(t,pointer,slot,a)
          {return debug_set(cst_set,Pool[34],t,pointer,slot,a)}
         function unsafe_set(t,pointer,slot,a)
          {return debug_set(cst_unsafe_set,Pool[35],t,pointer,slot,a)}
         return [0,
                 Slots,
                 Slot,
                 [0,
                  sexp_of_t,
                  typerep_of_t,
                  typename_of_t,
                  _aY_,
                  is_null,
                  phys_compare,
                  phys_equal,
                  [0,
                   bin_size_t,
                   bin_write_t,
                   bin_read_t$0,
                   bin_read_t,
                   bin_shape_t,
                   bin_writer_t,
                   bin_reader_t,
                   bin_t,
                   t_of_sexp,
                   sexp_of_t$0,
                   to_int63,
                   of_int63]],
                 sexp_of_t$1,
                 invariant,
                 pointer_is_valid,
                 id_of_pointer,
                 pointer_of_id_exn,
                 create,
                 max_capacity,
                 capacity,
                 length,
                 grow,
                 is_full,
                 free,
                 unsafe_free,
                 new1,
                 new2,
                 new3,
                 new4,
                 new5,
                 new6,
                 new7,
                 new8,
                 new9,
                 new10,
                 new11,
                 new12,
                 new13,
                 new14,
                 get_tuple,
                 get,
                 unsafe_get,
                 set,
                 unsafe_set,
                 check_invariant,
                 show_messages]},
       _aV_];
    caml_register_global(226,Tuple_pool$0,"Tuple_pool");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
