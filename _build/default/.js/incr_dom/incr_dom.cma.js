// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_register_global=runtime.caml_register_global,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Incr_dom_Component=caml_string_of_jsbytes("Incr_dom__Component"),
     cst_incr_dom=caml_string_of_jsbytes("incr_dom"),
     cst_src_component_ml=caml_string_of_jsbytes("src/component.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_incr_dom$0=caml_string_of_jsbytes("incr_dom"),
     cst_incr_dom$1=caml_string_of_jsbytes("incr_dom"),
     cst_Incr_dom_Component$0=caml_string_of_jsbytes("Incr_dom__Component"),
     cst_Incr_dom_Incr=caml_string_of_jsbytes("Incr_dom__Incr"),
     cst_incr_dom$2=caml_string_of_jsbytes("incr_dom"),
     cst_src_incr_ml=caml_string_of_jsbytes("src/incr.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_incr_dom$3=caml_string_of_jsbytes("incr_dom"),
     cst_incr_dom$4=caml_string_of_jsbytes("incr_dom"),
     cst_Incr_dom_Incr$0=caml_string_of_jsbytes("Incr_dom__Incr"),
     cst_Incr_dom_App_intf=caml_string_of_jsbytes("Incr_dom__App_intf"),
     cst_incr_dom$5=caml_string_of_jsbytes("incr_dom"),
     cst_src_app_intf_ml=caml_string_of_jsbytes("src/app_intf.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_incr_dom$6=caml_string_of_jsbytes("incr_dom"),
     cst_incr_dom$7=caml_string_of_jsbytes("incr_dom"),
     cst_Incr_dom_App_intf$0=caml_string_of_jsbytes("Incr_dom__App_intf"),
     cst_keep_in_view=caml_string_of_jsbytes("keep-in-view"),
     cst_Columns$2=caml_string_of_jsbytes("Columns"),
     cst_Rows$2=caml_string_of_jsbytes("Rows"),
     cst_src_js_misc_ml_rows_or_col=
      caml_string_of_jsbytes("src/js_misc.ml.rows_or_columns"),
     cst_Columns=caml_string_of_jsbytes("Columns"),
     cst_Rows=caml_string_of_jsbytes("Rows"),
     cst_columns=caml_string_of_jsbytes("columns"),
     cst_rows=caml_string_of_jsbytes("rows"),
     cst_Columns$0=caml_string_of_jsbytes("Columns"),
     cst_Rows$0=caml_string_of_jsbytes("Rows"),
     cst_columns$0=caml_string_of_jsbytes("columns"),
     cst_rows$0=caml_string_of_jsbytes("rows"),
     cst_src_js_misc_ml_Rect_t=caml_string_of_jsbytes("src/js_misc.ml.Rect.t"),
     cst_t$0=caml_string_of_jsbytes("t"),
     cst_bottom=caml_string_of_jsbytes("bottom"),
     cst_left=caml_string_of_jsbytes("left"),
     cst_right=caml_string_of_jsbytes("right"),
     cst_top=caml_string_of_jsbytes("top"),
     cst_right$0=caml_string_of_jsbytes("right"),
     cst_bottom$0=caml_string_of_jsbytes("bottom"),
     cst_left$0=caml_string_of_jsbytes("left"),
     cst_top$0=caml_string_of_jsbytes("top"),
     cst_Incr_dom_Js_misc=caml_string_of_jsbytes("Incr_dom__Js_misc"),
     cst_incr_dom$8=caml_string_of_jsbytes("incr_dom"),
     cst_src_js_misc_ml=caml_string_of_jsbytes("src/js_misc.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_incr_dom$9=caml_string_of_jsbytes("incr_dom"),
     error_source_022=caml_string_of_jsbytes("src/js_misc.ml.Rect.t"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_src_js_misc_ml_9_14=caml_string_of_jsbytes("src/js_misc.ml:9:14"),
     cst_right$1=caml_string_of_jsbytes("right"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_src_js_misc_ml_8_15=caml_string_of_jsbytes("src/js_misc.ml:8:15"),
     cst_bottom$1=caml_string_of_jsbytes("bottom"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_src_js_misc_ml_7_13=caml_string_of_jsbytes("src/js_misc.ml:7:13"),
     cst_left$1=caml_string_of_jsbytes("left"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_src_js_misc_ml_6_12=caml_string_of_jsbytes("src/js_misc.ml:6:12"),
     cst_top$1=caml_string_of_jsbytes("top"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_src_js_misc_ml_5_2=caml_string_of_jsbytes("src/js_misc.ml:5:2"),
     names=
      [0,
       caml_string_of_jsbytes("top"),
       [0,
        caml_string_of_jsbytes("left"),
        [0,
         caml_string_of_jsbytes("bottom"),
         [0,caml_string_of_jsbytes("right"),0]]]],
     cst_right$2=caml_string_of_jsbytes("right"),
     cst_bottom$2=caml_string_of_jsbytes("bottom"),
     cst_left$2=caml_string_of_jsbytes("left"),
     cst_top$2=caml_string_of_jsbytes("top"),
     error_source_040=caml_string_of_jsbytes("src/js_misc.ml.rows_or_columns"),
     cst_rows_or_columns=caml_string_of_jsbytes("rows_or_columns"),
     cst_src_js_misc_ml_25_0=caml_string_of_jsbytes("src/js_misc.ml:25:0"),
     cst_rows_or_columns$0=caml_string_of_jsbytes("rows_or_columns"),
     cst_Rows$1=caml_string_of_jsbytes("Rows"),
     cst_Columns$1=caml_string_of_jsbytes("Columns"),
     descriptions=
      [0,
       [0,caml_string_of_jsbytes("Rows"),0],
       [0,[0,caml_string_of_jsbytes("Columns"),0],0]],
     cst_incr_dom$10=caml_string_of_jsbytes("incr_dom"),
     cst_Incr_dom_Js_misc$0=caml_string_of_jsbytes("Incr_dom__Js_misc"),
     cst_stabilize$1=caml_string_of_jsbytes("stabilize"),
     cst_stabilize$2=caml_string_of_jsbytes("stabilize"),
     cst_total=caml_string_of_jsbytes("total"),
     cst_update_visibility=caml_string_of_jsbytes("update visibility"),
     cst_update_visibility$0=caml_string_of_jsbytes("update visibility"),
     cst_apply_actions=caml_string_of_jsbytes("apply actions"),
     cst_apply_actions$0=caml_string_of_jsbytes("apply actions"),
     cst_stabilize$3=caml_string_of_jsbytes("stabilize"),
     cst_stabilize$4=caml_string_of_jsbytes("stabilize"),
     cst_diff=caml_string_of_jsbytes("diff"),
     cst_diff$0=caml_string_of_jsbytes("diff"),
     cst_patch=caml_string_of_jsbytes("patch"),
     cst_patch$0=caml_string_of_jsbytes("patch"),
     cst_on_display=caml_string_of_jsbytes("on_display"),
     cst_on_display$0=caml_string_of_jsbytes("on_display"),
     cst_total$0=caml_string_of_jsbytes("total"),
     cst_stabilize_for_action=caml_string_of_jsbytes("stabilize-for-action"),
     cst_stabilize_for_action$0=caml_string_of_jsbytes("stabilize-for-action"),
     cst_custom_filter=caml_string_of_jsbytes("custom filter"),
     cst_Action=caml_string_of_jsbytes("Action"),
     cst_named_filter_blang_sexp_st=
      caml_string_of_jsbytes('named filter blang "%{sexp:string Blang.t}"'),
     cst_named_filter_blang=caml_string_of_jsbytes('named filter blang "'),
     cst_Exception_raised_by_s_Erro=
      caml_string_of_jsbytes("Exception raised by %s: %{Error#hum}"),
     cst$7=caml_string_of_jsbytes(": "),
     cst_Exception_raised_by=caml_string_of_jsbytes("Exception raised by "),
     cst_stabilize=caml_string_of_jsbytes("stabilize"),
     cst_stabilize$0=caml_string_of_jsbytes("stabilize"),
     cst_none=caml_string_of_jsbytes("none"),
     cst_all=caml_string_of_jsbytes("all"),
     cst_scroll=caml_string_of_jsbytes("scroll"),
     cst_resize=caml_string_of_jsbytes("resize"),
     cst_disable_tab_index=caml_string_of_jsbytes("disable_tab_index"),
     filename=caml_string_of_jsbytes("current_incr_dom_dot_graph.dot"),
     cst_plain_text=caml_string_of_jsbytes("plain/text"),
     cst$6=caml_string_of_jsbytes("  "),
     cst$4=caml_string_of_jsbytes('"'),
     cst$5=caml_string_of_jsbytes('"'),
     cst_request_ids_already_set=
      caml_string_of_jsbytes("request_ids already set"),
     cst_before$0=caml_string_of_jsbytes("before"),
     cst_after=caml_string_of_jsbytes("after"),
     cst_before=caml_string_of_jsbytes("before"),
     cst_Incr_dom_Start_app=caml_string_of_jsbytes("Incr_dom__Start_app"),
     cst_incr_dom$11=caml_string_of_jsbytes("incr_dom"),
     cst_src_start_app_ml=caml_string_of_jsbytes("src/start_app.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_incr_dom$12=caml_string_of_jsbytes("incr_dom"),
     cst_incr_dom$13=caml_string_of_jsbytes("incr_dom"),
     cst_Incr_dom_Start_app$0=caml_string_of_jsbytes("Incr_dom__Start_app"),
     cst_Incr_dom=caml_string_of_jsbytes("Incr_dom"),
     cst_incr_dom$14=caml_string_of_jsbytes("incr_dom"),
     cst_src_incr_dom_ml=caml_string_of_jsbytes("src/incr_dom.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_incr_dom$15=caml_string_of_jsbytes("incr_dom"),
     cst_incr_dom$16=caml_string_of_jsbytes("incr_dom"),
     cst_Incr_dom$0=caml_string_of_jsbytes("Incr_dom"),
     Core_Option=global_data.Core__Option,
     Base_Field=global_data.Base__Field,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     include=global_data.Ui_incr,
     Core=global_data.Core,
     Core_Float=global_data.Core__Float,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     Base_Binary_searchable=global_data.Base__Binary_searchable,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     Bin_prot_Read=global_data.Bin_prot__Read,
     Bin_prot_Common=global_data.Bin_prot__Common,
     Bin_prot_Write=global_data.Bin_prot__Write,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Assert_failure=global_data.Assert_failure,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Async_kernel_Deferred=global_data.Async_kernel__Deferred,
     Ui_effect=global_data.Ui_effect,
     Core_Deque=global_data.Core__Deque,
     Core_Time_ns=global_data.Core__Time_ns,
     Virtual_dom_Node=global_data.Virtual_dom__Node,
     Core_String=global_data.Core__String,
     Js_of_ocaml_Firebug=global_data.Js_of_ocaml__Firebug,
     Async_js=global_data.Async_js,
     Core_Blang=global_data.Core__Blang,
     Ppx_sexp_conv_lib=global_data.Ppx_sexp_conv_lib,
     Core_Hashtbl=global_data.Core__Hashtbl,
     Core_Error=global_data.Core__Error,
     Core_Or_error=global_data.Core__Or_error;
    global_data.CamlinternalOO;
    var
     Js_of_ocaml_Dom=global_data.Js_of_ocaml__Dom,
     Core_Memo=global_data.Core__Memo,
     Virtual_dom_Effect=global_data.Virtual_dom__Effect,
     Core_Fn=global_data.Core__Fn,
     Async_kernel=global_data.Async_kernel,
     Virtual_dom_Vdom=global_data.Virtual_dom__Vdom,
     Css_gen=global_data.Css_gen,
     Core_Set=global_data.Core__Set,
     Stdio_In_channel=global_data.Stdio__In_channel,
     Vdom_file_download=global_data.Vdom_file_download,
     Core_Sexp=global_data.Core__Sexp,
     Core_List=global_data.Core__List,
     Async_kernel_Ivar=global_data.Async_kernel__Ivar,
     Async_kernel_Async_kernel_sche=
      global_data.Async_kernel__Async_kernel_scheduler,
     Javascript_profiling=global_data.Javascript_profiling,
     Core_Comparable=global_data.Core__Comparable,
     include$1=global_data.Virtual_dom,
     Incr_dom=[0];
    caml_register_global(218,Incr_dom,"Incr_dom__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incr_dom_Component);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incr_dom);
    caml_call1(Expect_test_collector[5][1],cst_src_component_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incr_dom$0,cst);
    var
     _be_=
      [0,
       [11,
        caml_string_of_jsbytes("Element "),
        [2,0,[11,caml_string_of_jsbytes(" not found"),0]]],
       caml_string_of_jsbytes("Element %s not found")],
     _bd_=[0,0],
     _bc_=[0,0],
     _bb_=[1,caml_string_of_jsbytes("src/js_misc.ml.rows_or_columns")],
     _a6_=[0,caml_string_of_jsbytes("Columns")],
     _a7_=[0,caml_string_of_jsbytes("Rows")],
     _aE_=[0,caml_string_of_jsbytes("right")],
     _aF_=[0,caml_string_of_jsbytes("bottom")],
     _aG_=[0,caml_string_of_jsbytes("left")],
     _aH_=[0,caml_string_of_jsbytes("top")],
     _aD_=[0,caml_string_of_jsbytes("src/js_misc.ml"),5,2],
     _a8_=
      [0,
       [0,caml_string_of_jsbytes("Rows"),0],
       [0,[0,caml_string_of_jsbytes("Columns"),0],0]],
     _bp_=[0,caml_string_of_jsbytes("action")],
     _bn_=[12,34,0],
     _bo_=[0,0],
     _bm_=[0,0],
     _bl_=[0,[0,caml_string_of_jsbytes("src/start_app.ml"),461,16912,16953]],
     _bk_=
      [0,
       [11,
        caml_string_of_jsbytes('Available logging filters for "'),
        [2,0,[11,caml_string_of_jsbytes('":\n'),[2,0,0]]]],
       caml_string_of_jsbytes('Available logging filters for "%s":\n%s')],
     _bj_=
      [0,
       [11,
        caml_string_of_jsbytes("Unable to find named filter(s): "),
        [2,0,[11,caml_string_of_jsbytes(". Valid names are:\n"),[2,0,0]]]],
       caml_string_of_jsbytes
        ("Unable to find named filter(s): %s. Valid names are:\n%s")],
     _bi_=
      [0,
       [11,
        caml_string_of_jsbytes('Unable to find app with id "'),
        [2,0,[11,caml_string_of_jsbytes('". Valid app ids are: '),[2,0,0]]]],
       caml_string_of_jsbytes
        ('Unable to find app with id "%s". Valid app ids are: %s')],
     _bh_=[0,caml_string_of_jsbytes("\n")],
     _bg_=[0,caml_string_of_jsbytes(", ")];
    function extra(r){return r[5]}
    function on_display(r){return r[4]}
    function view(r){return r[3]}
    function update_visibility(r){return r[2]}
    function apply_action(r){return r[1]}
    function create_with_extra
     (apply_action,update_visibility,on_display,extra,model,view)
     {function _ee_(param,_ej_,_ei_){return model}
      var apply_action$0=caml_call2(Core_Option[34],apply_action,_ee_);
      function _ef_(param){return model}
      var
       update_visibility$0=
        caml_call2(Core_Option[34],update_visibility,_ef_);
      function _eg_(param,_eh_){return 0}
      var on_display$0=caml_call2(Core_Option[34],on_display,_eg_);
      return [0,apply_action$0,update_visibility$0,view,on_display$0,extra]}
    function create(_ea_,_d$_,_d__)
     {var _eb_=0;
      return function(_ec_,_ed_)
       {return create_with_extra(_ea_,_d$_,_d__,_eb_,_ec_,_ed_)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incr_dom$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incr_dom_Component$0);
    var
     Incr_dom_Component=
      [0,
       apply_action,
       update_visibility,
       view,
       extra,
       on_display,
       create,
       create_with_extra];
    caml_register_global(225,Incr_dom_Component,"Incr_dom__Component");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incr_dom_Incr);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incr_dom$2);
    caml_call1(Expect_test_collector[5][1],cst_src_incr_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incr_dom$3,cst$0);
    var
     _b_=include[2],
     ___=include[53],
     _$_=include[54],
     _aa_=include[55],
     _ad_=include[58],
     _af_=include[60],
     _ag_=include[61],
     _ax_=include[78],
     _az_=include[80],
     _a_=include[1],
     _c_=include[3],
     _d_=include[4],
     _e_=include[5],
     _f_=include[6],
     _g_=include[7],
     _h_=include[8],
     _i_=include[9],
     _j_=include[10],
     _k_=include[11],
     _l_=include[12],
     _m_=include[13],
     _n_=include[14],
     _o_=include[15],
     _p_=include[16],
     _q_=include[17],
     _r_=include[18],
     _s_=include[19],
     _t_=include[20],
     _u_=include[21],
     _v_=include[22],
     _w_=include[23],
     _x_=include[24],
     _y_=include[25],
     _z_=include[26],
     _A_=include[27],
     _B_=include[28],
     _C_=include[29],
     _D_=include[30],
     _E_=include[31],
     _F_=include[32],
     _G_=include[33],
     _H_=include[34],
     _I_=include[35],
     _J_=include[36],
     _K_=include[37],
     _L_=include[38],
     _M_=include[39],
     _N_=include[40],
     _O_=include[41],
     _P_=include[42],
     _Q_=include[43],
     _R_=include[44],
     _S_=include[45],
     _T_=include[46],
     _U_=include[47],
     _V_=include[48],
     _W_=include[49],
     _X_=include[50],
     _Y_=include[51],
     _Z_=include[52],
     _ab_=include[56],
     _ac_=include[57],
     _ae_=include[59],
     _ah_=include[62],
     _ai_=include[63],
     _aj_=include[64],
     _ak_=include[65],
     _al_=include[66],
     _am_=include[67],
     _an_=include[68],
     _ao_=include[69],
     _ap_=include[70],
     _aq_=include[71],
     _ar_=include[72],
     _as_=include[73],
     _at_=include[74],
     _au_=include[75],
     _av_=include[76],
     _aw_=include[77],
     _ay_=include[79],
     _aA_=include[81],
     _aB_=include[82],
     _aC_=include[83];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incr_dom$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incr_dom_Incr$0);
    var
     Incr_dom_Incr=
      [0,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_];
    caml_register_global(227,Incr_dom_Incr,"Incr_dom__Incr");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incr_dom_App_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incr_dom$5);
    caml_call1(Expect_test_collector[5][1],cst_src_app_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incr_dom$6,cst$1);
    var Private=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incr_dom$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incr_dom_App_intf$0);
    var Incr_dom_App_intf=[0,Private];
    caml_register_global(228,Incr_dom_App_intf,"Incr_dom__App_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incr_dom_Js_misc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incr_dom$8);
    caml_call1(Expect_test_collector[5][1],cst_src_js_misc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incr_dom$9,cst$2);
    function t_of_sexp(of_a_001,sexp_003)
     {if(0 === sexp_003[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_022,sexp_003);
      var
       field_sexps_004=sexp_003[1],
       top_005=[0,0],
       left_007=[0,0],
       bottom_009=[0,0],
       right_011=[0,0],
       duplicates_013=[0,0],
       extra_014=[0,0],
       param=field_sexps_004;
      for(;;)
       {if(param)
         {var _d0_=param[1];
          if(1 === _d0_[0])
           {var _d1_=_d0_[1];
            if(_d1_)
             {var _d2_=_d1_[1];
              if(0 === _d2_[0])
               {var _d3_=_d1_[2],_d4_=_d2_[1],switch$0=0;
                if(! _d3_ || ! _d3_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_024=param[2],
                   field_sexp_016$4=
                    function(_d9_)
                     {function field_sexp_016(param)
                       {if(! _d9_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_022,sexp_003);
                        if(_d9_[2])throw [0,Assert_failure,_aD_];
                        var x_025=_d9_[1];
                        return x_025}
                      return field_sexp_016},
                   field_sexp_016=field_sexp_016$4(_d3_);
                  if(caml_string_notequal(_d4_,cst_bottom))
                   if(caml_string_notequal(_d4_,cst_left))
                    if(caml_string_notequal(_d4_,cst_right))
                     if(caml_string_notequal(_d4_,cst_top))
                      {if(Sexplib0_Sexp_conv[26][1])
                        extra_014[1] = [0,_d4_,extra_014[1]]}
                     else
                      if(top_005[1])
                       duplicates_013[1] = [0,_d4_,duplicates_013[1]];
                      else
                       {var
                         field_sexp_016$0=field_sexp_016(0),
                         fvalue_021=caml_call1(of_a_001,field_sexp_016$0);
                        top_005[1] = [0,fvalue_021]}
                    else
                     if(right_011[1])
                      duplicates_013[1] = [0,_d4_,duplicates_013[1]];
                     else
                      {var
                        field_sexp_016$1=field_sexp_016(0),
                        fvalue_018=caml_call1(of_a_001,field_sexp_016$1);
                       right_011[1] = [0,fvalue_018]}
                   else
                    if(left_007[1])
                     duplicates_013[1] = [0,_d4_,duplicates_013[1]];
                    else
                     {var
                       field_sexp_016$2=field_sexp_016(0),
                       fvalue_020=caml_call1(of_a_001,field_sexp_016$2);
                      left_007[1] = [0,fvalue_020]}
                  else
                   if(bottom_009[1])
                    duplicates_013[1] = [0,_d4_,duplicates_013[1]];
                   else
                    {var
                      field_sexp_016$3=field_sexp_016(0),
                      fvalue_019=caml_call1(of_a_001,field_sexp_016$3);
                     bottom_009[1] = [0,fvalue_019]}
                  var param=tail_024;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_022,_d0_)}
        if(duplicates_013[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_022,
                  duplicates_013[1],
                  sexp_003);
        if(extra_014[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_022,
                  extra_014[1],
                  sexp_003);
        var
         _d5_=top_005[1],
         _d6_=left_007[1],
         _d7_=bottom_009[1],
         _d8_=right_011[1];
        if(_d5_ && _d6_ && _d7_ && _d8_)
         {var
           right_012=_d8_[1],
           bottom_010=_d7_[1],
           left_008=_d6_[1],
           top_006=_d5_[1];
          return [0,top_006,left_008,bottom_010,right_012]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_022,
                 sexp_003,
                 [0,
                  [0,0 === top_005[1]?1:0,cst_top$0],
                  [0,
                   [0,0 === left_007[1]?1:0,cst_left$0],
                   [0,
                    [0,0 === bottom_009[1]?1:0,cst_bottom$0],
                    [0,[0,0 === right_011[1]?1:0,cst_right$0],0]]]])}}
    function sexp_of_t(of_a_026,param)
     {var
       right_034=param[4],
       bottom_032=param[3],
       left_030=param[2],
       top_028=param[1],
       arg_035=caml_call1(of_a_026,right_034),
       bnds_027=[0,[1,[0,_aE_,[0,arg_035,0]]],0],
       arg_033=caml_call1(of_a_026,bottom_032),
       bnds_027$0=[0,[1,[0,_aF_,[0,arg_033,0]]],bnds_027],
       arg_031=caml_call1(of_a_026,left_030),
       bnds_027$1=[0,[1,[0,_aG_,[0,arg_031,0]]],bnds_027$0],
       arg_029=caml_call1(of_a_026,top_028),
       bnds_027$2=[0,[1,[0,_aH_,[0,arg_029,0]]],bnds_027$1];
      return [1,bnds_027$2]}
    var
     _aI_=caml_call1(Bin_prot_Shape[3][1],cst_a),
     _aJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_js_misc_ml_9_14),
     _aK_=[0,[0,cst_right$1,caml_call2(Bin_prot_Shape[15],_aJ_,_aI_)],0],
     _aL_=caml_call1(Bin_prot_Shape[3][1],cst_a$0),
     _aM_=caml_call1(Bin_prot_Shape[4][1],cst_src_js_misc_ml_8_15),
     _aN_=[0,[0,cst_bottom$1,caml_call2(Bin_prot_Shape[15],_aM_,_aL_)],_aK_],
     _aO_=caml_call1(Bin_prot_Shape[3][1],cst_a$1),
     _aP_=caml_call1(Bin_prot_Shape[4][1],cst_src_js_misc_ml_7_13),
     _aQ_=[0,[0,cst_left$1,caml_call2(Bin_prot_Shape[15],_aP_,_aO_)],_aN_],
     _aR_=caml_call1(Bin_prot_Shape[3][1],cst_a$2),
     _aS_=caml_call1(Bin_prot_Shape[4][1],cst_src_js_misc_ml_6_12),
     _aT_=[0,[0,cst_top$1,caml_call2(Bin_prot_Shape[15],_aS_,_aR_)],_aQ_],
     _aU_=caml_call1(Bin_prot_Shape[8],_aT_),
     _aV_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$3),0],
     _aW_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t),_aV_,_aU_],0],
     _aX_=caml_call1(Bin_prot_Shape[4][1],cst_src_js_misc_ml_5_2),
     group=caml_call2(Bin_prot_Shape[6],_aX_,_aW_);
    function bin_shape_t(a)
     {var _dZ_=caml_call1(Bin_prot_Shape[2][1],cst_t$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group,_dZ_),[0,a,0])}
    function bin_size_t(size_of_a,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _dV_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_dV_),
       _dW_=caml_call1(size_of_a,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_dW_),
       _dX_=caml_call1(size_of_a,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_dX_),
       _dY_=caml_call1(size_of_a,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_dY_)}
    function bin_write_t(write_a,buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(write_a,buf,pos,v1),
       pos$1=caml_call3(write_a,buf,pos$0,v2),
       pos$2=caml_call3(write_a,buf,pos$1,v3);
      return caml_call3(write_a,buf,pos$2,v4)}
    function bin_writer_t(bin_writer_a)
     {function _dR_(v)
       {var _dS_=bin_writer_a[2];
        return function(_dT_,_dU_){return bin_write_t(_dS_,v,_dT_,_dU_)}}
      return [0,function(v){return bin_size_t(bin_writer_a[1],v)},_dR_]}
    function bin_read_t(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_js_misc_ml_Rect_t,pos_ref[1])}
    function bin_read_t$0(of_a,buf,pos_ref)
     {var
       v_top=caml_call2(of_a,buf,pos_ref),
       v_left=caml_call2(of_a,buf,pos_ref),
       v_bottom=caml_call2(of_a,buf,pos_ref),
       v_right=caml_call2(of_a,buf,pos_ref);
      return [0,v_top,v_left,v_bottom,v_right]}
    function bin_reader_t(bin_reader_a)
     {function _dQ_(buf,pos_ref,vtag)
       {return bin_read_t(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$0(bin_reader_a[1],buf,pos_ref)},
              _dQ_]}
    function bin_t(bin_a)
     {var _dO_=bin_reader_t(bin_a[3]),_dP_=bin_writer_t(bin_a[2]);
      return [0,bin_shape_t(bin_a[1]),_dP_,_dO_]}
    function compare(cmp_a,a_036,b_037)
     {if(caml_call2(Ppx_compare_lib[1],a_036,b_037))return 0;
      var n=caml_call2(cmp_a,a_036[1],b_037[1]);
      if(0 !== n)return n;
      var n$0=caml_call2(cmp_a,a_036[2],b_037[2]);
      if(0 !== n$0)return n$0;
      var n$1=caml_call2(cmp_a,a_036[3],b_037[3]);
      return 0 === n$1?caml_call2(cmp_a,a_036[4],b_037[4]):n$1}
    function right(r){return r[4]}
    function bottom(r){return r[3]}
    function left(r){return r[2]}
    function top(r){return r[1]}
    function _aY_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _aZ_=0,
     right$0=[0,function(param){return 0},cst_right$2,_aZ_,right,_aY_];
    function _a0_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _a1_=0,
     bottom$0=[0,function(param){return 0},cst_bottom$2,_a1_,bottom,_a0_];
    function _a2_(r,v){return [0,r[1],v,r[3],r[4]]}
    var _a3_=0,left$0=[0,function(param){return 0},cst_left$2,_a3_,left,_a2_];
    function _a4_(r,v){return [0,v,r[2],r[3],r[4]]}
    var _a5_=0,top$0=[0,function(param){return 0},cst_top$2,_a5_,top,_a4_];
    function make_creator(top_fun,left_fun,bottom_fun,right_fun,compile_acc)
     {var
       match=caml_call2(top_fun,top$0,compile_acc),
       compile_acc$0=match[2],
       top_gen=match[1],
       match$0=caml_call2(left_fun,left$0,compile_acc$0),
       compile_acc$1=match$0[2],
       left_gen=match$0[1],
       match$1=caml_call2(bottom_fun,bottom$0,compile_acc$1),
       compile_acc$2=match$1[2],
       bottom_gen=match$1[1],
       match$2=caml_call2(right_fun,right$0,compile_acc$2),
       compile_acc$3=match$2[2],
       right_gen=match$2[1];
      return [0,
              function(acc)
               {var
                 top=caml_call1(top_gen,acc),
                 left=caml_call1(left_gen,acc),
                 bottom=caml_call1(bottom_gen,acc),
                 right=caml_call1(right_gen,acc);
                return [0,top,left,bottom,right]},
              compile_acc$3]}
    function create$0(top,left,bottom,right){return [0,top,left,bottom,right]}
    function map(top_fun,left_fun,bottom_fun,right_fun)
     {var
       _dL_=caml_call1(right_fun,right$0),
       _dM_=caml_call1(bottom_fun,bottom$0),
       _dN_=caml_call1(left_fun,left$0);
      return [0,caml_call1(top_fun,top$0),_dN_,_dM_,_dL_]}
    function iter(top_fun,left_fun,bottom_fun,right_fun)
     {caml_call1(top_fun,top$0);
      caml_call1(left_fun,left$0);
      caml_call1(bottom_fun,bottom$0);
      return caml_call1(right_fun,right$0)}
    function fold(init,top_fun,left_fun,bottom_fun,right_fun)
     {return caml_call2
              (right_fun,
               caml_call2
                (bottom_fun,
                 caml_call2(left_fun,caml_call2(top_fun,init,top$0),left$0),
                 bottom$0),
               right$0)}
    function map_poly(record)
     {var
       _dI_=[0,caml_call1(record[1],right$0),0],
       _dJ_=[0,caml_call1(record[1],bottom$0),_dI_],
       _dK_=[0,caml_call1(record[1],left$0),_dJ_];
      return [0,caml_call1(record[1],top$0),_dK_]}
    function for_all(top_fun,left_fun,bottom_fun,right_fun)
     {var
       _dF_=caml_call1(top_fun,top$0),
       _dG_=_dF_?caml_call1(left_fun,left$0):_dF_,
       _dH_=_dG_?caml_call1(bottom_fun,bottom$0):_dG_;
      return _dH_?caml_call1(right_fun,right$0):_dH_}
    function exists(top_fun,left_fun,bottom_fun,right_fun)
     {var
       _dE_=caml_call1(top_fun,top$0),
       _dC_=_dE_ || caml_call1(left_fun,left$0),
       _dD_=_dC_ || caml_call1(bottom_fun,bottom$0);
      return _dD_?_dD_:caml_call1(right_fun,right$0)}
    function to_list(top_fun,left_fun,bottom_fun,right_fun)
     {var
       _dz_=[0,caml_call1(right_fun,right$0),0],
       _dA_=[0,caml_call1(bottom_fun,bottom$0),_dz_],
       _dB_=[0,caml_call1(left_fun,left$0),_dA_];
      return [0,caml_call1(top_fun,top$0),_dB_]}
    function iter$0(record,top_fun,left_fun,bottom_fun,right_fun)
     {caml_call3(top_fun,top$0,record,record[1]);
      caml_call3(left_fun,left$0,record,record[2]);
      caml_call3(bottom_fun,bottom$0,record,record[3]);
      return caml_call3(right_fun,right$0,record,record[4])}
    function fold$0(record,init,top_fun,left_fun,bottom_fun,right_fun)
     {var _dw_=record[4],_dx_=record[3],_dy_=record[2];
      return caml_call4
              (right_fun,
               caml_call4
                (bottom_fun,
                 caml_call4
                  (left_fun,
                   caml_call4(top_fun,init,top$0,record,record[1]),
                   left$0,
                   record,
                   _dy_),
                 bottom$0,
                 record,
                 _dx_),
               right$0,
               record,
               _dw_)}
    function for_all$0(record,top_fun,left_fun,bottom_fun,right_fun)
     {var
       _dt_=caml_call3(top_fun,top$0,record,record[1]),
       _du_=_dt_?caml_call3(left_fun,left$0,record,record[2]):_dt_,
       _dv_=_du_?caml_call3(bottom_fun,bottom$0,record,record[3]):_du_;
      return _dv_?caml_call3(right_fun,right$0,record,record[4]):_dv_}
    function exists$0(record,top_fun,left_fun,bottom_fun,right_fun)
     {var
       _ds_=caml_call3(top_fun,top$0,record,record[1]),
       _dq_=_ds_ || caml_call3(left_fun,left$0,record,record[2]),
       _dr_=_dq_ || caml_call3(bottom_fun,bottom$0,record,record[3]);
      return _dr_?_dr_:caml_call3(right_fun,right$0,record,record[4])}
    function to_list$0(record,top_fun,left_fun,bottom_fun,right_fun)
     {var
       _dn_=[0,caml_call3(right_fun,right$0,record,record[4]),0],
       _do_=[0,caml_call3(bottom_fun,bottom$0,record,record[3]),_dn_],
       _dp_=[0,caml_call3(left_fun,left$0,record,record[2]),_do_];
      return [0,caml_call3(top_fun,top$0,record,record[1]),_dp_]}
    function map$0(record,top_fun,left_fun,bottom_fun,right_fun)
     {var
       _dk_=caml_call3(right_fun,right$0,record,record[4]),
       _dl_=caml_call3(bottom_fun,bottom$0,record,record[3]),
       _dm_=caml_call3(left_fun,left$0,record,record[2]);
      return [0,caml_call3(top_fun,top$0,record,record[1]),_dm_,_dl_,_dk_]}
    function set_all_mutable_fields(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct=
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields];
    function map$1(t,f)
     {var
       _dh_=caml_call1(f,t[4]),
       _di_=caml_call1(f,t[3]),
       _dj_=caml_call1(f,t[2]);
      return [0,caml_call1(f,t[1]),_dj_,_di_,_dh_]}
    function int_height(t){return t[3] - t[1] | 0}
    function int_width(t){return t[4] - t[2] | 0}
    function float_height(t){return t[3] - t[1]}
    function float_width(t){return t[4] - t[2]}
    function round_float_rect(opt)
     {if(opt)var sth=opt[1],round=sth;else var round=Core_Float[49];
      return function(_dg_){return map$1(_dg_,round)}}
    function rows_or_columns_of_sexp(sexp_041)
     {if(0 === sexp_041[0])
       {var _dc_=sexp_041[1],switch$0=0;
        if(caml_string_notequal(_dc_,cst_Columns))
         {var switch$1=0;
          if(caml_string_notequal(_dc_,cst_Rows))
           if(caml_string_notequal(_dc_,cst_columns))
            {if(caml_string_notequal(_dc_,cst_rows))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)return 0}
        if(! switch$0)return 1}
      else
       {var _dd_=sexp_041[1];
        if(! _dd_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_040,sexp_041);
        var _de_=_dd_[1];
        if(0 !== _de_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_040,sexp_041);
        var _df_=_de_[1],switch$2=0;
        if(caml_string_notequal(_df_,cst_Columns$0))
         {var switch$3=0;
          if(caml_string_notequal(_df_,cst_Rows$0))
           if(caml_string_notequal(_df_,cst_columns$0))
            {if(caml_string_notequal(_df_,cst_rows$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_040,sexp_041)}
        if(! switch$2)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_040,sexp_041)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_040,sexp_041)}
    function sexp_of_rows_or_columns(param){return param?_a6_:_a7_}
    var
     _a9_=caml_call1(Bin_prot_Shape[9],_a8_),
     _a__=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_rows_or_columns),0,_a9_],0],
     _a$_=caml_call1(Bin_prot_Shape[4][1],cst_src_js_misc_ml_25_0),
     group$0=caml_call2(Bin_prot_Shape[6],_a$_,_a__),
     _ba_=caml_call1(Bin_prot_Shape[2][1],cst_rows_or_columns$0),
     bin_shape_rows_or_columns=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_ba_),0);
    function bin_size_rows_or_columns(param){return 1}
    function bin_write_rows_or_columns(buf,pos,param)
     {return param
              ?caml_call3(Bin_prot_Write[31],buf,pos,1)
              :caml_call3(Bin_prot_Write[31],buf,pos,0)}
    var
     bin_writer_rows_or_columns=
      [0,bin_size_rows_or_columns,bin_write_rows_or_columns];
    function bin_read_rows_or_columns(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_js_misc_ml_rows_or_col,pos_ref[1])}
    function bin_read_rows_or_columns$0(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      return 0 === match
              ?0
              :1 === match?1:caml_call2(Bin_prot_Common[18],_bb_,pos_ref[1])}
    var
     bin_reader_rows_or_columns=
      [0,bin_read_rows_or_columns$0,bin_read_rows_or_columns],
     bin_rows_or_columns=
      [0,
       bin_shape_rows_or_columns,
       bin_writer_rows_or_columns,
       bin_reader_rows_or_columns],
     rows=0,
     columns=1;
    function is_rows(param){return param?0:1}
    function is_columns(param){return param?1:0}
    function rows_val(param){return param?0:_bc_}
    function columns_val(param){return param?_bd_:0}
    var rows$0=[0,cst_Rows$1,0,rows],columns$0=[0,cst_Columns$1,1,columns];
    function fold$1(init,rows_fun,columns_fun)
     {return caml_call2
              (columns_fun,caml_call2(rows_fun,init,rows$0),columns$0)}
    function iter$1(rows_fun,columns_fun)
     {caml_call1(rows_fun,rows$0);return caml_call1(columns_fun,columns$0)}
    function map$2(t,rows_fun,columns_fun)
     {return t?caml_call1(columns_fun,columns$0):caml_call1(rows_fun,rows$0)}
    function make_matcher(rows_fun,columns_fun,compile_acc)
     {var
       match=caml_call2(rows_fun,rows$0,compile_acc),
       compile_acc$0=match[2],
       rows_gen=match[1],
       match$0=caml_call2(columns_fun,columns$0,compile_acc$0),
       compile_acc$1=match$0[2],
       columns_gen=match$0[1];
      function _c$_(param){return caml_call1(rows_gen,0)}
      function _da_(param){return caml_call1(columns_gen,0)}
      return [0,function(_db_){return map$2(_db_,_c$_,_da_)},compile_acc$1]}
    function to_rank(param){return param?1:0}
    function to_name(param){return param?cst_Columns$2:cst_Rows$2}
    var
     Variants_of_rows_or_columns=
      [0,
       rows$0,
       columns$0,
       fold$1,
       iter$1,
       map$2,
       make_matcher,
       to_rank,
       to_name,
       descriptions],
     compare_rows_or_columns=runtime.caml_int_compare;
    function innerHeight(param){return Js_of_ocaml_Dom_html[8].innerHeight}
    function innerWidth(param){return Js_of_ocaml_Dom_html[8].innerWidth}
    function element_is_in_viewport(elt)
     {var
       t6=elt.getBoundingClientRect(),
       _c3_=caml_call2(Core_Float[120],t6.top,0.);
      if(_c3_)
       {var _c4_=caml_call2(Core_Float[120],t6.left,0.);
        if(_c4_)
         {var
           _c5_=innerHeight(0),
           _c6_=caml_call1(Core_Float[29],_c5_),
           _c7_=caml_call2(Core_Float[121],t6.bottom,_c6_);
          if(_c7_)
           {var _c8_=innerWidth(0),_c9_=caml_call1(Core_Float[29],_c8_);
            return caml_call2(Core_Float[121],t6.right,_c9_)}
          var _c__=_c7_}
        else
         var _c__=_c4_}
      else
       var _c__=_c3_;
      return _c__}
    function scroll(opt,param)
     {if(opt)var sth=opt[1],id=sth;else var id=cst_keep_in_view;
      var match=caml_call1(Js_of_ocaml_Dom_html[3],id);
      if(! match)return 0;
      var elt=match[1],_c2_=1 - element_is_in_viewport(elt);
      return _c2_?elt.scrollIntoView(Js_of_ocaml_Js[7]):_c2_}
    function viewport_rect_of_element(elt)
     {var t10=elt.getBoundingClientRect();
      return [0,t10.top,t10.left,t10.bottom,t10.right]}
    function viewport_rect(param)
     {var _c1_=innerWidth(0);return [0,0,0,innerHeight(0),_c1_]}
    function client_rect_of_element(elt)
     {var
       init=viewport_rect_of_element(elt),
       _cY_=caml_call1(Core_Float[29],elt.clientWidth),
       _cZ_=init[2] + _cY_,
       _c0_=caml_call1(Core_Float[29],elt.clientHeight);
      return [0,init[1],init[2],init[1] + _c0_,_cZ_]}
    function client_rect(param)
     {var
       t19=Js_of_ocaml_Dom_html[2].documentElement,
       t17=Js_of_ocaml_Dom_html[2].documentElement;
      return [0,0,0,t17.clientHeight,t19.clientWidth]}
    function find_visible_range(length,nth_element_id,layout)
     {if(caml_call2(Core[90],length,0))return 0;
      function element_search(search_by,mode,layout,x)
       {function nth_element(n)
         {var
           id=caml_call1(nth_element_id,n),
           match=caml_call1(Js_of_ocaml_Dom_html[3],id);
          if(! match)return caml_call3(Core[234],_be_,id,0);
          var elt=match[1];
          return elt}
        var
         first=viewport_rect_of_element(nth_element(0)),
         last=viewport_rect_of_element(nth_element(length - 1 | 0)),
         _cX_=Core_Float[127];
        function get(param,n)
         {var
           is_ascending=
            layout
             ?caml_call2(Core_Float[121],first[2],last[2])
             :caml_call2(Core_Float[121],first[1],last[1]),
           n$0=is_ascending?n:(length - n | 0) - 1 | 0;
          return caml_call1
                  (search_by,viewport_rect_of_element(nth_element(n$0)))}
        function length$0(param){return length}
        return caml_call6
                (caml_call1(Base_Binary_searchable[1],[0,get,length$0])[1],
                 0,
                 0,
                 0,
                 _cX_,
                 mode,
                 x)}
      var viewport_rect$0=viewport_rect(0);
      if(layout)
       var target=viewport_rect$0[2],search_by=right;
      else
       var target=viewport_rect$0[1],search_by=bottom;
      var
       first=
        element_search
         (search_by,-839473056,layout,caml_call1(Core_Float[29],target));
      if(layout)
       var target$0=viewport_rect$0[4],search_by$0=left;
      else
       var target$0=viewport_rect$0[3],search_by$0=top;
      var
       last=
        element_search
         (search_by$0,200870407,layout,caml_call1(Core_Float[29],target$0));
      return caml_call2(Core_Option[18],first,last)}
    function get_scroll_container_js_expr(element)
     {var
       doc=element.ownerDocument || document,
       win=doc.defaultView || window,
       re=/(auto|scroll)/;
      if(element === doc)return doc;
      var cur=element.parentNode;
      while(cur.parentNode)
       {var style=win.getComputedStyle(cur);
        if(re.test(style.overflow + style.overflowY + style.overflowX))
         return cur;
        cur = cur.parentNode}
      return doc}
    function get_scroll_container(el){return get_scroll_container_js_expr(el)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incr_dom$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incr_dom_Js_misc$0);
    var
     Incr_dom_Js_misc=
      [0,
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        right,
        bottom,
        left,
        top,
        [0,
         names,
         right$0,
         bottom$0,
         left$0,
         top$0,
         fold,
         make_creator,
         create$0,
         map,
         iter,
         for_all,
         exists,
         to_list,
         map_poly,
         Direct],
        map$1,
        int_height,
        int_width,
        float_height,
        float_width],
       round_float_rect,
       viewport_rect,
       viewport_rect_of_element,
       client_rect,
       client_rect_of_element,
       element_is_in_viewport,
       scroll,
       sexp_of_rows_or_columns,
       rows_or_columns_of_sexp,
       bin_shape_rows_or_columns,
       bin_size_rows_or_columns,
       bin_write_rows_or_columns,
       bin_writer_rows_or_columns,
       bin_read_rows_or_columns$0,
       bin_read_rows_or_columns,
       bin_reader_rows_or_columns,
       bin_rows_or_columns,
       rows,
       columns,
       is_rows,
       is_columns,
       rows_val,
       columns_val,
       Variants_of_rows_or_columns,
       compare_rows_or_columns,
       find_visible_range,
       get_scroll_container];
    caml_register_global(242,Incr_dom_Js_misc,"Incr_dom__Js_misc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incr_dom_Start_app);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incr_dom$11);
    caml_call1(Expect_test_collector[5][1],cst_src_start_app_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incr_dom$12,cst$3);
    function print_errorf(fmt)
     {function _cW_(s)
       {var t4=caml_jsstring_of_string(s);
        return Js_of_ocaml_Firebug[1].error(t4)}
      return caml_call2(Core[244],_cW_,fmt)}
    function request_animation_frame(callback)
     {var
       current_context=caml_call1(Async_kernel_Async_kernel_sche[1],0),
       request_ids=[0,0];
      function callback$0(param)
       {var _cT_=request_ids[1],switch$0=0;
        if(typeof _cT_ === "number" && _cT_){var _cV_=1;switch$0 = 1}
        if(! switch$0)var _cV_=0;
        if(_cV_)return 0;
        var _cU_=request_ids[1];
        if(typeof _cU_ === "number")
         {if(! _cU_)request_ids[1] = 1}
        else
         {var set_timeout_id=_cU_[2],animation_frame_id=_cU_[1];
          Js_of_ocaml_Dom_html[8].cancelAnimationFrame(animation_frame_id);
          Js_of_ocaml_Dom_html[8].clearTimeout(set_timeout_id);
          request_ids[1] = 1}
        caml_call2(Async_kernel_Async_kernel_sche[2],current_context,callback);
        return 0}
      var
       t14=caml_js_wrap_callback(function(param){return callback$0(0)}),
       animation_frame_id=Js_of_ocaml_Dom_html[8].requestAnimationFrame(t14),
       t16=caml_js_wrap_callback(function(param){return callback$0(0)}),
       set_timeout_id=Js_of_ocaml_Dom_html[8].setTimeout(t16,1000.),
       _cS_=request_ids[1];
      return typeof _cS_ === "number"
              ?_cS_
                ?(Js_of_ocaml_Dom_html[8].cancelAnimationFrame
                   (animation_frame_id),
                  Js_of_ocaml_Dom_html[8].clearTimeout(set_timeout_id))
                :(request_ids[1] = [0,animation_frame_id,set_timeout_id],0)
              :caml_call1(Core[5],cst_request_ids_already_set)}
    function as_focusable(_cR_){return _cR_}
    function mark_dirty(t){return caml_call2(Async_kernel_Ivar[15],t[1],0)}
    function is_dirty(t){return caml_call1(Async_kernel_Ivar[17],t[1])}
    function t_of_sexp$0(x_002)
     {return caml_call2(Core_Blang[12],Core[472],x_002)}
    function sexp_of_t$0(x_003)
     {return caml_call2(Core_Blang[13],Core[471],x_003)}
    function compare$0(a_004,b_005)
     {function _cQ_(a_006,b_007){return caml_call2(Core[467],a_006,b_007)}
      return caml_call3(Core_Blang[9],_cQ_,a_004,b_005)}
    var
     include$0=
      caml_call1(Core_Comparable[11],[0,compare$0,t_of_sexp$0,sexp_of_t$0]),
     symbol=include$0[1],
     symbol$0=include$0[2],
     symbol$1=include$0[3],
     symbol$2=include$0[4],
     symbol$3=include$0[5],
     symbol$4=include$0[6],
     equal=include$0[7],
     compare$1=include$0[8],
     min=include$0[9],
     max=include$0[10],
     ascending=include$0[11],
     descending=include$0[12],
     between=include$0[13],
     clamp_exn=include$0[14],
     clamp=include$0[15],
     comparator=include$0[16],
     validate_lbound=include$0[17],
     validate_ubound=include$0[18],
     validate_bound=include$0[19],
     Replace_polymorphic_compare=include$0[20],
     Map=include$0[21],
     Set=include$0[22];
    function set_logging_filter(t,logging_filter)
     {t[2][1] = logging_filter;return 0}
    var
     _bf_=Js_of_ocaml_Js[52][1],
     global_is_initialized=[0,0],
     app_states=caml_call3(Core_String[145][4],0,0,0);
    function single_line_string_list(strings)
     {function _cN_(str)
       {var _cP_=caml_call2(Core[18],str,cst$4);
        return caml_call2(Core[18],cst$5,_cP_)}
      var _cO_=caml_call2(Core_List[72],strings,_cN_);
      return caml_call2(Core_String[32],_bg_,_cO_)}
    function multi_line_string_list(strings)
     {function _cL_(str){return caml_call2(Core[18],cst$6,str)}
      var _cM_=caml_call2(Core_List[72],strings,_cL_);
      return caml_call2(Core_String[32],_bh_,_cM_)}
    function get_tag_name(node)
     {if(typeof node !== "number" && 1 === node[0])
       {var e=node[1];return [0,caml_call1(Virtual_dom_Node[1][1],e)]}
      return 0}
    function start_bonsai
     (opt,_bx_,_bw_,bind_to_element_with_id,initial_model,App)
     {if(opt)var sth=opt[1],debug=sth;else var debug=0;
      if(_bx_)
       var sth$0=_bx_[1],stop=sth$0;
      else
       var stop=caml_call1(Async_kernel_Deferred[19],0);
      if(_bw_)
       var sth$1=_bw_[1],named_logging_filters=sth$1;
      else
       var named_logging_filters=0;
      caml_call1(Async_js[3],0);
      function _by_(param)
       {var
         model_v=caml_call2(___[2],0,initial_model),
         model=caml_call1(___[4],model_v),
         model_from_last_display_v=caml_call2(___[2],0,initial_model),
         model_from_last_display=caml_call1(___[4],model_from_last_display_v);
        function _bD_(old_value,new_value)
         {return caml_call2(App[1][1],old_value,new_value)}
        var cutoff=caml_call1(_af_[3],_bD_);
        caml_call2(_ag_,model,cutoff);
        caml_call2(_ag_,model_from_last_display,cutoff);
        var action_queue=caml_call3(Core_Deque[31],0,0,0);
        function handle(action)
         {return caml_call2(Core_Deque[53],action_queue,action)}
        var
         Event=caml_call1(Ui_effect[18],[0,[0],handle]),
         visibility=[0,caml_call1(Async_kernel_Ivar[13],0)];
        function viewport_changed(param){return mark_dirty(visibility)}
        caml_call1(Virtual_dom_Effect[21],[0,viewport_changed]);
        var
         obs=
          caml_call2
           (_aa_,0,caml_call3(App[6],model,model_from_last_display,Event[1]));
        function fetch(f,param){return caml_call1(f,caml_call1(_$_[6],obs))}
        function _bE_(param){var on_display=param[4];return on_display}
        function _bF_(param)
         {var update_visibility=param[3];return update_visibility}
        function _bG_(param){var apply_action=param[2];return apply_action}
        function _bH_(param){var view=param[1];return view}
        function get_view(_cK_){return fetch(_bH_,_cK_)}
        caml_call1(_ad_,0);
        var
         _bI_=[0,[0,cst_none,caml_call1(Core_Fn[1],0)],named_logging_filters],
         _bJ_=[0,[0,cst_all,caml_call1(Core_Fn[1],1)],_bI_],
         named_logging_filters$0=caml_call3(Core_String[145][8],0,0,_bJ_),
         _bK_=caml_call1(Core_Hashtbl[64],named_logging_filters$0),
         filter_names=caml_call1(Core_String[141][57],_bK_);
        if(1 - global_is_initialized[1])
         {var
           with_app_id_opt=
            function(update_state,app_id_opt)
             {var
               _cI_=caml_call1(Js_of_ocaml_Js[5][10],app_id_opt),
               app_id_opt$0=
                caml_call2(Core_Option[29],_cI_,caml_string_of_jsstring);
              if(! app_id_opt$0)
               return caml_call2(Core_Hashtbl[20],app_states,update_state);
              var
               app_id=app_id_opt$0[1],
               match=caml_call2(Core_Hashtbl[53],app_states,app_id);
              if(match)
               {var state=match[1];return caml_call1(update_state,state)}
              var
               _cJ_=
                single_line_string_list
                 (caml_call1(Core_Hashtbl[64],app_states));
              return caml_call2(print_errorf(_bi_),app_id,_cJ_)},
           update_logging_filter=
            function(logging_filter)
             {function _cF_(_cH_)
               {return set_logging_filter(_cH_,logging_filter)}
              return function(_cG_){return with_app_id_opt(_cF_,_cG_)}},
           update_should_profile=
            function(should_profile)
             {function _cD_(t){t[3][1] = should_profile;return 0}
              return function(_cE_){return with_app_id_opt(_cD_,_cE_)}},
           update_should_debug=
            function(should_debug)
             {function _cB_(t){t[4][1] = should_debug;return 0}
              return function(_cC_){return with_app_id_opt(_cB_,_cC_)}},
           t19=caml_js_wrap_callback(update_logging_filter(0));
          _bf_.startLoggingAll = t19;
          var
           t21=
            caml_js_wrap_callback
             (function(blang_str)
               {var blang_str$0=caml_string_of_jsstring(blang_str);
                function _cv_(app_state)
                 {var
                   _cx_=caml_call1(Core_Sexp[73],blang_str$0),
                   blang=caml_call2(Core_Blang[12],Core_String[115],_cx_);
                  function _cy_(invalid_names,name)
                   {return caml_call2(Core_Set[10],app_state[1],name)
                            ?invalid_names
                            :caml_call2(Core_Set[11],invalid_names,name)}
                  var
                   invalid_names=
                    caml_call3(Core_Blang[34],blang,Core_String[141][54],_cy_);
                  if(caml_call1(Core_Set[9],invalid_names))
                   return set_logging_filter(app_state,[0,blang]);
                  var
                   _cz_=
                    multi_line_string_list
                     (caml_call1(Core_Set[38],app_state[1])),
                   _cA_=
                    single_line_string_list
                     (caml_call1(Core_Set[38],invalid_names));
                  return caml_call2(print_errorf(_bj_),_cA_,_cz_)}
                return function(_cw_){return with_app_id_opt(_cv_,_cw_)}});
          _bf_.startLogging = t21;
          var
           t23=
            caml_js_wrap_callback
             (function(filter)
               {function filter$0(action_sexp)
                 {return caml_call1
                          (filter,
                           caml_jsstring_of_string
                            (caml_call1(Core_Sexp[83],action_sexp)))
                         |
                         0}
                return update_logging_filter([1,filter$0])});
          _bf_.startLoggingCustom = t23;
          var t25=caml_js_wrap_callback(update_logging_filter(1));
          _bf_.stopLogging = t25;
          var t27=caml_js_wrap_callback(update_should_profile(1));
          _bf_.startProfiling = t27;
          var t29=caml_js_wrap_callback(update_should_profile(0));
          _bf_.stopProfiling = t29;
          var t31=caml_js_wrap_callback(update_should_debug(1));
          _bf_.startDebugging = t31;
          var t33=caml_js_wrap_callback(update_should_debug(0));
          _bf_.stopDebugging = t33;
          var
           t35=
            caml_js_wrap_callback
             (function(param)
               {caml_call1(include[77],filename);
                var
                 contents=caml_call1(Stdio_In_channel[25],filename),
                 _cu_=
                  caml_call3
                   (Vdom_file_download[2],filename,cst_plain_text,contents);
                return caml_call1(Vdom_file_download[3],_cu_)});
          _bf_.saveIncrementalGraph = t35;
          Js_of_ocaml_Firebug[1].log
           (" Incr_dom Action Logging\n =======================\n Logging prints action info to the console.\n It is disabled by default.\n To start logging, type one of the following:\n \tstartLoggingAll([app_id]) - log all actions\n \tstartLogging(filter_name [, app_id]) - filter actions using a pre-defined named filter [filter_name]\n \tstartLogging(filter_name_blang [, app_id]) - filter actions using a blang of named filters [filter_name_blang]\n \tstartLoggingCustom(filter [, app_id]) - filter actions using a custom function [filter] from a string (the action sexp) to a bool\n To stop logging, type: stopLogging([app_id])\n\n Incr_dom Action Profiling\n =========================\n Profiling is disabled by default.\n To start profiling, type: startProfiling([app_id])\n To stop profiling, type: stopProfiling([app_id])\n\n Incr_dom Debugging\n ==================\n Debugging prints timing info to the console.\n It is disabled by default unless otherwise specified by the app.\n To start debugging, type: startDebugging([app_id])\n To stop debugging, type: stopDebugging([app_id])\n\n [app_id] is equal to the id of the element that the incr-dom app is bound to. If the page only has one app or you want to apply the action to all apps, you can pass in [null] (or for single-argument functions, omit it altogether).");
          global_is_initialized[1] = 1}
        var
         _bB_=multi_line_string_list(caml_call1(Core_Set[38],filter_names)),
         app_init_message=
          caml_call3(Core[257],_bk_,bind_to_element_with_id,_bB_),
         t39=caml_jsstring_of_string(app_init_message);
        Js_of_ocaml_Firebug[1].log(t39);
        var logging_filter=[0,1],should_profile=[0,0],should_debug=[0,debug];
        caml_call3
         (Core_Hashtbl[34],
          app_states,
          bind_to_element_with_id,
          [0,filter_names,logging_filter,should_profile,should_debug]);
        function _bC_(param)
         {return caml_call2
                  (Core_Hashtbl[31],app_states,bind_to_element_with_id)}
        caml_call2(Async_kernel[12],stop,_bC_);
        function should_debug$0(param){return should_debug[1]}
        function should_profile$0(param){return should_profile[1]}
        var
         html=get_view(0),
         html_dom=caml_call1(Virtual_dom_Node[49],html),
         t41=caml_call1(Js_of_ocaml_Dom_html[4],bind_to_element_with_id),
         _bL_=caml_call1(Js_of_ocaml_Js[5][10],t41.parentNode),
         parent=caml_call4(Core_Option[35],_bl_,0,0,_bL_);
        caml_call3(Js_of_ocaml_Dom[3],parent,html_dom,t41);
        function call_viewport_changed_on_event(event_name,where)
         {var _cq_=Js_of_ocaml_Js[8];
          function _cr_(param){viewport_changed(0);return Js_of_ocaml_Js[7]}
          var
           _cs_=caml_call1(Js_of_ocaml_Dom[10],_cr_),
           _ct_=caml_call1(Js_of_ocaml_Dom[14][1],event_name);
          caml_call4(Js_of_ocaml_Dom[16],where,_ct_,_cs_,_cq_);
          return 0}
        call_viewport_changed_on_event
         (cst_scroll,get_scroll_container(html_dom));
        call_viewport_changed_on_event(cst_resize,Js_of_ocaml_Dom_html[8]);
        function _bM_(state)
         {var prev_html=[0,html],prev_elt=[0,html_dom];
          function refocus_root_element(param)
           {var element=prev_elt[1];
            function _cm_(t44)
             {var t43={"preventScroll":Js_of_ocaml_Js[7]};
              return t44.focus(t43)}
            var
             _cn_=caml_call1(Js_of_ocaml_Dom_html[117][1],element),
             _co_=caml_call1(Js_of_ocaml_Js[5][10],_cn_),
             _cp_=caml_call2(Core_Option[29],_co_,as_focusable);
            return caml_call2(Core_Option[41],_cp_,_cm_)}
          function timer_start(s)
           {var profile=should_profile$0(0),debug=should_debug$0(0);
            if(profile)
             {var _cl_=caml_call2(Core[18],s,cst_before);
              caml_call1(Javascript_profiling[4][1],_cl_)}
            if(! debug)return debug;
            var t0=caml_jsstring_of_string(s);
            return Js_of_ocaml_Firebug[1].time(t0)}
          function timer_stop(s)
           {var profile=should_profile$0(0),debug=should_debug$0(0);
            if(profile)
             {var
               before=caml_call2(Core[18],s,cst_before$0),
               after=caml_call2(Core[18],s,cst_after);
              caml_call1(Javascript_profiling[4][1],after);
              caml_call3(Javascript_profiling[4][2],s,before,after)}
            if(! debug)return debug;
            var t2=caml_jsstring_of_string(s);
            return Js_of_ocaml_Firebug[1].timeEnd(t2)}
          var _bR_=Js_of_ocaml_Js[7];
          function _bS_(e)
           {var related_target=e.relatedTarget;
            if(1 - caml_call1(Js_of_ocaml_Js[5][5],related_target))
             refocus_root_element(0);
            return Js_of_ocaml_Js[7]}
          var _bT_=caml_call1(Js_of_ocaml_Dom_html[10],_bS_);
          caml_call4
           (Js_of_ocaml_Dom[16],
            Js_of_ocaml_Dom_html[8],
            Js_of_ocaml_Dom_html[15][35],
            _bT_,
            _bR_);
          function safe_filter(name,filter,action)
           {function _cj_(param){return caml_call1(filter,action)}
            var match=caml_call2(Core_Or_error[33],0,_cj_);
            if(0 === match[0]){var should_log=match[1];return should_log}
            var err=match[1],_ck_=0;
            caml_call2
             (print_errorf
               ([0,
                 [11,
                  cst_Exception_raised_by,
                  [2,
                   0,
                   [11,
                    cst$7,
                    [24,
                     _bm_,
                     function(param,custom_printf_010)
                      {return caml_call1(Core_Error[9],custom_printf_010)},
                     _ck_]]]],
                 cst_Exception_raised_by_s_Erro]),
              name,
              err);
            return 0}
          function _bU_(blang)
           {var
             filter=caml_call1(Core_Hashtbl[54],named_logging_filters$0),
             switch$0=0;
            if(typeof blang !== "number" && 4 === blang[0])
             {var name=blang[1],_cd_=caml_call1(filter,name);switch$0 = 1}
            if(! switch$0)
             var
              _cd_=
               function(action)
                {function _ci_(name){return caml_call2(filter,name,action)}
                 return caml_call2(Core_Blang[62],blang,_ci_)};
            var
             _ce_=
              [0,
               [11,
                cst_named_filter_blang,
                [24,
                 _bo_,
                 function(param,custom_printf_012)
                  {var
                    _ch_=
                     caml_call2(Core_Blang[13],Core[471],custom_printf_012);
                   return caml_call2(Ppx_sexp_conv_lib[1][13],0,_ch_)},
                 _bn_]],
               cst_named_filter_blang_sexp_st],
             _cf_=caml_call2(Core[257],_ce_,blang);
            return function(_cg_){return safe_filter(_cf_,_cd_,_cg_)}}
          var
           _bV_=Set[1],
           _bW_=Map[1],
           named_filter_blang_cache=
            caml_call2
             (Core_Memo[4],
              [0,
               symbol,
               symbol$0,
               symbol$1,
               symbol$2,
               symbol$3,
               symbol$4,
               equal,
               compare$1,
               min,
               max,
               ascending,
               descending,
               between,
               clamp_exn,
               clamp,
               comparator,
               validate_lbound,
               validate_ubound,
               validate_bound,
               Replace_polymorphic_compare,
               [0,
                [0,_bW_[2],_bW_[3]],
                Map[2],
                Map[107],
                Map[3],
                Map[4],
                Map[5],
                Map[6],
                Map[7],
                Map[8],
                Map[9],
                Map[10],
                Map[11],
                Map[12],
                Map[13],
                Map[14],
                Map[15],
                Map[16],
                Map[17],
                Map[18],
                Map[19],
                Map[20],
                Map[21],
                Map[22],
                Map[23],
                Map[24],
                Map[25],
                Map[26],
                Map[27],
                Map[28],
                Map[29],
                Map[30],
                Map[31],
                Map[32],
                Map[33],
                Map[34],
                Map[35],
                Map[36],
                Map[37],
                Map[38],
                Map[39],
                Map[40],
                Map[41],
                Map[42],
                Map[43],
                Map[44],
                Map[45],
                Map[46],
                Map[47],
                Map[48],
                Map[49],
                Map[50],
                Map[51],
                Map[52],
                Map[53],
                Map[54],
                Map[55],
                Map[56],
                Map[57],
                Map[58],
                Map[59],
                Map[60],
                Map[61],
                Map[62],
                Map[63],
                Map[64],
                Map[65],
                Map[66],
                Map[67],
                Map[68],
                Map[69],
                Map[70],
                Map[71],
                Map[72],
                Map[73],
                Map[74],
                Map[75],
                Map[76],
                Map[77],
                Map[78],
                Map[79],
                Map[80],
                Map[81],
                Map[82],
                Map[83],
                Map[84],
                Map[85],
                Map[86],
                Map[87],
                Map[88],
                Map[89],
                Map[90],
                Map[91],
                Map[92],
                Map[93],
                Map[94],
                Map[95],
                Map[96],
                Map[97],
                Map[98],
                Map[99],
                Map[100],
                Map[101],
                Map[102],
                Map[103],
                Map[104],
                Map[105]],
               [0,
                [0,_bV_[2],_bV_[3]],
                Set[2],
                Set[75],
                Set[3],
                Set[4],
                Set[5],
                Set[6],
                Set[7],
                Set[8],
                Set[9],
                Set[10],
                Set[11],
                Set[12],
                Set[13],
                Set[14],
                Set[15],
                Set[16],
                Set[17],
                Set[18],
                Set[19],
                Set[20],
                Set[21],
                Set[22],
                Set[23],
                Set[24],
                Set[25],
                Set[26],
                Set[27],
                Set[28],
                Set[29],
                Set[30],
                Set[31],
                Set[32],
                Set[33],
                Set[34],
                Set[35],
                Set[36],
                Set[37],
                Set[38],
                Set[39],
                Set[40],
                Set[41],
                Set[42],
                Set[43],
                Set[44],
                Set[45],
                Set[46],
                Set[47],
                Set[48],
                Set[49],
                Set[50],
                Set[51],
                Set[52],
                Set[53],
                Set[54],
                Set[55],
                Set[56],
                Set[57],
                Set[58],
                Set[59],
                Set[60],
                Set[61],
                Set[62],
                Set[63],
                Set[64],
                Set[65],
                Set[66],
                Set[67],
                Set[68],
                Set[69],
                Set[70],
                Set[71],
                Set[72],
                Set[73]]],
              _bU_);
          function perform_update(param)
           {timer_start(cst_stabilize$1);
            var
             t49=new (Js_of_ocaml_Js[26])(),
             _b6_=t49.getTime(),
             _b7_=caml_call1(Core_Time_ns[1][80],_b6_),
             now=caml_call1(Core_Time_ns[75],_b7_);
            caml_call2(_az_[8],_b_,now);
            caml_call1(_ad_,0);
            timer_stop(cst_stabilize$2);
            timer_start(cst_total);
            timer_start(cst_update_visibility);
            if(is_dirty(visibility))
             {if(is_dirty(visibility))
               visibility[1] = caml_call1(Async_kernel_Ivar[12],0);
              var
               _b0_=Ui_effect[20][1],
               _b1_=caml_call1(___[6],model_v),
               new_model=caml_call2(fetch(_bF_,0),_b1_,_b0_);
              caml_call2(___[3],model_v,new_model);
              timer_start(cst_stabilize);
              caml_call1(_ad_,0);
              timer_stop(cst_stabilize$0)}
            timer_stop(cst_update_visibility$0);
            timer_start(cst_apply_actions);
            for(;;)
             {var match=caml_call1(Core_Deque[60],action_queue);
              if(match)
               {var action=match[1],_bY_=logging_filter[1];
                if(typeof _bY_ === "number")
                 var should_log_action=0 === _bY_?1:0;
                else
                 if(0 === _bY_[0])
                  var
                   blang=_bY_[1],
                   should_log_action=
                    caml_call2(named_filter_blang_cache,blang,action);
                 else
                  var
                   filter=_bY_[1],
                   should_log_action=
                    safe_filter
                     (cst_custom_filter,
                      function(filter)
                        {return function(action)
                          {return caml_call1(filter,caml_call1(App[2][1],action))}}
                       (filter),
                      action);
                if(should_log_action)
                 {var
                   _b2_=[0,[1,[0,_bp_,[0,caml_call1(App[2][1],action),0]]],0],
                   _b3_=
                    [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_Action),_b2_]];
                  caml_call1(Async_js[7],_b3_)}
                if(caml_call1(App[4],action))
                 {timer_start(cst_stabilize_for_action);
                  caml_call1(_ad_,0);
                  timer_stop(cst_stabilize_for_action$0)}
                else
                 if(should_debug$0(0))
                  Js_of_ocaml_Firebug[1].debug
                   ("action applied without stabilizing");
                var
                 _b4_=caml_call1(___[6],model_v),
                 _b5_=Ui_effect[20][1],
                 new_model$0=caml_call4(fetch(_bG_,0),state,_b5_,_b4_,action);
                caml_call2(___[3],model_v,new_model$0);
                continue}
              timer_stop(cst_apply_actions$0);
              timer_start(cst_stabilize$3);
              caml_call1(_ad_,0);
              timer_stop(cst_stabilize$4);
              var root=get_view(0),switch$0=0;
              if(typeof root !== "number" && 1 === root[0])
               {var
                 element=root[1],
                 _bZ_=caml_call1(Virtual_dom_Node[1][2],element);
                if
                 (1
                  -
                  caml_call2
                   (Virtual_dom_Vdom[1][80][1],cst_disable_tab_index,_bZ_))
                 {var
                   add_new_attrs=
                    function(attrs)
                     {var
                       _b$_=caml_call1(Virtual_dom_Vdom[1][34],0),
                       _ca_=caml_call2(Virtual_dom_Vdom[1][11],_b$_,attrs),
                       _cb_=caml_call4(Css_gen[84],0,0,870530776,0),
                       _cc_=caml_call1(Virtual_dom_Vdom[1][28],_cb_);
                      return caml_call2(Virtual_dom_Vdom[1][11],_cc_,_ca_)},
                   html=
                    [1,caml_call2(Virtual_dom_Node[1][5],element,add_new_attrs)];
                  switch$0 = 1}}
              if(! switch$0)var html=root;
              timer_start(cst_diff);
              var patch=caml_call2(Virtual_dom_Node[53][1],prev_html[1],html);
              timer_stop(cst_diff$0);
              if(1 - caml_call1(Virtual_dom_Node[53][3],patch))
               mark_dirty(visibility);
              timer_start(cst_patch);
              var elt=caml_call2(Virtual_dom_Node[53][2],patch,prev_elt[1]);
              timer_stop(cst_patch$0);
              timer_start(cst_on_display);
              var _b8_=Ui_effect[20][1];
              caml_call2(fetch(_bE_,0),state,_b8_);
              timer_stop(cst_on_display$0);
              var _b9_=caml_call1(___[5],model_v);
              caml_call2(___[3],model_from_last_display_v,_b9_);
              var
               old_tag_name=get_tag_name(prev_html[1]),
               new_tag_name=get_tag_name(html),
               tags_the_same=
                caml_call3
                 (Core_Option[14],Core_String[126],old_tag_name,new_tag_name);
              prev_html[1] = html;
              prev_elt[1] = elt;
              timer_stop(cst_total$0);
              if(should_debug$0(0))Js_of_ocaml_Firebug[1].debug("-------");
              var _b__=1 - tags_the_same;
              return _b__?refocus_root_element(0):_b__}}
          function callback(param)
           {return caml_call1(Async_kernel_Deferred[7],stop)
                    ?0
                    :(perform_update(0),request_animation_frame(callback))}
          perform_update(0);
          var
           match=
            caml_call1
             (Js_of_ocaml_Js[5][10],Js_of_ocaml_Dom_html[2].activeElement);
          if(match)
           {var el=match[1],_bX_=caml_call1(Js_of_ocaml_Dom_html[117][7],el);
            if(caml_call1(Js_of_ocaml_Js[5][5],_bX_))refocus_root_element(0)}
          else
           refocus_root_element(0);
          request_animation_frame(callback);
          return caml_call1(Async_kernel_Deferred[19],0)}
        var _bN_=caml_call1(___[5],model_v);
        function _bO_(a)
         {var _bQ_=caml_call1(Event[1],a);
          return caml_call1(Ui_effect[20][1],_bQ_)}
        var _bP_=caml_call2(App[5],_bO_,_bN_);
        return caml_call2(Async_kernel[22][2],_bP_,_bM_)}
      var
       _bz_=caml_call1(Async_js[5],0),
       _bA_=caml_call2(Async_kernel[22][2],_bz_,_by_);
      return caml_call1(Async_kernel[6],_bA_)}
    var Private$0=[0,start_bonsai];
    function start(opt,_bs_,_br_,bind_to_element_with_id,initial_model,App)
     {if(opt)var sth=opt[1],debug=sth;else var debug=0;
      if(_bs_)
       var sth$0=_bs_[1],stop=sth$0;
      else
       var stop=caml_call1(Async_kernel_Deferred[19],0);
      if(_br_)
       var sth$1=_br_[1],named_logging_filters=sth$1;
      else
       var named_logging_filters=0;
      var
       Model=App[1],
       Action=App[2],
       State=App[3],
       on_startup=App[4],
       _bt_=App[5];
      function action_requires_stabilization(param){return 1}
      function create(model,old_model,inject)
       {function _bu_(component)
         {var view=component[3];
          function apply_action(state,schedule_event,model,action)
           {function schedule_action(a)
             {return caml_call1(schedule_event,caml_call1(inject,a))}
            return caml_call3(component[1],action,state,schedule_action)}
          function update_visibility(model,schedule_event)
           {function schedule_action(a)
             {return caml_call1(schedule_event,caml_call1(inject,a))}
            return caml_call1(component[2],schedule_action)}
          function on_display(state,schedule_event)
           {function schedule_action(a)
             {return caml_call1(schedule_event,caml_call1(inject,a))}
            return caml_call2(component[4],state,schedule_action)}
          return [0,view,apply_action,update_visibility,on_display]}
        var _bv_=caml_call3(_bt_,model,old_model,inject);
        return caml_call2(_ax_[4][6],_bv_,_bu_)}
      return start_bonsai
              ([0,debug],
               [0,stop],
               [0,named_logging_filters],
               bind_to_element_with_id,
               initial_model,
               [0,
                Model,
                Action,
                State,
                action_requires_stabilization,
                on_startup,
                create])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incr_dom$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incr_dom_Start_app$0);
    var Incr_dom_Start_app=[0,start,Private$0];
    caml_register_global(273,Incr_dom_Start_app,"Incr_dom__Start_app");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incr_dom);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incr_dom$14);
    caml_call1(Expect_test_collector[5][1],cst_src_incr_dom_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incr_dom$15,cst$8);
    var _bq_=include$1[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incr_dom$16);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incr_dom$0);
    var Incr_dom$0=[0,_bq_];
    caml_register_global(275,Incr_dom$0,"Incr_dom");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
