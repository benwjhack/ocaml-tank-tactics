// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_update_dummy=runtime.caml_update_dummy;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Incr_map_Incr_map_intf=
      caml_string_of_jsbytes("Incr_map__Incr_map_intf"),
     cst_incr_map=caml_string_of_jsbytes("incr_map"),
     cst_src_incr_map_intf_ml=caml_string_of_jsbytes("src/incr_map_intf.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_incr_map$0=caml_string_of_jsbytes("incr_map"),
     cst_incr_map$1=caml_string_of_jsbytes("incr_map"),
     cst_Incr_map_Incr_map_intf$0=
      caml_string_of_jsbytes("Incr_map__Incr_map_intf"),
     cst_Invalid_indices=caml_string_of_jsbytes("Invalid indices"),
     cst_BUG_Hit_supposedly_impossi=
      caml_string_of_jsbytes
       ("BUG: Hit supposedly impossible case in Incr_map.index_by"),
     cst_impossible_case_BUG_in_inc=
      caml_string_of_jsbytes("impossible case: BUG in incr_map.ml subrange"),
     cst_Incr_map=caml_string_of_jsbytes("Incr_map"),
     cst_incr_map$2=caml_string_of_jsbytes("incr_map"),
     cst_src_incr_map_ml=caml_string_of_jsbytes("src/incr_map.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_incr_map$3=caml_string_of_jsbytes("incr_map"),
     cst_incr_map$4=caml_string_of_jsbytes("incr_map"),
     cst_Incr_map$0=caml_string_of_jsbytes("Incr_map"),
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Core_Int=global_data.Core__Int,
     Core_Map=global_data.Core__Map,
     Core=global_data.Core,
     Incremental=global_data.Incremental,
     Core_Option=global_data.Core__Option,
     Core_Info=global_data.Core__Info,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Core_List=global_data.Core__List,
     Core_Bool=global_data.Core__Bool,
     Core_Tuple=global_data.Core__Tuple,
     Assert_failure=global_data.Assert_failure,
     Core_Maybe_bound=global_data.Core__Maybe_bound,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     Core_Lazy=global_data.Core__Lazy,
     Core_Set=global_data.Core__Set,
     Core_Sequence=global_data.Core__Sequence,
     Incr_map=[0];
    caml_register_global(51,Incr_map,"Incr_map__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incr_map_Incr_map_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incr_map);
    caml_call1(Expect_test_collector[5][1],cst_src_incr_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incr_map$0,cst);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incr_map$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incr_map_Incr_map_intf$0);
    var Incr_map_Incr_map_intf=[0];
    caml_register_global(56,Incr_map_Incr_map_intf,"Incr_map__Incr_map_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incr_map);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incr_map$2);
    caml_call1(Expect_test_collector[5][1],cst_src_incr_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incr_map$3,cst$0);
    var
     _F_=[0,caml_string_of_jsbytes("entries")],
     _G_=[0,caml_string_of_jsbytes("actual_value")],
     _H_=[0,caml_string_of_jsbytes("key")],
     _A_=[0,caml_string_of_jsbytes("node_is_unnecessary")],
     _B_=[0,caml_string_of_jsbytes("node_is_invalid")],
     _C_=[0,caml_string_of_jsbytes("node_is_const")],
     _D_=[0,caml_string_of_jsbytes("node_info")],
     _E_=[0,caml_string_of_jsbytes("saved_value")],
     _z_=[0,1],
     _y_=[0,1],
     _x_=[0,1],
     _w_=[0,1],
     _v_=[0,1],
     _u_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _t_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _s_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _r_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _q_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _p_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _o_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _n_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _l_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1210,6],
     _m_=[0,[0,0,0]],
     _g_=[0,caml_string_of_jsbytes("to_")],
     _h_=[0,caml_string_of_jsbytes("from")],
     _i_=[0,0,0],
     _k_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1194,10],
     _j_=[0,caml_string_of_jsbytes("src/incr_map.ml"),1195,10],
     _f_=[0,1],
     _e_=[0,1],
     _d_=[0,1],
     _c_=[0,1],
     _b_=[0,caml_string_of_jsbytes("src/incr_map.ml"),311,12],
     _a_=[0,caml_string_of_jsbytes("src/incr_map.ml"),238,11];
    function with_old(i,f)
     {var old=[0,0];
      function _eN_(a)
       {var b=caml_call2(f,old[1],a);old[1] = [0,[0,a,b]];return b}
      return caml_call2(Incremental[76][3][5],i,_eN_)}
    function unordered_fold
     (opt,update,specialized_initial,_eJ_,map,init,add,remove)
     {if(opt)var sth=opt[1],data_equal=sth;else var data_equal=Core[246];
      if(_eJ_)
       var sth$0=_eJ_[1],revert_to_init_when_empty=sth$0;
      else
       var revert_to_init_when_empty=0;
      function default$0(key,old_data,new_data,acc)
       {return caml_call3
                (add,key,new_data,caml_call3(remove,key,old_data,acc))}
      var update$0=caml_call2(Core_Option[34],update,default$0);
      return with_old
              (map,
               function(old,new_in)
                {if(! old)
                  {if(! specialized_initial)
                    return caml_call3(Core_Map[55],new_in,init,add);
                   var initial=specialized_initial[1];
                   return caml_call2(initial,init,new_in)}
                 var match=old[1],old_out=match[2],old_in=match[1];
                 if(revert_to_init_when_empty)
                  {var _eK_=caml_call1(Core_Map[29],new_in);
                   if(caml_call2(Core[90],_eK_,0))return init}
                 function _eL_(acc,param)
                  {var change=param[2],key=param[1],_eM_=change[1];
                   if(847852583 === _eM_)
                    {var old=change[2];return caml_call3(remove,key,old,acc)}
                   if(1013247643 <= _eM_)
                    {var match=change[2],new$0=match[2],old$0=match[1];
                     return caml_call4(update$0,key,old$0,new$0,acc)}
                   var new$1=change[2];
                   return caml_call3(add,key,new$1,acc)}
                 return caml_call5
                         (Core_Map[81],old_in,new_in,data_equal,old_out,_eL_)})}
    function unordered_fold_nested_maps
     (opt,revert_to_init_when_empty,update,incr_map,init,add,remove)
     {if(opt)var sth=opt[1],data_equal=sth;else var data_equal=Core[246];
      if(update)
       var update$0=update[1],update$1=update$0;
      else
       var
        update$1=
         function(outer_key,inner_key,old_data,new_data,acc)
          {return caml_call4
                   (add,
                    outer_key,
                    inner_key,
                    new_data,
                    caml_call4(remove,outer_key,inner_key,old_data,acc))};
      function _eC_(outer_key,inner_map,acc)
       {function _eI_(inner_key,data,acc)
         {return caml_call4(remove,outer_key,inner_key,data,acc)}
        return caml_call3(Core_Map[55],inner_map,acc,_eI_)}
      function _eD_(outer_key,inner_map,acc)
       {function _eH_(inner_key,data,acc)
         {return caml_call4(add,outer_key,inner_key,data,acc)}
        return caml_call3(Core_Map[55],inner_map,acc,_eH_)}
      var _eE_=0;
      return unordered_fold
              (0,
               [0,
                function(outer_key,old_inner_map,new_inner_map,acc)
                 {function _eF_(acc,param)
                   {var diff=param[2],inner_key=param[1],_eG_=diff[1];
                    if(847852583 === _eG_)
                     {var data_removed=diff[2];
                      return caml_call4
                              (remove,outer_key,inner_key,data_removed,acc)}
                    if(1013247643 <= _eG_)
                     {var match=diff[2],new_data=match[2],old_data=match[1];
                      return caml_call5
                              (update$1,outer_key,inner_key,old_data,new_data,acc)}
                    var data_added=diff[2];
                    return caml_call4(add,outer_key,inner_key,data_added,acc)}
                  return caml_call2
                          (caml_call3
                            (Core_Map[81],old_inner_map,new_inner_map,data_equal),
                           acc,
                           _eF_)}],
               _eE_,
               revert_to_init_when_empty,
               incr_map,
               init,
               _eD_,
               _eC_)}
    function with_comparator(get_comparator,x,f)
     {var
       _eA_=caml_call2(Incremental[10],x,get_comparator),
       _eB_=caml_call2(Incremental[34],0,_eA_);
      return caml_call2(Incremental[26],_eB_,f)}
    function with_comparator$0(map,f)
     {return with_comparator(Core_Map[2],map,f)}
    function of_set(set)
     {function _ev_(comparator)
       {var
         old_input=[0,caml_call1(Core_Set[3][1],comparator)],
         old_output=[0,caml_call1(Core_Map[110][1],comparator)];
        function _ew_(new_input)
         {function _ex_(output,param)
           {if(0 === param[0])
             {var k=param[1];return caml_call2(Core_Map[41],output,k)}
            var k$0=param[1];
            return caml_call3(Core_Map[31],output,k$0,0)}
          var
           _ey_=old_output[1],
           _ez_=caml_call2(Core_Set[17],old_input[1],new_input),
           new_output=caml_call3(Core_Sequence[18],_ez_,_ey_,_ex_);
          old_input[1] = new_input;
          old_output[1] = new_output;
          return new_output}
        return caml_call2(Incremental[10],set,_ew_)}
      return with_comparator(Core_Set[5],set,_ev_)}
    function generic_mapi(witness,opt,map)
     {if(opt)var sth=opt[1],data_equal=sth;else var data_equal=Core[246];
      return function(f)
       {return with_old
                (map,
                 function(old,input)
                  {var match=caml_call1(Core_Map[29],input);
                   if(0 !== match && old)
                    {var
                      match$0=old[1],
                      old_output=match$0[2],
                      old_input=match$0[1],
                      _et_=
                       function(output,param)
                        {var change=param[2],key=param[1],_eu_=change[1];
                         if(847852583 === _eu_)
                          return caml_call2(Core_Map[41],output,key);
                         var
                          new_data=1013247643 <= _eu_?change[2][2]:change[2],
                          res=caml_call2(f,key,new_data);
                         if(! witness)return caml_call3(Core_Map[32],output,key,res);
                         if(! res)return caml_call2(Core_Map[41],output,key);
                         var output_data=res[1];
                         return caml_call3(Core_Map[32],output,key,output_data)};
                     return caml_call5
                             (Core_Map[81],old_input,input,data_equal,old_output,_et_)}
                   return witness
                           ?caml_call2(Core_Map[63],input,f)
                           :caml_call2(Core_Map[52],input,f)})}}
    function mapi(data_equal,map,f)
     {return caml_call1(generic_mapi(0,data_equal,map),f)}
    function filter_mapi(data_equal,map,f)
     {return caml_call1(generic_mapi(1,data_equal,map),f)}
    function map(data_equal,map,f)
     {return mapi
              (data_equal,map,function(param,data){return caml_call1(f,data)})}
    function filter_map(data_equal,map,f)
     {return filter_mapi
              (data_equal,map,function(param,data){return caml_call1(f,data)})}
    function with_old2(i1,i2,f)
     {var old=[0,0];
      function _es_(a1,a2)
       {var b=caml_call3(f,old[1],a1,a2);old[1] = [0,[0,a1,a2,b]];return b}
      return caml_call3(Incremental[12],i1,i2,_es_)}
    function mapi_count(opt,input,comparator)
     {if(opt)var sth=opt[1],data_equal=sth;else var data_equal=Core[246];
      return function(f)
       {function add(new_key,acc)
         {function _er_(param)
           {if(! param)return 1;var n=param[1];return n + 1 | 0}
          return caml_call3(Core_Map[37],acc,new_key,_er_)}
        function remove(new_key,acc)
         {function _ep_(param)
           {if(! param)return 0;
            var _eq_=param[1];
            return 1 === _eq_?0:[0,_eq_ - 1 | 0]}
          return caml_call3(Core_Map[36],acc,new_key,_ep_)}
        function _ej_(key,data,acc){return remove(caml_call2(f,key,data),acc)}
        function _ek_(key,data,acc){return add(caml_call2(f,key,data),acc)}
        var _el_=caml_call1(Core_Map[4],comparator),_em_=0,_en_=0;
        return unordered_fold
                ([0,data_equal],
                 [0,
                  function(key,old_data,new_data,acc)
                   {var
                     prev_key=caml_call2(f,key,old_data),
                     new_key=caml_call2(f,key,new_data),
                     _eo_=caml_call2(comparator[1][1],prev_key,new_key);
                    return caml_call2(Core[90],_eo_,0)
                            ?acc
                            :add(new_key,remove(prev_key,acc))}],
                 _en_,
                 _em_,
                 input,
                 _el_,
                 _ek_,
                 _ej_)}}
    function map_count(data_equal,input,comparator,f)
     {function _ei_(param,data){return caml_call1(f,data)}
      return caml_call1(mapi_count(data_equal,input,comparator),_ei_)}
    function min_helper(map)
     {var match=caml_call1(Core_Map[82],map);
      if(! match)return 0;
      var match$0=match[1],min=match$0[1];
      return [0,min]}
    function max_helper(map)
     {var match=caml_call1(Core_Map[84],map);
      if(! match)return 0;
      var match$0=match[1],max=match$0[1];
      return [0,max]}
    function bounds_helper(map)
     {var
       match=caml_call1(Core_Map[82],map),
       match$0=caml_call1(Core_Map[84],map);
      if(match)
       {if(match$0)
         {var max=match$0[1][1],match$1=match[1],min=match$1[1];
          return [0,[0,min,max]]}}
      else
       if(! match$0)return 0;
      throw [0,Assert_failure,_a_]}
    function mapi_min(data_equal,input,comparator,f)
     {var _eh_=caml_call1(mapi_count(data_equal,input,comparator),f);
      return caml_call2(Incremental[10],_eh_,min_helper)}
    function mapi_max(data_equal,input,comparator,f)
     {var _eg_=caml_call1(mapi_count(data_equal,input,comparator),f);
      return caml_call2(Incremental[10],_eg_,max_helper)}
    function mapi_bounds(data_equal,input,comparator,f)
     {var _ef_=caml_call1(mapi_count(data_equal,input,comparator),f);
      return caml_call2(Incremental[10],_ef_,bounds_helper)}
    function mapi_mn(data_equal,input,comparator,f)
     {return mapi_min
              (data_equal,
               input,
               comparator,
               function(param,data){return caml_call1(f,data)})}
    function map_max(data_equal,input,comparator,f)
     {return mapi_max
              (data_equal,
               input,
               comparator,
               function(param,data){return caml_call1(f,data)})}
    function min_value(data_equal,input,comparator)
     {return mapi_mn(data_equal,input,comparator,function(_ee_){return _ee_})}
    function max_value(data_equal,input,comparator)
     {return map_max(data_equal,input,comparator,function(_ed_){return _ed_})}
    function map_bounds(data_equal,input,comparator,f)
     {return mapi_bounds
              (data_equal,
               input,
               comparator,
               function(param,data){return caml_call1(f,data)})}
    function value_bounds(data_equal,input,comparator)
     {return map_bounds
              (data_equal,input,comparator,function(_ec_){return _ec_})}
    function merge(opt,_d5_,left_map,right_map,f)
     {if(opt)
       var sth=opt[1],data_equal_left=sth;
      else
       var data_equal_left=Core[246];
      if(_d5_)
       var sth$0=_d5_[1],data_equal_right=sth$0;
      else
       var data_equal_right=Core[246];
      return with_old2
              (left_map,
               right_map,
               function(old,new_left_map,new_right_map)
                {var comparator=caml_call1(Core_Map[2],new_left_map);
                 if(old)
                  var
                   x=old[1],
                   old_output=x[3],
                   old_right_map=x[2],
                   old_left_map=x[1];
                 else
                  var
                   old_left_map$0=caml_call1(Core_Map[110][1],comparator),
                   old_output=old_left_map$0,
                   old_right_map=old_left_map$0,
                   old_left_map=old_left_map$0;
                 var
                  left_diff=
                   caml_call3
                    (Core_Map[80],old_left_map,new_left_map,data_equal_left),
                  right_diff=
                   caml_call3
                    (Core_Map[80],old_right_map,new_right_map,data_equal_right);
                 function _d6_(output,diff_element)
                  {if(2 === diff_element[0])
                    {var
                      right_key=diff_element[2][1],
                      match$3=diff_element[1],
                      left_key=match$3[1],
                      _ea_=caml_call2(comparator[1],left_key,right_key);
                     if(! caml_call2(Core[90],_ea_,0))
                      throw [0,Assert_failure,_b_];
                     var key$0=left_key}
                   else
                    var match=diff_element[1],key=match[1],key$0=key;
                   function new_data(param)
                    {var _eb_=param[1];
                     if(847852583 === _eb_)return 0;
                     var x=1013247643 <= _eb_?param[2][2]:param[2];
                     return [0,x]}
                   switch(diff_element[0])
                    {case 0:
                      var
                       match$0=diff_element[1],
                       left_diff=match$0[2],
                       right_data_opt=caml_call2(Core_Map[38],new_right_map,key$0),
                       right_data_opt$0=right_data_opt,
                       left_data_opt=new_data(left_diff);
                      break;
                     case 1:
                      var
                       match$1=diff_element[1],
                       right_diff=match$1[2],
                       right_data_opt$1=new_data(right_diff),
                       right_data_opt$0=right_data_opt$1,
                       left_data_opt=caml_call2(Core_Map[38],new_left_map,key$0);
                      break;
                     default:
                      var
                       right_diff$0=diff_element[2][2],
                       match$2=diff_element[1],
                       left_diff$0=match$2[2],
                       right_data_opt$2=new_data(right_diff$0),
                       left_data_opt$0=new_data(left_diff$0),
                       right_data_opt$0=right_data_opt$2,
                       left_data_opt=left_data_opt$0}
                   if(left_data_opt)
                    {var _d__=left_data_opt[1];
                     if(right_data_opt$0)
                      var
                       y=right_data_opt$0[1],
                       _d$_=caml_call2(f,key$0,[0,737457313,[0,_d__,y]]);
                     else
                      var _d$_=caml_call2(f,key$0,[0,847852583,_d__]);
                     var output_data_opt=_d$_}
                   else
                    if(right_data_opt$0)
                     var
                      y$0=right_data_opt$0[1],
                      output_data_opt=caml_call2(f,key$0,[0,-57574468,y$0]);
                    else
                     var output_data_opt=0;
                   if(! output_data_opt)
                    return caml_call2(Core_Map[41],output,key$0);
                   var data=output_data_opt[1];
                   return caml_call3(Core_Map[32],output,key$0,data)}
                 function _d7_(param,_d9_)
                  {var right_key=_d9_[1],left_key=param[1];
                   return caml_call2(comparator[1],left_key,right_key)}
                 var
                  _d8_=
                   caml_call3(Core_Sequence[62],left_diff,right_diff,_d7_);
                 return caml_call3(Core_Sequence[18],_d8_,old_output,_d6_)})}
    function generic_mapi_with_comparator(witness,cutoff,opt,lhs)
     {if(opt)var sth=opt[1],data_equal=sth;else var data_equal=Core[246];
      return function(comparator,f)
       {var
         incremental_state=caml_call1(Incremental[4],lhs),
         empty_map=caml_call1(Core_Map[110][1],comparator),
         prev_map=[0,empty_map],
         prev_nodes=[0,empty_map],
         acc=[0,empty_map];
        function _dP_(param){return acc[1]}
        var
         result=caml_call3(Incremental[79][2][2],incremental_state,0,_dP_),
         on_inner_change=
          witness
           ?function(key,opt)
             {var old=acc[1];
              if(opt)
               var data=opt[1],_d4_=caml_call3(Core_Map[32],old,key,data);
              else
               var _d4_=caml_call2(Core_Map[41],old,key);
              acc[1] = _d4_;
              return 0}
           :function(key,data)
             {acc[1] = caml_call3(Core_Map[32],acc[1],key,data);return 0},
         lhs_change=[];
        caml_update_dummy
         (lhs_change,
          [246,
           function(_dS_)
            {function _dT_(map)
              {function _dU_(nodes,param)
                {var changed=param[2],key=param[1],_dV_=changed[1];
                 if(847852583 === _dV_)
                  {var
                    match=caml_call2(Core_Map[39],nodes,key),
                    dep=match[2],
                    node=match[1],
                    nodes$0=caml_call2(Core_Map[41],nodes,key);
                   caml_call2(Incremental[79][2][7],result,dep);
                   acc[1] = caml_call2(Core_Map[41],acc[1],key);
                   caml_call1(Incremental[79][2][5],node);
                   return nodes$0}
                 if(1013247643 <= _dV_)
                  {var
                    match$0=caml_call2(Core_Map[39],nodes,key),
                    node$0=match$0[1];
                   caml_call1(Incremental[79][2][4],node$0);
                   return nodes}
                 function _dW_(param)
                  {return caml_call2(Core_Map[39],prev_map[1],key)}
                 var
                  node$1=
                   caml_call3(Incremental[79][2][2],incremental_state,0,_dW_);
                 function _dX_(c)
                  {var _d3_=caml_call1(Incremental[79][2][3],node$1);
                   return caml_call2(Incremental[59],_d3_,c)}
                 caml_call2(Core_Option[41],cutoff,_dX_);
                 var
                  _dY_=caml_call1(Core[237],lhs_change),
                  _dZ_=caml_call2(Incremental[79][1][2],0,_dY_);
                 caml_call2(Incremental[79][2][6],node$1,_dZ_);
                 var
                  _d0_=
                   caml_call2(f,key,caml_call1(Incremental[79][2][3],node$1)),
                  _d1_=[0,function(_d2_){return on_inner_change(key,_d2_)}],
                  user_function_dep=
                   caml_call2(Incremental[79][1][2],_d1_,_d0_);
                 caml_call2(Incremental[79][2][6],result,user_function_dep);
                 return caml_call3
                         (Core_Map[32],nodes,key,[0,node$1,user_function_dep])}
               var
                new_nodes=
                 caml_call5
                  (Core_Map[81],prev_map[1],map,data_equal,prev_nodes[1],_dU_);
               prev_nodes[1] = new_nodes;
               prev_map[1] = map;
               return 0}
             return caml_call2(Incremental[10],lhs,_dT_)}]);
        var
         _dQ_=caml_call1(Core[237],lhs_change),
         _dR_=caml_call2(Incremental[79][1][2],0,_dQ_);
        caml_call2(Incremental[79][2][6],result,_dR_);
        return caml_call1(Incremental[79][2][3],result)}}
    function filter_mapi$0(cutoff,data_equal,map,f)
     {return with_comparator$0
              (map,
               function(comparator)
                {return caml_call2
                         (generic_mapi_with_comparator(1,cutoff,data_equal,map),
                          comparator,
                          f)})}
    function mapi$0(cutoff,data_equal,map,f)
     {return with_comparator$0
              (map,
               function(comparator)
                {return caml_call2
                         (generic_mapi_with_comparator(0,cutoff,data_equal,map),
                          comparator,
                          f)})}
    function map$0(cutoff,data_equal,map,f)
     {return mapi$0
              (cutoff,
               data_equal,
               map,
               function(param,data){return caml_call1(f,data)})}
    function filter_map$0(cutoff,data_equal,map,f)
     {return filter_mapi$0
              (cutoff,
               data_equal,
               map,
               function(param,data){return caml_call1(f,data)})}
    function merge$0(cutoff,data_equal_left,data_equal_right,map1,map2,f)
     {function _dO_(key,diff){return caml_call2(f,key,diff)}
      return filter_mapi$0
              (cutoff,
               0,
               merge
                (data_equal_left,
                 data_equal_right,
                 map1,
                 map2,
                 function(param,diff){return [0,diff]}),
               _dO_)}
    function unzip_mapi(opt,left_result_equal,right_result_equal,input,f)
     {var
       pair=
        with_comparator$0
         (input,
          function(comparator)
           {if(opt)
             var sth=opt[1],data_equal=sth;
            else
             var data_equal=Core[246];
            if(left_result_equal)
             var sth$0=left_result_equal[1],left_result_equal$0=sth$0;
            else
             var left_result_equal$0=Core[246];
            if(right_result_equal)
             var sth$1=right_result_equal[1],right_result_equal$0=sth$1;
            else
             var right_result_equal$0=Core[246];
            var
             incremental_state=caml_call1(Incremental[4],input),
             empty_map=caml_call1(Core_Map[110][1],comparator),
             left_acc=[0,empty_map];
            function _dz_(param){return left_acc[1]}
            var
             left_result=
              caml_call3(Incremental[79][2][2],incremental_state,0,_dz_),
             right_acc=[0,empty_map];
            function _dA_(param){return right_acc[1]}
            var
             right_result=
              caml_call3(Incremental[79][2][2],incremental_state,0,_dA_),
             prev_map=[0,empty_map];
            function _dB_(map)
             {var
               match=caml_call1(Core_Map[28],prev_map[1]),
               match$0=caml_call1(Core_Map[28],map),
               switch$0=0;
              if(match)
               if(match$0)
                switch$0 = 1;
               else
                var
                 _dG_=
                  function(key,data)
                   {var match=caml_call2(f,key,data),l=match[1];return l},
                 left$0=caml_call2(Core_Map[52],map,_dG_),
                 _dH_=
                  function(key,data)
                   {var match=caml_call2(f,key,data),r=match[2];return r},
                 right$0=caml_call2(Core_Map[52],map,_dH_),
                 right=right$0,
                 left=left$0;
              else
               if(match$0)
                switch$0 = 1;
               else
                var
                 _dI_=
                  function(param,_dK_)
                   {var
                     changed=_dK_[2],
                     key=_dK_[1],
                     right=param[2],
                     left=param[1],
                     _dL_=changed[1];
                    if(847852583 === _dL_)
                     {var _dM_=caml_call2(Core_Map[41],right,key);
                      return [0,caml_call2(Core_Map[41],left,key),_dM_]}
                    if(1013247643 <= _dL_)
                     {var
                       match=changed[2],
                       new$0=match[2],
                       prev=match[1],
                       match$0=caml_call2(f,key,prev),
                       prev_b=match$0[2],
                       prev_a=match$0[1],
                       match$1=caml_call2(f,key,new$0),
                       new_b=match$1[2],
                       new_a=match$1[1],
                       left$0=
                        caml_call2(left_result_equal$0,prev_a,new_a)
                         ?left
                         :caml_call3(Core_Map[32],left,key,new_a),
                       right$0=
                        caml_call2(right_result_equal$0,prev_b,new_b)
                         ?right
                         :caml_call3(Core_Map[32],right,key,new_b);
                      return [0,left$0,right$0]}
                    var
                     element=changed[2],
                     match$2=caml_call2(f,key,element),
                     b=match$2[2],
                     a=match$2[1],
                     _dN_=caml_call3(Core_Map[32],right,key,b);
                    return [0,caml_call3(Core_Map[32],left,key,a),_dN_]},
                 _dJ_=
                  caml_call5
                   (Core_Map[81],
                    prev_map[1],
                    map,
                    data_equal,
                    [0,left_acc[1],right_acc[1]],
                    _dI_),
                 right=_dJ_[2],
                 left=_dJ_[1];
              if(switch$0)var right=empty_map,left=empty_map;
              if(1 - caml_call2(Core[246],left_acc[1],left))
               caml_call1(Incremental[79][2][4],left_result);
              if(1 - caml_call2(Core[246],right_acc[1],right))
               caml_call1(Incremental[79][2][4],right_result);
              left_acc[1] = left;
              right_acc[1] = right;
              prev_map[1] = map;
              return 0}
            var
             input_change=caml_call2(Incremental[10],input,_dB_),
             _dC_=caml_call2(Incremental[79][1][2],0,input_change);
            caml_call2(Incremental[79][2][6],left_result,_dC_);
            var _dD_=caml_call2(Incremental[79][1][2],0,input_change);
            caml_call2(Incremental[79][2][6],right_result,_dD_);
            var
             _dE_=caml_call1(Incremental[79][2][3],right_result),
             _dF_=[0,caml_call1(Incremental[79][2][3],left_result),_dE_];
            return caml_call2(Core_Tuple[1][8],Incremental[40],_dF_)});
      function _du_(_dy_){return _dy_[2]}
      var _dv_=caml_call2(Incremental[10],pair,_du_);
      function _dw_(_dx_){return _dx_[1]}
      return [0,caml_call2(Incremental[10],pair,_dw_),_dv_]}
    function unzip(left_result_equal,right_result_equal,input)
     {function _dt_(l,r){return caml_call2(Core_Tuple[1][10],l,r)}
      var
       data_equal=
        caml_call3(Core_Option[23],left_result_equal,right_result_equal,_dt_);
      return unzip_mapi
              (data_equal,
               left_result_equal,
               right_result_equal,
               input,
               function(param,data){return data})}
    function unzip_mapi$0(cutoff,opt,input,f)
     {var
       pair=
        with_comparator$0
         (input,
          function(comparator)
           {if(opt)
             var sth=opt[1],data_equal=sth;
            else
             var data_equal=Core[246];
            var
             incremental_state=caml_call1(Incremental[4],input),
             empty_map=caml_call1(Core_Map[110][1],comparator),
             prev_map=[0,empty_map],
             prev_nodes=[0,empty_map],
             left_acc=[0,empty_map];
            function _da_(param){return left_acc[1]}
            var
             left_result=
              caml_call3(Incremental[79][2][2],incremental_state,0,_da_),
             right_acc=[0,empty_map];
            function _db_(param){return right_acc[1]}
            var
             right_result=
              caml_call3(Incremental[79][2][2],incremental_state,0,_db_),
             input_change=[];
            caml_update_dummy
             (input_change,
              [246,
               function(_di_)
                {function _dj_(map)
                  {function _dk_(nodes,param)
                    {var changed=param[2],key=param[1],_dl_=changed[1];
                     if(847852583 === _dl_)
                      {var
                        match=caml_call2(Core_Map[39],nodes,key),
                        right_dep=match[3],
                        left_dep=match[2],
                        node=match[1],
                        nodes$0=caml_call2(Core_Map[41],nodes,key);
                       caml_call2(Incremental[79][2][7],left_result,left_dep);
                       caml_call2(Incremental[79][2][7],right_result,right_dep);
                       left_acc[1] = caml_call2(Core_Map[41],left_acc[1],key);
                       right_acc[1] = caml_call2(Core_Map[41],right_acc[1],key);
                       caml_call1(Incremental[79][2][5],node);
                       return nodes$0}
                     if(1013247643 <= _dl_)
                      {var
                        match$0=caml_call2(Core_Map[39],nodes,key),
                        node$0=match$0[1];
                       caml_call1(Incremental[79][2][4],node$0);
                       return nodes}
                     function _dm_(param)
                      {return caml_call2(Core_Map[39],prev_map[1],key)}
                     var
                      node$1=
                       caml_call3(Incremental[79][2][2],incremental_state,0,_dm_);
                     function _dn_(c)
                      {var _ds_=caml_call1(Incremental[79][2][3],node$1);
                       return caml_call2(Incremental[59],_ds_,c)}
                     caml_call2(Core_Option[41],cutoff,_dn_);
                     var
                      _do_=caml_call1(Core[237],input_change),
                      _dp_=caml_call2(Incremental[79][1][2],0,_do_);
                     caml_call2(Incremental[79][2][6],node$1,_dp_);
                     var
                      match$1=
                       caml_call2(f,key,caml_call1(Incremental[79][2][3],node$1)),
                      right_incr=match$1[2],
                      left_incr=match$1[1],
                      _dq_=
                       [0,
                        function(data)
                         {left_acc[1]
                          =
                          caml_call3(Core_Map[32],left_acc[1],key,data);
                          return 0}],
                      left_user_function_dep=
                       caml_call2(Incremental[79][1][2],_dq_,left_incr),
                      _dr_=
                       [0,
                        function(data)
                         {right_acc[1]
                          =
                          caml_call3(Core_Map[32],right_acc[1],key,data);
                          return 0}],
                      right_user_function_dep=
                       caml_call2(Incremental[79][1][2],_dr_,right_incr);
                     caml_call2
                      (Incremental[79][2][6],left_result,left_user_function_dep);
                     caml_call2
                      (Incremental[79][2][6],right_result,right_user_function_dep);
                     return caml_call3
                             (Core_Map[32],
                              nodes,
                              key,
                              [0,node$1,left_user_function_dep,right_user_function_dep])}
                   var
                    new_nodes=
                     caml_call5
                      (Core_Map[81],prev_map[1],map,data_equal,prev_nodes[1],_dk_);
                   prev_nodes[1] = new_nodes;
                   prev_map[1] = map;
                   return 0}
                 return caml_call2(Incremental[10],input,_dj_)}]);
            var
             _dc_=caml_call1(Core[237],input_change),
             _dd_=caml_call2(Incremental[79][1][2],0,_dc_);
            caml_call2(Incremental[79][2][6],left_result,_dd_);
            var
             _de_=caml_call1(Core[237],input_change),
             _df_=caml_call2(Incremental[79][1][2],0,_de_);
            caml_call2(Incremental[79][2][6],right_result,_df_);
            var
             _dg_=caml_call1(Incremental[79][2][3],right_result),
             _dh_=[0,caml_call1(Incremental[79][2][3],left_result),_dg_];
            return caml_call2(Core_Tuple[1][8],Incremental[40],_dh_)});
      function _c7_(_c$_){return _c$_[2]}
      var _c8_=caml_call2(Incremental[10],pair,_c7_);
      function _c9_(_c__){return _c__[1]}
      return [0,caml_call2(Incremental[10],pair,_c9_),_c8_]}
    function keys(map)
     {return with_comparator$0
              (map,
               function(comparator)
                {function add(key,param,acc)
                  {return caml_call2(Core_Set[11],acc,key)}
                 function remove(key,param,acc)
                  {return caml_call2(Core_Set[12],acc,key)}
                 function data_equal(param,_c6_){return 1}
                 return unordered_fold
                         ([0,data_equal],
                          0,
                          0,
                          _c_,
                          map,
                          caml_call1(Core_Set[3][1],comparator),
                          add,
                          remove)})}
    function partition_mapi(data_equal,map,f)
     {return with_comparator$0
              (map,
               function(comparator)
                {var empty=caml_call1(Core_Map[110][1],comparator);
                 function _cX_(key,param,_c4_)
                  {var
                    second=_c4_[2],
                    first=_c4_[1],
                    _c5_=caml_call2(Core_Map[41],second,key);
                   return [0,caml_call2(Core_Map[41],first,key),_c5_]}
                 function _cY_(key,data,param)
                  {var
                    second=param[2],
                    first=param[1],
                    match=caml_call2(f,key,data);
                   if(0 === match[0])
                    {var data$0=match[1];
                     return [0,caml_call3(Core_Map[31],first,key,data$0),second]}
                   var data$1=match[1];
                   return [0,first,caml_call3(Core_Map[31],second,key,data$1)]}
                 var _cZ_=[0,empty,empty],_c0_=0;
                 return unordered_fold
                         (data_equal,
                          [0,
                           function(key,param,data,_c1_)
                            {var
                              second=_c1_[2],
                              first=_c1_[1],
                              match=caml_call2(f,key,data);
                             if(0 === match[0])
                              {var
                                data$0=match[1],
                                _c2_=caml_call2(Core_Map[41],second,key);
                               return [0,caml_call3(Core_Map[32],first,key,data$0),_c2_]}
                             var
                              data$1=match[1],
                              _c3_=caml_call3(Core_Map[32],second,key,data$1);
                             return [0,caml_call2(Core_Map[41],first,key),_c3_]}],
                          _c0_,
                          _d_,
                          map,
                          _cZ_,
                          _cY_,
                          _cX_)})}
    function flatten(state,map)
     {var
       _cS_=caml_call1(Core_Map[2],map),
       result=[0,caml_call1(Core_Map[110][1],_cS_)];
      function _cT_(param){return result[1]}
      var node=caml_call3(Incremental[79][2][2],state,0,_cT_);
      function _cU_(key,incr)
       {var
         _cV_=
          [0,
           function(a)
            {result[1] = caml_call3(Core_Map[32],result[1],key,a);return 0}],
         _cW_=caml_call2(Incremental[79][1][2],_cV_,incr);
        return caml_call2(Incremental[79][2][6],node,_cW_)}
      caml_call2(Core_Map[45],map,_cU_);
      return caml_call1(Incremental[79][2][3],node)}
    function join(map_incr)
     {return with_comparator$0
              (map_incr,
               function(comparator)
                {var
                  incremental_state=caml_call1(Incremental[4],map_incr),
                  empty_map=caml_call1(Core_Map[110][1],comparator),
                  result_map=[0,empty_map],
                  old_map_of_incrs=[0,empty_map],
                  current_dependencies=[0,empty_map];
                 function _cM_(param){return result_map[1]}
                 var
                  result=
                   caml_call3(Incremental[79][2][2],incremental_state,0,_cM_);
                 function add_subnode(current_dependencies,key,data_node)
                  {var
                    _cR_=
                     [0,
                      function(data)
                       {result_map[1]
                        =
                        caml_call3(Core_Map[32],result_map[1],key,data);
                        return 0}],
                    new_dep=caml_call2(Incremental[79][1][2],_cR_,data_node);
                   caml_call2(Incremental[79][2][6],result,new_dep);
                   return caml_call3
                           (Core_Map[32],current_dependencies,key,new_dep)}
                 function remove_subnode(current_dependencies,key)
                  {var dep=caml_call2(Core_Map[39],current_dependencies,key);
                   caml_call2(Incremental[79][2][7],result,dep);
                   result_map[1] = caml_call2(Core_Map[41],result_map[1],key);
                   return caml_call2(Core_Map[41],current_dependencies,key)}
                 function _cN_(map_of_incrs)
                  {function _cP_(current_dependencies,param)
                    {var diff=param[2],key=param[1],_cQ_=diff[1];
                     if(847852583 === _cQ_)
                      return remove_subnode(current_dependencies,key);
                     if(1013247643 <= _cQ_)
                      {var match=diff[2],data_node=match[2];
                       return add_subnode
                               (remove_subnode(current_dependencies,key),key,data_node)}
                     var data_node$0=diff[2];
                     return add_subnode(current_dependencies,key,data_node$0)}
                   var
                    new_dependency_map=
                     caml_call5
                      (Core_Map[81],
                       old_map_of_incrs[1],
                       map_of_incrs,
                       Core[246],
                       current_dependencies[1],
                       _cP_);
                   current_dependencies[1] = new_dependency_map;
                   old_map_of_incrs[1] = map_of_incrs;
                   return 0}
                 var
                  lhs_change=caml_call2(Incremental[10],map_incr,_cN_),
                  _cO_=caml_call2(Incremental[79][1][2],0,lhs_change);
                 caml_call2(Incremental[79][2][6],result,_cO_);
                 return caml_call1(Incremental[79][2][3],result)})}
    function separate(input_map,data_equal)
     {var state=caml_call1(Incremental[4],input_map);
      return with_comparator$0
              (input_map,
               function(comparator)
                {var
                  empty=caml_call1(Core_Map[110][1],comparator),
                  state$0=[0,empty,empty,empty];
                 function _cA_(param){return state$0[3]}
                 var
                  output_map_node=
                   caml_call3(Incremental[79][2][2],state,0,_cA_);
                 function make_node_depend_on_input_map_
                  (node,input_map_changed)
                  {var
                    _cL_=caml_call1(Core_Lazy[32],input_map_changed),
                    dependency=caml_call2(Incremental[79][1][2],0,_cL_);
                   return caml_call2(Incremental[79][2][6],node,dependency)}
                 var input_map_changed=[];
                 caml_update_dummy
                  (input_map_changed,
                   [246,
                    function(_cB_)
                     {function _cC_(input_map)
                       {var prev_input_map=state$0[1];
                        function _cD_(param,_cF_)
                         {var
                           change=_cF_[2],
                           key=_cF_[1],
                           output_map=param[2],
                           expert_nodes=param[1],
                           _cG_=change[1];
                          if(847852583 === _cG_)
                           {var old_node=caml_call2(Core_Map[39],expert_nodes,key);
                            caml_call1(Incremental[79][2][5],old_node);
                            caml_call1(Incremental[79][2][4],output_map_node);
                            var _cH_=caml_call2(Core_Map[41],output_map,key);
                            return [0,caml_call2(Core_Map[41],expert_nodes,key),_cH_]}
                          if(1013247643 <= _cG_)
                           {var _cI_=caml_call2(Core_Map[39],expert_nodes,key);
                            caml_call1(Incremental[79][2][4],_cI_);
                            return [0,expert_nodes,output_map]}
                          function _cE_(param)
                           {return caml_call2(Core_Map[39],state$0[1],key)}
                          var node=caml_call3(Incremental[79][2][2],state,0,_cE_);
                          make_node_depend_on_input_map_(node,input_map_changed);
                          caml_call1(Incremental[79][2][4],output_map_node);
                          var
                           _cJ_=caml_call1(Incremental[79][2][3],node),
                           _cK_=caml_call3(Core_Map[31],output_map,key,_cJ_);
                          return [0,
                                  caml_call3(Core_Map[31],expert_nodes,key,node),
                                  _cK_]}
                        var
                         match=
                          caml_call5
                           (Core_Map[81],
                            prev_input_map,
                            input_map,
                            data_equal,
                            [0,state$0[2],state$0[3]],
                            _cD_),
                         output_map=match[2],
                         expert_nodes=match[1];
                        state$0[1] = input_map;
                        state$0[2] = expert_nodes;
                        state$0[3] = output_map;
                        return 0}
                      return caml_call2(Incremental[10],input_map,_cC_)}]);
                 make_node_depend_on_input_map_
                  (output_map_node,input_map_changed);
                 return caml_call1(Incremental[79][2][3],output_map_node)})}
    function subrange(opt,map_incr)
     {if(opt)var sth=opt[1],data_equal=sth;else var data_equal=Core[246];
      return function(range)
       {return with_old2
                (map_incr,
                 range,
                 function(old,map,range)
                  {var compare=caml_call1(Core_Map[2],map)[1];
                   function cmp_a(l,r)
                    {var _cz_=caml_call2(compare,l,r);
                     return caml_call2(Core[90],_cz_,0)}
                   function maybe_bound_equal(a_002,b_003)
                    {if(caml_call2(Ppx_compare_lib[1],a_002,b_003))return 1;
                     if(typeof a_002 === "number")
                      {if(typeof b_003 === "number")return 1;
                       if(1 === b_003[0])return 0}
                     else
                      {if(0 === a_002[0])
                        {var _cx_=a_002[1];
                         if(typeof b_003 !== "number" && 0 === b_003[0])
                          {var b_005=b_003[1];return cmp_a(_cx_,b_005)}
                         return 0}
                       var _cy_=a_002[1];
                       if(typeof b_003 === "number")return 0;
                       if(0 !== b_003[0])
                        {var b_007=b_003[1];return cmp_a(_cy_,b_007)}}
                     return 0}
                   function range_is_empty(min,max)
                    {var switch$0=0;
                     if(typeof min !== "number")
                      if(0 === min[0])
                       {var _cv_=min[1];
                        if(typeof max !== "number")
                         {if(0 === max[0])
                           {var max$0=max[1],_ct_=caml_call2(compare,_cv_,max$0);
                            return caml_call2(Core[91],_ct_,0)}
                          var max$1=max[1],min$0=_cv_;
                          switch$0 = 1}}
                      else
                       {var _cw_=min[1];
                        if(typeof max !== "number")
                         {var max$1=max[1],min$0=_cw_;switch$0 = 1}}
                     if(! switch$0)return 0;
                     var _cu_=caml_call2(compare,min$0,max$1);
                     return caml_call2(Core[88],_cu_,0)}
                   function range_includes(min,max,key)
                    {var _cs_=caml_call3(Core_Maybe_bound[17],min,key,compare);
                     return _cs_
                             ?caml_call3(Core_Maybe_bound[18],max,key,compare)
                             :_cs_}
                   if(! range)
                    {var _ck_=caml_call1(Core_Map[2],map);
                     return caml_call1(Core_Map[110][1],_ck_)}
                   var range$0=range[1],max=range$0[2],min=range$0[1];
                   function from_scratch(param)
                    {return caml_call3(Core_Map[94],map,min,max)}
                   if(old)
                    {var _ch_=old[1],_ci_=_ch_[2];
                     if(_ci_)
                      {var
                        old_range=_ci_[1],
                        old_min=old_range[1],
                        old_map=_ch_[1],
                        old_max=old_range[2];
                       if
                        (!
                         range_is_empty(old_min,old_max)
                         &&
                         !
                         range_is_empty(min,old_max)
                         &&
                         !
                         range_is_empty(old_min,max))
                        {var
                          old_res=_ch_[3],
                          old_max$0=old_range[2],
                          _cj_=
                           function(param)
                            {function apply_diff_in_intersection(param$0,_cp_)
                              {var
                                data=_cp_[2],
                                key=_cp_[1],
                                map=param$0[2],
                                outside=param$0[1],
                                _co_=range_includes(min,max,key),
                                _cq_=_co_?range_includes(old_min,old_max$0,key):_co_;
                               if(! _cq_)
                                {var outside$0=outside - 1 | 0;
                                 return 0 <= outside$0
                                         ?[0,outside$0,caml_call2(Core_Map[41],map,key)]
                                         :caml_call1(param,from_scratch(0))}
                               var _cr_=data[1];
                               if(847852583 === _cr_)
                                return [0,outside,caml_call2(Core_Map[41],map,key)];
                               var data$0=1013247643 <= _cr_?data[2][2]:data[2];
                               return [0,outside,caml_call3(Core_Map[32],map,key,data$0)]}
                             var
                              outside_cutoff=caml_call1(Core_Map[29],old_res) / 4 | 0,
                              with_updated_values_in_interse=
                               caml_call5
                                 (Core_Map[81],
                                  old_map,
                                  map,
                                  data_equal,
                                  [0,outside_cutoff,old_res],
                                  apply_diff_in_intersection)
                                [2];
                             if
                              (caml_call4
                                (Core_Tuple[1][10],
                                 maybe_bound_equal,
                                 maybe_bound_equal,
                                 old_range,
                                 range$0))
                              return with_updated_values_in_interse;
                             var
                              without_keys_out_of_range=
                               caml_call3
                                (Core_Map[94],with_updated_values_in_interse,min,max);
                             function map_append_exn(lower_part,upper_part)
                              {var match=caml_call2(Core_Map[93],lower_part,upper_part);
                               if(typeof match === "number")
                                return caml_call1(Core[6],cst_impossible_case_BUG_in_inc);
                               var map=match[2];
                               return map}
                             if(typeof old_min === "number")
                              var
                               _cl_=caml_call1(Core_Map[2],map),
                               _cm_=caml_call1(Core_Map[110][1],_cl_);
                             else
                              if(0 === old_min[0])
                               var
                                old_min$0=old_min[1],
                                _cm_=caml_call3(Core_Map[94],map,min,[1,old_min$0]);
                              else
                               var
                                old_min$1=old_min[1],
                                _cm_=caml_call3(Core_Map[94],map,min,[0,old_min$1]);
                             if(typeof old_max$0 === "number")
                              var
                               _cn_=caml_call1(Core_Map[2],map),
                               upper_part=caml_call1(Core_Map[110][1],_cn_);
                             else
                              if(0 === old_max$0[0])
                               var
                                old_max=old_max$0[1],
                                upper_part=caml_call3(Core_Map[94],map,[1,old_max],max);
                              else
                               var
                                old_max$1=old_max$0[1],
                                upper_part=caml_call3(Core_Map[94],map,[0,old_max$1],max);
                             var
                              with_new_keys_now_in_range=
                               map_append_exn
                                (_cm_,map_append_exn(without_keys_out_of_range,upper_part));
                             return with_new_keys_now_in_range};
                         return caml_call1(Core[260],_cj_)}
                       return from_scratch(0)}}
                   return from_scratch(0)})}}
    function rekey(data_equal,map_incr,outer_comparator,f)
     {function _b$_(key,data,output)
       {var _cg_=caml_call2(f,key,data);
        return caml_call2(Core_Map[41],output,_cg_)}
      function _ca_(key,data,output)
       {var _cf_=caml_call2(f,key,data);
        return caml_call3(Core_Map[31],output,_cf_,data)}
      var _cb_=caml_call1(Core_Map[4],outer_comparator),_cc_=0;
      return unordered_fold
              (data_equal,
               [0,
                function(key,old_data,new_data,output)
                 {var
                   prev_key=caml_call2(f,key,old_data),
                   new_key=caml_call2(f,key,new_data),
                   _cd_=
                    caml_call2
                     (caml_call1(Core_Map[2],output)[1],prev_key,new_key);
                  if(caml_call2(Core[90],_cd_,0))
                   return caml_call3(Core_Map[32],output,new_key,new_data);
                  var _ce_=caml_call2(Core_Map[41],output,prev_key);
                  return caml_call3(Core_Map[31],_ce_,new_key,new_data)}],
               _cc_,
               _e_,
               map_incr,
               _cb_,
               _ca_,
               _b$_)}
    function index_byi(data_equal,map_incr,outer_comparator,index)
     {return with_comparator$0
              (map_incr,
               function(inner_comparator)
                {function _b7_(inner_key,data,outer_map)
                  {var match=caml_call2(index,inner_key,data);
                   if(! match)return outer_map;
                   var outer_key=match[1];
                   function _b__(param)
                    {if(! param)
                      return caml_call1(Core[6],cst_BUG_Hit_supposedly_impossi);
                     var
                      inner_map=param[1],
                      inner_map$0=caml_call2(Core_Map[41],inner_map,inner_key);
                     return caml_call1(Core_Map[28],inner_map$0)
                             ?0
                             :[0,inner_map$0]}
                   return caml_call3(Core_Map[36],outer_map,outer_key,_b__)}
                 function _b8_(inner_key,data,outer_map)
                  {var match=caml_call2(index,inner_key,data);
                   if(! match)return outer_map;
                   var outer_key=match[1];
                   function _b9_(param)
                    {if(! param)
                      return caml_call3
                              (Core_Map[110][2],inner_comparator,inner_key,data);
                     var inner_map=param[1];
                     return caml_call3(Core_Map[31],inner_map,inner_key,data)}
                   return caml_call3(Core_Map[37],outer_map,outer_key,_b9_)}
                 return unordered_fold
                         (data_equal,
                          0,
                          0,
                          _f_,
                          map_incr,
                          caml_call1(Core_Map[4],outer_comparator),
                          _b8_,
                          _b7_)})}
    function index_by(data_equal,map_incr,comparator,index)
     {return index_byi
              (data_equal,
               map_incr,
               comparator,
               function(param,data){return caml_call1(index,data)})}
    function is_known(param)
     {if(typeof param === "number" && param)return 0;return 1}
    function to_option(param)
     {if(typeof param === "number")return 0;var k=param[1];return [0,k]}
    function find_key_range_linear(from,to,map)
     {var
       len=caml_call1(Core_Map[29],map),
       begin_key=caml_call2(Core_Int[84],from,len)?0:1,
       end_key=caml_call2(Core_Int[84],to,len)?0:1;
      function find_keys(fold,start_pos,advance_pos)
       {function _b5_(param)
         {return caml_call3
                  (fold,
                   map,
                   [0,begin_key,end_key,start_pos],
                   function(key,param$0,_b6_)
                    {var
                      pos=_b6_[3],
                      end_key=_b6_[2],
                      begin_key=_b6_[1],
                      begin_key$0=
                       caml_call2(Core_Int[86],pos,from)?[0,key]:begin_key,
                      end_key$0=caml_call2(Core_Int[86],pos,to)?[0,key]:end_key;
                     if(is_known(begin_key$0) && is_known(end_key$0))
                      return caml_call1(param,[0,begin_key$0,end_key$0,pos]);
                     return [0,begin_key$0,end_key$0,caml_call1(advance_pos,pos)]})}
        return caml_call1(Core[260],_b5_)}
      if(caml_call2(Core[92],to,len - from | 0))
       var
        _b1_=function(pos){return pos + 1 | 0},
        match=find_keys(Core_Map[55],0,_b1_);
      else
       var
        _b4_=function(pos){return pos - 1 | 0},
        match=find_keys(Core_Map[57],len - 1 | 0,_b4_);
      var end_key$0=match[2],begin_key$0=match[1];
      function _b2_(begin_key){return [0,begin_key,to_option(end_key$0)]}
      var _b3_=to_option(begin_key$0);
      return caml_call2(Core_Option[29],_b3_,_b2_)}
    function rank(map,key)
     {return with_comparator$0
              (map,
               function(comparator)
                {var compare_key=comparator[1];
                 function same_key(a,b)
                  {var _b0_=caml_call2(compare_key,a,b);
                   return caml_call2(Core[90],_b0_,0)}
                 function process(old,new_map,new_key)
                  {var old$0=old;
                   for(;;)
                    {if(! caml_call2(Core_Map[42],new_map,new_key))return 0;
                     if(old$0)
                      {var
                        match=old$0[1],
                        old_rank=match[3],
                        old_key=match[2],
                        old_map=match[1];
                       if
                        (caml_call2(Core[246],new_map,old_map)
                         &&
                         same_key(old_key,new_key))
                        return old_rank;
                       if(old_rank)
                        {var old_rank$0=old_rank[1];
                         if(caml_call2(Core[246],new_map,old_map))
                          {var _bS_=caml_call2(compare_key,new_key,old_key);
                           if(caml_call2(Core[92],_bS_,0))
                            var
                             upper_bound=[1,old_key],
                             lower_bound=[1,new_key],
                             subrange=
                              caml_call3(Core_Map[94],new_map,lower_bound,upper_bound),
                             _bV_=
                              (old_rank$0 - caml_call1(Core_Map[29],subrange) | 0)
                              -
                              1
                              |
                              0;
                           else
                            var
                             upper_bound$0=[1,new_key],
                             lower_bound$0=[1,old_key],
                             subrange$0=
                              caml_call3(Core_Map[94],new_map,lower_bound$0,upper_bound$0),
                             _bV_=
                              (old_rank$0 + caml_call1(Core_Map[29],subrange$0) | 0)
                              +
                              1
                              |
                              0;
                           return [0,_bV_]}
                         if(same_key(new_key,old_key))
                          {var
                            _bT_=
                             function(acc,param)
                              {var diff=param[2],diff_key=param[1];
                               if(typeof diff !== "number")
                                {var _bX_=diff[1];
                                 if(-57574468 === _bX_)
                                  {var _bY_=caml_call2(compare_key,diff_key,new_key);
                                   if(caml_call2(Core[92],_bY_,0))return acc + 1 | 0}
                                 else
                                  if(847852583 === _bX_)
                                   {var _bZ_=caml_call2(compare_key,diff_key,new_key);
                                    if(caml_call2(Core[92],_bZ_,0))return acc - 1 | 0}}
                               return acc},
                            _bU_=function(param,_bW_){return 1};
                           return [0,
                                   caml_call5
                                    (Core_Map[81],old_map,new_map,_bU_,old_rank$0,_bT_)]}
                         var
                          old_rank$1=
                           process
                            ([0,[0,old_map,old_key,[0,old_rank$0]]],new_map,old_key),
                          old$1=[0,[0,new_map,old_key,old_rank$1]],
                          old$0=old$1;
                         continue}}
                     return caml_call2(Core_Map[100],new_map,new_key)}}
                 return with_old2(map,key,process)})}
    function subrange_by_rank(data_equal,map,range)
     {function find_key_range(range)
       {return with_old2
                (map,
                 range,
                 function(old,map,param)
                  {var
                    to=param[2],
                    from=param[1],
                    _by_=caml_call2(Core_Int[88],to,from),
                    _bz_=_by_ || caml_call2(Core_Int[88],from,0);
                   if(_bz_)
                    {var
                      _bA_=[0,[1,[0,_g_,[0,caml_call1(Core[356],to),0]]],0],
                      _bB_=[0,[1,[0,_h_,[0,caml_call1(Core[356],from),0]]],_bA_],
                      _bC_=
                       [1,
                        [0,
                         caml_call1(Sexplib0_Sexp_conv[7],cst_Invalid_indices),
                         _bB_]];
                     caml_call1(Core[253],_bC_)}
                   if(old)
                    {var _bD_=old[1],_bE_=_bD_[3];
                     if(_bE_)
                      {var
                        _bF_=_bE_[1],
                        end_key_opt$0=_bF_[2],
                        begin_key=_bF_[1],
                        match=_bD_[2],
                        old_to=match[2],
                        old_from=match[1],
                        old_map=_bD_[1],
                        _bG_=caml_call1(Core_Map[2],map)[1],
                        find_offset=
                         function(key,changed_key,change)
                          {var _bQ_=caml_call2(_bG_,changed_key,key);
                           if(! caml_call2(Core_Int[88],_bQ_,0))return 0;
                           if(typeof change !== "number")
                            {var _bR_=change[1];
                             if(-57574468 === _bR_)return -1;
                             if(847852583 === _bR_)return 1}
                           return 0},
                        range_offset_begin=from - old_from | 0,
                        range_offset_end=to - old_to | 0,
                        adjust_and_offset=
                         function(by$1,key$1)
                          {var switch$0=0;
                           if
                            (caml_call2(Core[88],by$1,0)
                             &&
                             !
                             caml_call2(Core_Map[42],map,key$1))
                            {var _bP_=1;switch$0 = 1}
                           if(! switch$0)var _bP_=0;
                           var by$2=by$1 + _bP_ | 0,key=key$1,by=by$2;
                           for(;;)
                            {if(caml_call2(Core_Int[86],by,0))return [0,key];
                             if(caml_call2(Core_Int[88],by,0))
                              var add=1,closest_dir=-640801497;
                             else
                              var add=-1,closest_dir=-779285466;
                             var match=caml_call3(Core_Map[97],map,closest_dir,key);
                             if(! match)return 0;
                             var
                              match$0=match[1],
                              key$0=match$0[1],
                              by$0=by + add | 0,
                              key=key$0,
                              by=by$0}},
                        diff=
                         function(init,f)
                          {function _bN_(param,_bO_){return 1}
                           return caml_call5(Core_Map[81],old_map,map,_bN_,init,f)};
                       if(end_key_opt$0)
                        var
                         end_key=end_key_opt$0[1],
                         match$0=
                          diff
                           (_i_,
                            function(param,_bK_)
                             {var
                               change=_bK_[2],
                               key=_bK_[1],
                               offset_end=param[2],
                               offset_begin=param[1],
                               _bL_=offset_end + find_offset(end_key,key,change) | 0;
                              return [0,
                                      offset_begin + find_offset(begin_key,key,change) | 0,
                                      _bL_]}),
                         map_offset_end=match$0[2],
                         map_offset_begin=match$0[1],
                         end_key_opt$1=
                          adjust_and_offset
                           (map_offset_end + range_offset_end | 0,end_key),
                         end_key_opt$2=end_key_opt$1,
                         begin_key_opt=
                          adjust_and_offset
                           (map_offset_begin + range_offset_begin | 0,begin_key);
                       else
                        var
                         map_offset_begin$0=
                          diff
                           (0,
                            function(offset_begin,param)
                             {var change=param[2],key=param[1];
                              return offset_begin + find_offset(begin_key,key,change) | 0}),
                         _bw_=function(_bM_){return _bM_[1]},
                         _bx_=find_key_range_linear(to,to,map),
                         end_key_opt=caml_call2(Core_Option[29],_bx_,_bw_),
                         begin_key_opt$0=
                          adjust_and_offset
                           (map_offset_begin$0 + range_offset_begin | 0,begin_key),
                         end_key_opt$2=end_key_opt,
                         begin_key_opt=begin_key_opt$0;
                       var _bH_=caml_call1(Core_Map[42],map);
                       if(! caml_call2(Core_Option[43],begin_key_opt,_bH_))
                        throw [0,Assert_failure,_k_];
                       var _bI_=caml_call1(Core_Map[42],map);
                       if(! caml_call2(Core_Option[43],end_key_opt$2,_bI_))
                        throw [0,Assert_failure,_j_];
                       var
                        _bJ_=
                         function(begin_key){return [0,begin_key,end_key_opt$2]};
                       return caml_call2(Core_Option[29],begin_key_opt,_bJ_)}}
                   return find_key_range_linear(from,to,map)})}
      function symbol(new$0,bound)
       {function _bv_(param){return new$0}
        return caml_call2(Core_Maybe_bound[16],bound,_bv_)}
      var
       _a0_=caml_call1(Incremental[4],map),
       return$0=caml_call1(Incremental[9],_a0_);
      function _a1_(param)
       {if(3 < param >>> 0)throw [0,Assert_failure,_l_];
        switch(param)
         {case 0:return caml_call1(return$0,_m_);
          case 1:
           var
            _a4_=
             function(param)
              {var _br_=param[1];
               if(typeof _br_ !== "number")
                {var _bs_=_br_[1];if(typeof param[2] !== "number")return _bs_}
               throw [0,Assert_failure,_n_]},
            l=caml_call2(Incremental[76][3][5],range,_a4_),
            _a5_=
             function(param)
              {var _bq_=param[1];
               if(typeof _bq_ !== "number" && typeof param[2] !== "number")
                return _bq_;
               throw [0,Assert_failure,_o_]},
            let_syntax_017=caml_call2(Incremental[76][3][5],range,_a5_),
            _a6_=
             function(param)
              {if(typeof param[1] !== "number")
                {var _bp_=param[2];
                 if(typeof _bp_ !== "number")
                  {var pattern_syntax_010=_bp_[1];return pattern_syntax_010}}
               throw [0,Assert_failure,_p_]},
            u=caml_call2(Incremental[76][3][5],range,_a6_),
            _a7_=
             function(param)
              {if(typeof param[1] !== "number")
                {var _bo_=param[2];if(typeof _bo_ !== "number")return _bo_}
               throw [0,Assert_failure,_q_]},
            let_syntax_018=caml_call2(Incremental[76][3][5],range,_a7_),
            let_syntax_016=find_key_range(caml_call2(Incremental[40],l,u)),
            _a8_=
             function(param)
              {var match=param[2],ub=match[2],lb=match[1],key_range=param[1];
               if(! key_range)return 0;
               var _bk_=key_range[1],_bl_=_bk_[2],_bm_=_bk_[1];
               if(! _bl_)return [0,[0,symbol(_bm_,lb),0]];
               var end_key=_bl_[1],_bn_=symbol(end_key,ub);
               return [0,[0,symbol(_bm_,lb),_bn_]]},
            _a9_=
             caml_call2(Incremental[76][3][20],let_syntax_017,let_syntax_018),
            _a__=caml_call2(Incremental[76][3][20],let_syntax_016,_a9_);
           return caml_call2(Incremental[76][3][5],_a__,_a8_);
          case 2:
           var
            _a$_=
             function(param)
              {var _bi_=param[1];
               if(typeof _bi_ !== "number")
                {var _bj_=_bi_[1];if(typeof param[2] === "number")return _bj_}
               throw [0,Assert_failure,_r_]},
            l$0=caml_call2(Incremental[76][3][5],range,_a$_),
            _ba_=
             function(param)
              {var _bh_=param[1];
               if(typeof _bh_ !== "number" && typeof param[2] === "number")
                return _bh_;
               throw [0,Assert_failure,_s_]},
            lb=caml_call2(Incremental[76][3][5],range,_ba_),
            let_syntax_020=find_key_range(caml_call2(Incremental[40],l$0,l$0)),
            _bb_=
             function(param)
              {var lb=param[2],key_range=param[1];
               if(! key_range)return 0;
               var match=key_range[1],key=match[1];
               return [0,[0,symbol(key,lb),0]]},
            _bc_=caml_call2(Incremental[76][3][20],let_syntax_020,lb);
           return caml_call2(Incremental[76][3][5],_bc_,_bb_);
          default:
           var
            _bd_=
             function(param)
              {if(typeof param[1] === "number")
                {var _bu_=param[2];
                 if(typeof _bu_ !== "number")
                  {var pattern_syntax_014=_bu_[1];return pattern_syntax_014}}
               throw [0,Assert_failure,_t_]},
            u$0=caml_call2(Incremental[76][3][5],range,_bd_),
            _be_=
             function(param)
              {if(typeof param[1] === "number")
                {var _bt_=param[2];if(typeof _bt_ !== "number")return _bt_}
               throw [0,Assert_failure,_u_]},
            ub=caml_call2(Incremental[76][3][5],range,_be_),
            let_syntax_023=find_key_range(caml_call2(Incremental[40],u$0,u$0)),
            _bf_=
             function(param)
              {var ub=param[2],key_range=param[1];
               if(! key_range)return 0;
               var match=key_range[1],key=match[1];
               return [0,[0,0,symbol(key,ub)]]},
            _bg_=caml_call2(Incremental[76][3][20],let_syntax_023,ub);
           return caml_call2(Incremental[76][3][5],_bg_,_bf_)}}
      function _a2_(param)
       {return typeof param[1] === "number"
                ?typeof param[2] === "number"?0:3
                :typeof param[2] === "number"?2:1}
      var
       _a3_=caml_call2(Incremental[76][3][5],range,_a2_),
       key_range=caml_call2(Incremental[76][3][1],_a3_,_a1_);
      return caml_call1(subrange(data_equal,map),key_range)}
    function transpose(opt,k2_comparator,m)
     {if(opt)var sth=opt[1],data_equal=sth;else var data_equal=Core[246];
      return with_comparator$0
              (m,
               function(k1_comparator)
                {function update(k1,old_data,new_data,acc)
                  {function _aU_(acc,param)
                    {var diff=param[2],k2=param[1],_aV_=diff[1];
                     if(847852583 === _aV_)
                      var value=0;
                     else
                      var x=1013247643 <= _aV_?diff[2][2]:diff[2],value=[0,x];
                     function _aW_(acc_inner)
                      {function _aX_(param){return value}
                       var
                        _aY_=caml_call1(Core_Map[110][1],k1_comparator),
                        _aZ_=caml_call2(Core_Option[34],acc_inner,_aY_),
                        acc_inner$0=caml_call3(Core_Map[36],_aZ_,k1,_aX_);
                       return caml_call1(Core_Map[28],acc_inner$0)
                               ?0
                               :[0,acc_inner$0]}
                     return caml_call3(Core_Map[36],acc,k2,_aW_)}
                   return caml_call5
                           (Core_Map[81],old_data,new_data,data_equal,acc,_aU_)}
                 function add(key,data)
                  {var _aS_=caml_call1(Core_Map[4],k2_comparator);
                   return function(_aT_){return update(key,_aS_,data,_aT_)}}
                 function remove(key,data)
                  {var _aQ_=caml_call1(Core_Map[4],k2_comparator);
                   return function(_aR_){return update(key,data,_aQ_,_aR_)}}
                 return unordered_fold
                         (0,
                          [0,update],
                          0,
                          _v_,
                          m,
                          caml_call1(Core_Map[4],k2_comparator),
                          add,
                          remove)})}
    function collapse_by(data_equal,map_incr,merge_keys,comparator)
     {function _aK_(outer_key,inner_key,param,acc)
       {var _aP_=caml_call2(merge_keys,outer_key,inner_key);
        return caml_call2(Core_Map[41],acc,_aP_)}
      function _aL_(outer_key,inner_key,data,acc)
       {var _aO_=caml_call2(merge_keys,outer_key,inner_key);
        return caml_call3(Core_Map[31],acc,_aO_,data)}
      var _aM_=caml_call1(Core_Map[4],comparator);
      return unordered_fold_nested_maps
              (data_equal,
               _w_,
               [0,
                function(outer_key,inner_key,param,new_data,acc)
                 {var _aN_=caml_call2(merge_keys,outer_key,inner_key);
                  return caml_call3(Core_Map[32],acc,_aN_,new_data)}],
               map_incr,
               _aM_,
               _aL_,
               _aK_)}
    function collapse(data_equal,map_incr,inner_comparator)
     {return with_comparator$0
              (map_incr,
               function(outer_comparator)
                {var
                  inner_comparator$0=inner_comparator[1],
                  comparator=
                   caml_call2
                    (Core_Tuple[1][5],outer_comparator,inner_comparator$0);
                 return collapse_by
                         (data_equal,map_incr,Core_Tuple[1][6],[0,comparator])})}
    function expand(data_equal,map_incr,outer_comparator,inner_comparator)
     {function _aA_(param,_aH_,acc)
       {var inner_key=param[2],outer_key=param[1];
        function _aI_(param)
         {if(! param)return 0;
          var
           map=param[1],
           map$0=caml_call2(Core_Map[41],map,inner_key),
           _aJ_=1 - caml_call1(Core_Map[28],map$0);
          return caml_call2(Core_Option[55],_aJ_,map$0)}
        return caml_call3(Core_Map[36],acc,outer_key,_aI_)}
      function _aB_(param,data,acc)
       {var inner_key=param[2],outer_key=param[1];
        function _aG_(param)
         {if(! param)
           return caml_call3(Core_Map[5],inner_comparator,inner_key,data);
          var map=param[1];
          return caml_call3(Core_Map[31],map,inner_key,data)}
        return caml_call3(Core_Map[37],acc,outer_key,_aG_)}
      var _aC_=caml_call1(Core_Map[4],outer_comparator),_aD_=0;
      return unordered_fold
              (data_equal,
               [0,
                function(param,_aE_,new_data,acc)
                 {var inner_key=param[2],outer_key=param[1];
                  function _aF_(param)
                   {if(! param)
                     return caml_call3
                             (Core_Map[5],inner_comparator,inner_key,new_data);
                    var map=param[1];
                    return caml_call3(Core_Map[32],map,inner_key,new_data)}
                  return caml_call3(Core_Map[37],acc,outer_key,_aF_)}],
               _aD_,
               _x_,
               map_incr,
               _aC_,
               _aB_,
               _aA_)}
    function counti(data_equal,map_incr,f)
     {function _az_(key,data,count)
       {return caml_call2(f,key,data)?count - 1 | 0:count}
      return unordered_fold
              (data_equal,
               0,
               0,
               _y_,
               map_incr,
               0,
               function(key,data,count)
                {return caml_call2(f,key,data)?count + 1 | 0:count},
               _az_)}
    function count(data_equal,map_incr,f)
     {return counti
              (data_equal,
               map_incr,
               function(param,data){return caml_call1(f,data)})}
    function existsi(data_equal,map_incr,f)
     {function _ax_(count){return caml_call2(Core[93],count,0)}
      var _ay_=counti(data_equal,map_incr,f);
      return caml_call2(Incremental[10],_ay_,_ax_)}
    function exists(data_equal,map_incr,f)
     {return existsi
              (data_equal,
               map_incr,
               function(param,data){return caml_call1(f,data)})}
    function sum(data_equal,map_incr,Group)
     {return function(f)
       {function _at_(param,v,acc)
         {var _aw_=caml_call1(f,v);return caml_call2(Group[3],acc,_aw_)}
        function _au_(param,v,acc)
         {var _av_=caml_call1(f,v);return caml_call2(Group[2],acc,_av_)}
        return unordered_fold(data_equal,0,0,_z_,map_incr,Group[1],_au_,_at_)}}
    function for_alli(data_equal,map_incr,f)
     {function _ar_(count){return caml_call2(Core[90],count,0)}
      var
       _as_=
        counti
         (data_equal,
          map_incr,
          function(key,data){return 1 - caml_call2(f,key,data)});
      return caml_call2(Incremental[10],_as_,_ar_)}
    function for_all(data_equal,map_incr,f)
     {return for_alli
              (data_equal,
               map_incr,
               function(param,data){return caml_call1(f,data)})}
    var For_testing=[0,find_key_range_linear];
    function M(K){return [0]}
    function create(opt,input_map,comparator)
     {if(opt)var sth=opt[1],data_equal=sth;else var data_equal=Core[246];
      var self=[];
      caml_update_dummy
       (self,
        [246,
         function(_ai_)
          {function _aj_(input_map)
            {var
              _al_=caml_obj_tag(self),
              self$0=
               250 === _al_
                ?self[1]
                :246 === _al_?caml_call1(CamlinternalLazy[2],self):self;
             function _am_(param,_an_)
              {var
                changed_value=_an_[2],
                key=_an_[1],
                entries=caml_call2(Core_Map[35],self$0[2],key);
               function _ao_(entry)
                {var _ap_=changed_value[1];
                 if(847852583 === _ap_)
                  var _aq_=0;
                 else
                  var
                   new_value=
                    1013247643 <= _ap_?changed_value[2][2]:changed_value[2],
                   _aq_=[0,new_value];
                 entry[1] = _aq_;
                 return caml_call1(Incremental[79][2][4],entry[2])}
               return caml_call2(Core_List[9],entries,_ao_)}
             caml_call5(Core_Map[81],self$0[1],input_map,data_equal,0,_am_);
             self$0[1] = input_map;
             return 0}
           var
            updater_node=caml_call2(Incremental[10],input_map,_aj_),
            empty_map=caml_call1(Core_Map[110][1],comparator),
            _ak_=caml_call1(Incremental[4],input_map);
           return [0,
                   empty_map,
                   empty_map,
                   updater_node,
                   caml_call2(Incremental[50][2],_ak_,0)]}]);
      var _ah_=caml_obj_tag(self);
      return 250 === _ah_
              ?self[1]
              :246 === _ah_?caml_call1(CamlinternalLazy[2],self):self}
    function find(t,key)
     {var match=caml_call2(Core_Map[35],t[2],key);
      if(match)
       {var entry=match[1];return caml_call1(Incremental[79][2][3],entry[2])}
      var incremental_state=caml_call1(Incremental[4],t[3]);
      function _W_(param)
       {var entry=[];
        caml_update_dummy
         (entry,
          [246,
           function(_Z_)
            {function ___(param){return caml_call1(Core[237],entry)[1]}
             var
              _$_=
               [0,
                function(is_now_observable)
                 {var
                   _ab_=caml_obj_tag(entry),
                   entry$0=
                    250 === _ab_
                     ?entry[1]
                     :246 === _ab_?caml_call1(CamlinternalLazy[2],entry):entry,
                   current_entries=caml_call2(Core_Map[35],t[2],key),
                   _ac_=caml_call1(Core[246],entry$0),
                   is_linked=caml_call2(Core_List[13],current_entries,_ac_);
                  if(caml_call2(Core_Bool[27],is_linked,is_now_observable))
                   return 0;
                  if(is_now_observable)
                   {var
                     _ad_=
                      function(param)
                       {if(param)
                         {var _ag_=param[1];
                          if(_ag_)
                           {var other_entry=_ag_[1];
                            entry$0[1] = other_entry[1];
                            return [0,entry$0,_ag_]}}
                        entry$0[1] = caml_call2(Core_Map[38],t[1],key);
                        return [0,entry$0,0]};
                    t[2] = caml_call3(Core_Map[37],t[2],key,_ad_);
                    return 0}
                  function _ae_(x){return 1 - caml_call2(Core[246],entry$0,x)}
                  var
                   new_entries=caml_call2(Core_List[50],current_entries,_ae_),
                   _af_=
                    caml_call1(Core_List[8],new_entries)
                     ?caml_call2(Core_Map[41],t[2],key)
                     :caml_call3(Core_Map[32],t[2],key,new_entries);
                  t[2] = _af_;
                  return 0}],
              _aa_=caml_call3(Incremental[79][2][2],incremental_state,_$_,___);
             return [0,caml_call2(Core_Map[38],t[1],key),_aa_]}]);
        var
         _X_=caml_obj_tag(entry),
         entry$0=
          250 === _X_
           ?entry[1]
           :246 === _X_?caml_call1(CamlinternalLazy[2],entry):entry,
         _Y_=caml_call2(Incremental[79][1][2],0,t[3]);
        caml_call2(Incremental[79][2][6],entry$0[2],_Y_);
        return caml_call1(Incremental[79][2][3],entry$0[2])}
      return caml_call3(Incremental[50][3],incremental_state,t[4],_W_)}
    function sexp_of_t(sexp_of_key,sexp_of_value,t)
     {function _I_(key,data)
       {var _J_=data[1];
        if(737457313 === _J_)
         var
          match=data[2],
          entries=match[2],
          x=match[1],
          actual_value=[0,x],
          entries$0=entries,
          actual_value$0=actual_value;
        else
         if(847852583 <= _J_)
          var x$0=data[2],entries$0=0,actual_value$0=[0,x$0];
         else
          var y=data[2],entries$0=y,actual_value$0=0;
        var _K_=0,_L_=0;
        function _M_(entry)
         {var
           saved_value=entry[1],
           node=entry[2],
           node$0=caml_call1(Incremental[79][2][3],node),
           match=caml_call1(Incremental[67],node$0),
           _O_=caml_call1(Incremental[5],node$0),
           match$0=caml_call2(Core_Option[55],_O_,0),
           _P_=1 - caml_call1(Incremental[6],node$0),
           match$1=caml_call2(Core_Option[55],_P_,0),
           _Q_=1 - caml_call1(Incremental[7],node$0),
           _R_=caml_call2(Core_Option[55],_Q_,0),
           match$2=0;
          if(_R_)
           var
            v=_R_[1],
            _S_=[0,[1,[0,_A_,[0,caml_call1(Core[518],v),0]]],match$2];
          else
           var _S_=match$2;
          if(match$1)
           var
            v$0=match$1[1],
            _T_=[0,[1,[0,_B_,[0,caml_call1(Core[518],v$0),0]]],_S_];
          else
           var _T_=_S_;
          if(match$0)
           var
            v$1=match$0[1],
            _U_=[0,[1,[0,_C_,[0,caml_call1(Core[518],v$1),0]]],_T_];
          else
           var _U_=_T_;
          if(match)
           var
            v$2=match[1],
            _V_=[0,[1,[0,_D_,[0,caml_call1(Core_Info[6],v$2),0]]],_U_];
          else
           var _V_=_U_;
          return [1,
                  [0,
                   [1,
                    [0,
                     _E_,
                     [0,caml_call2(Core[454],sexp_of_value,saved_value),0]]],
                   _V_]]}
        var
         match$0=
          [0,[1,[0,_F_,[0,caml_call2(Core[421],_M_,entries$0),_L_]]],_K_];
        if(actual_value$0)
         var
          v=actual_value$0[1],
          _N_=[0,[1,[0,_G_,[0,caml_call1(sexp_of_value,v),0]]],match$0];
        else
         var _N_=match$0;
        return [0,[1,[0,[1,[0,_H_,[0,caml_call1(sexp_of_key,key),0]]],_N_]]]}
      var info_per_key=caml_call3(Core_Map[77],t[1],t[2],_I_);
      return [1,caml_call1(Core_Map[73],info_per_key)]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incr_map$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incr_map$0);
    var
     Incr_map$0=
      [0,
       of_set,
       filter_mapi,
       mapi,
       filter_map,
       map,
       filter_mapi$0,
       map$0,
       filter_map$0,
       mapi$0,
       partition_mapi,
       unordered_fold,
       mapi_count,
       map_count,
       mapi_min,
       mapi_max,
       mapi_mn,
       map_max,
       min_value,
       max_value,
       mapi_bounds,
       map_bounds,
       value_bounds,
       merge,
       merge$0,
       unzip,
       unzip_mapi,
       unzip_mapi$0,
       flatten,
       join,
       separate,
       keys,
       rank,
       subrange,
       subrange_by_rank,
       rekey,
       index_byi,
       index_by,
       unordered_fold_nested_maps,
       transpose,
       collapse,
       collapse_by,
       expand,
       counti,
       count,
       for_alli,
       for_all,
       existsi,
       exists,
       sum,
       [0,create,find,M,[0,sexp_of_t]],
       For_testing,
       function(Incr)
        {function flatten$0(x){return flatten(Incr[2][3],x)}
         function M(K){return [0]}
         return [0,
                 of_set,
                 filter_mapi,
                 mapi,
                 filter_map,
                 map,
                 filter_mapi$0,
                 mapi$0,
                 filter_map$0,
                 map$0,
                 partition_mapi,
                 unordered_fold,
                 mapi_count,
                 map_count,
                 mapi_min,
                 mapi_max,
                 mapi_mn,
                 map_max,
                 min_value,
                 max_value,
                 mapi_bounds,
                 map_bounds,
                 value_bounds,
                 merge,
                 unzip,
                 unzip_mapi,
                 unzip_mapi$0,
                 merge$0,
                 flatten$0,
                 join,
                 separate,
                 keys,
                 rank,
                 subrange,
                 subrange_by_rank,
                 rekey,
                 index_byi,
                 index_by,
                 unordered_fold_nested_maps,
                 transpose,
                 collapse,
                 collapse_by,
                 expand,
                 counti,
                 count,
                 for_alli,
                 for_all,
                 existsi,
                 exists,
                 sum,
                 [0,create,find,M,[0,sexp_of_t]],
                 For_testing]}];
    caml_register_global(74,Incr_map$0,"Incr_map");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
