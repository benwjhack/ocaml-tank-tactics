// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_register_global=runtime.caml_register_global,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {return f.length == 10
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
    function caml_call11(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
     {return f.length == 11
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10])}
    function caml_call12(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
     {return f.length == 12
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11])}
    function caml_call13(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
     {return f.length == 13
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12])}
    function caml_call14(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
     {return f.length == 14
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13])}
    function caml_call15(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)
     {return f.length == 15
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14])}
    function caml_call27
     (f,
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26)
     {return f.length == 27
              ?f
                (a0,
                 a1,
                 a2,
                 a3,
                 a4,
                 a5,
                 a6,
                 a7,
                 a8,
                 a9,
                 a10,
                 a11,
                 a12,
                 a13,
                 a14,
                 a15,
                 a16,
                 a17,
                 a18,
                 a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24,
                 a25,
                 a26)
              :runtime.caml_call_gen
                (f,
                 [a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                  a10,
                  a11,
                  a12,
                  a13,
                  a14,
                  a15,
                  a16,
                  a17,
                  a18,
                  a19,
                  a20,
                  a21,
                  a22,
                  a23,
                  a24,
                  a25,
                  a26])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Incremental_Before_or_afte=
      caml_string_of_jsbytes("Incremental__Before_or_after"),
     cst_incremental=caml_string_of_jsbytes("incremental"),
     cst_src_before_or_after_ml=
      caml_string_of_jsbytes("src/before_or_after.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_incremental$0=caml_string_of_jsbytes("incremental"),
     cst_incremental$1=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Before_or_afte$0=
      caml_string_of_jsbytes("Incremental__Before_or_after"),
     cst_Incremental_Import=caml_string_of_jsbytes("Incremental__Import"),
     cst_incremental$2=caml_string_of_jsbytes("incremental"),
     cst_src_import_ml=caml_string_of_jsbytes("src/import.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_incremental$3=caml_string_of_jsbytes("incremental"),
     cst_incremental$4=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Import$0=caml_string_of_jsbytes("Incremental__Import"),
     cst_Incremental_Cutoff=caml_string_of_jsbytes("Incremental__Cutoff"),
     cst_incremental$5=caml_string_of_jsbytes("incremental"),
     cst_src_cutoff_ml=caml_string_of_jsbytes("src/cutoff.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_incremental$6=caml_string_of_jsbytes("incremental"),
     cst_incremental$7=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Cutoff$0=caml_string_of_jsbytes("Incremental__Cutoff"),
     cst$10=caml_string_of_jsbytes("}"),
     cst$11=caml_string_of_jsbytes("{"),
     cst$8=caml_string_of_jsbytes("}"),
     cst$9=caml_string_of_jsbytes("{"),
     cst$7=caml_string_of_jsbytes("\\"),
     cst$3=caml_string_of_jsbytes('"'),
     cst$4=caml_string_of_jsbytes('\\"'),
     cst$5=caml_string_of_jsbytes('"'),
     cst$6=caml_string_of_jsbytes('"'),
     cst_Incremental_Dot_user_info=
      caml_string_of_jsbytes("Incremental__Dot_user_info"),
     cst_incremental$8=caml_string_of_jsbytes("incremental"),
     cst_src_dot_user_info_ml=caml_string_of_jsbytes("src/dot_user_info.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_incremental$9=caml_string_of_jsbytes("incremental"),
     cst_incremental$10=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Dot_user_info$0=
      caml_string_of_jsbytes("Incremental__Dot_user_info"),
     cst_Incremental_Node_id=caml_string_of_jsbytes("Incremental__Node_id"),
     cst_incremental$11=caml_string_of_jsbytes("incremental"),
     cst_src_node_id_ml=caml_string_of_jsbytes("src/node_id.ml"),
     cst$12=caml_string_of_jsbytes(""),
     cst_incremental$12=caml_string_of_jsbytes("incremental"),
     cst_incremental$13=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Node_id$0=caml_string_of_jsbytes("Incremental__Node_id"),
     cst_Incremental_Stabilization_=
      caml_string_of_jsbytes("Incremental__Stabilization_num"),
     cst_incremental$14=caml_string_of_jsbytes("incremental"),
     cst_src_stabilization_num_ml=
      caml_string_of_jsbytes("src/stabilization_num.ml"),
     cst$13=caml_string_of_jsbytes(""),
     cst_incremental$15=caml_string_of_jsbytes("incremental"),
     cst_incremental$16=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Stabilization_$0=
      caml_string_of_jsbytes("Incremental__Stabilization_num"),
     cst_Incremental_On_update_hand=
      caml_string_of_jsbytes("Incremental__On_update_handler"),
     cst_incremental$17=caml_string_of_jsbytes("incremental"),
     cst_src_on_update_handler_ml=
      caml_string_of_jsbytes("src/on_update_handler.ml"),
     cst$14=caml_string_of_jsbytes(""),
     cst_incremental$18=caml_string_of_jsbytes("incremental"),
     cst_incremental$19=caml_string_of_jsbytes("incremental"),
     cst_Incremental_On_update_hand$0=
      caml_string_of_jsbytes("Incremental__On_update_handler"),
     cst_Incremental_Raised_exn=
      caml_string_of_jsbytes("Incremental__Raised_exn"),
     cst_incremental$20=caml_string_of_jsbytes("incremental"),
     cst_src_raised_exn_ml=caml_string_of_jsbytes("src/raised_exn.ml"),
     cst$15=caml_string_of_jsbytes(""),
     cst_incremental$21=caml_string_of_jsbytes("incremental"),
     cst_incremental$22=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Raised_exn$0=
      caml_string_of_jsbytes("Incremental__Raised_exn"),
     cst_Top=caml_string_of_jsbytes("Top"),
     cst_n=caml_string_of_jsbytes("n"),
     cst_Incremental_Types=caml_string_of_jsbytes("Incremental__Types"),
     cst_incremental$23=caml_string_of_jsbytes("incremental"),
     cst_src_types_ml=caml_string_of_jsbytes("src/types.ml"),
     cst$16=caml_string_of_jsbytes(""),
     cst_incremental$24=caml_string_of_jsbytes("incremental"),
     cst_incremental$25=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Types$0=caml_string_of_jsbytes("Incremental__Types"),
     cst_Incremental_Var=caml_string_of_jsbytes("Incremental__Var"),
     cst_incremental$26=caml_string_of_jsbytes("incremental"),
     cst_src_var_ml=caml_string_of_jsbytes("src/var.ml"),
     cst$17=caml_string_of_jsbytes(""),
     cst_incremental$27=caml_string_of_jsbytes("incremental"),
     cst_watch=caml_string_of_jsbytes("watch"),
     cst_set_at=caml_string_of_jsbytes("set_at"),
     cst_value_set_during_stabiliza=
      caml_string_of_jsbytes("value_set_during_stabilization"),
     cst_value=caml_string_of_jsbytes("value"),
     cst_incremental$28=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Var$0=caml_string_of_jsbytes("Incremental__Var"),
     cst_Unordered_array_fold_child=
      caml_string_of_jsbytes("[Unordered_array_fold.child_changed] mismatch"),
     pos=caml_string_of_jsbytes("src/unordered_array_fold.ml:57:26"),
     cst_Incremental_Unordered_arra=
      caml_string_of_jsbytes("Incremental__Unordered_array_fold"),
     cst_incremental$29=caml_string_of_jsbytes("incremental"),
     cst_src_unordered_array_fold_m=
      caml_string_of_jsbytes("src/unordered_array_fold.ml"),
     cst$18=caml_string_of_jsbytes(""),
     cst_incremental$30=caml_string_of_jsbytes("incremental"),
     cst_num_changes_since_last_ful=
      caml_string_of_jsbytes("num_changes_since_last_full_compute"),
     cst_fold_value=caml_string_of_jsbytes("fold_value"),
     cst_children=caml_string_of_jsbytes("children"),
     cst_full_compute_every_n_chang=
      caml_string_of_jsbytes("full_compute_every_n_changes"),
     cst_init=caml_string_of_jsbytes("init"),
     cst_main=caml_string_of_jsbytes("main"),
     cst_incremental$31=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Unordered_arra$0=
      caml_string_of_jsbytes("Incremental__Unordered_array_fold"),
     cst_Incremental_Alarm=caml_string_of_jsbytes("Incremental__Alarm"),
     cst_incremental$32=caml_string_of_jsbytes("incremental"),
     cst_src_alarm_ml=caml_string_of_jsbytes("src/alarm.ml"),
     cst$19=caml_string_of_jsbytes(""),
     cst_incremental$33=caml_string_of_jsbytes("incremental"),
     cst_incremental$34=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Alarm$0=caml_string_of_jsbytes("Incremental__Alarm"),
     cst_Incremental_Step_function_=
      caml_string_of_jsbytes("Incremental__Step_function_node"),
     cst_incremental$35=caml_string_of_jsbytes("incremental"),
     cst_src_step_function_node_ml=
      caml_string_of_jsbytes("src/step_function_node.ml"),
     cst$20=caml_string_of_jsbytes(""),
     cst_incremental$36=caml_string_of_jsbytes("incremental"),
     cst_alarm_value=caml_string_of_jsbytes("alarm_value"),
     cst_alarm=caml_string_of_jsbytes("alarm"),
     cst_value$0=caml_string_of_jsbytes("value"),
     cst_main$0=caml_string_of_jsbytes("main"),
     cst_incremental$37=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Step_function_$0=
      caml_string_of_jsbytes("Incremental__Step_function_node"),
     cst_Incremental_Array_fold=
      caml_string_of_jsbytes("Incremental__Array_fold"),
     cst_incremental$38=caml_string_of_jsbytes("incremental"),
     cst_src_array_fold_ml=caml_string_of_jsbytes("src/array_fold.ml"),
     cst$21=caml_string_of_jsbytes(""),
     cst_incremental$39=caml_string_of_jsbytes("incremental"),
     cst_children$0=caml_string_of_jsbytes("children"),
     cst_init$0=caml_string_of_jsbytes("init"),
     cst_incremental$40=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Array_fold$0=
      caml_string_of_jsbytes("Incremental__Array_fold"),
     cst_Incremental_At=caml_string_of_jsbytes("Incremental__At"),
     cst_incremental$41=caml_string_of_jsbytes("incremental"),
     cst_src_at_ml=caml_string_of_jsbytes("src/at.ml"),
     cst$22=caml_string_of_jsbytes(""),
     cst_incremental$42=caml_string_of_jsbytes("incremental"),
     cst_alarm$0=caml_string_of_jsbytes("alarm"),
     cst_main$1=caml_string_of_jsbytes("main"),
     cst_incremental$43=caml_string_of_jsbytes("incremental"),
     cst_Incremental_At$0=caml_string_of_jsbytes("Incremental__At"),
     cst_Incremental_At_intervals=
      caml_string_of_jsbytes("Incremental__At_intervals"),
     cst_incremental$44=caml_string_of_jsbytes("incremental"),
     cst_src_at_intervals_ml=caml_string_of_jsbytes("src/at_intervals.ml"),
     cst$23=caml_string_of_jsbytes(""),
     cst_incremental$45=caml_string_of_jsbytes("incremental"),
     cst_alarm$1=caml_string_of_jsbytes("alarm"),
     cst_interval=caml_string_of_jsbytes("interval"),
     cst_main$2=caml_string_of_jsbytes("main"),
     cst_incremental$46=caml_string_of_jsbytes("incremental"),
     cst_Incremental_At_intervals$0=
      caml_string_of_jsbytes("Incremental__At_intervals"),
     cst_Incremental_Bind=caml_string_of_jsbytes("Incremental__Bind"),
     cst_incremental$47=caml_string_of_jsbytes("incremental"),
     cst_src_bind_ml=caml_string_of_jsbytes("src/bind.ml"),
     cst$24=caml_string_of_jsbytes(""),
     cst_incremental$48=caml_string_of_jsbytes("incremental"),
     cst_all_nodes_created_on_rhs=
      caml_string_of_jsbytes("all_nodes_created_on_rhs"),
     cst_rhs_scope=caml_string_of_jsbytes("rhs_scope"),
     cst_lhs_change=caml_string_of_jsbytes("lhs_change"),
     cst_main$3=caml_string_of_jsbytes("main"),
     cst_incremental$49=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Bind$0=caml_string_of_jsbytes("Incremental__Bind"),
     pos$1=caml_string_of_jsbytes("src/expert.ml:76:19"),
     pos$2=caml_string_of_jsbytes("src/expert.ml:69:22"),
     pos$0=caml_string_of_jsbytes("src/expert.ml:60:21"),
     cst_Incremental_Expert=caml_string_of_jsbytes("Incremental__Expert"),
     cst_incremental$50=caml_string_of_jsbytes("incremental"),
     cst_src_expert_ml=caml_string_of_jsbytes("src/expert.ml"),
     cst$25=caml_string_of_jsbytes(""),
     cst_incremental$51=caml_string_of_jsbytes("incremental"),
     cst_incremental$52=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Expert$0=caml_string_of_jsbytes("Incremental__Expert"),
     cst_Incremental_Sexp_of=caml_string_of_jsbytes("Incremental__Sexp_of"),
     cst_incremental$53=caml_string_of_jsbytes("incremental"),
     cst_src_sexp_of_ml=caml_string_of_jsbytes("src/sexp_of.ml"),
     cst$26=caml_string_of_jsbytes(""),
     cst_incremental$54=caml_string_of_jsbytes("incremental"),
     cst_incremental$55=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Sexp_of$0=caml_string_of_jsbytes("Incremental__Sexp_of"),
     cst_Incremental_Scope=caml_string_of_jsbytes("Incremental__Scope"),
     cst_incremental$56=caml_string_of_jsbytes("incremental"),
     cst_src_scope_ml=caml_string_of_jsbytes("src/scope.ml"),
     cst$27=caml_string_of_jsbytes(""),
     cst_incremental$57=caml_string_of_jsbytes("incremental"),
     cst_incremental$58=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Scope$0=caml_string_of_jsbytes("Incremental__Scope"),
     cst_Incremental_Freeze=caml_string_of_jsbytes("Incremental__Freeze"),
     cst_incremental$59=caml_string_of_jsbytes("incremental"),
     cst_src_freeze_ml=caml_string_of_jsbytes("src/freeze.ml"),
     cst$28=caml_string_of_jsbytes(""),
     cst_incremental$60=caml_string_of_jsbytes("incremental"),
     cst_main$4=caml_string_of_jsbytes("main"),
     cst_incremental$61=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Freeze$0=caml_string_of_jsbytes("Incremental__Freeze"),
     cst_Incremental_If_then_else=
      caml_string_of_jsbytes("Incremental__If_then_else"),
     cst_incremental$62=caml_string_of_jsbytes("incremental"),
     cst_src_if_then_else_ml=caml_string_of_jsbytes("src/if_then_else.ml"),
     cst$29=caml_string_of_jsbytes(""),
     cst_incremental$63=caml_string_of_jsbytes("incremental"),
     cst_current_branch=caml_string_of_jsbytes("current_branch"),
     cst_test_change=caml_string_of_jsbytes("test_change"),
     cst_main$5=caml_string_of_jsbytes("main"),
     cst_incremental$64=caml_string_of_jsbytes("incremental"),
     cst_Incremental_If_then_else$0=
      caml_string_of_jsbytes("Incremental__If_then_else"),
     cst_Incremental_Join=caml_string_of_jsbytes("Incremental__Join"),
     cst_incremental$65=caml_string_of_jsbytes("incremental"),
     cst_src_join_ml=caml_string_of_jsbytes("src/join.ml"),
     cst$30=caml_string_of_jsbytes(""),
     cst_incremental$66=caml_string_of_jsbytes("incremental"),
     cst_lhs_change$0=caml_string_of_jsbytes("lhs_change"),
     cst_main$6=caml_string_of_jsbytes("main"),
     cst_incremental$67=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Join$0=caml_string_of_jsbytes("Incremental__Join"),
     cst_Incremental_Snapshot=caml_string_of_jsbytes("Incremental__Snapshot"),
     cst_incremental$68=caml_string_of_jsbytes("incremental"),
     cst_src_snapshot_ml=caml_string_of_jsbytes("src/snapshot.ml"),
     cst$31=caml_string_of_jsbytes(""),
     cst_incremental$69=caml_string_of_jsbytes("incremental"),
     cst_before=caml_string_of_jsbytes("before"),
     cst_main$7=caml_string_of_jsbytes("main"),
     cst_incremental$70=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Snapshot$0=
      caml_string_of_jsbytes("Incremental__Snapshot"),
     cst_Kind_slow_get_child_got_in=
      caml_string_of_jsbytes("Kind.slow_get_child got invalid index"),
     cst_Invalid=caml_string_of_jsbytes("Invalid"),
     cst_Uninitialized=caml_string_of_jsbytes("Uninitialized"),
     cst_Array_fold=caml_string_of_jsbytes("Array_fold"),
     cst_At=caml_string_of_jsbytes("At"),
     cst_At_intervals=caml_string_of_jsbytes("At_intervals"),
     cst_Bind_lhs_change=caml_string_of_jsbytes("Bind_lhs_change"),
     cst_Bind_main=caml_string_of_jsbytes("Bind_main"),
     cst_Const=caml_string_of_jsbytes("Const"),
     cst_Expert=caml_string_of_jsbytes("Expert"),
     cst_Freeze=caml_string_of_jsbytes("Freeze"),
     cst_If_test_change=caml_string_of_jsbytes("If_test_change"),
     cst_If_then_else=caml_string_of_jsbytes("If_then_else"),
     cst_Join_lhs_change=caml_string_of_jsbytes("Join_lhs_change"),
     cst_Join_main=caml_string_of_jsbytes("Join_main"),
     cst_Map=caml_string_of_jsbytes("Map"),
     cst_Snapshot=caml_string_of_jsbytes("Snapshot"),
     cst_Step_function=caml_string_of_jsbytes("Step_function"),
     cst_Unordered_array_fold=caml_string_of_jsbytes("Unordered_array_fold"),
     cst_Var=caml_string_of_jsbytes("Var"),
     cst_Map2=caml_string_of_jsbytes("Map2"),
     cst_Map3=caml_string_of_jsbytes("Map3"),
     cst_Map4=caml_string_of_jsbytes("Map4"),
     cst_Map5=caml_string_of_jsbytes("Map5"),
     cst_Map6=caml_string_of_jsbytes("Map6"),
     cst_Map7=caml_string_of_jsbytes("Map7"),
     cst_Map8=caml_string_of_jsbytes("Map8"),
     cst_Map9=caml_string_of_jsbytes("Map9"),
     cst_Map10=caml_string_of_jsbytes("Map10"),
     cst_Map11=caml_string_of_jsbytes("Map11"),
     cst_Map12=caml_string_of_jsbytes("Map12"),
     cst_Map13=caml_string_of_jsbytes("Map13"),
     cst_Map14=caml_string_of_jsbytes("Map14"),
     cst_Map15=caml_string_of_jsbytes("Map15"),
     cst_Incremental_Kind=caml_string_of_jsbytes("Incremental__Kind"),
     cst_incremental$71=caml_string_of_jsbytes("incremental"),
     cst_src_kind_ml=caml_string_of_jsbytes("src/kind.ml"),
     cst$32=caml_string_of_jsbytes(""),
     cst_incremental$72=caml_string_of_jsbytes("incremental"),
     cst_incremental$73=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Kind$0=caml_string_of_jsbytes("Incremental__Kind"),
     cst_n$1=caml_string_of_jsbytes("n"),
     cst_n$0=caml_string_of_jsbytes("n###"),
     cst_attempt_to_get_value_of_an=
      caml_string_of_jsbytes("attempt to get value of an invalid node"),
     pos$8=caml_string_of_jsbytes("src/node.ml:331:27"),
     pos$7=caml_string_of_jsbytes("src/node.ml:343:24"),
     pos$6=caml_string_of_jsbytes("src/node.ml:350:22"),
     pos$5=caml_string_of_jsbytes("src/node.ml:411:29"),
     pos$4=caml_string_of_jsbytes("src/node.ml:429:26"),
     pos$3=caml_string_of_jsbytes("src/node.ml:293:15"),
     cst_Incremental_Node=caml_string_of_jsbytes("Incremental__Node"),
     cst_incremental$74=caml_string_of_jsbytes("incremental"),
     cst_src_node_ml=caml_string_of_jsbytes("src/node.ml"),
     cst$33=caml_string_of_jsbytes(""),
     cst_incremental$75=caml_string_of_jsbytes("incremental"),
     cst_my_child_index_in_parent_a=
      caml_string_of_jsbytes("my_child_index_in_parent_at_index"),
     cst_my_parent_index_in_child_a=
      caml_string_of_jsbytes("my_parent_index_in_child_at_index"),
     cst_observers=caml_string_of_jsbytes("observers"),
     cst_old_value_opt=caml_string_of_jsbytes("old_value_opt"),
     cst_next_in_adjust_heights_hea=
      caml_string_of_jsbytes("next_in_adjust_heights_heap"),
     cst_height_in_adjust_heights_h=
      caml_string_of_jsbytes("height_in_adjust_heights_heap"),
     cst_next_in_recompute_heap=
      caml_string_of_jsbytes("next_in_recompute_heap"),
     cst_prev_in_recompute_heap=
      caml_string_of_jsbytes("prev_in_recompute_heap"),
     cst_height_in_recompute_heap=
      caml_string_of_jsbytes("height_in_recompute_heap"),
     cst_height=caml_string_of_jsbytes("height"),
     cst_next_node_in_same_scope=
      caml_string_of_jsbytes("next_node_in_same_scope"),
     cst_created_in=caml_string_of_jsbytes("created_in"),
     cst_parent0=caml_string_of_jsbytes("parent0"),
     cst_parent1_and_beyond=caml_string_of_jsbytes("parent1_and_beyond"),
     cst_num_parents=caml_string_of_jsbytes("num_parents"),
     cst_num_on_update_handlers=
      caml_string_of_jsbytes("num_on_update_handlers"),
     cst_changed_at=caml_string_of_jsbytes("changed_at"),
     cst_cutoff=caml_string_of_jsbytes("cutoff"),
     cst_kind=caml_string_of_jsbytes("kind"),
     cst_value_opt=caml_string_of_jsbytes("value_opt"),
     cst_recomputed_at=caml_string_of_jsbytes("recomputed_at"),
     cst_id=caml_string_of_jsbytes("id"),
     cst_incremental$76=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Node$0=caml_string_of_jsbytes("Incremental__Node"),
     pos$9=caml_string_of_jsbytes("src/recompute_heap.ml:38:22"),
     cst_Incremental_Recompute_heap=
      caml_string_of_jsbytes("Incremental__Recompute_heap"),
     cst_incremental$77=caml_string_of_jsbytes("incremental"),
     cst_src_recompute_heap_ml=caml_string_of_jsbytes("src/recompute_heap.ml"),
     cst$34=caml_string_of_jsbytes(""),
     cst_incremental$78=caml_string_of_jsbytes("incremental"),
     cst_nodes_by_height=caml_string_of_jsbytes("nodes_by_height"),
     cst_height_lower_bound=caml_string_of_jsbytes("height_lower_bound"),
     cst_length=caml_string_of_jsbytes("length"),
     cst_incremental$79=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Recompute_heap$0=
      caml_string_of_jsbytes("Incremental__Recompute_heap"),
     cst_adding_edge_made_graph_cyc=
      caml_string_of_jsbytes("adding edge made graph cyclic"),
     cst_node_with_too_large_height=
      caml_string_of_jsbytes("node with too large height"),
     cst_cannot_set_max_height_allo=
      caml_string_of_jsbytes
       ("cannot set_max_height_allowed less than the max height already seen"),
     cst_Incremental_Adjust_heights=
      caml_string_of_jsbytes("Incremental__Adjust_heights_heap"),
     cst_incremental$80=caml_string_of_jsbytes("incremental"),
     cst_src_adjust_heights_heap_ml=
      caml_string_of_jsbytes("src/adjust_heights_heap.ml"),
     cst$35=caml_string_of_jsbytes(""),
     cst_incremental$81=caml_string_of_jsbytes("incremental"),
     cst_nodes_by_height$0=caml_string_of_jsbytes("nodes_by_height"),
     cst_max_height_seen=caml_string_of_jsbytes("max_height_seen"),
     cst_height_lower_bound$0=caml_string_of_jsbytes("height_lower_bound"),
     cst_length$0=caml_string_of_jsbytes("length"),
     cst_incremental$82=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Adjust_heights$0=
      caml_string_of_jsbytes("Incremental__Adjust_heights_heap"),
     cst_Incremental_Alarm_value=
      caml_string_of_jsbytes("Incremental__Alarm_value"),
     cst_incremental$83=caml_string_of_jsbytes("incremental"),
     cst_src_alarm_value_ml=caml_string_of_jsbytes("src/alarm_value.ml"),
     cst$36=caml_string_of_jsbytes(""),
     cst_incremental$84=caml_string_of_jsbytes("incremental"),
     cst_action=caml_string_of_jsbytes("action"),
     cst_incremental$85=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Alarm_value$0=
      caml_string_of_jsbytes("Incremental__Alarm_value"),
     cst_Incremental_Config_intf=
      caml_string_of_jsbytes("Incremental__Config_intf"),
     cst_incremental$86=caml_string_of_jsbytes("incremental"),
     cst_src_config_intf_ml=caml_string_of_jsbytes("src/config_intf.ml"),
     cst$37=caml_string_of_jsbytes(""),
     cst_incremental$87=caml_string_of_jsbytes("incremental"),
     cst_incremental$88=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Config_intf$0=
      caml_string_of_jsbytes("Incremental__Config_intf"),
     cst_Incremental_Config=caml_string_of_jsbytes("Incremental__Config"),
     cst_incremental$89=caml_string_of_jsbytes("incremental"),
     cst_src_config_ml=caml_string_of_jsbytes("src/config.ml"),
     cst$38=caml_string_of_jsbytes(""),
     cst_incremental$90=caml_string_of_jsbytes("incremental"),
     cst_incremental$91=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Config$0=caml_string_of_jsbytes("Incremental__Config"),
     cst_on_update_disallowed=caml_string_of_jsbytes("on_update disallowed"),
     cst_Observer_value_exn_called_=
      caml_string_of_jsbytes
       ("Observer.value_exn called after disallow_future_use"),
     cst_Observer_value_exn_called_$0=
      caml_string_of_jsbytes("Observer.value_exn called without stabilizing"),
     cst_attempt_to_get_value_of_an$0=
      caml_string_of_jsbytes("attempt to get value of an invalid node"),
     cst_Incremental_Internal_obser=
      caml_string_of_jsbytes("Incremental__Internal_observer"),
     cst_incremental$92=caml_string_of_jsbytes("incremental"),
     cst_src_internal_observer_ml=
      caml_string_of_jsbytes("src/internal_observer.ml"),
     cst$39=caml_string_of_jsbytes(""),
     cst_incremental$93=caml_string_of_jsbytes("incremental"),
     cst_next_in_observing=caml_string_of_jsbytes("next_in_observing"),
     cst_prev_in_observing=caml_string_of_jsbytes("prev_in_observing"),
     cst_next_in_all=caml_string_of_jsbytes("next_in_all"),
     cst_prev_in_all=caml_string_of_jsbytes("prev_in_all"),
     cst_on_update_handlers=caml_string_of_jsbytes("on_update_handlers"),
     cst_observing=caml_string_of_jsbytes("observing"),
     cst_incremental$94=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Internal_obser$0=
      caml_string_of_jsbytes("Incremental__Internal_observer"),
     cst_Incremental_Observer=caml_string_of_jsbytes("Incremental__Observer"),
     cst_incremental$95=caml_string_of_jsbytes("incremental"),
     cst_src_observer_ml=caml_string_of_jsbytes("src/observer.ml"),
     cst$40=caml_string_of_jsbytes(""),
     cst_incremental$96=caml_string_of_jsbytes("incremental"),
     cst_incremental$97=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Observer$0=
      caml_string_of_jsbytes("Incremental__Observer"),
     cst_Trying_to_make_a_node_nece=
      caml_string_of_jsbytes
       ("Trying to make a node necessary whose defining bind is not necessary"),
     cst_on_children_nodes=caml_string_of_jsbytes(" on children nodes"),
     cst_can_only_call$1=caml_string_of_jsbytes("can only call "),
     cst_on_parent_nodes=caml_string_of_jsbytes(" on parent nodes"),
     cst_can_only_call$0=caml_string_of_jsbytes("can only call "),
     cst_during_stabilization=caml_string_of_jsbytes(" during stabilization"),
     cst_can_only_call=caml_string_of_jsbytes("can only call "),
     cst_unexpected_kind_for_expert=
      caml_string_of_jsbytes("unexpected kind for expert node"),
     cst_advance_clock=caml_string_of_jsbytes("advance_clock"),
     cst_cannot_take_snapshot_in_th=
      caml_string_of_jsbytes("cannot take snapshot in the past"),
     cst_at_intervals_got_too_small=
      caml_string_of_jsbytes("at_intervals got too small interval"),
     cst_unordered_array_fold_got_n=
      caml_string_of_jsbytes
       ("unordered_array_fold got non-positive full_compute_every_n_changes"),
     cst_step=caml_string_of_jsbytes("step"),
     cst_stabilize=caml_string_of_jsbytes("stabilize"),
     cst_cannot_set_var_stabilizati=
      caml_string_of_jsbytes
       ("cannot set var -- stabilization previously raised"),
     cst_Observer_value_exn_called_$1=
      caml_string_of_jsbytes("Observer.value_exn called during stabilization"),
     cst_Observer_value_exn_called_$2=
      caml_string_of_jsbytes
       ("Observer.value_exn called after stabilize previously raised"),
     cst_attempt_to_run_within_an_i=
      caml_string_of_jsbytes("attempt to run within an invalid scope"),
     cst_set_max_height_allowed=
      caml_string_of_jsbytes("set_max_height_allowed"),
     cst_member_of_all_observers_wi=
      caml_string_of_jsbytes("member of all_observers with unexpected state"),
     cst_cannot_call_am_stabilizing=
      caml_string_of_jsbytes
       ("cannot call am_stabilizing -- stabilize previously raised"),
     cst_max_num_parents=caml_string_of_jsbytes("max_num_parents"),
     cst_percentage_of_nodes_by_num=
      caml_string_of_jsbytes("percentage_of_nodes_by_num_parents"),
     cst_percentage_of_nodes_by_num$0=
      caml_string_of_jsbytes("percentage_of_nodes_by_num_parents"),
     cst_max_num_parents$0=caml_string_of_jsbytes("max_num_parents"),
     cst_Incremental_State=caml_string_of_jsbytes("Incremental__State"),
     cst_incremental$98=caml_string_of_jsbytes("incremental"),
     cst_src_state_ml=caml_string_of_jsbytes("src/state.ml"),
     cst$41=caml_string_of_jsbytes(""),
     cst_incremental$99=caml_string_of_jsbytes("incremental"),
     names=
      [0,
       caml_string_of_jsbytes("currently_running_node"),
       [0,caml_string_of_jsbytes("expert_nodes_created_by_current_node"),0]],
     cst_expert_nodes_created_by_cu=
      caml_string_of_jsbytes("expert_nodes_created_by_current_node"),
     cst_currently_running_node=
      caml_string_of_jsbytes("currently_running_node"),
     names$0=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("status"),
         caml_string_of_jsbytes("bind_lhs_change_should_invalidate_rhs"),
         caml_string_of_jsbytes("stabilization_num"),
         caml_string_of_jsbytes("current_scope"),
         caml_string_of_jsbytes("recompute_heap"),
         caml_string_of_jsbytes("adjust_heights_heap"),
         caml_string_of_jsbytes("propagate_invalidity"),
         caml_string_of_jsbytes("num_active_observers"),
         caml_string_of_jsbytes("all_observers"),
         caml_string_of_jsbytes("finalized_observers"),
         caml_string_of_jsbytes("new_observers"),
         caml_string_of_jsbytes("disallowed_observers"),
         caml_string_of_jsbytes("set_during_stabilization"),
         caml_string_of_jsbytes("handle_after_stabilization"),
         caml_string_of_jsbytes("run_on_update_handlers"),
         caml_string_of_jsbytes("only_in_debug"),
         caml_string_of_jsbytes("weak_hashtbls"),
         caml_string_of_jsbytes("keep_node_creation_backtrace"),
         caml_string_of_jsbytes("num_nodes_became_necessary"),
         caml_string_of_jsbytes("num_nodes_became_unnecessary"),
         caml_string_of_jsbytes("num_nodes_changed"),
         caml_string_of_jsbytes("num_nodes_created"),
         caml_string_of_jsbytes("num_nodes_invalidated"),
         caml_string_of_jsbytes("num_nodes_recomputed"),
         caml_string_of_jsbytes
          ("num_nodes_recomputed_directly_because_one_child"),
         caml_string_of_jsbytes
          ("num_nodes_recomputed_directly_because_min_height"),
         caml_string_of_jsbytes("num_var_sets")]),
     cst_num_var_sets=caml_string_of_jsbytes("num_var_sets"),
     cst_num_nodes_recomputed_direc=
      caml_string_of_jsbytes
       ("num_nodes_recomputed_directly_because_min_height"),
     cst_num_nodes_recomputed_direc$0=
      caml_string_of_jsbytes
       ("num_nodes_recomputed_directly_because_one_child"),
     cst_num_nodes_recomputed=caml_string_of_jsbytes("num_nodes_recomputed"),
     cst_num_nodes_invalidated=caml_string_of_jsbytes("num_nodes_invalidated"),
     cst_num_nodes_created=caml_string_of_jsbytes("num_nodes_created"),
     cst_num_nodes_changed=caml_string_of_jsbytes("num_nodes_changed"),
     cst_num_nodes_became_unnecessa=
      caml_string_of_jsbytes("num_nodes_became_unnecessary"),
     cst_num_nodes_became_necessary=
      caml_string_of_jsbytes("num_nodes_became_necessary"),
     cst_keep_node_creation_backtra=
      caml_string_of_jsbytes("keep_node_creation_backtrace"),
     cst_weak_hashtbls=caml_string_of_jsbytes("weak_hashtbls"),
     cst_only_in_debug=caml_string_of_jsbytes("only_in_debug"),
     cst_run_on_update_handlers=
      caml_string_of_jsbytes("run_on_update_handlers"),
     cst_handle_after_stabilization=
      caml_string_of_jsbytes("handle_after_stabilization"),
     cst_set_during_stabilization=
      caml_string_of_jsbytes("set_during_stabilization"),
     cst_disallowed_observers=caml_string_of_jsbytes("disallowed_observers"),
     cst_new_observers=caml_string_of_jsbytes("new_observers"),
     cst_finalized_observers=caml_string_of_jsbytes("finalized_observers"),
     cst_all_observers=caml_string_of_jsbytes("all_observers"),
     cst_num_active_observers=caml_string_of_jsbytes("num_active_observers"),
     cst_propagate_invalidity=caml_string_of_jsbytes("propagate_invalidity"),
     cst_adjust_heights_heap=caml_string_of_jsbytes("adjust_heights_heap"),
     cst_recompute_heap=caml_string_of_jsbytes("recompute_heap"),
     cst_current_scope=caml_string_of_jsbytes("current_scope"),
     cst_stabilization_num=caml_string_of_jsbytes("stabilization_num"),
     cst_bind_lhs_change_should_inv=
      caml_string_of_jsbytes("bind_lhs_change_should_invalidate_rhs"),
     cst_status=caml_string_of_jsbytes("status"),
     names$1=
      [0,
       caml_string_of_jsbytes("timing_wheel"),
       [0,
        caml_string_of_jsbytes("now"),
        [0,
         caml_string_of_jsbytes("handle_fired"),
         [0,caml_string_of_jsbytes("fired_alarm_values"),0]]]],
     cst_fired_alarm_values=caml_string_of_jsbytes("fired_alarm_values"),
     cst_handle_fired=caml_string_of_jsbytes("handle_fired"),
     cst_now=caml_string_of_jsbytes("now"),
     cst_timing_wheel=caml_string_of_jsbytes("timing_wheel"),
     error_source_095=caml_string_of_jsbytes("src/state.ml.Stats.t"),
     cst_incremental$100=caml_string_of_jsbytes("incremental"),
     cst_Incremental_State$0=caml_string_of_jsbytes("Incremental__State"),
     cst_Incremental_Expert1=caml_string_of_jsbytes("Incremental__Expert1"),
     cst_incremental$101=caml_string_of_jsbytes("incremental"),
     cst_src_expert1_ml=caml_string_of_jsbytes("src/expert1.ml"),
     cst$42=caml_string_of_jsbytes(""),
     cst_incremental$102=caml_string_of_jsbytes("incremental"),
     cst_incremental$103=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Expert1$0=caml_string_of_jsbytes("Incremental__Expert1"),
     cst_Incremental_Reduce_balance=
      caml_string_of_jsbytes("Incremental__Reduce_balanced"),
     cst_incremental$104=caml_string_of_jsbytes("incremental"),
     cst_src_reduce_balanced_ml=
      caml_string_of_jsbytes("src/reduce_balanced.ml"),
     cst$43=caml_string_of_jsbytes(""),
     cst_incremental$105=caml_string_of_jsbytes("incremental"),
     cst_incremental$106=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Reduce_balance$0=
      caml_string_of_jsbytes("Incremental__Reduce_balanced"),
     cst_Incremental_Incremental_in=
      caml_string_of_jsbytes("Incremental__Incremental_intf"),
     cst_incremental$107=caml_string_of_jsbytes("incremental"),
     cst_src_incremental_intf_ml=
      caml_string_of_jsbytes("src/incremental_intf.ml"),
     cst$44=caml_string_of_jsbytes(""),
     cst_incremental$108=caml_string_of_jsbytes("incremental"),
     cst_incremental$109=caml_string_of_jsbytes("incremental"),
     cst_Incremental_Incremental_in$0=
      caml_string_of_jsbytes("Incremental__Incremental_intf"),
     cst_invalid$0=caml_string_of_jsbytes("<invalid>"),
     cst_unnecessary=caml_string_of_jsbytes("<unnecessary>"),
     cst_uncomputed=caml_string_of_jsbytes("<uncomputed>"),
     cst_disallowed=caml_string_of_jsbytes("<disallowed>"),
     cst_unstabilized=caml_string_of_jsbytes("<unstabilized>"),
     cst_invalid=caml_string_of_jsbytes("<invalid>"),
     cst_Incremental_bug_Observer_o=
      caml_string_of_jsbytes
       ("Incremental bug -- Observer.on_update_exn got unexpected update Unnecessary"),
     cst_Incremental=caml_string_of_jsbytes("Incremental"),
     cst_incremental$110=caml_string_of_jsbytes("incremental"),
     cst_src_incremental_ml=caml_string_of_jsbytes("src/incremental.ml"),
     cst$45=caml_string_of_jsbytes(""),
     cst_incremental$111=caml_string_of_jsbytes("incremental"),
     level_bits=[0,14,[0,13,[0,5,0]]],
     cst_incremental$112=caml_string_of_jsbytes("incremental"),
     cst_Incremental$0=caml_string_of_jsbytes("Incremental"),
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Core_Array=global_data.Core__Array,
     Core=global_data.Core,
     include=global_data.Core__Int,
     Core_String=global_data.Core__String,
     Core_Time_ns=global_data.Core__Time_ns,
     include$0=global_data.Uopt,
     Core_Uniform_array=global_data.Core__Uniform_array,
     Base_Invariant=global_data.Base__Invariant,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Core_Info=global_data.Core__Info,
     Core_Set=global_data.Core__Set,
     Core_Map=global_data.Core__Map,
     Core_List=global_data.Core__List,
     Core_Comparator=global_data.Core__Comparator,
     Assert_failure=global_data.Assert_failure,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     Base_Backtrace=global_data.Base__Backtrace,
     CamlinternalMod=global_data.CamlinternalMod,
     Base_Field=global_data.Base__Field,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Timing_wheel=global_data.Timing_wheel,
     Core_Sequence=global_data.Core__Sequence,
     Incremental_step_function=global_data.Incremental_step_function,
     Stdio_Out_channel=global_data.Stdio__Out_channel,
     Core_Hash_set=global_data.Core__Hash_set,
     Core_Stack=global_data.Core__Stack;
    global_data.Core__Option;
    var
     Weak_hashtbl=global_data.Weak_hashtbl,
     Thread_safe_queue=global_data.Thread_safe_queue,
     Core_Or_error=global_data.Core__Or_error,
     Core_Fn=global_data.Core__Fn,
     Core_Hashtbl=global_data.Core__Hashtbl,
     Core_Lazy=global_data.Core__Lazy,
     Core_Gc=global_data.Core__Gc,
     Core_Tuple=global_data.Core__Tuple,
     Core_Error=global_data.Core__Error,
     Core_Percent=global_data.Core__Percent,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Balanced_reducer=global_data.Balanced_reducer,
     Incremental=[0];
    caml_register_global(1290,Incremental,"Incremental__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Before_or_afte);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental);
    caml_call1(Expect_test_collector[5][1],cst_src_before_or_after_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$0,cst);
    var
     _a_=[0,caml_string_of_jsbytes("After")],
     _b_=[0,caml_string_of_jsbytes("Before")],
     _l_=[0,caml_string_of_jsbytes("_")],
     _m_=[0,caml_string_of_jsbytes("src/cutoff.ml"),17,409,431],
     _f_=[0,caml_string_of_jsbytes("Always")],
     _g_=[0,caml_string_of_jsbytes("Never")],
     _h_=[0,caml_string_of_jsbytes("Phys_equal")],
     _i_=[0,caml_string_of_jsbytes("Compare")],
     _j_=[0,caml_string_of_jsbytes("Equal")],
     _k_=[0,caml_string_of_jsbytes("F")],
     _w_=[0,[12,32,[2,0,[12,61,[2,0,0]]]],caml_string_of_jsbytes(" %s=%s")],
     _u_=[0,caml_string_of_jsbytes("|")],
     _v_=[0,caml_string_of_jsbytes("|")],
     _x_=[0,caml_string_of_jsbytes(" ")],
     _y_=
      [0,
       [11,
        caml_string_of_jsbytes("  "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" [shape=Mrecord label="),
          [2,0,[12,32,[2,0,[12,93,0]]]]]]],
       caml_string_of_jsbytes("  %s [shape=Mrecord label=%s %s]")],
     _p_=[0,caml_string_of_jsbytes("Dot")],
     _q_=[0,caml_string_of_jsbytes("Info")],
     _r_=[0,caml_string_of_jsbytes("new_")],
     _s_=[0,caml_string_of_jsbytes("prior")],
     _t_=[0,caml_string_of_jsbytes("Append")],
     _n_=[0,caml_string_of_jsbytes("attributes")],
     _o_=[0,caml_string_of_jsbytes("label")],
     _z_=[0,caml_string_of_jsbytes("src/node_id.ml"),5,18],
     _I_=[0,caml_string_of_jsbytes("src/stabilization_num.ml"),5,18],
     _S_=[0,caml_string_of_jsbytes("created_at")],
     _T_=[0,caml_string_of_jsbytes("previous_update_kind")],
     _U_=[0,caml_string_of_jsbytes("f")],
     _O_=[0,caml_string_of_jsbytes("Invalidated")],
     _P_=[0,caml_string_of_jsbytes("Unnecessary")],
     _Q_=[0,caml_string_of_jsbytes("Necessary")],
     _R_=[0,caml_string_of_jsbytes("Changed")],
     _J_=[0,caml_string_of_jsbytes("Never_been_updated")],
     _K_=[0,caml_string_of_jsbytes("Necessary")],
     _L_=[0,caml_string_of_jsbytes("Changed")],
     _M_=[0,caml_string_of_jsbytes("Invalidated")],
     _N_=[0,caml_string_of_jsbytes("Unnecessary")],
     _V_=[0,caml_string_of_jsbytes("backtrace")],
     _W_=[0,caml_string_of_jsbytes("exn")],
     _bg_=[0,caml_string_of_jsbytes("_")],
     _a$_=[0,caml_string_of_jsbytes("_")],
     _X_=[0,[0]],
     _Y_=[0,caml_string_of_jsbytes("src/types.ml"),22,2],
     _Z_=[0,[0]],
     ___=[0,caml_string_of_jsbytes("src/types.ml"),27,2],
     _$_=[0,[0,[0,[0]]]],
     _aa_=[0,caml_string_of_jsbytes("src/types.ml"),43,2],
     _ab_=[0,[0]],
     _ac_=[0,caml_string_of_jsbytes("src/types.ml"),52,2],
     _ad_=[0,[0]],
     _ae_=[0,caml_string_of_jsbytes("src/types.ml"),62,2],
     _af_=[0,[0]],
     _ag_=[0,caml_string_of_jsbytes("src/types.ml"),73,2],
     _ah_=[0,[0]],
     _ai_=[0,caml_string_of_jsbytes("src/types.ml"),86,2],
     _aj_=[0,[0]],
     _ak_=[0,caml_string_of_jsbytes("src/types.ml"),96,2],
     _al_=[0,[0]],
     _am_=[0,caml_string_of_jsbytes("src/types.ml"),117,2],
     _an_=[0,[0]],
     _ao_=[0,caml_string_of_jsbytes("src/types.ml"),126,2],
     _ap_=[0,[0]],
     _aq_=[0,caml_string_of_jsbytes("src/types.ml"),138,2],
     _ar_=[0,[0,[0,[0]],[0,[0]]]],
     _as_=[0,caml_string_of_jsbytes("src/types.ml"),165,2],
     _at_=[0,[0]],
     _au_=[0,caml_string_of_jsbytes("src/types.ml"),175,2],
     _av_=[0,[0]],
     _aw_=[0,caml_string_of_jsbytes("src/types.ml"),416,2],
     _ax_=[0,[0,0,[0,[0,0]],0,0,0]],
     _ay_=[0,caml_string_of_jsbytes("src/types.ml"),460,6],
     _az_=[0,[0]],
     _aA_=[0,caml_string_of_jsbytes("src/types.ml"),519,2],
     _aB_=[0,[0]],
     _aC_=[0,caml_string_of_jsbytes("src/types.ml"),527,2],
     _aD_=[0,[0]],
     _aE_=[0,caml_string_of_jsbytes("src/types.ml"),532,2],
     _aF_=[0,[0]],
     _aG_=[0,caml_string_of_jsbytes("src/types.ml"),541,2],
     _aH_=[0,[0]],
     _aI_=[0,caml_string_of_jsbytes("src/types.ml"),546,2],
     _aJ_=[0,[0,0]],
     _aK_=[0,caml_string_of_jsbytes("src/types.ml"),553,6],
     _aL_=[0,[0]],
     _aM_=[0,caml_string_of_jsbytes("src/types.ml"),573,2],
     _aN_=[0,[0]],
     _aO_=[0,caml_string_of_jsbytes("src/types.ml"),606,2],
     _aP_=[0,[0]],
     _aQ_=[0,caml_string_of_jsbytes("src/types.ml"),615,2],
     _aR_=[0,[0]],
     _aS_=[0,caml_string_of_jsbytes("src/types.ml"),629,2],
     _aT_=[0,[0]],
     _aU_=[0,caml_string_of_jsbytes("src/types.ml"),643,2],
     _aV_=[0,[0,[0,[0]]]],
     _aW_=[0,caml_string_of_jsbytes("src/types.ml"),659,2],
     _aX_=[0,[0]],
     _aY_=[0,[0]],
     _aZ_=[0,[0,[0,[0]]]],
     _a0_=[0,[0]],
     _a1_=[0,[0]],
     _a2_=[0,[0]],
     _a3_=[0,[0]],
     _a4_=[0,[0]],
     _a5_=[0,[0]],
     _a6_=[0,[0]],
     _a7_=[0,[0]],
     _a8_=[0,[0,[0,[0]],[0,[0]]]],
     _a9_=[0,[0]],
     _a__=[0,[0]],
     _ba_=[0,[0,0,[0,[0,0]],0,0,0]],
     _bb_=[0,[0]],
     _bc_=[0,[0]],
     _bd_=[0,[0]],
     _be_=[0,[0]],
     _bf_=[0,[0]],
     _bh_=[0,[0,0]],
     _bi_=[0,[0]],
     _bj_=[0,[0]],
     _bk_=[0,[0]],
     _bl_=[0,[0]],
     _bm_=[0,[0]],
     _bn_=[0,[0,[0,[0]]]],
     _bE_=[0,caml_string_of_jsbytes("_")],
     _bF_=[0,caml_string_of_jsbytes("T")],
     _bC_=[0,caml_string_of_jsbytes("_")],
     _bB_=[0,caml_string_of_jsbytes("src/var.ml"),32,23],
     _bA_=[0,caml_string_of_jsbytes("src/var.ml"),33,18],
     _bD_=[0,caml_string_of_jsbytes("src/var.ml"),22,913,935],
     _bw_=[0,caml_string_of_jsbytes("watch")],
     _bx_=[0,caml_string_of_jsbytes("set_at")],
     _by_=[0,caml_string_of_jsbytes("value_set_during_stabilization")],
     _bz_=[0,caml_string_of_jsbytes("value")],
     _cd_=[0,caml_string_of_jsbytes("_")],
     _cc_=[0,caml_string_of_jsbytes("_")],
     _b$_=[0,caml_string_of_jsbytes("_")],
     _ca_=[0,caml_string_of_jsbytes("child")],
     _cb_=[0,caml_string_of_jsbytes("child_index")],
     _ce_=[0,caml_string_of_jsbytes("unordered_array_fold")],
     _b9_=[0,caml_string_of_jsbytes("_")],
     _b8_=[0,caml_string_of_jsbytes("_")],
     _b7_=[0,caml_string_of_jsbytes("src/unordered_array_fold.ml"),42,40],
     _b6_=[0,caml_string_of_jsbytes("src/unordered_array_fold.ml"),43,18],
     _b5_=[0,caml_string_of_jsbytes("src/unordered_array_fold.ml"),68,11],
     _b4_=[0,caml_string_of_jsbytes("src/unordered_array_fold.ml"),53,18],
     _b3_=[0,caml_string_of_jsbytes("src/unordered_array_fold.ml"),63,11],
     _b2_=[0,caml_string_of_jsbytes("src/unordered_array_fold.ml"),64,11],
     _b__=[0,caml_string_of_jsbytes("src/unordered_array_fold.ml"),35,908,930],
     _bU_=[0,caml_string_of_jsbytes("num_changes_since_last_full_compute")],
     _bV_=[0,caml_string_of_jsbytes("fold_value")],
     _bW_=[0,caml_string_of_jsbytes("children")],
     _bX_=[0,caml_string_of_jsbytes("full_compute_every_n_changes")],
     _bY_=[0,caml_string_of_jsbytes("update")],
     _bZ_=[0,caml_string_of_jsbytes("f")],
     _b0_=[0,caml_string_of_jsbytes("init")],
     _b1_=[0,caml_string_of_jsbytes("main")],
     _bG_=[0,caml_string_of_jsbytes("F_inverse")],
     _bH_=[0,caml_string_of_jsbytes("Update")],
     _cA_=[0,caml_string_of_jsbytes("_")],
     _cz_=[0,caml_string_of_jsbytes("src/step_function_node.ml"),30,33],
     _cy_=[0,caml_string_of_jsbytes("src/step_function_node.ml"),31,18],
     _cw_=[0,caml_string_of_jsbytes("src/step_function_node.ml"),41,18],
     _cx_=[0,caml_string_of_jsbytes("src/step_function_node.ml"),40,33],
     _cB_=[0,caml_string_of_jsbytes("src/step_function_node.ml"),22,626,648],
     _co_=[0,caml_string_of_jsbytes("clock")],
     _cp_=[0,caml_string_of_jsbytes("alarm_value")],
     _cq_=[0,caml_string_of_jsbytes("alarm")],
     _cr_=[0,caml_string_of_jsbytes("upcoming_steps")],
     _cs_=[0,caml_string_of_jsbytes("value")],
     _ct_=[0,caml_string_of_jsbytes("extracted_step_function_from_child_at")],
     _cu_=[0,caml_string_of_jsbytes("child")],
     _cv_=[0,caml_string_of_jsbytes("main")],
     _cK_=[0,caml_string_of_jsbytes("_")],
     _cJ_=[0,caml_string_of_jsbytes("_")],
     _cL_=[0,caml_string_of_jsbytes("src/array_fold.ml"),13,253,275],
     _cG_=[0,caml_string_of_jsbytes("children")],
     _cH_=[0,caml_string_of_jsbytes("f")],
     _cI_=[0,caml_string_of_jsbytes("init")],
     _cV_=[0,caml_string_of_jsbytes("src/at.ml"),23,22],
     _cU_=[0,caml_string_of_jsbytes("src/at.ml"),24,18],
     _cW_=[0,caml_string_of_jsbytes("src/at.ml"),15,264,286],
     _cQ_=[0,caml_string_of_jsbytes("clock")],
     _cR_=[0,caml_string_of_jsbytes("alarm")],
     _cS_=[0,caml_string_of_jsbytes("at")],
     _cT_=[0,caml_string_of_jsbytes("main")],
     _c__=[0,caml_string_of_jsbytes("src/at_intervals.ml"),23,32],
     _c9_=[0,caml_string_of_jsbytes("src/at_intervals.ml"),24,18],
     _c8_=[0,caml_string_of_jsbytes("src/at_intervals.ml"),26,40],
     _c$_=[0,caml_string_of_jsbytes("src/at_intervals.ml"),16,293,315],
     _c3_=[0,caml_string_of_jsbytes("clock")],
     _c4_=[0,caml_string_of_jsbytes("alarm")],
     _c5_=[0,caml_string_of_jsbytes("interval")],
     _c6_=[0,caml_string_of_jsbytes("base")],
     _c7_=[0,caml_string_of_jsbytes("main")],
     _dz_=[0,caml_string_of_jsbytes("_")],
     _dy_=[0,caml_string_of_jsbytes("_")],
     _dx_=[0,caml_string_of_jsbytes("src/bind.ml"),52,29],
     _dw_=[0,caml_string_of_jsbytes("src/bind.ml"),53,18],
     _dv_=[0,caml_string_of_jsbytes("src/bind.ml"),58,11],
     _du_=[0,caml_string_of_jsbytes("src/bind.ml"),61,35],
     _dt_=[0,caml_string_of_jsbytes("src/bind.ml"),62,18],
     _dr_=[0,caml_string_of_jsbytes("src/bind.ml"),67,24],
     _ds_=[0,caml_string_of_jsbytes("src/bind.ml"),66,26],
     _dq_=[0,caml_string_of_jsbytes("src/bind.ml"),71,13],
     _dp_=[0,caml_string_of_jsbytes("src/bind.ml"),73,18],
     _dA_=[0,caml_string_of_jsbytes("src/bind.ml"),45,1438,1460],
     _di_=[0,caml_string_of_jsbytes("all_nodes_created_on_rhs")],
     _dj_=[0,caml_string_of_jsbytes("rhs_scope")],
     _dk_=[0,caml_string_of_jsbytes("rhs")],
     _dl_=[0,caml_string_of_jsbytes("lhs_change")],
     _dm_=[0,caml_string_of_jsbytes("lhs")],
     _dn_=[0,caml_string_of_jsbytes("f")],
     _do_=[0,caml_string_of_jsbytes("main")],
     _dQ_=[0,caml_string_of_jsbytes("src/expert.ml"),142,2],
     _dP_=[0,caml_string_of_jsbytes("src/expert.ml"),111,2],
     _dN_=[0,caml_string_of_jsbytes("src/expert.ml"),61,15],
     _dO_=[0,caml_string_of_jsbytes("src/expert.ml"),53,2],
     _dG_=[0,caml_string_of_jsbytes("will_fire_all_callbacks")],
     _dH_=[0,caml_string_of_jsbytes("num_invalid_children")],
     _dI_=[0,caml_string_of_jsbytes("force_stale")],
     _dJ_=[0,caml_string_of_jsbytes("num_children")],
     _dK_=[0,caml_string_of_jsbytes("children")],
     _dL_=[0,caml_string_of_jsbytes("on_observability_change")],
     _dM_=[0,caml_string_of_jsbytes("f")],
     _dE_=[0,caml_string_of_jsbytes("_")],
     _dF_=[0,caml_string_of_jsbytes("E")],
     _dB_=[0,caml_string_of_jsbytes("index")],
     _dC_=[0,caml_string_of_jsbytes("on_change")],
     _dD_=[0,caml_string_of_jsbytes("child")],
     _dR_=[0,caml_string_of_jsbytes("src/scope.ml"),37,2],
     _d0_=[0,caml_string_of_jsbytes("_")],
     _dZ_=[0,caml_string_of_jsbytes("src/freeze.ml"),19,11],
     _dY_=[0,caml_string_of_jsbytes("src/freeze.ml"),23,26],
     _dX_=[0,caml_string_of_jsbytes("src/freeze.ml"),24,18],
     _d1_=[0,caml_string_of_jsbytes("src/freeze.ml"),14,239,261],
     _dU_=[0,caml_string_of_jsbytes("only_freeze_when")],
     _dV_=[0,caml_string_of_jsbytes("child")],
     _dW_=[0,caml_string_of_jsbytes("main")],
     _eg_=[0,caml_string_of_jsbytes("_")],
     _ef_=[0,caml_string_of_jsbytes("src/if_then_else.ml"),26,32],
     _ee_=[0,caml_string_of_jsbytes("src/if_then_else.ml"),33,34],
     _ed_=[0,caml_string_of_jsbytes("src/if_then_else.ml"),34,18],
     _ec_=[0,caml_string_of_jsbytes("src/if_then_else.ml"),40,13],
     _eh_=[0,caml_string_of_jsbytes("src/if_then_else.ml"),19,382,404],
     _d8_=[0,caml_string_of_jsbytes("else_")],
     _d9_=[0,caml_string_of_jsbytes("then_")],
     _d__=[0,caml_string_of_jsbytes("current_branch")],
     _d$_=[0,caml_string_of_jsbytes("test_change")],
     _ea_=[0,caml_string_of_jsbytes("test")],
     _eb_=[0,caml_string_of_jsbytes("main")],
     _eu_=[0,caml_string_of_jsbytes("_")],
     _et_=[0,caml_string_of_jsbytes("src/join.ml"),24,29],
     _es_=[0,caml_string_of_jsbytes("src/join.ml"),25,18],
     _er_=[0,caml_string_of_jsbytes("src/join.ml"),31,35],
     _eq_=[0,caml_string_of_jsbytes("src/join.ml"),32,18],
     _ev_=[0,caml_string_of_jsbytes("src/join.ml"),17,322,344],
     _em_=[0,caml_string_of_jsbytes("rhs")],
     _en_=[0,caml_string_of_jsbytes("lhs_change")],
     _eo_=[0,caml_string_of_jsbytes("lhs")],
     _ep_=[0,caml_string_of_jsbytes("main")],
     _eI_=[0,caml_string_of_jsbytes("_")],
     _eH_=[0,caml_string_of_jsbytes("src/snapshot.ml"),21,11],
     _eG_=[0,caml_string_of_jsbytes("src/snapshot.ml"),25,28],
     _eF_=[0,caml_string_of_jsbytes("src/snapshot.ml"),26,18],
     _eJ_=[0,caml_string_of_jsbytes("src/snapshot.ml"),16,286,308],
     _eA_=[0,caml_string_of_jsbytes("clock")],
     _eB_=[0,caml_string_of_jsbytes("value_at")],
     _eC_=[0,caml_string_of_jsbytes("before")],
     _eD_=[0,caml_string_of_jsbytes("at")],
     _eE_=[0,caml_string_of_jsbytes("main")],
     _he_=[0,caml_string_of_jsbytes("_")],
     _hf_=[0,caml_string_of_jsbytes("src/kind.ml"),602,14347,14361],
     _hc_=[0,caml_string_of_jsbytes("_")],
     _hb_=[0,caml_string_of_jsbytes("_")],
     _ha_=[0,caml_string_of_jsbytes("_")],
     _g$_=[0,caml_string_of_jsbytes("_")],
     _g__=[0,caml_string_of_jsbytes("_")],
     _g9_=[0,caml_string_of_jsbytes("_")],
     _g8_=[0,caml_string_of_jsbytes("_")],
     _g7_=[0,caml_string_of_jsbytes("_")],
     _g6_=[0,caml_string_of_jsbytes("_")],
     _g5_=[0,caml_string_of_jsbytes("_")],
     _g4_=[0,caml_string_of_jsbytes("_")],
     _g3_=[0,caml_string_of_jsbytes("_")],
     _g2_=[0,caml_string_of_jsbytes("_")],
     _g1_=[0,caml_string_of_jsbytes("_")],
     _g0_=[0,caml_string_of_jsbytes("_")],
     _gY_=[0,caml_string_of_jsbytes("_")],
     _gX_=[0,caml_string_of_jsbytes("_")],
     _gW_=[0,caml_string_of_jsbytes("_")],
     _gV_=[0,caml_string_of_jsbytes("_")],
     _gU_=[0,caml_string_of_jsbytes("_")],
     _gT_=[0,caml_string_of_jsbytes("_")],
     _gS_=[0,caml_string_of_jsbytes("_")],
     _gR_=[0,caml_string_of_jsbytes("_")],
     _gQ_=[0,caml_string_of_jsbytes("_")],
     _gP_=[0,caml_string_of_jsbytes("_")],
     _gO_=[0,caml_string_of_jsbytes("_")],
     _gN_=[0,caml_string_of_jsbytes("_")],
     _gM_=[0,caml_string_of_jsbytes("_")],
     _gL_=[0,caml_string_of_jsbytes("_")],
     _gJ_=[0,caml_string_of_jsbytes("_")],
     _gI_=[0,caml_string_of_jsbytes("_")],
     _gH_=[0,caml_string_of_jsbytes("_")],
     _gG_=[0,caml_string_of_jsbytes("_")],
     _gF_=[0,caml_string_of_jsbytes("_")],
     _gE_=[0,caml_string_of_jsbytes("_")],
     _gD_=[0,caml_string_of_jsbytes("_")],
     _gC_=[0,caml_string_of_jsbytes("_")],
     _gB_=[0,caml_string_of_jsbytes("_")],
     _gA_=[0,caml_string_of_jsbytes("_")],
     _gz_=[0,caml_string_of_jsbytes("_")],
     _gy_=[0,caml_string_of_jsbytes("_")],
     _gx_=[0,caml_string_of_jsbytes("_")],
     _gv_=[0,caml_string_of_jsbytes("_")],
     _gu_=[0,caml_string_of_jsbytes("_")],
     _gt_=[0,caml_string_of_jsbytes("_")],
     _gs_=[0,caml_string_of_jsbytes("_")],
     _gr_=[0,caml_string_of_jsbytes("_")],
     _gq_=[0,caml_string_of_jsbytes("_")],
     _gp_=[0,caml_string_of_jsbytes("_")],
     _go_=[0,caml_string_of_jsbytes("_")],
     _gn_=[0,caml_string_of_jsbytes("_")],
     _gm_=[0,caml_string_of_jsbytes("_")],
     _gl_=[0,caml_string_of_jsbytes("_")],
     _gk_=[0,caml_string_of_jsbytes("_")],
     _gi_=[0,caml_string_of_jsbytes("_")],
     _gh_=[0,caml_string_of_jsbytes("_")],
     _gg_=[0,caml_string_of_jsbytes("_")],
     _gf_=[0,caml_string_of_jsbytes("_")],
     _ge_=[0,caml_string_of_jsbytes("_")],
     _gd_=[0,caml_string_of_jsbytes("_")],
     _gc_=[0,caml_string_of_jsbytes("_")],
     _gb_=[0,caml_string_of_jsbytes("_")],
     _ga_=[0,caml_string_of_jsbytes("_")],
     _f$_=[0,caml_string_of_jsbytes("_")],
     _f__=[0,caml_string_of_jsbytes("_")],
     _f8_=[0,caml_string_of_jsbytes("_")],
     _f7_=[0,caml_string_of_jsbytes("_")],
     _f6_=[0,caml_string_of_jsbytes("_")],
     _f5_=[0,caml_string_of_jsbytes("_")],
     _f4_=[0,caml_string_of_jsbytes("_")],
     _f3_=[0,caml_string_of_jsbytes("_")],
     _f2_=[0,caml_string_of_jsbytes("_")],
     _f1_=[0,caml_string_of_jsbytes("_")],
     _f0_=[0,caml_string_of_jsbytes("_")],
     _fZ_=[0,caml_string_of_jsbytes("_")],
     _fX_=[0,caml_string_of_jsbytes("_")],
     _fW_=[0,caml_string_of_jsbytes("_")],
     _fV_=[0,caml_string_of_jsbytes("_")],
     _fU_=[0,caml_string_of_jsbytes("_")],
     _fT_=[0,caml_string_of_jsbytes("_")],
     _fS_=[0,caml_string_of_jsbytes("_")],
     _fR_=[0,caml_string_of_jsbytes("_")],
     _fQ_=[0,caml_string_of_jsbytes("_")],
     _fP_=[0,caml_string_of_jsbytes("_")],
     _fN_=[0,caml_string_of_jsbytes("_")],
     _fM_=[0,caml_string_of_jsbytes("_")],
     _fL_=[0,caml_string_of_jsbytes("_")],
     _fK_=[0,caml_string_of_jsbytes("_")],
     _fJ_=[0,caml_string_of_jsbytes("_")],
     _fI_=[0,caml_string_of_jsbytes("_")],
     _fH_=[0,caml_string_of_jsbytes("_")],
     _fG_=[0,caml_string_of_jsbytes("_")],
     _fE_=[0,caml_string_of_jsbytes("_")],
     _fD_=[0,caml_string_of_jsbytes("_")],
     _fC_=[0,caml_string_of_jsbytes("_")],
     _fB_=[0,caml_string_of_jsbytes("_")],
     _fA_=[0,caml_string_of_jsbytes("_")],
     _fz_=[0,caml_string_of_jsbytes("_")],
     _fy_=[0,caml_string_of_jsbytes("_")],
     _fw_=[0,caml_string_of_jsbytes("_")],
     _fv_=[0,caml_string_of_jsbytes("_")],
     _fu_=[0,caml_string_of_jsbytes("_")],
     _ft_=[0,caml_string_of_jsbytes("_")],
     _fs_=[0,caml_string_of_jsbytes("_")],
     _fr_=[0,caml_string_of_jsbytes("_")],
     _fp_=[0,caml_string_of_jsbytes("_")],
     _fo_=[0,caml_string_of_jsbytes("_")],
     _fn_=[0,caml_string_of_jsbytes("_")],
     _fm_=[0,caml_string_of_jsbytes("_")],
     _fl_=[0,caml_string_of_jsbytes("_")],
     _fj_=[0,caml_string_of_jsbytes("_")],
     _fi_=[0,caml_string_of_jsbytes("_")],
     _fh_=[0,caml_string_of_jsbytes("_")],
     _fg_=[0,caml_string_of_jsbytes("_")],
     _fe_=[0,caml_string_of_jsbytes("_")],
     _fd_=[0,caml_string_of_jsbytes("_")],
     _fc_=[0,caml_string_of_jsbytes("_")],
     _fa_=[0,caml_string_of_jsbytes("_")],
     _e$_=[0,caml_string_of_jsbytes("_")],
     _e8_=[0,caml_string_of_jsbytes("_")],
     _e4_=[0,caml_string_of_jsbytes("_")],
     _e1_=[0,caml_string_of_jsbytes("_")],
     _eY_=[0,caml_string_of_jsbytes("_")],
     _eT_=[0,caml_string_of_jsbytes("_")],
     _eR_=[0,caml_string_of_jsbytes("_")],
     _eQ_=[0,caml_string_of_jsbytes("_")],
     _eM_=[0,caml_string_of_jsbytes("_")],
     _eK_=[0,caml_string_of_jsbytes("Invalid")],
     _eL_=[0,caml_string_of_jsbytes("Uninitialized")],
     _eN_=[0,caml_string_of_jsbytes("Array_fold")],
     _eO_=[0,caml_string_of_jsbytes("At")],
     _eP_=[0,caml_string_of_jsbytes("At_intervals")],
     _eS_=[0,caml_string_of_jsbytes("Bind_lhs_change")],
     _eU_=[0,caml_string_of_jsbytes("Bind_main")],
     _eV_=[0,caml_string_of_jsbytes("Const")],
     _eW_=[0,caml_string_of_jsbytes("Expert")],
     _eX_=[0,caml_string_of_jsbytes("Freeze")],
     _eZ_=[0,caml_string_of_jsbytes("If_test_change")],
     _e0_=[0,caml_string_of_jsbytes("If_then_else")],
     _e2_=[0,caml_string_of_jsbytes("Join_lhs_change")],
     _e3_=[0,caml_string_of_jsbytes("Join_main")],
     _e5_=[0,caml_string_of_jsbytes("Map")],
     _e6_=[0,caml_string_of_jsbytes("Snapshot")],
     _e7_=[0,caml_string_of_jsbytes("Step_function")],
     _e9_=[0,caml_string_of_jsbytes("Unordered_array_fold")],
     _e__=[0,caml_string_of_jsbytes("Var")],
     _fb_=[0,caml_string_of_jsbytes("Map2")],
     _ff_=[0,caml_string_of_jsbytes("Map3")],
     _fk_=[0,caml_string_of_jsbytes("Map4")],
     _fq_=[0,caml_string_of_jsbytes("Map5")],
     _fx_=[0,caml_string_of_jsbytes("Map6")],
     _fF_=[0,caml_string_of_jsbytes("Map7")],
     _fO_=[0,caml_string_of_jsbytes("Map8")],
     _fY_=[0,caml_string_of_jsbytes("Map9")],
     _f9_=[0,caml_string_of_jsbytes("Map10")],
     _gj_=[0,caml_string_of_jsbytes("Map11")],
     _gw_=[0,caml_string_of_jsbytes("Map12")],
     _gK_=[0,caml_string_of_jsbytes("Map13")],
     _gZ_=[0,caml_string_of_jsbytes("Map14")],
     _hd_=[0,caml_string_of_jsbytes("Map15")],
     _i7_=
      [0,
       [11,
        caml_string_of_jsbytes("  "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" -> "),
          [2,0,[11,caml_string_of_jsbytes(" [style=dashed]\n"),0]]]]],
       caml_string_of_jsbytes("  %s -> %s [style=dashed]\n")],
     _i6_=
      [0,
       [11,
        caml_string_of_jsbytes("  "),
        [2,0,[11,caml_string_of_jsbytes(" -> "),[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("  %s -> %s\n")],
     _i4_=
      [0,
       [11,caml_string_of_jsbytes("digraph G {\n"),0],
       caml_string_of_jsbytes("digraph G {\n")],
     _i5_=
      [0,
       [11,caml_string_of_jsbytes("  rankdir = BT\n"),0],
       caml_string_of_jsbytes("  rankdir = BT\n")],
     _i8_=
      [0,
       [11,caml_string_of_jsbytes("}\n"),[10,0]],
       caml_string_of_jsbytes("}\n%!")],
     _i3_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _i2_=
      [0,
       [11,caml_string_of_jsbytes("height="),[4,0,0,0,0]],
       caml_string_of_jsbytes("height=%d")],
     _i1_=[0,caml_string_of_jsbytes("_")],
     _i0_=[0,caml_string_of_jsbytes("src/node.ml"),473,12],
     _iY_=[0,caml_string_of_jsbytes("src/node.ml"),492,33],
     _iZ_=[0,caml_string_of_jsbytes("src/node.ml"),485,14],
     _iW_=[0,caml_string_of_jsbytes("_")],
     _iX_=[0,caml_string_of_jsbytes("src/node.ml"),452,18787,18810],
     _iU_=[0,caml_string_of_jsbytes("_")],
     _iS_=[0,caml_string_of_jsbytes("src/node.ml"),312,50],
     _iR_=[0,caml_string_of_jsbytes("src/node.ml"),328,16],
     _iQ_=[0,caml_string_of_jsbytes("src/node.ml"),338,11],
     _iP_=[0,caml_string_of_jsbytes("src/node.ml"),339,11],
     _iO_=[0,caml_string_of_jsbytes("src/node.ml"),355,16],
     _iM_=[0,caml_string_of_jsbytes("src/node.ml"),358,34],
     _iN_=[0,caml_string_of_jsbytes("src/node.ml"),358,60],
     _iL_=[0,caml_string_of_jsbytes("src/node.ml"),361,11],
     _iK_=[0,caml_string_of_jsbytes("src/node.ml"),362,11],
     _iJ_=[0,caml_string_of_jsbytes("src/node.ml"),366,16],
     _iI_=[0,caml_string_of_jsbytes("src/node.ml"),370,13],
     _iH_=[0,caml_string_of_jsbytes("src/node.ml"),371,13],
     _iG_=[0,caml_string_of_jsbytes("src/node.ml"),375,16],
     _iF_=[0,caml_string_of_jsbytes("src/node.ml"),379,13],
     _iE_=[0,caml_string_of_jsbytes("src/node.ml"),380,13],
     _iD_=[0,caml_string_of_jsbytes("src/node.ml"),384,16],
     _iC_=[0,caml_string_of_jsbytes("src/node.ml"),388,16],
     _iB_=[0,caml_string_of_jsbytes("src/node.ml"),392,13],
     _iA_=[0,caml_string_of_jsbytes("src/node.ml"),393,13],
     _iz_=[0,caml_string_of_jsbytes("src/node.ml"),399,13],
     _iy_=[0,caml_string_of_jsbytes("src/node.ml"),402,37],
     _ix_=[0,caml_string_of_jsbytes("src/node.ml"),417,15],
     _iw_=[0,caml_string_of_jsbytes("src/node.ml"),433,13],
     _iv_=[0,caml_string_of_jsbytes("src/node.ml"),302,6],
     _iu_=[0,caml_string_of_jsbytes("src/node.ml"),303,6],
     _it_=[0,caml_string_of_jsbytes("src/node.ml"),304,6],
     _ir_=[0,caml_string_of_jsbytes("src/node.ml"),298,8],
     _iq_=[0,caml_string_of_jsbytes("src/node.ml"),299,8],
     _iT_=[0,caml_string_of_jsbytes("src/node.ml"),296,6],
     _is_=[0,caml_string_of_jsbytes("src/node.ml"),300,6],
     _iV_=[0,caml_string_of_jsbytes("src/node.ml"),292,11852,11874],
     _ip_=[0,caml_string_of_jsbytes("src/node.ml"),235,21],
     _io_=[0,caml_string_of_jsbytes("src/node.ml"),145,21],
     _hY_=[0,caml_string_of_jsbytes("creation_backtrace")],
     _hZ_=[0,caml_string_of_jsbytes("user_info")],
     _h0_=[0,caml_string_of_jsbytes("force_necessary")],
     _h1_=[0,caml_string_of_jsbytes("my_child_index_in_parent_at_index")],
     _h2_=[0,caml_string_of_jsbytes("my_parent_index_in_child_at_index")],
     _h3_=[0,caml_string_of_jsbytes("on_update_handlers")],
     _h4_=[0,caml_string_of_jsbytes("is_in_handle_after_stabilization")],
     _h5_=[0,caml_string_of_jsbytes("observers")],
     _h6_=[0,caml_string_of_jsbytes("old_value_opt")],
     _h7_=[0,caml_string_of_jsbytes("next_in_adjust_heights_heap")],
     _h8_=[0,caml_string_of_jsbytes("height_in_adjust_heights_heap")],
     _h9_=[0,caml_string_of_jsbytes("next_in_recompute_heap")],
     _h__=[0,caml_string_of_jsbytes("prev_in_recompute_heap")],
     _h$_=[0,caml_string_of_jsbytes("height_in_recompute_heap")],
     _ia_=[0,caml_string_of_jsbytes("height")],
     _ib_=[0,caml_string_of_jsbytes("next_node_in_same_scope")],
     _ic_=[0,caml_string_of_jsbytes("created_in")],
     _id_=[0,caml_string_of_jsbytes("parent0")],
     _ie_=[0,caml_string_of_jsbytes("parent1_and_beyond")],
     _if_=[0,caml_string_of_jsbytes("num_parents")],
     _ig_=[0,caml_string_of_jsbytes("num_on_update_handlers")],
     _ih_=[0,caml_string_of_jsbytes("changed_at")],
     _ii_=[0,caml_string_of_jsbytes("cutoff")],
     _ij_=[0,caml_string_of_jsbytes("kind")],
     _ik_=[0,caml_string_of_jsbytes("value_opt")],
     _il_=[0,caml_string_of_jsbytes("recomputed_at")],
     _im_=[0,caml_string_of_jsbytes("state")],
     _in_=[0,caml_string_of_jsbytes("id")],
     _jk_=[0,caml_string_of_jsbytes("src/recompute_heap.ml"),41,11],
     _jj_=[0,caml_string_of_jsbytes("src/recompute_heap.ml"),42,11],
     _ji_=[0,caml_string_of_jsbytes("src/recompute_heap.ml"),44,13],
     _jh_=[0,caml_string_of_jsbytes("src/recompute_heap.ml"),50,15],
     _jg_=[0,caml_string_of_jsbytes("src/recompute_heap.ml"),51,15],
     _jl_=[0,caml_string_of_jsbytes("src/recompute_heap.ml"),30,873,895],
     _jd_=[0,caml_string_of_jsbytes("nodes_by_height")],
     _je_=[0,caml_string_of_jsbytes("height_lower_bound")],
     _jf_=[0,caml_string_of_jsbytes("length")],
     _jQ_=[0,caml_string_of_jsbytes("_")],
     _jO_=[0,caml_string_of_jsbytes("_")],
     _jP_=[0,caml_string_of_jsbytes("child")],
     _jR_=[0,caml_string_of_jsbytes("parent")],
     _jS_=
      [0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),147,5103,5115],
     _jL_=[0,caml_string_of_jsbytes("Height")],
     _jM_=[0,caml_string_of_jsbytes("Max")],
     _jN_=
      [0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),134,4662,4676],
     _jJ_=[0,caml_string_of_jsbytes("max_height_seen")],
     _jK_=
      [0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),86,2771,2783],
     _jH_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),59,11],
     _jG_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),62,11],
     _jF_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),63,11],
     _jE_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),65,13],
     _jD_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),69,11],
     _jC_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),70,11],
     _jI_=
      [0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),54,1648,1670],
     _jy_=[0,caml_string_of_jsbytes("nodes_by_height")],
     _jz_=[0,caml_string_of_jsbytes("max_height_seen")],
     _jA_=[0,caml_string_of_jsbytes("height_lower_bound")],
     _jB_=[0,caml_string_of_jsbytes("length")],
     _jo_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),23,10],
     _jn_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),24,10],
     _jm_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),27,12],
     _jp_=[0,caml_string_of_jsbytes("src/adjust_heights_heap.ml"),19,538,562],
     _j3_=[0,caml_string_of_jsbytes("src/alarm_value.ml"),30,820,842],
     _j1_=[0,caml_string_of_jsbytes("next_fired")],
     _j2_=[0,caml_string_of_jsbytes("action")],
     _jX_=[0,caml_string_of_jsbytes("_")],
     _jV_=[0,caml_string_of_jsbytes("_")],
     _jT_=[0,caml_string_of_jsbytes("At")],
     _jU_=[0,caml_string_of_jsbytes("At_intervals")],
     _jW_=[0,caml_string_of_jsbytes("Snapshot")],
     _jY_=[0,caml_string_of_jsbytes("Step_function")],
     _kK_=[0,caml_string_of_jsbytes("_")],
     _kH_=[0,caml_string_of_jsbytes("_")],
     _kI_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),144,4466,4486],
     _kJ_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),148,32],
     _kB_=[0,caml_string_of_jsbytes("_")],
     _kF_=[0,caml_string_of_jsbytes("_")],
     _kD_=[0,caml_string_of_jsbytes("_")],
     _kE_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),129,4056,4068],
     _kG_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),123,3909,3921],
     _kC_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),137,4254,4276],
     _kz_=[0,caml_string_of_jsbytes("_")],
     _ky_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),70,25],
     _kx_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),75,36],
     _kw_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),78,13],
     _kv_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),86,36],
     _ku_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),89,13],
     _kt_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),97,36],
     _ks_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),100,13],
     _kr_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),109,36],
     _kq_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),112,13],
     _kA_=[0,caml_string_of_jsbytes("src/internal_observer.ml"),61,1687,1709],
     _kj_=[0,caml_string_of_jsbytes("next_in_observing")],
     _kk_=[0,caml_string_of_jsbytes("prev_in_observing")],
     _kl_=[0,caml_string_of_jsbytes("next_in_all")],
     _km_=[0,caml_string_of_jsbytes("prev_in_all")],
     _kn_=[0,caml_string_of_jsbytes("on_update_handlers")],
     _ko_=[0,caml_string_of_jsbytes("observing")],
     _kp_=[0,caml_string_of_jsbytes("state")],
     _j5_=[0,caml_string_of_jsbytes("Created")],
     _j6_=[0,caml_string_of_jsbytes("In_use")],
     _j7_=[0,caml_string_of_jsbytes("Disallowed")],
     _j8_=[0,caml_string_of_jsbytes("Unlinked")],
     _j4_=[0,caml_string_of_jsbytes("_")],
     _mY_=[0,caml_string_of_jsbytes("_")],
     _mZ_=[0,caml_string_of_jsbytes("src/state.ml"),568,26058,26070],
     _m1_=[0,caml_string_of_jsbytes("src/state.ml"),766,4],
     _m2_=[0,caml_string_of_jsbytes("src/state.ml"),815,21],
     _m4_=[0,caml_string_of_jsbytes("src/state.ml"),1070,29],
     _m5_=[0,caml_string_of_jsbytes("src/state.ml"),1072,20],
     _m6_=[0,caml_string_of_jsbytes("src/state.ml"),1073,30],
     _m3_=[0,caml_string_of_jsbytes("src/state.ml"),1074,54],
     _no_=[0,caml_string_of_jsbytes("_")],
     _nm_=[0,caml_string_of_jsbytes("_")],
     _nn_=[0,caml_string_of_jsbytes("current.kind")],
     _np_=[0,caml_string_of_jsbytes("node.kind")],
     _nk_=[0,caml_string_of_jsbytes("_")],
     _ni_=[0,caml_string_of_jsbytes("_")],
     _nj_=[0,caml_string_of_jsbytes("current.kind")],
     _nl_=[0,caml_string_of_jsbytes("node.kind")],
     _nh_=[0,caml_string_of_jsbytes("_")],
     _ng_=[5,1],
     _nf_=[0,caml_string_of_jsbytes("src/state.ml"),1806,69449,69461],
     _ne_=[0,0],
     _nd_=[0,caml_string_of_jsbytes("src/state.ml"),1675,65886,65898],
     _nc_=[0,caml_string_of_jsbytes("src/state.ml"),1417,6],
     _na_=[0,caml_string_of_jsbytes("Done")],
     _nb_=[0,caml_string_of_jsbytes("Keep_going")],
     _m$_=[0,caml_string_of_jsbytes("src/state.ml"),1304,53749,53761],
     _m8_=[0,caml_string_of_jsbytes("_")],
     _m9_=[0,caml_string_of_jsbytes("src/state.ml"),1261,52394,52406],
     _m__=[0,caml_string_of_jsbytes("src/state.ml"),1255,52225,52237],
     _m7_=[0,caml_string_of_jsbytes("src/state.ml"),1219,29],
     _m0_=[0,caml_string_of_jsbytes("src/state.ml"),644,29003,29026],
     _mR_=
      [0,
       [11,
        caml_string_of_jsbytes("cannot "),
        [2,0,[11,caml_string_of_jsbytes(" during stabilization"),0]]],
       caml_string_of_jsbytes("cannot %s during stabilization")],
     _mS_=[0,caml_string_of_jsbytes("src/state.ml"),346,15414,15426],
     _mT_=
      [0,
       [11,
        caml_string_of_jsbytes("cannot "),
        [2,0,[11,caml_string_of_jsbytes(" during on-update handlers"),0]]],
       caml_string_of_jsbytes("cannot %s during on-update handlers")],
     _mU_=[0,caml_string_of_jsbytes("src/state.ml"),332,14948,14962],
     _mV_=
      [0,
       [11,
        caml_string_of_jsbytes("cannot "),
        [2,0,[11,caml_string_of_jsbytes(" -- stabilize previously raised"),0]]],
       caml_string_of_jsbytes("cannot %s -- stabilize previously raised")],
     _mW_=[0,caml_string_of_jsbytes("src/state.ml"),339,15182,15194],
     _mO_=[0,caml_string_of_jsbytes("src/state.ml"),262,39],
     _mN_=[0,caml_string_of_jsbytes("src/state.ml"),266,13],
     _mM_=[0,caml_string_of_jsbytes("src/state.ml"),270,13],
     _mL_=[0,caml_string_of_jsbytes("src/state.ml"),272,46],
     _mK_=[0,caml_string_of_jsbytes("src/state.ml"),287,41],
     _mJ_=[0,caml_string_of_jsbytes("src/state.ml"),295,49],
     _mH_=[0,caml_string_of_jsbytes("src/state.ml"),305,20],
     _mG_=[0,caml_string_of_jsbytes("src/state.ml"),301,15],
     _mI_=[0,caml_string_of_jsbytes("src/state.ml"),299,48],
     _mF_=[0,caml_string_of_jsbytes("src/state.ml"),251,39],
     _mE_=[0,caml_string_of_jsbytes("src/state.ml"),252,8],
     _mC_=[0,caml_string_of_jsbytes("_")],
     _mD_=[0,caml_string_of_jsbytes("src/state.ml"),244,10839,10858],
     _mP_=[0,caml_string_of_jsbytes("src/state.ml"),254,6],
     _mQ_=[0,caml_string_of_jsbytes("src/state.ml"),237,10540,10564],
     _mB_=[0,caml_string_of_jsbytes("src/state.ml"),227,10256,10268],
     _mz_=[0,caml_string_of_jsbytes("percentage_of_nodes_by_num_parents")],
     _mA_=[0,caml_string_of_jsbytes("max_num_parents")],
     _my_=[0,caml_string_of_jsbytes("src/state.ml"),193,2],
     _mw_=[0,caml_string_of_jsbytes("src/state.ml"),156,13],
     _mv_=[0,caml_string_of_jsbytes("src/state.ml"),159,44],
     _mx_=[0,caml_string_of_jsbytes("src/state.ml"),151,7499,7523],
     _mr_=[0,caml_string_of_jsbytes("fired_alarm_values")],
     _ms_=[0,caml_string_of_jsbytes("handle_fired")],
     _mt_=[0,caml_string_of_jsbytes("now")],
     _mu_=[0,caml_string_of_jsbytes("timing_wheel")],
     _lU_=[0,caml_string_of_jsbytes("num_var_sets")],
     _lV_=
      [0,
       caml_string_of_jsbytes
        ("num_nodes_recomputed_directly_because_min_height")],
     _lW_=
      [0,
       caml_string_of_jsbytes
        ("num_nodes_recomputed_directly_because_one_child")],
     _lX_=[0,caml_string_of_jsbytes("num_nodes_recomputed")],
     _lY_=[0,caml_string_of_jsbytes("num_nodes_invalidated")],
     _lZ_=[0,caml_string_of_jsbytes("num_nodes_created")],
     _l0_=[0,caml_string_of_jsbytes("num_nodes_changed")],
     _l1_=[0,caml_string_of_jsbytes("num_nodes_became_unnecessary")],
     _l2_=[0,caml_string_of_jsbytes("num_nodes_became_necessary")],
     _l3_=[0,caml_string_of_jsbytes("keep_node_creation_backtrace")],
     _l4_=[0,caml_string_of_jsbytes("weak_hashtbls")],
     _l5_=[0,caml_string_of_jsbytes("only_in_debug")],
     _l6_=[0,caml_string_of_jsbytes("run_on_update_handlers")],
     _l7_=[0,caml_string_of_jsbytes("handle_after_stabilization")],
     _l8_=[0,caml_string_of_jsbytes("set_during_stabilization")],
     _l9_=[0,caml_string_of_jsbytes("disallowed_observers")],
     _l__=[0,caml_string_of_jsbytes("new_observers")],
     _l$_=[0,caml_string_of_jsbytes("finalized_observers")],
     _ma_=[0,caml_string_of_jsbytes("all_observers")],
     _mb_=[0,caml_string_of_jsbytes("num_active_observers")],
     _mc_=[0,caml_string_of_jsbytes("propagate_invalidity")],
     _md_=[0,caml_string_of_jsbytes("adjust_heights_heap")],
     _me_=[0,caml_string_of_jsbytes("recompute_heap")],
     _mf_=[0,caml_string_of_jsbytes("current_scope")],
     _mg_=[0,caml_string_of_jsbytes("stabilization_num")],
     _mh_=[0,caml_string_of_jsbytes("bind_lhs_change_should_invalidate_rhs")],
     _mi_=[0,caml_string_of_jsbytes("status")],
     _k2_=[0,caml_string_of_jsbytes("_")],
     _k1_=[0,caml_string_of_jsbytes("_")],
     _k3_=[0,caml_string_of_jsbytes("T")],
     _k0_=[0,caml_string_of_jsbytes("src/state.ml"),38,1149,1173],
     _kY_=[0,caml_string_of_jsbytes("expert_nodes_created_by_current_node")],
     _kZ_=[0,caml_string_of_jsbytes("currently_running_node")],
     _kT_=[0,caml_string_of_jsbytes("src/state.ml"),25,715,739],
     _kR_=[0,caml_string_of_jsbytes("_")],
     _kQ_=[0,caml_string_of_jsbytes("_")],
     _kS_=[0,caml_string_of_jsbytes("T")],
     _kM_=[0,caml_string_of_jsbytes("Stabilizing")],
     _kN_=[0,caml_string_of_jsbytes("Running_on_update_handlers")],
     _kO_=[0,caml_string_of_jsbytes("Not_stabilizing")],
     _kP_=[0,caml_string_of_jsbytes("Stabilize_previously_raised")],
     _nB_=[0,caml_string_of_jsbytes("src/incremental.ml"),282,2],
     _ny_=[0,caml_string_of_jsbytes("Invalid")],
     _nz_=[0,caml_string_of_jsbytes("Necessary_maybe_stale")],
     _nA_=[0,caml_string_of_jsbytes("Unnecessary_maybe_stale")],
     _nu_=[0,caml_string_of_jsbytes("_")],
     _nv_=[0,caml_string_of_jsbytes("src/incremental.ml"),141,3574,3592],
     _nr_=[0,caml_string_of_jsbytes("Invalidated")],
     _ns_=[0,caml_string_of_jsbytes("Initialized")],
     _nt_=[0,caml_string_of_jsbytes("Changed")],
     _nq_=[0,caml_string_of_jsbytes("src/incremental.ml"),30,8],
     _nw_=[0,1];
    function sexp_of_t(param){return param?_a_:_b_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Before_or_afte$0);
    var Incremental_Before_or_after=[0,sexp_of_t];
    caml_register_global
     (1295,Incremental_Before_or_after,"Incremental__Before_or_after");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$2);
    caml_call1(Expect_test_collector[5][1],cst_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$3,cst$0);
    var
     _c_=include[99],
     symbol=_c_[1],
     symbol$0=_c_[2],
     symbol$1=_c_[3],
     symbol$2=_c_[4],
     symbol$3=_c_[5],
     symbol$4=_c_[6],
     min=_c_[9],
     max=_c_[10],
     concat=Core_String[32],
     _d_=_c_[7],
     _e_=_c_[8],
     debug=0;
    function tag(arg0_001,arg1_002,sexp_of_a)
     {var
       res0_003=caml_call1(Core[471],arg0_001),
       res1_004=caml_call1(sexp_of_a,arg1_002);
      return [1,[0,res0_003,[0,res1_004,0]]]}
    var
     Span=Core_Time_ns[1],
     Ofday=Core_Time_ns[2],
     hash_fold_t=Core_Time_ns[3],
     hash=Core_Time_ns[4],
     typerep_of_t=Core_Time_ns[5],
     typename_of_t=Core_Time_ns[6],
     bin_size_t=Core_Time_ns[7],
     bin_write_t=Core_Time_ns[8],
     bin_read_t=Core_Time_ns[9],
     bin_read_t$0=Core_Time_ns[10],
     bin_shape_t=Core_Time_ns[11],
     bin_writer_t=Core_Time_ns[12],
     bin_reader_t=Core_Time_ns[13],
     bin_t=Core_Time_ns[14],
     symbol$5=Core_Time_ns[15],
     symbol$6=Core_Time_ns[16],
     symbol$7=Core_Time_ns[17],
     symbol$8=Core_Time_ns[18],
     symbol$9=Core_Time_ns[19],
     symbol$10=Core_Time_ns[20],
     equal=Core_Time_ns[21],
     compare=Core_Time_ns[22],
     min$0=Core_Time_ns[23],
     max$0=Core_Time_ns[24],
     Alternate_sexp=Core_Time_ns[25],
     quickcheck_generator=Core_Time_ns[26],
     quickcheck_observer=Core_Time_ns[27],
     quickcheck_shrinker=Core_Time_ns[28],
     gen_incl=Core_Time_ns[29],
     gen_uniform_incl=Core_Time_ns[30],
     is_earlier=Core_Time_ns[31],
     is_later=Core_Time_ns[32],
     of_date_ofday=Core_Time_ns[33],
     of_date_ofday_precise=Core_Time_ns[34],
     to_date_ofday=Core_Time_ns[35],
     to_date_ofday_precise=Core_Time_ns[36],
     to_date=Core_Time_ns[37],
     to_ofday=Core_Time_ns[38],
     reset_date_cache=Core_Time_ns[39],
     convert=Core_Time_ns[40],
     utc_offset=Core_Time_ns[41],
     to_filename_string=Core_Time_ns[42],
     of_filename_string=Core_Time_ns[43],
     to_string_abs=Core_Time_ns[44],
     to_string_abs_trimmed=Core_Time_ns[45],
     to_string_abs_parts=Core_Time_ns[46],
     to_string_trimmed=Core_Time_ns[47],
     to_sec_string=Core_Time_ns[48],
     to_sec_string_with_zone=Core_Time_ns[49],
     of_localized_string=Core_Time_ns[50],
     of_string_gen=Core_Time_ns[51],
     to_string_iso8601_basic=Core_Time_ns[52],
     occurrence=Core_Time_ns[53],
     of_string=Core_Time_ns[54],
     of_string_with_utc_offset=Core_Time_ns[55],
     to_string=Core_Time_ns[56],
     to_string_utc=Core_Time_ns[57],
     epoch=Core_Time_ns[58],
     min_value_representable=Core_Time_ns[59],
     max_value_representable=Core_Time_ns[60],
     min_value_for_1us_rounding=Core_Time_ns[61],
     max_value_for_1us_rounding=Core_Time_ns[62],
     min_value=Core_Time_ns[63],
     max_value=Core_Time_ns[64],
     now=Core_Time_ns[65],
     add=Core_Time_ns[66],
     add_saturating=Core_Time_ns[67],
     sub_saturating=Core_Time_ns[68],
     sub=Core_Time_ns[69],
     next=Core_Time_ns[70],
     prev=Core_Time_ns[71],
     diff=Core_Time_ns[72],
     abs_diff=Core_Time_ns[73],
     to_span_since_epoch=Core_Time_ns[74],
     of_span_since_epoch=Core_Time_ns[75],
     to_int63_ns_since_epoch=Core_Time_ns[76],
     of_int63_ns_since_epoch=Core_Time_ns[77],
     to_int_ns_since_epoch=Core_Time_ns[78],
     of_int_ns_since_epoch=Core_Time_ns[79],
     next_multiple=Core_Time_ns[80],
     prev_multiple=Core_Time_ns[81],
     random=Core_Time_ns[82],
     of_time=Core_Time_ns[83],
     to_time=Core_Time_ns[84],
     to_time_float_round_nearest=Core_Time_ns[85],
     to_time_float_round_nearest_mi=Core_Time_ns[86],
     of_time_float_round_nearest=Core_Time_ns[87],
     of_time_float_round_nearest_mi=Core_Time_ns[88],
     Utc=Core_Time_ns[89],
     Stable=Core_Time_ns[90],
     Hash_queue=Core_Time_ns[91],
     Hash_set=Core_Time_ns[92],
     Map=Core_Time_ns[93],
     Option=Core_Time_ns[94],
     Replace_polymorphic_compare=Core_Time_ns[95],
     Set=Core_Time_ns[96],
     Table=Core_Time_ns[97],
     Zone=Core_Time_ns[98],
     arg_type=Core_Time_ns[99],
     comparator=Core_Time_ns[100],
     get_sexp_zone=Core_Time_ns[101],
     interruptible_pause=Core_Time_ns[102],
     of_date_ofday_zoned=Core_Time_ns[103],
     of_string_abs=Core_Time_ns[104],
     of_string_fix_proto=Core_Time_ns[105],
     pause=Core_Time_ns[106],
     pause_forever=Core_Time_ns[107],
     pp=Core_Time_ns[108],
     set_sexp_zone=Core_Time_ns[109],
     sexp_of_t_abs=Core_Time_ns[111],
     t_of_sexp=Core_Time_ns[112],
     t_of_sexp_abs=Core_Time_ns[113],
     to_date_ofday_zoned=Core_Time_ns[114],
     to_ofday_zoned=Core_Time_ns[115],
     to_string_fix_proto=Core_Time_ns[116],
     validate_bound=Core_Time_ns[117],
     validate_lbound=Core_Time_ns[118],
     validate_ubound=Core_Time_ns[119],
     sexp_of_t$0=Core_Time_ns[25][4],
     Time_ns=
      [0,
       Span,
       Ofday,
       hash_fold_t,
       hash,
       typerep_of_t,
       typename_of_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       equal,
       compare,
       min$0,
       max$0,
       Alternate_sexp,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       gen_incl,
       gen_uniform_incl,
       is_earlier,
       is_later,
       of_date_ofday,
       of_date_ofday_precise,
       to_date_ofday,
       to_date_ofday_precise,
       to_date,
       to_ofday,
       reset_date_cache,
       convert,
       utc_offset,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed,
       to_sec_string,
       to_sec_string_with_zone,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic,
       occurrence,
       of_string,
       of_string_with_utc_offset,
       to_string,
       to_string_utc,
       epoch,
       min_value_representable,
       max_value_representable,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value,
       max_value,
       now,
       add,
       add_saturating,
       sub_saturating,
       sub,
       next,
       prev,
       diff,
       abs_diff,
       to_span_since_epoch,
       of_span_since_epoch,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       to_int_ns_since_epoch,
       of_int_ns_since_epoch,
       next_multiple,
       prev_multiple,
       random,
       of_time,
       to_time,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       Utc,
       Stable,
       Hash_queue,
       Hash_set,
       Map,
       Option,
       Replace_polymorphic_compare,
       Set,
       Table,
       Zone,
       arg_type,
       comparator,
       get_sexp_zone,
       interruptible_pause,
       of_date_ofday_zoned,
       of_string_abs,
       of_string_fix_proto,
       pause,
       pause_forever,
       pp,
       set_sexp_zone,
       sexp_of_t_abs,
       t_of_sexp,
       t_of_sexp_abs,
       to_date_ofday_zoned,
       to_ofday_zoned,
       to_string_fix_proto,
       validate_bound,
       validate_lbound,
       validate_ubound,
       sexp_of_t$0],
     bin_shape_t$0=Core_Array[1],
     bin_size_t$0=Core_Array[2],
     bin_write_t$0=Core_Array[3],
     bin_read_t$1=Core_Array[4],
     bin_read_t$2=Core_Array[5],
     bin_writer_t$0=Core_Array[6],
     bin_reader_t$0=Core_Array[7],
     bin_t$0=Core_Array[8],
     quickcheck_generator$0=Core_Array[9],
     quickcheck_observer$0=Core_Array[10],
     quickcheck_shrinker$0=Core_Array[11],
     typerep_of_t$0=Core_Array[12],
     typename_of_t$0=Core_Array[13],
     compare$0=Core_Array[14],
     t_of_sexp$0=Core_Array[15],
     sexp_of_t$1=Core_Array[16],
     t_sexp_grammar=Core_Array[17],
     binary_search=Core_Array[18],
     binary_search_segmented=Core_Array[19],
     mem=Core_Array[20],
     is_empty=Core_Array[21],
     iter=Core_Array[22],
     fold=Core_Array[23],
     fold_result=Core_Array[24],
     fold_until=Core_Array[25],
     exists=Core_Array[26],
     for_all=Core_Array[27],
     count=Core_Array[28],
     sum=Core_Array[29],
     find=Core_Array[30],
     find_map=Core_Array[31],
     to_list=Core_Array[32],
     to_array=Core_Array[33],
     min_elt=Core_Array[34],
     max_elt=Core_Array[35],
     invariant=Core_Array[36],
     max_length=Core_Array[37],
     create=Core_Array[38],
     create_float_uninitialized=Core_Array[39],
     init=Core_Array[40],
     make_matrix=Core_Array[41],
     copy_matrix=Core_Array[42],
     append=Core_Array[43],
     concat$0=Core_Array[44],
     copy=Core_Array[45],
     fill=Core_Array[46],
     blit=Core_Array[47],
     blito=Core_Array[48],
     unsafe_blit=Core_Array[49],
     sub$0=Core_Array[50],
     subo=Core_Array[51],
     of_list=Core_Array[52],
     map=Core_Array[53],
     folding_map=Core_Array[54],
     folding_mapi=Core_Array[55],
     fold_map=Core_Array[56],
     fold_mapi=Core_Array[57],
     iteri=Core_Array[58],
     mapi=Core_Array[59],
     foldi=Core_Array[60],
     fold_right=Core_Array[61],
     sort=Core_Array[62],
     stable_sort=Core_Array[63],
     is_sorted=Core_Array[64],
     is_sorted_strictly=Core_Array[65],
     merge=Core_Array[66],
     concat_map=Core_Array[67],
     concat_mapi=Core_Array[68],
     partition_tf=Core_Array[69],
     partitioni_tf=Core_Array[70],
     cartesian_product=Core_Array[71],
     transpose=Core_Array[72],
     transpose_exn=Core_Array[73],
     filter_opt=Core_Array[74],
     filter_map=Core_Array[75],
     filter_mapi=Core_Array[76],
     for_alli=Core_Array[77],
     existsi=Core_Array[78],
     counti=Core_Array[79],
     iter2_exn=Core_Array[80],
     map2_exn=Core_Array[81],
     fold2_exn=Core_Array[82],
     for_all2_exn=Core_Array[83],
     exists2_exn=Core_Array[84],
     filter=Core_Array[85],
     filteri=Core_Array[86],
     swap=Core_Array[87],
     rev_inplace=Core_Array[88],
     rev=Core_Array[89],
     of_list_rev=Core_Array[90],
     of_list_map=Core_Array[91],
     of_list_mapi=Core_Array[92],
     of_list_rev_map=Core_Array[93],
     of_list_rev_mapi=Core_Array[94],
     map_inplace=Core_Array[95],
     find_exn=Core_Array[96],
     find_map_exn=Core_Array[97],
     findi=Core_Array[98],
     findi_exn=Core_Array[99],
     find_mapi=Core_Array[100],
     find_mapi_exn=Core_Array[101],
     find_consecutive_duplicate=Core_Array[102],
     reduce=Core_Array[103],
     reduce_exn=Core_Array[104],
     permute=Core_Array[105],
     random_element=Core_Array[106],
     random_element_exn=Core_Array[107],
     zip=Core_Array[108],
     zip_exn=Core_Array[109],
     unzip=Core_Array[110],
     sorted_copy=Core_Array[111],
     last=Core_Array[112],
     equal$0=Core_Array[113],
     to_sequence=Core_Array[114],
     to_sequence_mutable=Core_Array[115],
     Int=Core_Array[116],
     Float=Core_Array[117],
     normalize=Core_Array[118],
     slice=Core_Array[119],
     nget=Core_Array[120],
     nset=Core_Array[121],
     Permissioned=Core_Array[122];
    function realloc(t,len,a)
     {var new_t=caml_call2(create,len,a);
      caml_call5(Core_Array[47],t,0,new_t,0,t.length - 1);
      return new_t}
    var
     Array=
      [0,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       quickcheck_generator$0,
       quickcheck_observer$0,
       quickcheck_shrinker$0,
       typerep_of_t$0,
       typename_of_t$0,
       compare$0,
       t_of_sexp$0,
       sexp_of_t$1,
       t_sexp_grammar,
       binary_search,
       binary_search_segmented,
       mem,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       invariant,
       max_length,
       create,
       create_float_uninitialized,
       init,
       make_matrix,
       copy_matrix,
       append,
       concat$0,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit,
       sub$0,
       subo,
       of_list,
       map,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       iteri,
       mapi,
       foldi,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       merge,
       concat_map,
       concat_mapi,
       partition_tf,
       partitioni_tf,
       cartesian_product,
       transpose,
       transpose_exn,
       filter_opt,
       filter_map,
       filter_mapi,
       for_alli,
       existsi,
       counti,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       filter,
       filteri,
       swap,
       rev_inplace,
       rev,
       of_list_rev,
       of_list_map,
       of_list_mapi,
       of_list_rev_map,
       of_list_rev_mapi,
       map_inplace,
       find_exn,
       find_map_exn,
       findi,
       findi_exn,
       find_mapi,
       find_mapi_exn,
       find_consecutive_duplicate,
       reduce,
       reduce_exn,
       permute,
       random_element,
       random_element_exn,
       zip,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       equal$0,
       to_sequence,
       to_sequence_mutable,
       Int,
       Float,
       normalize,
       slice,
       nget,
       nset,
       Permissioned,
       realloc],
     Uopt=
      [0,
       include$0[1],
       include$0[2],
       include$0[3],
       include$0[4],
       include$0[5],
       include$0[6],
       include$0[7],
       include$0[9],
       include$0[10],
       include$0[11],
       include$0[8]],
     bin_shape_t$1=Core_Uniform_array[1],
     bin_size_t$1=Core_Uniform_array[2],
     bin_write_t$1=Core_Uniform_array[3],
     bin_read_t$3=Core_Uniform_array[4],
     bin_read_t$4=Core_Uniform_array[5],
     bin_writer_t$1=Core_Uniform_array[6],
     bin_reader_t$1=Core_Uniform_array[7],
     bin_t$1=Core_Uniform_array[8],
     t_of_sexp$1=Core_Uniform_array[9],
     sexp_of_t$2=Core_Uniform_array[10],
     t_sexp_grammar$0=Core_Uniform_array[11],
     compare$1=Core_Uniform_array[12],
     invariant$0=Core_Uniform_array[13],
     empty=Core_Uniform_array[14],
     create$0=Core_Uniform_array[15],
     singleton=Core_Uniform_array[16],
     init$0=Core_Uniform_array[17],
     length=Core_Uniform_array[18],
     get=Core_Uniform_array[19],
     unsafe_get=Core_Uniform_array[20],
     swap$0=Core_Uniform_array[23],
     unsafe_set_omit_phys_equal_che=Core_Uniform_array[24],
     unsafe_set_with_caml_modify=Core_Uniform_array[25],
     set_with_caml_modify=Core_Uniform_array[26],
     map$0=Core_Uniform_array[27],
     mapi$0=Core_Uniform_array[28],
     iter$0=Core_Uniform_array[29],
     iteri$0=Core_Uniform_array[30],
     foldi$0=Core_Uniform_array[31],
     of_array=Core_Uniform_array[32],
     to_array$0=Core_Uniform_array[33],
     of_list$0=Core_Uniform_array[34],
     to_list$0=Core_Uniform_array[35],
     blit$0=Core_Uniform_array[36],
     blito$0=Core_Uniform_array[37],
     unsafe_blit$0=Core_Uniform_array[38],
     sub$1=Core_Uniform_array[39],
     subo$0=Core_Uniform_array[40],
     copy$0=Core_Uniform_array[41],
     unsafe_create_uninitialized=Core_Uniform_array[42],
     create_obj_array=Core_Uniform_array[43],
     unsafe_set_assuming_currently_=Core_Uniform_array[44],
     unsafe_set_int_assuming_curren=Core_Uniform_array[45],
     unsafe_set_int=Core_Uniform_array[46],
     unsafe_clear_if_pointer=Core_Uniform_array[47],
     exists$0=Core_Uniform_array[48],
     for_all$0=Core_Uniform_array[49],
     map2_exn$0=Core_Uniform_array[50],
     min_elt$0=Core_Uniform_array[51],
     max_elt$0=Core_Uniform_array[52];
    function realloc$0(t,len)
     {var new_t=caml_call2(create$0,len,Uopt[3]);
      caml_call5(blit$0,t,0,new_t,0,caml_call1(length,t));
      return new_t}
    var
     Uniform_array=
      [0,
       bin_shape_t$1,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_writer_t$1,
       bin_reader_t$1,
       bin_t$1,
       t_of_sexp$1,
       sexp_of_t$2,
       t_sexp_grammar$0,
       compare$1,
       invariant$0,
       empty,
       create$0,
       singleton,
       init$0,
       length,
       get,
       unsafe_get,
       swap$0,
       unsafe_set_omit_phys_equal_che,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       map$0,
       mapi$0,
       iter$0,
       iteri$0,
       foldi$0,
       of_array,
       to_array$0,
       of_list$0,
       to_list$0,
       blit$0,
       blito$0,
       unsafe_blit$0,
       sub$1,
       subo$0,
       copy$0,
       unsafe_create_uninitialized,
       create_obj_array,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_clear_if_pointer,
       exists$0,
       for_all$0,
       map2_exn$0,
       min_elt$0,
       max_elt$0,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       realloc$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Import$0);
    var
     Incremental_Import=
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       _d_,
       _e_,
       min,
       max,
       debug,
       concat,
       tag,
       Time_ns,
       Array,
       Uopt,
       Uniform_array];
    caml_register_global(1303,Incremental_Import,"Incremental__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Cutoff);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$5);
    caml_call1(Expect_test_collector[5][1],cst_src_cutoff_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$6,cst$1);
    function sexp_of_t$3(of_a_001,param)
     {if(typeof param === "number")
       switch(param){case 0:return _f_;case 1:return _g_;default:return _h_}
      switch(param[0])
       {case 0:
         var
          _GT_=function(_GX_){return 0},
          res0_003=caml_call1(Sexplib0_Sexp_conv[24],_GT_);
         return [1,[0,_i_,[0,res0_003,0]]];
        case 1:
         var
          _GU_=function(_GW_){return 0},
          res0_005=caml_call1(Sexplib0_Sexp_conv[24],_GU_);
         return [1,[0,_j_,[0,res0_005,0]]];
        default:
         var
          _GV_=function(_GY_){return 0},
          res0_007=caml_call1(Sexplib0_Sexp_conv[24],_GV_);
         return [1,[0,_k_,[0,res0_007,0]]]}}
    function invariant$1(param,t)
     {function _GR_(param){return 0}
      function _GS_(x_009)
       {return sexp_of_t$3(function(param){return _l_},x_009)}
      return caml_call4(Base_Invariant[1],_m_,t,_GS_,_GR_)}
    function create$1(f){return [2,f]}
    function of_compare(f){return [0,f]}
    function of_equal(f){return [1,f]}
    var poly_equal=[1,runtime.caml_equal],never=1,always=0;
    function should_cutoff(t,old_value,new_value)
     {if(typeof t === "number")
       switch(t)
        {case 0:return 1;
         case 1:return 0;
         default:return caml_call2(Core[246],old_value,new_value)}
      switch(t[0])
       {case 0:
         var f=t[1];
         return caml_call2(symbol$1,caml_call2(f,old_value,new_value),0);
        case 1:var f$0=t[1];return caml_call2(f$0,old_value,new_value);
        default:var f$1=t[1];return caml_call2(f$1,old_value,new_value)}}
    function equal$1(t1,t2)
     {if(typeof t1 === "number")
       switch(t1)
        {case 0:if(typeof t2 === "number" && ! t2)return 1;return 0;
         case 1:if(typeof t2 === "number" && 1 === t2)return 1;return 0;
         default:if(typeof t2 === "number" && 2 <= t2)return 1;return 0}
      switch(t1[0])
       {case 0:
         var _GO_=t1[1];
         if(typeof t2 !== "number" && 0 === t2[0])
          {var f2=t2[1];return caml_call2(Core[246],_GO_,f2)}
         return 0;
        case 1:
         var _GP_=t1[1];
         if(typeof t2 !== "number" && 1 === t2[0])
          {var f2$0=t2[1];return caml_call2(Core[246],_GP_,f2$0)}
         return 0;
        default:
         var _GQ_=t1[1];
         if(typeof t2 !== "number" && 2 === t2[0])
          {var f2$1=t2[1];return caml_call2(Core[246],_GQ_,f2$1)}
         return 0}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Cutoff$0);
    var
     Incremental_Cutoff=
      [0,
       sexp_of_t$3,
       invariant$1,
       create$1,
       of_compare,
       of_equal,
       always,
       never,
       2,
       poly_equal,
       equal$1,
       should_cutoff];
    caml_register_global(1306,Incremental_Cutoff,"Incremental__Cutoff");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Dot_user_info);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$8);
    caml_call1(Expect_test_collector[5][1],cst_src_dot_user_info_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$9,cst$2);
    var phys_equal=2;
    function compare$2(a_001,b_002)
     {function _GN_(a_003,b_004){return caml_call2(Core[467],a_003,b_004)}
      return caml_call3(Core[418],_GN_,a_001,b_002)}
    function sexp_of_t$4(x_005){return caml_call2(Core[421],Core[471],x_005)}
    var
     include$1=caml_call2(Core_Comparator[1],compare$2,sexp_of_t$4),
     comparator$0=include$1[1];
    function sexp_of_dot(param)
     {var
       attributes_009=param[2],
       label_007=param[1],
       arg_010=caml_call2(Core_String[140][107],Core[471],attributes_009),
       bnds_006=[0,[1,[0,_n_,[0,arg_010,0]]],0],
       arg_008=caml_call2(Core_Set[82],[0,sexp_of_t$4],label_007),
       bnds_006$0=[0,[1,[0,_o_,[0,arg_008,0]]],bnds_006];
      return [1,bnds_006$0]}
    function sexp_of_t$5(param)
     {switch(param[0])
       {case 0:
         var arg0_011=param[1],res0_012=sexp_of_dot(arg0_011);
         return [1,[0,_p_,[0,res0_012,0]]];
        case 1:
         var arg0_013=param[1],res0_014=caml_call1(Core_Info[6],arg0_013);
         return [1,[0,_q_,[0,res0_014,0]]];
        default:
         var
          new_018=param[2],
          prior_016=param[1],
          arg_019=sexp_of_t$5(new_018),
          bnds_015=[0,[1,[0,_r_,[0,arg_019,0]]],0],
          arg_017=sexp_of_t$5(prior_016),
          bnds_015$0=[0,[1,[0,_s_,[0,arg_017,0]]],bnds_015];
         return [1,[0,_t_,bnds_015$0]]}}
    function info(info){return [1,info]}
    function append$0(prior,new$0){return [2,prior,new$0]}
    function dot(label,attributes)
     {var label$0=caml_call2(Core_Set[7],[0,comparator$0],label);
      return [0,[0,label$0,attributes]]}
    function to_dot(param)
     {switch(param[0])
       {case 0:var dot=param[1];return dot;
        case 1:
         var
          i=param[1],
          _GK_=Core_String[140][3],
          _GL_=[0,caml_call1(Core_Info[9],i),0];
         return [0,caml_call2(Core_Set[7],[0,comparator$0],_GL_),_GK_];
        default:
         var
          new$0=param[2],
          prior=param[1],
          prior$0=to_dot(prior),
          new$1=to_dot(new$0),
          label=caml_call2(Core_Set[13],prior$0[1],new$1[1]),
          _GM_=function(param,left,right){return right},
          attributes=caml_call3(Core_Map[78],prior$0[2],new$1[2],_GM_);
         return [0,label,attributes]}}
    function escape_dot_string(s)
     {var
       _GI_=caml_call3(Core_String[51],s,cst$5,cst$4),
       _GJ_=caml_call2(Core[18],_GI_,cst$3);
      return caml_call2(Core[18],cst$6,_GJ_)}
    function escape_record_label(s)
     {function _GF_(c)
       {var switch$0=0;
        if(62 <= c)
         {var _GG_=c - 63 | 0;
          if(59 < _GG_ >>> 0)
           {if(63 <= _GG_)switch$0 = 1}
          else
           if(29 !== _GG_)switch$0 = 1}
        else
         if(32 !== c && 60 !== c)switch$0 = 1;
        if(switch$0)return caml_call1(Core_String[97],c);
        var _GH_=caml_call1(Core_String[97],c);
        return caml_call2(Core[18],cst$7,_GH_)}
      return caml_call3(Core_String[73],0,s,_GF_)}
    function to_string$0(name,param)
     {var attributes=param[2],label=param[1];
      function _Gs_(cols)
       {var
         _GC_=caml_call2(Core_List[72],cols,escape_record_label),
         _GD_=caml_call2(Core_String[32],_u_,_GC_),
         _GE_=caml_call2(Core[18],_GD_,cst$8);
        return caml_call2(Core[18],cst$9,_GE_)}
      var
       _Gt_=caml_call1(Core_Set[38],label),
       _Gu_=caml_call2(Core_List[72],_Gt_,_Gs_),
       s=caml_call2(Core_String[32],_v_,_Gu_),
       _Gv_=caml_call2(Core[18],s,cst$10),
       label$0=caml_call2(Core[18],cst$11,_Gv_);
      function _Gw_(param)
       {var
         v=param[2],
         k=param[1],
         _GA_=escape_dot_string(v),
         _GB_=escape_dot_string(k);
        return caml_call3(Core[257],_w_,_GB_,_GA_)}
      var
       _Gx_=caml_call2(Core_Map[74],0,attributes),
       _Gy_=caml_call2(Core_List[72],_Gx_,_Gw_),
       attributes$0=caml_call2(Core_String[32],_x_,_Gy_),
       _Gz_=escape_dot_string(label$0);
      return caml_call4(Core[257],_y_,name,_Gz_,attributes$0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Dot_user_info$0);
    var
     String_list=[0,comparator$0],
     include$2=
      [0,
       String_list,
       sexp_of_dot,
       sexp_of_t$5,
       info,
       dot,
       to_dot,
       append$0,
       to_string$0];
    caml_register_global(1312,include$2,"Incremental__Dot_user_info");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Node_id);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$11);
    caml_call1(Expect_test_collector[5][1],cst_src_node_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$12,cst$12);
    var
     incr=include[32],
     sexp_of_t$6=include[80],
     to_string$1=include[82],
     symbol$11=include[84],
     compare$3=include[91],
     hash_fold_t$0=include[103],
     hash$0=include[104],
     hashable=include[105],
     Table$0=include[106],
     Hash_set$0=include[107],
     Hash_queue$0=include[108];
    function invariant$2(t)
     {if(caml_call2(symbol$11,t,1))return 0;throw [0,Assert_failure,_z_]}
    var r=[0,0];
    function next$0(param){caml_call1(incr,r);return r[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Node_id$0);
    var
     _A_=
      [0,
       Hash_set$0[1],
       Hash_set$0[2],
       Hash_set$0[3],
       Hash_set$0[4],
       Hash_set$0[5],
       Hash_set$0[6],
       Hash_set$0[7]],
     Incremental_Node_id=
      [0,
       sexp_of_t$6,
       compare$3,
       hash_fold_t$0,
       hash$0,
       hashable,
       [0,
        Table$0[1],
        Table$0[2],
        Table$0[3],
        Table$0[4],
        Table$0[5],
        Table$0[6],
        Table$0[7],
        Table$0[8],
        Table$0[9],
        Table$0[10],
        Table$0[11],
        Table$0[12],
        Table$0[13],
        Table$0[14],
        Table$0[15],
        Table$0[16],
        Table$0[17],
        Table$0[18],
        Table$0[19],
        Table$0[20],
        Table$0[21],
        Table$0[22],
        Table$0[23],
        Table$0[24],
        Table$0[25],
        Table$0[26],
        Table$0[27],
        Table$0[28],
        Table$0[29],
        Table$0[30],
        Table$0[31],
        Table$0[32],
        Table$0[33],
        Table$0[34],
        Table$0[35],
        Table$0[36],
        Table$0[37],
        Table$0[38],
        Table$0[39],
        Table$0[40],
        Table$0[41],
        Table$0[42],
        Table$0[43],
        Table$0[44],
        Table$0[45],
        Table$0[46],
        Table$0[47],
        Table$0[48],
        Table$0[49],
        Table$0[50],
        Table$0[51],
        Table$0[52],
        Table$0[53],
        Table$0[54],
        Table$0[55],
        Table$0[56],
        Table$0[57],
        Table$0[58],
        Table$0[59],
        Table$0[60],
        Table$0[61],
        Table$0[62],
        Table$0[63],
        Table$0[64],
        Table$0[65],
        Table$0[66],
        Table$0[67],
        Table$0[68],
        Table$0[69],
        Table$0[70],
        Table$0[71],
        Table$0[72],
        Table$0[73],
        Table$0[74],
        Table$0[75],
        Table$0[76],
        Table$0[77],
        Table$0[78],
        Table$0[79],
        Table$0[80],
        Table$0[81],
        Table$0[82],
        Table$0[83],
        Table$0[84]],
       _A_,
       Hash_queue$0,
       invariant$2,
       next$0,
       to_string$1];
    caml_register_global(1314,Incremental_Node_id,"Incremental__Node_id");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Stabilization_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$14);
    caml_call1(Expect_test_collector[5][1],cst_src_stabilization_num_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$15,cst$13);
    var
     _B_=include[55],
     _C_=include[61],
     _D_=include[80],
     _E_=include[84],
     _G_=include[90],
     _H_=include[91],
     _F_=include[86];
    function invariant$3(t)
     {if(caml_call2(_E_,t,-1))return 0;throw [0,Assert_failure,_I_]}
    var none=-1;
    function is_none(t){return caml_call2(_F_,t,none)}
    function is_some(t){return caml_call2(_E_,t,0)}
    function add1(t){return t + 1 | 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$16);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Stabilization_$0);
    var
     Incremental_Stabilization_num=
      [0,_H_,_D_,_G_,invariant$3,none,_B_,is_none,is_some,add1,_C_];
    caml_register_global
     (1315,Incremental_Stabilization_num,"Incremental__Stabilization_num");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_On_update_hand);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$17);
    caml_call1(Expect_test_collector[5][1],cst_src_on_update_handler_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$18,cst$14);
    function compare$4(cmp_a,a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var switch$0=0;
      if(typeof a_001 === "number")
       if(0 === a_001)
        {if(typeof b_002 === "number")return 0 === b_002?0:-1;
         if(0 !== b_002[0])switch$0 = 1}
       else
        {if(typeof b_002 === "number")return 0 === b_002?1:0;
         if(0 !== b_002[0])switch$0 = 1}
      else
       {if(0 === a_001[0])
         {var _Gp_=a_001[1];
          if(typeof b_002 !== "number" && 0 === b_002[0])
           {var b_004=b_002[1];return caml_call2(cmp_a,_Gp_,b_004)}
          return -1}
        var _Gq_=a_001[2],_Gr_=a_001[1];
        if(typeof b_002 === "number")return -1;
        if(0 !== b_002[0])
         {var b_008=b_002[2],b_006=b_002[1],n=caml_call2(cmp_a,_Gr_,b_006);
          return 0 === n?caml_call2(cmp_a,_Gq_,b_008):n}}
      return switch$0?1:1}
    function sexp_of_t$7(of_a_009,param)
     {if(typeof param === "number")return 0 === param?_O_:_P_;
      if(0 === param[0])
       {var arg0_010=param[1],res0_011=caml_call1(of_a_009,arg0_010);
        return [1,[0,_Q_,[0,res0_011,0]]]}
      var
       arg1_013=param[2],
       arg0_012=param[1],
       res0_014=caml_call1(of_a_009,arg0_012),
       res1_015=caml_call1(of_a_009,arg1_013);
      return [1,[0,_R_,[0,res0_014,[0,res1_015,0]]]]}
    var Node_update=[0,compare$4,sexp_of_t$7];
    function sexp_of_t$8(of_a_017,param)
     {var
       previous_update_kind_021=param[2],
       created_at_023=param[3],
       arg_024=caml_call1(_D_,created_at_023),
       bnds_018=[0,[1,[0,_S_,[0,arg_024,0]]],0];
      switch(previous_update_kind_021)
       {case 0:var arg_022=_J_;break;
        case 1:var arg_022=_K_;break;
        case 2:var arg_022=_L_;break;
        case 3:var arg_022=_M_;break;
        default:var arg_022=_N_}
      var bnds_018$0=[0,[1,[0,_T_,[0,arg_022,0]]],bnds_018];
      function _Gn_(_Go_){return 0}
      var
       arg_020=caml_call1(Sexplib0_Sexp_conv[24],_Gn_),
       bnds_018$1=[0,[1,[0,_U_,[0,arg_020,0]]],bnds_018$0];
      return [1,bnds_018$1]}
    function create$2(f,created_at){return [0,f,0,created_at]}
    function really_run(t,node_update)
     {var
       _Gm_=
        typeof node_update === "number"
         ?0 === node_update?3:4
         :0 === node_update[0]?1:2;
      t[2] = _Gm_;
      return caml_call1(t[1],node_update)}
    function run(t,node_update,now)
     {var _Gl_=caml_call2(symbol$3,caml_call2(_H_,t[3],now),0);
      if(! _Gl_)return _Gl_;
      var switch$0=0;
      switch(t[2])
       {case 0:
         if(typeof node_update !== "number" && 1 === node_update[0])
          switch$0 = 2;
         break;
        case 1:
         if(typeof node_update !== "number" && 0 === node_update[0])
          switch$0 = 1;
         break;
        case 2:
         if(typeof node_update !== "number" && 0 === node_update[0])
          switch$0 = 1;
         break;
        case 3:return 0;
        default:
         if(typeof node_update === "number")
          {if(1 === node_update)switch$0 = 1}
         else
          if(1 === node_update[0])switch$0 = 2}
      switch(switch$0)
       {case 2:var a=node_update[2];return really_run(t,[0,a]);
        case 1:return 0;
        default:return really_run(t,node_update)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$19);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_On_update_hand$0);
    var
     Incremental_On_update_handler=
      [0,Node_update,sexp_of_t$8,create$2,run];
    caml_register_global
     (1317,Incremental_On_update_handler,"Incremental__On_update_handler");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Raised_exn);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$20);
    caml_call1(Expect_test_collector[5][1],cst_src_raised_exn_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$21,cst$15);
    function sexp_of_t$9(param)
     {var
       backtrace_004=param[2],
       exn_002=param[1],
       arg_005=caml_call1(Base_Backtrace[1],backtrace_004),
       bnds_001=[0,[1,[0,_V_,[0,arg_005,0]]],0],
       arg_003=caml_call1(Core[537],exn_002),
       bnds_001$0=[0,[1,[0,_W_,[0,arg_003,0]]],bnds_001];
      return [1,bnds_001$0]}
    function create$3(exn){return [0,exn,caml_call1(Base_Backtrace[6][4],0)]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$22);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Raised_exn$0);
    var Incremental_Raised_exn=[0,sexp_of_t$9,create$3];
    caml_register_global
     (1319,Incremental_Raised_exn,"Incremental__Raised_exn");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Types);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$23);
    caml_call1(Expect_test_collector[5][1],cst_src_types_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$24,cst$16);
    var
     Adjust_heights_heap=caml_call2(CamlinternalMod[1],_Y_,_X_),
     Alarm=caml_call2(CamlinternalMod[1],___,_Z_),
     Alarm_value=caml_call2(CamlinternalMod[1],_aa_,_$_),
     Array_fold=caml_call2(CamlinternalMod[1],_ac_,_ab_),
     At=caml_call2(CamlinternalMod[1],_ae_,_ad_),
     At_intervals=caml_call2(CamlinternalMod[1],_ag_,_af_),
     Bind=caml_call2(CamlinternalMod[1],_ai_,_ah_),
     Clock=caml_call2(CamlinternalMod[1],_ak_,_aj_),
     Expert=caml_call2(CamlinternalMod[1],_am_,_al_),
     Freeze=caml_call2(CamlinternalMod[1],_ao_,_an_),
     If_then_else=caml_call2(CamlinternalMod[1],_aq_,_ap_),
     Internal_observer=caml_call2(CamlinternalMod[1],_as_,_ar_),
     Join=caml_call2(CamlinternalMod[1],_au_,_at_),
     Kind=caml_call2(CamlinternalMod[1],_aw_,_av_),
     Node=caml_call2(CamlinternalMod[1],_ay_,_ax_),
     Observer=caml_call2(CamlinternalMod[1],_aA_,_az_),
     Only_in_debug=caml_call2(CamlinternalMod[1],_aC_,_aB_),
     Packed_weak_hashtbl=caml_call2(CamlinternalMod[1],_aE_,_aD_),
     Recompute_heap=caml_call2(CamlinternalMod[1],_aG_,_aF_),
     Run_on_update_handlers=caml_call2(CamlinternalMod[1],_aI_,_aH_),
     include$3=caml_call2(CamlinternalMod[1],_aK_,_aJ_),
     Snapshot=caml_call2(CamlinternalMod[1],_aM_,_aL_),
     State=caml_call2(CamlinternalMod[1],_aO_,_aN_),
     Status=caml_call2(CamlinternalMod[1],_aQ_,_aP_),
     Step_function_node=caml_call2(CamlinternalMod[1],_aS_,_aR_),
     Unordered_array_fold=caml_call2(CamlinternalMod[1],_aU_,_aT_),
     Var=caml_call2(CamlinternalMod[1],_aW_,_aV_);
    caml_call3
     (CamlinternalMod[2],_aX_,Adjust_heights_heap,Adjust_heights_heap);
    caml_call3(CamlinternalMod[2],_aY_,Alarm,Alarm);
    caml_call3(CamlinternalMod[2],_aZ_,Alarm_value,Alarm_value);
    caml_call3(CamlinternalMod[2],_a0_,Array_fold,Array_fold);
    caml_call3(CamlinternalMod[2],_a1_,At,At);
    caml_call3(CamlinternalMod[2],_a2_,At_intervals,At_intervals);
    caml_call3(CamlinternalMod[2],_a3_,Bind,Bind);
    caml_call3(CamlinternalMod[2],_a4_,Clock,Clock);
    caml_call3(CamlinternalMod[2],_a5_,Expert,Expert);
    caml_call3(CamlinternalMod[2],_a6_,Freeze,Freeze);
    caml_call3(CamlinternalMod[2],_a7_,If_then_else,If_then_else);
    caml_call3(CamlinternalMod[2],_a8_,Internal_observer,Internal_observer);
    caml_call3(CamlinternalMod[2],_a9_,Join,Join);
    caml_call3(CamlinternalMod[2],_a__,Kind,Kind);
    function sexp_of_node(param,t)
     {var
       _Gk_=
        caml_call2(concat,0,[0,cst_n,[0,caml_call1(to_string$1,t[1]),0]]);
      return caml_call1(Core[471],_Gk_)}
    function sexp_of_t$10(x_003)
     {return sexp_of_node(function(param){return _a$_},x_003)}
    function is_valid(t)
     {var _Gj_=t[5];if(typeof _Gj_ === "number" && ! _Gj_)return 0;return 1}
    function is_necessary(t)
     {var _Ge_=caml_call2(symbol$2,t[9],0);
      if(_Ge_)
       var _Gf_=_Ge_;
      else
       {var _Gg_=caml_call1(Uopt[6],t[21]);
        if(_Gg_)
         var _Gf_=_Gg_;
        else
         {var switch$0=0,_Gh_=t[5];
          if(typeof _Gh_ !== "number" && 7 === _Gh_[0])
           {var _Gi_=1;switch$0 = 1}
          if(! switch$0)var _Gi_=0;
          var _Gf_=_Gi_ || t[26]}}
      return _Gf_}
    function type_equal_if_phys_same(t1,t2)
     {return caml_call2(Core[247],t1,t2)?[0,0]:0}
    caml_call3
     (CamlinternalMod[2],
      _ba_,
      Node,
      [0,
       sexp_of_node,
       [0,sexp_of_t$10],
       is_valid,
       is_necessary,
       type_equal_if_phys_same]);
    caml_call3(CamlinternalMod[2],_bb_,Observer,Observer);
    caml_call3(CamlinternalMod[2],_bc_,Only_in_debug,Only_in_debug);
    caml_call3
     (CamlinternalMod[2],_bd_,Packed_weak_hashtbl,Packed_weak_hashtbl);
    caml_call3(CamlinternalMod[2],_be_,Recompute_heap,Recompute_heap);
    caml_call3
     (CamlinternalMod[2],_bf_,Run_on_update_handlers,Run_on_update_handlers);
    function sexp_of_t$11(param)
     {if(! param)return caml_call1(Core[471],cst_Top);
      var bind=param[1],_Gc_=bind[1];
      function _Gd_(param){return _bg_}
      return caml_call2(Node[1],_Gd_,_Gc_)}
    caml_call3(CamlinternalMod[2],_bh_,include$3,[0,sexp_of_t$11]);
    caml_call3(CamlinternalMod[2],_bi_,Snapshot,Snapshot);
    caml_call3(CamlinternalMod[2],_bj_,State,State);
    caml_call3(CamlinternalMod[2],_bk_,Status,Status);
    caml_call3(CamlinternalMod[2],_bl_,Step_function_node,Step_function_node);
    caml_call3
     (CamlinternalMod[2],_bm_,Unordered_array_fold,Unordered_array_fold);
    caml_call3(CamlinternalMod[2],_bn_,Var,Var);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$25);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Types$0);
    var
     Incremental_Types=
      [0,
       Adjust_heights_heap,
       Alarm,
       Alarm_value,
       Array_fold,
       At,
       At_intervals,
       Bind,
       Clock,
       Expert,
       Freeze,
       If_then_else,
       Internal_observer,
       Join,
       Kind,
       Node,
       Observer,
       Only_in_debug,
       Packed_weak_hashtbl,
       Recompute_heap,
       Run_on_update_handlers,
       include$3,
       Snapshot,
       State,
       Status,
       Step_function_node,
       Unordered_array_fold,
       Var];
    caml_register_global(1321,Incremental_Types,"Incremental__Types");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Var);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$26);
    caml_call1(Expect_test_collector[5][1],cst_src_var_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$27,cst$17);
    function watch(r){return r[4]}
    function set_at(r){return r[3]}
    function set_set_at(r,v){r[3] = v;return 0}
    function value_set_during_stabilization(r){return r[2]}
    function set_value_set_during_stabiliza(r,v){r[2] = v;return 0}
    function value(r){return r[1]}
    function set_value(r,v){r[1] = v;return 0}
    function _bo_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _bp_=0,
     watch$0=[0,function(param){return 0},cst_watch,_bp_,watch,_bo_];
    function _bq_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _br_=[0,set_set_at],
     set_at$0=[0,function(param){return 0},cst_set_at,_br_,set_at,_bq_];
    function _bs_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _bt_=[0,set_value_set_during_stabiliza],
     value_set_during_stabilization$0=
      [0,
       function(param){return 0},
       cst_value_set_during_stabiliza,
       _bt_,
       value_set_during_stabilization,
       _bs_];
    function _bu_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _bv_=[0,set_value],
     value$0=[0,function(param){return 0},cst_value,_bv_,value,_bu_];
    function sexp_of_t$12(of_a_001,param)
     {var
       value_003=param[1],
       value_set_during_stabilization=param[2],
       set_at_007=param[3],
       watch_009=param[4],
       arg_010=caml_call2(Node[1],of_a_001,watch_009),
       bnds_002=[0,[1,[0,_bw_,[0,arg_010,0]]],0],
       arg_008=caml_call1(_D_,set_at_007),
       bnds_002$0=[0,[1,[0,_bx_,[0,arg_008,0]]],bnds_002],
       arg_006=caml_call2(Uopt[1],of_a_001,value_set_during_stabilization),
       bnds_002$1=[0,[1,[0,_by_,[0,arg_006,0]]],bnds_002$0],
       arg_004=caml_call1(of_a_001,value_003),
       bnds_002$2=[0,[1,[0,_bz_,[0,arg_004,0]]],bnds_002$1];
      return [1,bnds_002$2]}
    function invariant$4(invariant_a,t)
     {function _F$_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         watch_fun=
          check
           (function(watch)
             {var _Gb_=watch[5];
              if(typeof _Gb_ === "number")
               {if(0 === _Gb_)return 0}
              else
               if(16 === _Gb_[0])
                {var t$0=_Gb_[1];
                 if(caml_call2(Core[246],t,t$0))return 0;
                 throw [0,Assert_failure,_bB_]}
              throw [0,Assert_failure,_bA_]}),
         set_at_fun=check(invariant$3),
         value_set_during_stabilization=check(caml_call1(Uopt[2],invariant_a)),
         value_fun=check(invariant_a);
        caml_call1(value_fun,value$0);
        caml_call1
         (value_set_during_stabilization,value_set_during_stabilization$0);
        caml_call1(set_at_fun,set_at$0);
        return caml_call1(watch_fun,watch$0)}
      function _Ga_(x_011)
       {return sexp_of_t$12(function(param){return _bC_},x_011)}
      return caml_call4(Base_Invariant[1],_bD_,t,_Ga_,_F$_)}
    function incr_state(t){return t[4][2]}
    function sexp_of_t$13(param)
     {var res0_015=sexp_of_t$12(function(param){return _bE_},param);
      return [1,[0,_bF_,[0,res0_015,0]]]}
    function latest_value(t)
     {return caml_call1(Uopt[6],t[2])?caml_call1(Uopt[11],t[2]):t[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$28);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Var$0);
    var
     Packed=[0,sexp_of_t$13],
     include$4=[0,invariant$4,sexp_of_t$12,Packed,latest_value,incr_state];
    caml_register_global(1323,include$4,"Incremental__Var");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Unordered_arra);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$29);
    caml_call1(Expect_test_collector[5][1],cst_src_unordered_array_fold_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$30,cst$18);
    function sexp_of_t$14(of_a_001,of_b_002,param)
     {if(0 === param[0])
       {var
         _F7_=function(_F__){return 0},
         res0_004=caml_call1(Sexplib0_Sexp_conv[24],_F7_);
        return [1,[0,_bG_,[0,res0_004,0]]]}
      function _F8_(_F9_){return 0}
      var res0_006=caml_call1(Sexplib0_Sexp_conv[24],_F8_);
      return [1,[0,_bH_,[0,res0_006,0]]]}
    function num_changes_since_last_full_co(r){return r[8]}
    function set_num_changes_since_last_ful(r,v){r[8] = v;return 0}
    function fold_value(r){return r[7]}
    function set_fold_value(r,v){r[7] = v;return 0}
    function children(r){return r[6]}
    function full_compute_every_n_changes(r){return r[5]}
    function init$1(r){return r[2]}
    function main(r){return r[1]}
    function _bI_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v]}
    var
     _bJ_=[0,set_num_changes_since_last_ful],
     num_changes_since_last_full_co$0=
      [0,
       function(param){return 0},
       cst_num_changes_since_last_ful,
       _bJ_,
       num_changes_since_last_full_co,
       _bI_];
    function _bK_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8]]}
    var
     _bL_=[0,set_fold_value],
     fold_value$0=
      [0,function(param){return 0},cst_fold_value,_bL_,fold_value,_bK_];
    function _bM_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8]]}
    var
     _bN_=0,
     children$0=[0,function(param){return 0},cst_children,_bN_,children,_bM_];
    function _bO_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8]]}
    var
     _bP_=0,
     full_compute_every_n_changes$0=
      [0,
       function(param){return 0},
       cst_full_compute_every_n_chang,
       _bP_,
       full_compute_every_n_changes,
       _bO_];
    function _bQ_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8]]}
    var _bR_=0,init$2=[0,function(param){return 0},cst_init,_bR_,init$1,_bQ_];
    function _bS_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8]]}
    var _bT_=0,main$0=[0,function(param){return 0},cst_main,_bT_,main,_bS_];
    function sexp_of_t$15(of_a_009,of_acc_010,param)
     {var
       children_022=param[6],
       full_compute_every_n_changes_0=param[5],
       init_014=param[2],
       main_012=param[1],
       fold_value_024=param[7],
       num_changes_since_last_full_co=param[8],
       arg_027=caml_call1(Core[356],num_changes_since_last_full_co),
       bnds_011=[0,[1,[0,_bU_,[0,arg_027,0]]],0],
       arg_025=caml_call2(Uopt[1],of_acc_010,fold_value_024),
       bnds_011$0=[0,[1,[0,_bV_,[0,arg_025,0]]],bnds_011],
       _F2_=caml_call1(Node[1],of_a_009),
       arg_023=caml_call2(Core[288],_F2_,children_022),
       bnds_011$1=[0,[1,[0,_bW_,[0,arg_023,0]]],bnds_011$0],
       arg_021=caml_call1(Core[356],full_compute_every_n_changes_0),
       bnds_011$2=[0,[1,[0,_bX_,[0,arg_021,0]]],bnds_011$1];
      function _F3_(_F6_){return 0}
      var
       arg_019=caml_call1(Sexplib0_Sexp_conv[24],_F3_),
       bnds_011$3=[0,[1,[0,_bY_,[0,arg_019,0]]],bnds_011$2];
      function _F4_(_F5_){return 0}
      var
       arg_017=caml_call1(Sexplib0_Sexp_conv[24],_F4_),
       bnds_011$4=[0,[1,[0,_bZ_,[0,arg_017,0]]],bnds_011$3],
       arg_015=caml_call1(of_acc_010,init_014),
       bnds_011$5=[0,[1,[0,_b0_,[0,arg_015,0]]],bnds_011$4],
       arg_013=caml_call2(Node[1],of_acc_010,main_012),
       bnds_011$6=[0,[1,[0,_b1_,[0,arg_013,0]]],bnds_011$5];
      return [1,bnds_011$6]}
    function invariant$5(invariant_a,invariant_acc,t)
     {function _FW_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         num_changes_since_last_full_co=
          check
           (function(num_changes_since_last_full_co)
             {if(! caml_call2(symbol,num_changes_since_last_full_co,0))
               throw [0,Assert_failure,_b3_];
              if(caml_call2(symbol$0,num_changes_since_last_full_co,t[5]))
               return 0;
              throw [0,Assert_failure,_b2_]}),
         fold_value_fun=
          check
           (function(fold_value)
             {caml_call2(Uopt[2],invariant_acc,fold_value);
              var
               got=caml_call1(Uopt[6],fold_value),
               expect=caml_call2(symbol$3,t[8],t[5]),
               sexpifier=Core[305],
               equal=0,
               message=0,
               here=0;
              function comparator(a_029,b_030)
               {return caml_call2(Core[301],a_029,b_030)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos,
                       sexpifier,
                       comparator,
                       here,
                       message,
                       equal,
                       expect,
                       got)}),
         children_fun=
          check
           (function(children)
             {function _F0_(child)
               {caml_call2(Uopt[2],invariant_a,child[4]);
                var _F1_=caml_call2(symbol$3,t[8],t[5]);
                if(! _F1_)return _F1_;
                if(caml_call1(Uopt[6],child[4]))return 0;
                throw [0,Assert_failure,_b4_]}
              return caml_call2(Array[22],children,_F0_)}),
         full_compute_every_n_changes_f=
          check
           (function(full_compute_every_n_changes)
             {if(caml_call2(symbol$2,full_compute_every_n_changes,0))return 0;
              throw [0,Assert_failure,_b5_]}),
         init_fun=check(invariant_acc),
         main_fun=
          check
           (function(main)
             {var _FZ_=main[5];
              if(typeof _FZ_ === "number")
               {if(0 === _FZ_)return 0}
              else
               if(15 === _FZ_[0])
                {var t$0=_FZ_[1];
                 if(caml_call2(Core[247],t,t$0))return 0;
                 throw [0,Assert_failure,_b7_]}
              throw [0,Assert_failure,_b6_]});
        caml_call1(main_fun,main$0);
        caml_call1(init_fun,init$2);
        caml_call1
         (full_compute_every_n_changes_f,full_compute_every_n_changes$0);
        caml_call1(children_fun,children$0);
        caml_call1(fold_value_fun,fold_value$0);
        return caml_call1
                (num_changes_since_last_full_co,
                 num_changes_since_last_full_co$0)}
      function _FX_(x_028)
       {function _FY_(param){return _b8_}
        return sexp_of_t$15(function(param){return _b9_},_FY_,x_028)}
      return caml_call4(Base_Invariant[1],_b__,t,_FX_,_FW_)}
    function create$4
     (init,f,update$0,full_compute_every_n_changes,children,main)
     {var _FU_=Uopt[3];
      if(0 === update$0[0])
       var
        f_inverse=update$0[1],
        _FV_=
         function(fold_value,old_value,new_value)
          {return caml_call2
                   (f,caml_call2(f_inverse,fold_value,old_value),new_value)};
      else
       var update=update$0[1],_FV_=update;
      return [0,
              main,
              init,
              f,
              _FV_,
              full_compute_every_n_changes,
              children,
              _FU_,
              full_compute_every_n_changes]}
    function compute(t)
     {if(caml_call2(symbol$1,t[8],t[5]))
       {t[8] = 0;
        var
         children=t[6],
         f=t[3],
         init=t[2],
         result=[0,init],
         _FR_=children.length - 1 - 1 | 0,
         _FQ_=0;
        if(_FR_ >= 0)
         {var i=_FQ_;
          for(;;)
           {var _FS_=caml_call1(Uopt[7],children[1 + i][4]);
            result[1] = caml_call2(f,result[1],_FS_);
            var _FT_=i + 1 | 0;
            if(_FR_ !== i){var i=_FT_;continue}
            break}}
        t[7] = caml_call1(Uopt[4],result[1])}
      return caml_call1(Uopt[7],t[7])}
    function force_full_compute(t){t[7] = Uopt[3];t[8] = t[5];return 0}
    function child_changed(t,child,child_index,old_value_opt,new_value)
     {var
       child_at_index=caml_check_bound(t[6],child_index)[1 + child_index],
       match=caml_call2(Node[5],child,child_at_index);
      if(! match)
       {var
         _FH_=0,
         _FI_=0,
         _FJ_=function(param){return _b$_},
         _FK_=[0,[1,[0,_ca_,[0,caml_call2(Node[1],_FJ_,child),_FI_]]],_FH_],
         _FL_=[0,[1,[0,_cb_,[0,caml_call1(Core[356],child_index),0]]],_FK_],
         _FM_=0,
         _FN_=function(param){return _cc_},
         _FO_=
          [0,
           [1,
            [0,
             _ce_,
             [0,sexp_of_t$15(function(param){return _cd_},_FN_,t),_FM_]]],
           _FL_],
         _FP_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Unordered_array_fold_child),
            _FO_]];
        return caml_call1(Core[253],_FP_)}
      if(caml_call2(symbol$3,t[8],t[5] - 1 | 0))
       {t[8] = t[8] + 1 | 0;
        var
         _FD_=caml_call1(Uopt[7],old_value_opt),
         _FE_=caml_call1(Uopt[7],t[7]),
         _FF_=caml_call3(t[4],_FE_,_FD_,new_value);
        t[7] = caml_call1(Uopt[4],_FF_);
        return 0}
      var _FG_=caml_call2(symbol$3,t[8],t[5]);
      return _FG_?force_full_compute(t):_FG_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$31);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Unordered_arra$0);
    var
     _cf_=[0,sexp_of_t$14],
     Incremental_Unordered_array_fo=
      [0,
       invariant$5,
       sexp_of_t$15,
       _cf_,
       create$4,
       compute,
       child_changed,
       force_full_compute];
    caml_register_global
     (1325,Incremental_Unordered_array_fo,"Incremental__Unordered_array_fold");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Alarm);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$32);
    caml_call1(Expect_test_collector[5][1],cst_src_alarm_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$33,cst$19);
    function sexp_of_t$16(x_001)
     {return caml_call2(Timing_wheel[5][1],Sexplib0_Sexp_conv[23],x_001)}
    function invariant$6(param){return 0}
    var null$0=caml_call1(Timing_wheel[5][2],0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$34);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Alarm$0);
    var Incremental_Alarm=[0,sexp_of_t$16,invariant$6,null$0];
    caml_register_global(1327,Incremental_Alarm,"Incremental__Alarm");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Step_function_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$35);
    caml_call1(Expect_test_collector[5][1],cst_src_step_function_node_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$36,cst$20);
    function alarm_value(r){return r[7]}
    function set_alarm_value(r,v){r[7] = v;return 0}
    function alarm(r){return r[6]}
    function set_alarm(r,v){r[6] = v;return 0}
    function value$1(r){return r[4]}
    function set_value$0(r,v){r[4] = v;return 0}
    function main$1(r){return r[1]}
    function _cg_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8]]}
    var
     _ch_=[0,set_alarm_value],
     alarm_value$0=
      [0,function(param){return 0},cst_alarm_value,_ch_,alarm_value,_cg_];
    function _ci_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8]]}
    var
     _cj_=[0,set_alarm],
     alarm$0=[0,function(param){return 0},cst_alarm,_cj_,alarm,_ci_];
    function _ck_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8]]}
    var
     _cl_=[0,set_value$0],
     value$2=[0,function(param){return 0},cst_value$0,_cl_,value$1,_ck_];
    function _cm_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8]]}
    var
     _cn_=0,
     main$2=[0,function(param){return 0},cst_main$0,_cn_,main$1,_cm_];
    function sexp_of_t$17(of_a_001,param)
     {var
       main_003=param[1],
       child_005=param[2],
       extracted_step_function_from_c=param[3],
       value_009=param[4],
       upcoming_steps_011=param[5],
       alarm_017=param[6],
       alarm_value_019=param[7],
       clock_021=param[8],
       arg_022=caml_call1(Sexplib0_Sexp_conv[23],clock_021),
       bnds_002=[0,[1,[0,_co_,[0,arg_022,0]]],0],
       arg_020=caml_call1(Sexplib0_Sexp_conv[23],alarm_value_019),
       bnds_002$0=[0,[1,[0,_cp_,[0,arg_020,0]]],bnds_002],
       arg_018=sexp_of_t$16(alarm_017),
       bnds_002$1=[0,[1,[0,_cq_,[0,arg_018,0]]],bnds_002$0];
      function _FA_(param)
       {var
         arg1_014=param[2],
         arg0_013=param[1],
         res0_015=caml_call1(Time_ns[119],arg0_013),
         res1_016=caml_call1(of_a_001,arg1_014);
        return [1,[0,res0_015,[0,res1_016,0]]]}
      var
       arg_012=caml_call2(Core_Sequence[11],_FA_,upcoming_steps_011),
       bnds_002$2=[0,[1,[0,_cr_,[0,arg_012,0]]],bnds_002$1],
       arg_010=caml_call2(Uopt[1],of_a_001,value_009),
       bnds_002$3=[0,[1,[0,_cs_,[0,arg_010,0]]],bnds_002$2],
       arg_008=caml_call1(_D_,extracted_step_function_from_c),
       bnds_002$4=[0,[1,[0,_ct_,[0,arg_008,0]]],bnds_002$3],
       _FB_=caml_call1(Incremental_step_function[1],of_a_001),
       _FC_=caml_call1(Node[1],_FB_),
       arg_006=caml_call2(Uopt[1],_FC_,child_005),
       bnds_002$5=[0,[1,[0,_cu_,[0,arg_006,0]]],bnds_002$4],
       arg_004=caml_call2(Node[1],of_a_001,main_003),
       bnds_002$6=[0,[1,[0,_cv_,[0,arg_004,0]]],bnds_002$5];
      return [1,bnds_002$6]}
    function invariant$7(invariant_a,t)
     {function _Fw_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         alarm_value_fun=
          check
           (function(alarm_value)
             {var _Fz_=alarm_value[1];
              if(3 !== _Fz_[0])throw [0,Assert_failure,_cw_];
              var t2=_Fz_[1];
              if(caml_call2(Core[247],t,t2))return 0;
              throw [0,Assert_failure,_cx_]}),
         alarm_fun=check(invariant$6),
         value_fun=check(caml_call1(Uopt[2],invariant_a)),
         main_fun=
          check
           (function(main)
             {var _Fy_=main[5];
              if(typeof _Fy_ === "number")
               {if(0 === _Fy_)return 0}
              else
               switch(_Fy_[0])
                {case 5:return 0;
                 case 14:
                  var t$0=_Fy_[1];
                  if(caml_call2(Core[246],t,t$0))return 0;
                  throw [0,Assert_failure,_cz_]
                 }
              throw [0,Assert_failure,_cy_]});
        caml_call1(main_fun,main$2);
        caml_call1(value_fun,value$2);
        caml_call1(alarm_fun,alarm$0);
        caml_call1(alarm_value_fun,alarm_value$0);
        return 0}
      function _Fx_(x_023)
       {return sexp_of_t$17(function(param){return _cA_},x_023)}
      return caml_call4(Base_Invariant[1],_cB_,t,_Fx_,_Fw_)}
    function advance(t,to)
     {var _Fv_=t[5],a1$0=caml_call1(Uopt[7],t[4]),a1=a1$0,steps=_Fv_;
      for(;;)
       {var match=caml_call1(Core_Sequence[47],steps);
        if(match)
         {var
           _Fu_=match[1],
           steps2=_Fu_[2],
           match$0=_Fu_[1],
           a2=match$0[2],
           step_at=match$0[1];
          if(caml_call2(Time_ns[15],to,step_at))
           {var a1=a2,steps=steps2;continue}}
        t[4] = caml_call1(Uopt[4],a1);
        t[5] = steps;
        return 0}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$37);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Step_function_$0);
    var Incremental_Step_function_node=[0,invariant$7,sexp_of_t$17,advance];
    caml_register_global
     (1330,Incremental_Step_function_node,"Incremental__Step_function_node");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Array_fold);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$38);
    caml_call1(Expect_test_collector[5][1],cst_src_array_fold_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$39,cst$21);
    function children$1(r){return r[3]}
    function init$3(r){return r[1]}
    function _cC_(r,v){return [0,r[1],r[2],v]}
    var
     _cD_=0,
     children$2=
      [0,function(param){return 0},cst_children$0,_cD_,children$1,_cC_];
    function _cE_(r,v){return [0,v,r[2],r[3]]}
    var
     _cF_=0,
     init$4=[0,function(param){return 0},cst_init$0,_cF_,init$3,_cE_];
    function sexp_of_t$18(of_a_001,of_acc_002,param)
     {var
       children_008=param[3],
       init_004=param[1],
       _Fr_=caml_call1(Node[1],of_a_001),
       arg_009=caml_call2(Core[288],_Fr_,children_008),
       bnds_003=[0,[1,[0,_cG_,[0,arg_009,0]]],0];
      function _Fs_(_Ft_){return 0}
      var
       arg_007=caml_call1(Sexplib0_Sexp_conv[24],_Fs_),
       bnds_003$0=[0,[1,[0,_cH_,[0,arg_007,0]]],bnds_003],
       arg_005=caml_call1(of_acc_002,init_004),
       bnds_003$1=[0,[1,[0,_cI_,[0,arg_005,0]]],bnds_003$0];
      return [1,bnds_003$1]}
    function invariant$8(invariant_a,invariant_acc,t)
     {function _Fn_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         children_fun=
          check
           (function(children)
             {function _Fq_(child)
               {return caml_call2(Uopt[2],invariant_a,child[4])}
              return caml_call2(Array[22],children,_Fq_)}),
         init_fun=check(invariant_acc);
        caml_call1(init_fun,init$4);
        return caml_call1(children_fun,children$2)}
      function _Fo_(x_010)
       {function _Fp_(param){return _cJ_}
        return sexp_of_t$18(function(param){return _cK_},_Fp_,x_010)}
      return caml_call4(Base_Invariant[1],_cL_,t,_Fo_,_Fn_)}
    function compute$0(param)
     {var
       children=param[3],
       f=param[2],
       init=param[1],
       result=[0,init],
       _Fk_=children.length - 1 - 1 | 0,
       _Fj_=0;
      if(_Fk_ >= 0)
       {var i=_Fj_;
        for(;;)
         {var _Fl_=caml_call1(Uopt[7],children[1 + i][4]);
          result[1] = caml_call2(f,result[1],_Fl_);
          var _Fm_=i + 1 | 0;
          if(_Fk_ !== i){var i=_Fm_;continue}
          break}}
      return result[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$40);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Array_fold$0);
    var Incremental_Array_fold=[0,sexp_of_t$18,invariant$8,compute$0];
    caml_register_global
     (1331,Incremental_Array_fold,"Incremental__Array_fold");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_At);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$41);
    caml_call1(Expect_test_collector[5][1],cst_src_at_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$42,cst$22);
    function alarm$1(r){return r[3]}
    function set_alarm$0(r,v){r[3] = v;return 0}
    function main$3(r){return r[1]}
    function _cM_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _cN_=[0,set_alarm$0],
     alarm$2=[0,function(param){return 0},cst_alarm$0,_cN_,alarm$1,_cM_];
    function _cO_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _cP_=0,
     main$4=[0,function(param){return 0},cst_main$1,_cP_,main$3,_cO_];
    function sexp_of_t$19(param)
     {var
       at_004=param[2],
       main_002=param[1],
       alarm_006=param[3],
       clock_008=param[4],
       arg_009=caml_call1(Sexplib0_Sexp_conv[23],clock_008),
       bnds_001=[0,[1,[0,_cQ_,[0,arg_009,0]]],0],
       arg_007=sexp_of_t$16(alarm_006),
       bnds_001$0=[0,[1,[0,_cR_,[0,arg_007,0]]],bnds_001],
       arg_005=caml_call1(Time_ns[119],at_004),
       bnds_001$1=[0,[1,[0,_cS_,[0,arg_005,0]]],bnds_001$0],
       arg_003=caml_call2(Node[1],Incremental_Before_or_after[1],main_002),
       bnds_001$2=[0,[1,[0,_cT_,[0,arg_003,0]]],bnds_001$1];
      return [1,bnds_001$2]}
    function invariant$9(t)
     {function _Fh_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         alarm_fun=check(invariant$6),
         main_fun=
          check
           (function(main)
             {var _Fi_=main[5];
              if(typeof _Fi_ === "number")
               {if(0 === _Fi_)return 0}
              else
               switch(_Fi_[0])
                {case 1:
                  var t$0=_Fi_[1];
                  if(caml_call2(Core[246],t,t$0))return 0;
                  throw [0,Assert_failure,_cV_];
                 case 5:if(_Fi_[1])return 0;break
                 }
              throw [0,Assert_failure,_cU_]});
        caml_call1(main_fun,main$4);
        caml_call1(alarm_fun,alarm$2);
        return 0}
      return caml_call4(Base_Invariant[1],_cW_,t,sexp_of_t$19,_Fh_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$43);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_At$0);
    var Incremental_At=[0,invariant$9,sexp_of_t$19];
    caml_register_global(1332,Incremental_At,"Incremental__At");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_At_intervals);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$44);
    caml_call1(Expect_test_collector[5][1],cst_src_at_intervals_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$45,cst$23);
    function alarm$3(r){return r[4]}
    function set_alarm$1(r,v){r[4] = v;return 0}
    function interval(r){return r[3]}
    function main$5(r){return r[1]}
    function _cX_(r,v){return [0,r[1],r[2],r[3],v,r[5]]}
    var
     _cY_=[0,set_alarm$1],
     alarm$4=[0,function(param){return 0},cst_alarm$1,_cY_,alarm$3,_cX_];
    function _cZ_(r,v){return [0,r[1],r[2],v,r[4],r[5]]}
    var
     _c0_=0,
     interval$0=[0,function(param){return 0},cst_interval,_c0_,interval,_cZ_];
    function _c1_(r,v){return [0,v,r[2],r[3],r[4],r[5]]}
    var
     _c2_=0,
     main$6=[0,function(param){return 0},cst_main$2,_c2_,main$5,_c1_];
    function sexp_of_t$20(param)
     {var
       interval_006=param[3],
       base_004=param[2],
       main_002=param[1],
       alarm_008=param[4],
       clock_010=param[5],
       arg_011=caml_call1(Sexplib0_Sexp_conv[23],clock_010),
       bnds_001=[0,[1,[0,_c3_,[0,arg_011,0]]],0],
       arg_009=sexp_of_t$16(alarm_008),
       bnds_001$0=[0,[1,[0,_c4_,[0,arg_009,0]]],bnds_001],
       arg_007=caml_call1(Time_ns[1][10],interval_006),
       bnds_001$1=[0,[1,[0,_c5_,[0,arg_007,0]]],bnds_001$0],
       arg_005=caml_call1(Time_ns[119],base_004),
       bnds_001$2=[0,[1,[0,_c6_,[0,arg_005,0]]],bnds_001$1],
       arg_003=caml_call2(Node[1],Core[518],main_002),
       bnds_001$3=[0,[1,[0,_c7_,[0,arg_003,0]]],bnds_001$2];
      return [1,bnds_001$3]}
    function invariant$10(t)
     {function _Ff_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         alarm_fun=check(invariant$6),
         interval_fun=
          check
           (function(interval)
             {if(caml_call1(Time_ns[1][34],interval))return 0;
              throw [0,Assert_failure,_c8_]}),
         main_fun=
          check
           (function(main)
             {var _Fg_=main[5];
              if(typeof _Fg_ === "number")
               {if(0 === _Fg_)return 0}
              else
               if(2 === _Fg_[0])
                {var t$0=_Fg_[1];
                 if(caml_call2(Core[246],t,t$0))return 0;
                 throw [0,Assert_failure,_c__]}
              throw [0,Assert_failure,_c9_]});
        caml_call1(main_fun,main$6);
        caml_call1(interval_fun,interval$0);
        caml_call1(alarm_fun,alarm$4);
        return 0}
      return caml_call4(Base_Invariant[1],_c$_,t,sexp_of_t$20,_Ff_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$46);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_At_intervals$0);
    var Incremental_At_intervals=[0,invariant$10,sexp_of_t$20];
    caml_register_global
     (1333,Incremental_At_intervals,"Incremental__At_intervals");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Bind);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$47);
    caml_call1(Expect_test_collector[5][1],cst_src_bind_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$48,cst$24);
    function all_nodes_created_on_rhs(r){return r[7]}
    function set_all_nodes_created_on_rhs(r,v){r[7] = v;return 0}
    function rhs_scope(r){return r[6]}
    function set_rhs_scope(r,v){r[6] = v;return 0}
    function lhs_change(r){return r[4]}
    function main$7(r){return r[1]}
    function _da_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v]}
    var
     _db_=[0,set_all_nodes_created_on_rhs],
     all_nodes_created_on_rhs$0=
      [0,
       function(param){return 0},
       cst_all_nodes_created_on_rhs,
       _db_,
       all_nodes_created_on_rhs,
       _da_];
    function _dc_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7]]}
    var
     _dd_=[0,set_rhs_scope],
     rhs_scope$0=
      [0,function(param){return 0},cst_rhs_scope,_dd_,rhs_scope,_dc_];
    function _de_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7]]}
    var
     _df_=0,
     lhs_change$0=
      [0,function(param){return 0},cst_lhs_change,_df_,lhs_change,_de_];
    function _dg_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7]]}
    var
     _dh_=0,
     main$8=[0,function(param){return 0},cst_main$3,_dh_,main$7,_dg_];
    function sexp_of_t$21(of_a_001,of_b_002,param)
     {var
       main_004=param[1],
       lhs_change_010=param[4],
       lhs_008=param[3],
       rhs_012=param[5],
       rhs_scope_014=param[6],
       all_nodes_created_on_rhs_016=param[7],
       arg_017=caml_call2(Uopt[1],Node[2][1],all_nodes_created_on_rhs_016),
       bnds_003=[0,[1,[0,_di_,[0,arg_017,0]]],0],
       arg_015=caml_call1(include$3[1],rhs_scope_014),
       bnds_003$0=[0,[1,[0,_dj_,[0,arg_015,0]]],bnds_003],
       _Fc_=caml_call1(Node[1],of_b_002),
       arg_013=caml_call2(Uopt[1],_Fc_,rhs_012),
       bnds_003$1=[0,[1,[0,_dk_,[0,arg_013,0]]],bnds_003$0],
       arg_011=caml_call2(Node[1],Core[518],lhs_change_010),
       bnds_003$2=[0,[1,[0,_dl_,[0,arg_011,0]]],bnds_003$1],
       arg_009=caml_call2(Node[1],of_a_001,lhs_008),
       bnds_003$3=[0,[1,[0,_dm_,[0,arg_009,0]]],bnds_003$2];
      function _Fd_(_Fe_){return 0}
      var
       arg_007=caml_call1(Sexplib0_Sexp_conv[24],_Fd_),
       bnds_003$4=[0,[1,[0,_dn_,[0,arg_007,0]]],bnds_003$3],
       arg_005=caml_call2(Node[1],of_b_002,main_004),
       bnds_003$5=[0,[1,[0,_do_,[0,arg_005,0]]],bnds_003$4];
      return [1,bnds_003$5]}
    function same(t1,t2){return caml_call2(Core[247],t1,t2)}
    function is_valid$0(t)
     {var _Fb_=t[1][5];
      if(typeof _Fb_ === "number" && ! _Fb_)return 0;
      return 1}
    function iter_nodes_created_on_rhs(t,f)
     {var r=[0,t[7]];
      for(;;)
       {if(! caml_call1(Uopt[6],r[1]))return 0;
        var match=caml_call1(Uopt[11],r[1]);
        r[1] = match[13];
        caml_call1(f,match)}}
    function invariant$11(invariant_a,invariant_b,t)
     {function _E7_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         all_nodes_created_on_rhs_fun=
          check
           (function(param)
             {return iter_nodes_created_on_rhs
                      (t,
                       function(node)
                        {if(! caml_call2(Core[246],node[12],t[6]))
                          throw [0,Assert_failure,_dq_];
                         var _Fa_=caml_call1(Node[4],node);
                         if(! _Fa_)return _Fa_;
                         if(caml_call2(symbol$3,t[4][14],node[14]))return 0;
                         throw [0,Assert_failure,_dp_]})}),
         rhs_scope_fun=
          check
           (function(param)
             {if(! param)throw [0,Assert_failure,_ds_];
              var t$0=param[1];
              if(same(t,t$0))return 0;
              throw [0,Assert_failure,_dr_]}),
         lhs_change_fun=
          check
           (function(lhs_change)
             {if(! caml_call2(Core[246],lhs_change[12],t[1][12]))
               throw [0,Assert_failure,_dv_];
              var _E$_=lhs_change[5];
              if(typeof _E$_ === "number")
               {if(0 === _E$_)return 0}
              else
               if(3 === _E$_[0])
                {var t$0=_E$_[1];
                 if(same(t,t$0))return 0;
                 throw [0,Assert_failure,_du_]}
              throw [0,Assert_failure,_dt_]}),
         main_fun=
          check
           (function(main)
             {var _E__=main[5];
              if(typeof _E__ === "number")
               {if(0 === _E__)return 0}
              else
               if(4 === _E__[0])
                {var t$0=_E__[1];
                 if(same(t,t$0))return 0;
                 throw [0,Assert_failure,_dx_]}
              throw [0,Assert_failure,_dw_]});
        caml_call1(main_fun,main$8);
        caml_call1(lhs_change_fun,lhs_change$0);
        caml_call1(rhs_scope_fun,rhs_scope$0);
        return caml_call1
                (all_nodes_created_on_rhs_fun,all_nodes_created_on_rhs$0)}
      function _E8_(x_018)
       {function _E9_(param){return _dy_}
        return sexp_of_t$21(function(param){return _dz_},_E9_,x_018)}
      return caml_call4(Base_Invariant[1],_dA_,t,_E8_,_E7_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$49);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Bind$0);
    var
     Incremental_Bind=
      [0,invariant$11,sexp_of_t$21,is_valid$0,iter_nodes_created_on_rhs];
    caml_register_global(1334,Incremental_Bind,"Incremental__Bind");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Expert);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$50);
    caml_call1(Expect_test_collector[5][1],cst_src_expert_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$51,cst$25);
    function sexp_of_t$22(of_a_001,param)
     {var
       child_003=param[1],
       index_007=param[3],
       arg_008=caml_call2(Uopt[1],Core[356],index_007),
       bnds_002=[0,[1,[0,_dB_,[0,arg_008,0]]],0];
      function _E5_(_E6_){return 0}
      var
       arg_006=caml_call1(Sexplib0_Sexp_conv[24],_E5_),
       bnds_002$0=[0,[1,[0,_dC_,[0,arg_006,0]]],bnds_002],
       arg_004=caml_call2(Node[1],of_a_001,child_003),
       bnds_002$1=[0,[1,[0,_dD_,[0,arg_004,0]]],bnds_002$0];
      return [1,bnds_002$1]}
    function sexp_of_packed_edge(param)
     {var res0_010=sexp_of_t$22(function(param){return _dE_},param);
      return [1,[0,_dF_,[0,res0_010,0]]]}
    function sexp_of_t$23(of_a_011,param)
     {var
       children_017=param[3],
       num_children_019=param[4],
       force_stale_021=param[5],
       num_invalid_children_023=param[6],
       will_fire_all_callbacks_025=param[7],
       arg_026=caml_call1(Core[305],will_fire_all_callbacks_025),
       bnds_012=[0,[1,[0,_dG_,[0,arg_026,0]]],0],
       arg_024=caml_call1(Core[356],num_invalid_children_023),
       bnds_012$0=[0,[1,[0,_dH_,[0,arg_024,0]]],bnds_012],
       arg_022=caml_call1(Core[305],force_stale_021),
       bnds_012$1=[0,[1,[0,_dI_,[0,arg_022,0]]],bnds_012$0],
       arg_020=caml_call1(Core[356],num_children_019),
       bnds_012$2=[0,[1,[0,_dJ_,[0,arg_020,0]]],bnds_012$1],
       _E0_=caml_call1(Uopt[1],sexp_of_packed_edge),
       arg_018=caml_call2(Uniform_array[10],_E0_,children_017),
       bnds_012$3=[0,[1,[0,_dK_,[0,arg_018,0]]],bnds_012$2];
      function _E1_(_E4_){return 0}
      var
       arg_016=caml_call1(Sexplib0_Sexp_conv[24],_E1_),
       bnds_012$4=[0,[1,[0,_dL_,[0,arg_016,0]]],bnds_012$3];
      function _E2_(_E3_){return 0}
      var
       arg_014=caml_call1(Sexplib0_Sexp_conv[24],_E2_),
       bnds_012$5=[0,[1,[0,_dM_,[0,arg_014,0]]],bnds_012$4];
      return [1,bnds_012$5]}
    function invariant$12(invariant_a,param)
     {var children=param[3],num_children=param[4];
      if
       (!
        caml_call2
         (symbol$0,num_children,caml_call1(Uniform_array[18],children)))
       throw [0,Assert_failure,_dO_];
      function _EZ_(expect,uopt)
       {var match=caml_call2(symbol$3,expect,num_children);
        if(match)
         {var
           r=caml_call1(Uopt[7],uopt),
           got=caml_call1(Uopt[7],r[3]),
           sexpifier=Core[356],
           equal=0,
           message=0,
           here=0,
           comparator=
            function(a_027,b_028){return caml_call2(Core[352],a_027,b_028)};
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$0,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        if(caml_call1(Uopt[5],uopt))return 0;
        throw [0,Assert_failure,_dN_]}
      return caml_call2(Uniform_array[28],children,_EZ_)}
    function invariant_about_num_invalid_ch(param)
     {var
       children=param[3],
       num_children=param[4],
       num_invalid_children=param[6];
      return function(is_necessary)
       {if(! is_necessary)
         {var
           sexpifier$0=Core[356],
           expect=0,
           equal$0=0,
           message$0=0,
           here$0=0,
           comparator$0=
            function(a_029,b_030){return caml_call2(Core[352],a_029,b_030)};
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$2,
                   sexpifier$0,
                   comparator$0,
                   here$0,
                   message$0,
                   equal$0,
                   expect,
                   num_invalid_children)}
        var count_invalid_children=[0,0],_EV_=num_children - 1 | 0,_EU_=0;
        if(_EV_ >= 0)
         {var i=_EU_;
          for(;;)
           {var
             _EX_=caml_call2(Uniform_array[19],children,i),
             r=caml_call1(Uopt[7],_EX_);
            if(1 - caml_call1(Node[3],r[1]))count_invalid_children[1]++;
            var _EY_=i + 1 | 0;
            if(_EV_ !== i){var i=_EY_;continue}
            break}}
        var
         sexpifier=Core[356],
         _EW_=count_invalid_children[1],
         equal=0,
         message=0,
         here=0;
        function comparator(a_031,b_032)
         {return caml_call2(Core[352],a_031,b_032)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$1,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 _EW_,
                 num_invalid_children)}}
    function create$5(f,on_observability_change)
     {return [0,f,on_observability_change,Uniform_array[14],0,0,0,1]}
    function make_stale(t){return t[5]?534011858:(t[5] = 1,17724)}
    function incr_invalid_children(t){t[6] = t[6] + 1 | 0;return 0}
    function decr_invalid_children(t){t[6] = t[6] - 1 | 0;return 0}
    function add_child_edge(t,packed_edge)
     {if(! caml_call1(Uopt[5],packed_edge[3]))throw [0,Assert_failure,_dP_];
      var _ER_=caml_call1(Uniform_array[18],t[3]);
      if(caml_call2(symbol,t[4],_ER_))
       {var
         _ES_=2 * caml_call1(Uniform_array[18],t[3]) | 0,
         new_max=caml_call2(include[93],2,_ES_);
        t[3] = caml_call2(Uniform_array[53],t[3],new_max)}
      var new_child_index=t[4];
      packed_edge[3] = caml_call1(Uopt[4],new_child_index);
      var _ET_=caml_call1(Uopt[4],packed_edge);
      caml_call3(Uniform_array[52],t[3],new_child_index,_ET_);
      t[4] = t[4] + 1 | 0;
      t[5] = 1;
      return new_child_index}
    function swap_children(t,child_index1,child_index2)
     {var
       _EP_=caml_call2(Uniform_array[19],t[3],child_index1),
       edge1=caml_call1(Uopt[7],_EP_),
       _EQ_=caml_call2(Uniform_array[19],t[3],child_index2),
       edge2=caml_call1(Uopt[7],_EQ_);
      edge1[3] = caml_call1(Uopt[4],child_index2);
      edge2[3] = caml_call1(Uopt[4],child_index1);
      return caml_call3(Uniform_array[21],t[3],child_index1,child_index2)}
    function last_child_edge_exn(t)
     {var
       last_index=t[4] - 1 | 0,
       _EO_=caml_call2(Uniform_array[19],t[3],last_index);
      return caml_call1(Uopt[7],_EO_)}
    function remove_last_child_edge_exn(t)
     {var
       last_index=t[4] - 1 | 0,
       packed_edge_opt=caml_call2(Uniform_array[19],t[3],last_index);
      caml_call3(Uniform_array[52],t[3],last_index,Uopt[3]);
      t[4] = last_index;
      t[5] = 1;
      if(! caml_call1(Uopt[6],packed_edge_opt))throw [0,Assert_failure,_dQ_];
      var match=caml_call1(Uopt[11],packed_edge_opt);
      match[3] = Uopt[3];
      return 0}
    function before_main_computation(t)
     {if(caml_call2(symbol$2,t[6],0))return 144245463;
      t[5] = 0;
      var will_fire_all_callbacks=t[7];
      t[7] = 0;
      if(will_fire_all_callbacks)
       {var _EK_=t[4] - 1 | 0,_EJ_=0;
        if(_EK_ >= 0)
         {var i=_EJ_;
          for(;;)
           {var
             _EL_=caml_call2(Uniform_array[19],t[3],i),
             r=caml_call1(Uopt[7],_EL_),
             _EM_=caml_call1(Uopt[7],r[1][4]);
            caml_call1(r[2],_EM_);
            var _EN_=i + 1 | 0;
            if(_EK_ !== i){var i=_EN_;continue}
            break}}}
      return 17724}
    function observability_change(t,is_now_observable)
     {caml_call1(t[2],is_now_observable);
      var _EH_=1 - is_now_observable,_EI_=_EH_?(t[7] = 1,t[6] = 0,0):_EH_;
      return _EI_}
    function run_edge_callback(t,child_index)
     {var _EC_=1 - t[7];
      if(_EC_)
       {var
         _ED_=caml_call2(Uniform_array[19],t[3],child_index),
         r=caml_call1(Uopt[7],_ED_),
         _EE_=caml_call1(Uopt[6],r[1][4]);
        if(_EE_)
         {var _EF_=caml_call1(Uopt[11],r[1][4]);return caml_call1(r[2],_EF_)}
        var _EG_=_EE_}
      else
       var _EG_=_EC_;
      return _EG_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$52);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Expert$0);
    var
     Incremental_Expert=
      [0,
       invariant$12,
       sexp_of_t$23,
       sexp_of_t$22,
       invariant_about_num_invalid_ch,
       create$5,
       make_stale,
       incr_invalid_children,
       decr_invalid_children,
       add_child_edge,
       swap_children,
       last_child_edge_exn,
       remove_last_child_edge_exn,
       before_main_computation,
       observability_change,
       run_edge_callback];
    caml_register_global(1335,Incremental_Expert,"Incremental__Expert");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Sexp_of);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$53);
    caml_call1(Expect_test_collector[5][1],cst_src_sexp_of_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$54,cst$26);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$55);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Sexp_of$0);
    var Incremental_Sexp_of=[0];
    caml_register_global(1336,Incremental_Sexp_of,"Incremental__Sexp_of");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Scope);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$56);
    caml_call1(Expect_test_collector[5][1],cst_src_scope_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$57,cst$27);
    var sexp_of_t$24=include$3[1],top=0;
    function is_top(param){return param?0:1}
    function invariant$13(param)
     {if(! param)return 0;
      var bind=param[1];
      function _Ez_(_EB_){return 0}
      return invariant$11(function(_EA_){return 0},_Ez_,bind)}
    function height(param)
     {if(! param)return -1;var bind=param[1];return bind[4][14]}
    function is_valid$1(param)
     {if(! param)return 1;var bind=param[1];return is_valid$0(bind)}
    function is_necessary$0(param)
     {if(! param)return 1;
      var bind=param[1];
      return caml_call1(Node[4],bind[1])}
    function add_node(t,node)
     {if(! caml_call2(Core[246],node[12],t))throw [0,Assert_failure,_dR_];
      if(! t)return 0;
      var bind=t[1];
      node[13] = bind[7];
      bind[7] = caml_call1(Uopt[4],node);
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$58);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Scope$0);
    var
     include$5=
      [0,
       sexp_of_t$24,
       invariant$13,
       top,
       is_top,
       height,
       is_valid$1,
       is_necessary$0,
       add_node];
    caml_register_global(1337,include$5,"Incremental__Scope");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Freeze);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$59);
    caml_call1(Expect_test_collector[5][1],cst_src_freeze_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$60,cst$28);
    function main$9(r){return r[1]}
    function _dS_(r,v){return [0,v,r[2],r[3]]}
    var
     _dT_=0,
     main$10=[0,function(param){return 0},cst_main$4,_dT_,main$9,_dS_];
    function sexp_of_t$25(of_a_001,param)
     {var child_005=param[2],main_003=param[1],bnds_002=0;
      function _Ex_(_Ey_){return 0}
      var
       arg_008=caml_call1(Sexplib0_Sexp_conv[24],_Ex_),
       bnds_002$0=[0,[1,[0,_dU_,[0,arg_008,0]]],bnds_002],
       arg_006=caml_call2(Node[1],of_a_001,child_005),
       bnds_002$1=[0,[1,[0,_dV_,[0,arg_006,0]]],bnds_002$0],
       arg_004=caml_call2(Node[1],of_a_001,main_003),
       bnds_002$2=[0,[1,[0,_dW_,[0,arg_004,0]]],bnds_002$1];
      return [1,bnds_002$2]}
    function invariant$14(invariant_a,t)
     {function _Eu_(param)
       {function f(main)
         {if(! is_top(main[12]))throw [0,Assert_failure,_dZ_];
          var _Ew_=main[5];
          if(typeof _Ew_ === "number")
           {if(0 === _Ew_)return 0}
          else
           switch(_Ew_[0])
            {case 5:return 0;
             case 7:
              var t$0=_Ew_[1];
              if(caml_call2(Core[246],t,t$0))return 0;
              throw [0,Assert_failure,_dY_]
             }
          throw [0,Assert_failure,_dX_]}
        var main_fun=caml_call2(Base_Invariant[2],t,f);
        caml_call1(main_fun,main$10);
        return 0}
      function _Ev_(x_009)
       {return sexp_of_t$25(function(param){return _d0_},x_009)}
      return caml_call4(Base_Invariant[1],_d1_,t,_Ev_,_Eu_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$61);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Freeze$0);
    var Incremental_Freeze=[0,invariant$14,sexp_of_t$25];
    caml_register_global(1338,Incremental_Freeze,"Incremental__Freeze");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_If_then_else);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$62);
    caml_call1(Expect_test_collector[5][1],cst_src_if_then_else_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$63,cst$29);
    function current_branch(r){return r[4]}
    function set_current_branch(r,v){r[4] = v;return 0}
    function test_change(r){return r[3]}
    function main$11(r){return r[1]}
    function _d2_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6]]}
    var
     _d3_=[0,set_current_branch],
     current_branch$0=
      [0,
       function(param){return 0},
       cst_current_branch,
       _d3_,
       current_branch,
       _d2_];
    function _d4_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6]]}
    var
     _d5_=0,
     test_change$0=
      [0,function(param){return 0},cst_test_change,_d5_,test_change,_d4_];
    function _d6_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6]]}
    var
     _d7_=0,
     main$12=[0,function(param){return 0},cst_main$5,_d7_,main$11,_d6_];
    function sexp_of_t$26(of_a_001,param)
     {var
       test_change_007=param[3],
       test_005=param[2],
       main_003=param[1],
       current_branch_009=param[4],
       else_013=param[6],
       then_011=param[5],
       arg_014=caml_call2(Node[1],of_a_001,else_013),
       bnds_002=[0,[1,[0,_d8_,[0,arg_014,0]]],0],
       arg_012=caml_call2(Node[1],of_a_001,then_011),
       bnds_002$0=[0,[1,[0,_d9_,[0,arg_012,0]]],bnds_002],
       _Et_=caml_call1(Node[1],of_a_001),
       arg_010=caml_call2(Uopt[1],_Et_,current_branch_009),
       bnds_002$1=[0,[1,[0,_d__,[0,arg_010,0]]],bnds_002$0],
       arg_008=caml_call2(Node[1],Core[518],test_change_007),
       bnds_002$2=[0,[1,[0,_d$_,[0,arg_008,0]]],bnds_002$1],
       arg_006=caml_call2(Node[1],Core[305],test_005),
       bnds_002$3=[0,[1,[0,_ea_,[0,arg_006,0]]],bnds_002$2],
       arg_004=caml_call2(Node[1],of_a_001,main_003),
       bnds_002$4=[0,[1,[0,_eb_,[0,arg_004,0]]],bnds_002$3];
      return [1,bnds_002$4]}
    function invariant$15(invariant_a,t)
     {function _Eo_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         current_branch_fun=
          check
           (function(current_branch)
             {var _Es_=caml_call1(Uopt[6],current_branch);
              if(! _Es_)return _Es_;
              var current_branch$0=caml_call1(Uopt[7],current_branch);
              if
               (!
                caml_call2(Core[246],current_branch$0,t[5])
                &&
                !
                caml_call2(Core[246],current_branch$0,t[6]))
               throw [0,Assert_failure,_ec_];
              return 0}),
         test_change_fun=
          check
           (function(test_change)
             {var _Er_=test_change[5];
              if(typeof _Er_ === "number")
               {if(0 === _Er_)return 0}
              else
               if(8 === _Er_[0])
                {var t$0=_Er_[1];
                 if(caml_call2(Core[247],t,t$0))return 0;
                 throw [0,Assert_failure,_ee_]}
              throw [0,Assert_failure,_ed_]}),
         main_fun=
          check
           (function(main)
             {var _Eq_=main[5];
              if(typeof _Eq_ === "number")
               {if(0 === _Eq_)return 0}
              else
               if(9 === _Eq_[0])
                {var t$0=_Eq_[1];
                 if(caml_call2(Core[246],t,t$0))return 0;
                 throw [0,Assert_failure,_ef_]}
              return 0});
        caml_call1(main_fun,main$12);
        caml_call1(test_change_fun,test_change$0);
        caml_call1(current_branch_fun,current_branch$0);
        return 0}
      function _Ep_(x_015)
       {return sexp_of_t$26(function(param){return _eg_},x_015)}
      return caml_call4(Base_Invariant[1],_eh_,t,_Ep_,_Eo_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$64);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_If_then_else$0);
    var Incremental_If_then_else=[0,invariant$15,sexp_of_t$26];
    caml_register_global
     (1339,Incremental_If_then_else,"Incremental__If_then_else");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Join);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$65);
    caml_call1(Expect_test_collector[5][1],cst_src_join_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$66,cst$30);
    function lhs_change$1(r){return r[3]}
    function main$13(r){return r[1]}
    function _ei_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _ej_=0,
     lhs_change$2=
      [0,function(param){return 0},cst_lhs_change$0,_ej_,lhs_change$1,_ei_];
    function _ek_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _el_=0,
     main$14=[0,function(param){return 0},cst_main$6,_el_,main$13,_ek_];
    function sexp_of_t$27(of_a_001,param)
     {var
       lhs_change_007=param[3],
       lhs_005=param[2],
       main_003=param[1],
       rhs_009=param[4],
       _Em_=caml_call1(Node[1],of_a_001),
       arg_010=caml_call2(Uopt[1],_Em_,rhs_009),
       bnds_002=[0,[1,[0,_em_,[0,arg_010,0]]],0],
       arg_008=caml_call2(Node[1],Core[518],lhs_change_007),
       bnds_002$0=[0,[1,[0,_en_,[0,arg_008,0]]],bnds_002],
       _En_=caml_call1(Node[1],of_a_001),
       arg_006=caml_call2(Node[1],_En_,lhs_005),
       bnds_002$1=[0,[1,[0,_eo_,[0,arg_006,0]]],bnds_002$0],
       arg_004=caml_call2(Node[1],of_a_001,main_003),
       bnds_002$2=[0,[1,[0,_ep_,[0,arg_004,0]]],bnds_002$1];
      return [1,bnds_002$2]}
    function same$0(t1,t2){return caml_call2(Core[247],t1,t2)}
    function invariant$16(invariant_a,t)
     {function _Ei_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         lhs_change_fun=
          check
           (function(lhs_change)
             {var _El_=lhs_change[5];
              if(typeof _El_ === "number")
               {if(0 === _El_)return 0}
              else
               if(10 === _El_[0])
                {var t$0=_El_[1];
                 if(same$0(t,t$0))return 0;
                 throw [0,Assert_failure,_er_]}
              throw [0,Assert_failure,_eq_]}),
         main_fun=
          check
           (function(main)
             {var _Ek_=main[5];
              if(typeof _Ek_ === "number")
               {if(0 === _Ek_)return 0}
              else
               if(11 === _Ek_[0])
                {var t$0=_Ek_[1];
                 if(same$0(t,t$0))return 0;
                 throw [0,Assert_failure,_et_]}
              throw [0,Assert_failure,_es_]});
        caml_call1(main_fun,main$14);
        caml_call1(lhs_change_fun,lhs_change$2);
        return 0}
      function _Ej_(x_011)
       {return sexp_of_t$27(function(param){return _eu_},x_011)}
      return caml_call4(Base_Invariant[1],_ev_,t,_Ej_,_Ei_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$67);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Join$0);
    var Incremental_Join=[0,invariant$16,sexp_of_t$27];
    caml_register_global(1340,Incremental_Join,"Incremental__Join");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Snapshot);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$68);
    caml_call1(Expect_test_collector[5][1],cst_src_snapshot_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$69,cst$31);
    function before(r){return r[3]}
    function main$15(r){return r[1]}
    function _ew_(r,v){return [0,r[1],r[2],v,r[4],r[5]]}
    var
     _ex_=0,
     before$0=[0,function(param){return 0},cst_before,_ex_,before,_ew_];
    function _ey_(r,v){return [0,v,r[2],r[3],r[4],r[5]]}
    var
     _ez_=0,
     main$16=[0,function(param){return 0},cst_main$7,_ez_,main$15,_ey_];
    function sexp_of_t$28(of_a_001,param)
     {var
       clock_011=param[5],
       value_at_009=param[4],
       before_007=param[3],
       at_005=param[2],
       main_003=param[1],
       arg_012=caml_call1(Sexplib0_Sexp_conv[23],clock_011),
       bnds_002=[0,[1,[0,_eA_,[0,arg_012,0]]],0],
       arg_010=caml_call2(Node[1],of_a_001,value_at_009),
       bnds_002$0=[0,[1,[0,_eB_,[0,arg_010,0]]],bnds_002],
       arg_008=caml_call1(of_a_001,before_007),
       bnds_002$1=[0,[1,[0,_eC_,[0,arg_008,0]]],bnds_002$0],
       arg_006=caml_call1(Time_ns[119],at_005),
       bnds_002$2=[0,[1,[0,_eD_,[0,arg_006,0]]],bnds_002$1],
       arg_004=caml_call2(Node[1],of_a_001,main_003),
       bnds_002$3=[0,[1,[0,_eE_,[0,arg_004,0]]],bnds_002$2];
      return [1,bnds_002$3]}
    function invariant$17(invariant_a,t)
     {function _Ef_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         before_fun=check(invariant_a),
         main_fun=
          check
           (function(main)
             {if(! is_top(main[12]))throw [0,Assert_failure,_eH_];
              var _Eh_=main[5];
              if(typeof _Eh_ === "number")
               {if(0 === _Eh_)return 0}
              else
               switch(_Eh_[0])
                {case 5:return 0;
                 case 13:
                  var t$0=_Eh_[1];
                  if(caml_call2(Core[246],t,t$0))return 0;
                  throw [0,Assert_failure,_eG_]
                 }
              throw [0,Assert_failure,_eF_]});
        caml_call1(main_fun,main$16);
        caml_call1(before_fun,before$0);
        return 0}
      function _Eg_(x_013)
       {return sexp_of_t$28(function(param){return _eI_},x_013)}
      return caml_call4(Base_Invariant[1],_eJ_,t,_Eg_,_Ef_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$70);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Snapshot$0);
    var Incremental_Snapshot=[0,invariant$17,sexp_of_t$28];
    caml_register_global(1341,Incremental_Snapshot,"Incremental__Snapshot");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Kind);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$71);
    caml_call1(Expect_test_collector[5][1],cst_src_kind_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$72,cst$32);
    function sexp_of_t$29(of_a_001,param)
     {if(typeof param === "number")return 0 === param?_eK_:_eL_;
      switch(param[0])
       {case 0:
         var
          arg0_002=param[1],
          res0_003=
           sexp_of_t$18(function(param){return _eM_},of_a_001,arg0_002);
         return [1,[0,_eN_,[0,res0_003,0]]];
        case 1:
         var arg0_004=param[1],res0_005=sexp_of_t$19(arg0_004);
         return [1,[0,_eO_,[0,res0_005,0]]];
        case 2:
         var arg0_006=param[1],res0_007=sexp_of_t$20(arg0_006);
         return [1,[0,_eP_,[0,res0_007,0]]];
        case 3:
         var
          arg0_008=param[1],
          _BU_=function(param){return _eQ_},
          res0_009=sexp_of_t$21(function(param){return _eR_},_BU_,arg0_008);
         return [1,[0,_eS_,[0,res0_009,0]]];
        case 4:
         var
          arg0_010=param[1],
          res0_011=
           sexp_of_t$21(function(param){return _eT_},of_a_001,arg0_010);
         return [1,[0,_eU_,[0,res0_011,0]]];
        case 5:
         var arg0_012=param[1],res0_013=caml_call1(of_a_001,arg0_012);
         return [1,[0,_eV_,[0,res0_013,0]]];
        case 6:
         var arg0_014=param[1],res0_015=sexp_of_t$23(of_a_001,arg0_014);
         return [1,[0,_eW_,[0,res0_015,0]]];
        case 7:
         var arg0_016=param[1],res0_017=sexp_of_t$25(of_a_001,arg0_016);
         return [1,[0,_eX_,[0,res0_017,0]]];
        case 8:
         var
          arg0_018=param[1],
          res0_019=sexp_of_t$26(function(param){return _eY_},arg0_018);
         return [1,[0,_eZ_,[0,res0_019,0]]];
        case 9:
         var arg0_020=param[1],res0_021=sexp_of_t$26(of_a_001,arg0_020);
         return [1,[0,_e0_,[0,res0_021,0]]];
        case 10:
         var
          arg0_022=param[1],
          res0_023=sexp_of_t$27(function(param){return _e1_},arg0_022);
         return [1,[0,_e2_,[0,res0_023,0]]];
        case 11:
         var arg0_024=param[1],res0_025=sexp_of_t$27(of_a_001,arg0_024);
         return [1,[0,_e3_,[0,res0_025,0]]];
        case 12:
         var
          arg1_027=param[2],
          _BV_=function(_Ed_){return 0},
          res0_028=caml_call1(Sexplib0_Sexp_conv[24],_BV_),
          _BW_=function(param){return _e4_},
          res1_029=caml_call2(Node[1],_BW_,arg1_027);
         return [1,[0,_e5_,[0,res0_028,[0,res1_029,0]]]];
        case 13:
         var arg0_030=param[1],res0_031=sexp_of_t$28(of_a_001,arg0_030);
         return [1,[0,_e6_,[0,res0_031,0]]];
        case 14:
         var arg0_032=param[1],res0_033=sexp_of_t$17(of_a_001,arg0_032);
         return [1,[0,_e7_,[0,res0_033,0]]];
        case 15:
         var
          arg0_034=param[1],
          res0_035=
           sexp_of_t$15(function(param){return _e8_},of_a_001,arg0_034);
         return [1,[0,_e9_,[0,res0_035,0]]];
        case 16:
         var arg0_036=param[1],res0_037=sexp_of_t$12(of_a_001,arg0_036);
         return [1,[0,_e__,[0,res0_037,0]]];
        case 17:
         var
          arg2_040=param[3],
          arg1_039=param[2],
          _BX_=function(_Ec_){return 0},
          res0_041=caml_call1(Sexplib0_Sexp_conv[24],_BX_),
          _BY_=function(param){return _e$_},
          res1_042=caml_call2(Node[1],_BY_,arg1_039),
          _BZ_=function(param){return _fa_},
          res2_043=caml_call2(Node[1],_BZ_,arg2_040);
         return [1,[0,_fb_,[0,res0_041,[0,res1_042,[0,res2_043,0]]]]];
        case 18:
         var
          arg3_047=param[4],
          arg2_046=param[3],
          arg1_045=param[2],
          _B0_=function(_Eb_){return 0},
          res0_048=caml_call1(Sexplib0_Sexp_conv[24],_B0_),
          _B1_=function(param){return _fc_},
          res1_049=caml_call2(Node[1],_B1_,arg1_045),
          _B2_=function(param){return _fd_},
          res2_050=caml_call2(Node[1],_B2_,arg2_046),
          _B3_=function(param){return _fe_},
          res3_051=caml_call2(Node[1],_B3_,arg3_047);
         return [1,
                 [0,
                  _ff_,
                  [0,res0_048,[0,res1_049,[0,res2_050,[0,res3_051,0]]]]]];
        case 19:
         var
          arg4_056=param[5],
          arg3_055=param[4],
          arg2_054=param[3],
          arg1_053=param[2],
          _B4_=function(_Ea_){return 0},
          res0_057=caml_call1(Sexplib0_Sexp_conv[24],_B4_),
          _B5_=function(param){return _fg_},
          res1_058=caml_call2(Node[1],_B5_,arg1_053),
          _B6_=function(param){return _fh_},
          res2_059=caml_call2(Node[1],_B6_,arg2_054),
          _B7_=function(param){return _fi_},
          res3_060=caml_call2(Node[1],_B7_,arg3_055),
          _B8_=function(param){return _fj_},
          res4_061=caml_call2(Node[1],_B8_,arg4_056);
         return [1,
                 [0,
                  _fk_,
                  [0,
                   res0_057,
                   [0,res1_058,[0,res2_059,[0,res3_060,[0,res4_061,0]]]]]]];
        case 20:
         var
          arg5_067=param[6],
          arg4_066=param[5],
          arg3_065=param[4],
          arg2_064=param[3],
          arg1_063=param[2],
          _B9_=function(_D$_){return 0},
          res0_068=caml_call1(Sexplib0_Sexp_conv[24],_B9_),
          _B__=function(param){return _fl_},
          res1_069=caml_call2(Node[1],_B__,arg1_063),
          _B$_=function(param){return _fm_},
          res2_070=caml_call2(Node[1],_B$_,arg2_064),
          _Ca_=function(param){return _fn_},
          res3_071=caml_call2(Node[1],_Ca_,arg3_065),
          _Cb_=function(param){return _fo_},
          res4_072=caml_call2(Node[1],_Cb_,arg4_066),
          _Cc_=function(param){return _fp_},
          res5_073=caml_call2(Node[1],_Cc_,arg5_067);
         return [1,
                 [0,
                  _fq_,
                  [0,
                   res0_068,
                   [0,
                    res1_069,
                    [0,res2_070,[0,res3_071,[0,res4_072,[0,res5_073,0]]]]]]]];
        case 21:
         var
          arg6_080=param[7],
          arg5_079=param[6],
          arg4_078=param[5],
          arg3_077=param[4],
          arg2_076=param[3],
          arg1_075=param[2],
          _Cd_=function(_D__){return 0},
          res0_081=caml_call1(Sexplib0_Sexp_conv[24],_Cd_),
          _Ce_=function(param){return _fr_},
          res1_082=caml_call2(Node[1],_Ce_,arg1_075),
          _Cf_=function(param){return _fs_},
          res2_083=caml_call2(Node[1],_Cf_,arg2_076),
          _Cg_=function(param){return _ft_},
          res3_084=caml_call2(Node[1],_Cg_,arg3_077),
          _Ch_=function(param){return _fu_},
          res4_085=caml_call2(Node[1],_Ch_,arg4_078),
          _Ci_=function(param){return _fv_},
          res5_086=caml_call2(Node[1],_Ci_,arg5_079),
          _Cj_=function(param){return _fw_},
          res6_087=caml_call2(Node[1],_Cj_,arg6_080);
         return [1,
                 [0,
                  _fx_,
                  [0,
                   res0_081,
                   [0,
                    res1_082,
                    [0,
                     res2_083,
                     [0,res3_084,[0,res4_085,[0,res5_086,[0,res6_087,0]]]]]]]]];
        case 22:
         var
          arg7_095=param[8],
          arg6_094=param[7],
          arg5_093=param[6],
          arg4_092=param[5],
          arg3_091=param[4],
          arg2_090=param[3],
          arg1_089=param[2],
          _Ck_=function(_D9_){return 0},
          res0_096=caml_call1(Sexplib0_Sexp_conv[24],_Ck_),
          _Cl_=function(param){return _fy_},
          res1_097=caml_call2(Node[1],_Cl_,arg1_089),
          _Cm_=function(param){return _fz_},
          res2_098=caml_call2(Node[1],_Cm_,arg2_090),
          _Cn_=function(param){return _fA_},
          res3_099=caml_call2(Node[1],_Cn_,arg3_091),
          _Co_=function(param){return _fB_},
          res4_100=caml_call2(Node[1],_Co_,arg4_092),
          _Cp_=function(param){return _fC_},
          res5_101=caml_call2(Node[1],_Cp_,arg5_093),
          _Cq_=function(param){return _fD_},
          res6_102=caml_call2(Node[1],_Cq_,arg6_094),
          _Cr_=function(param){return _fE_},
          res7_103=caml_call2(Node[1],_Cr_,arg7_095);
         return [1,
                 [0,
                  _fF_,
                  [0,
                   res0_096,
                   [0,
                    res1_097,
                    [0,
                     res2_098,
                     [0,
                      res3_099,
                      [0,res4_100,[0,res5_101,[0,res6_102,[0,res7_103,0]]]]]]]]]];
        case 23:
         var
          arg8_112=param[9],
          arg7_111=param[8],
          arg6_110=param[7],
          arg5_109=param[6],
          arg4_108=param[5],
          arg3_107=param[4],
          arg2_106=param[3],
          arg1_105=param[2],
          _Cs_=function(_D8_){return 0},
          res0_113=caml_call1(Sexplib0_Sexp_conv[24],_Cs_),
          _Ct_=function(param){return _fG_},
          res1_114=caml_call2(Node[1],_Ct_,arg1_105),
          _Cu_=function(param){return _fH_},
          res2_115=caml_call2(Node[1],_Cu_,arg2_106),
          _Cv_=function(param){return _fI_},
          res3_116=caml_call2(Node[1],_Cv_,arg3_107),
          _Cw_=function(param){return _fJ_},
          res4_117=caml_call2(Node[1],_Cw_,arg4_108),
          _Cx_=function(param){return _fK_},
          res5_118=caml_call2(Node[1],_Cx_,arg5_109),
          _Cy_=function(param){return _fL_},
          res6_119=caml_call2(Node[1],_Cy_,arg6_110),
          _Cz_=function(param){return _fM_},
          res7_120=caml_call2(Node[1],_Cz_,arg7_111),
          _CA_=function(param){return _fN_},
          res8_121=caml_call2(Node[1],_CA_,arg8_112);
         return [1,
                 [0,
                  _fO_,
                  [0,
                   res0_113,
                   [0,
                    res1_114,
                    [0,
                     res2_115,
                     [0,
                      res3_116,
                      [0,
                       res4_117,
                       [0,res5_118,[0,res6_119,[0,res7_120,[0,res8_121,0]]]]]]]]]]];
        case 24:
         var
          arg9_131=param[10],
          arg8_130=param[9],
          arg7_129=param[8],
          arg6_128=param[7],
          arg5_127=param[6],
          arg4_126=param[5],
          arg3_125=param[4],
          arg2_124=param[3],
          arg1_123=param[2],
          _CB_=function(_D7_){return 0},
          res0_132=caml_call1(Sexplib0_Sexp_conv[24],_CB_),
          _CC_=function(param){return _fP_},
          res1_133=caml_call2(Node[1],_CC_,arg1_123),
          _CD_=function(param){return _fQ_},
          res2_134=caml_call2(Node[1],_CD_,arg2_124),
          _CE_=function(param){return _fR_},
          res3_135=caml_call2(Node[1],_CE_,arg3_125),
          _CF_=function(param){return _fS_},
          res4_136=caml_call2(Node[1],_CF_,arg4_126),
          _CG_=function(param){return _fT_},
          res5_137=caml_call2(Node[1],_CG_,arg5_127),
          _CH_=function(param){return _fU_},
          res6_138=caml_call2(Node[1],_CH_,arg6_128),
          _CI_=function(param){return _fV_},
          res7_139=caml_call2(Node[1],_CI_,arg7_129),
          _CJ_=function(param){return _fW_},
          res8_140=caml_call2(Node[1],_CJ_,arg8_130),
          _CK_=function(param){return _fX_},
          res9_141=caml_call2(Node[1],_CK_,arg9_131);
         return [1,
                 [0,
                  _fY_,
                  [0,
                   res0_132,
                   [0,
                    res1_133,
                    [0,
                     res2_134,
                     [0,
                      res3_135,
                      [0,
                       res4_136,
                       [0,
                        res5_137,
                        [0,res6_138,[0,res7_139,[0,res8_140,[0,res9_141,0]]]]]]]]]]]];
        case 25:
         var
          arg10_152=param[11],
          arg9_151=param[10],
          arg8_150=param[9],
          arg7_149=param[8],
          arg6_148=param[7],
          arg5_147=param[6],
          arg4_146=param[5],
          arg3_145=param[4],
          arg2_144=param[3],
          arg1_143=param[2],
          _CL_=function(_D6_){return 0},
          res0_153=caml_call1(Sexplib0_Sexp_conv[24],_CL_),
          _CM_=function(param){return _fZ_},
          res1_154=caml_call2(Node[1],_CM_,arg1_143),
          _CN_=function(param){return _f0_},
          res2_155=caml_call2(Node[1],_CN_,arg2_144),
          _CO_=function(param){return _f1_},
          res3_156=caml_call2(Node[1],_CO_,arg3_145),
          _CP_=function(param){return _f2_},
          res4_157=caml_call2(Node[1],_CP_,arg4_146),
          _CQ_=function(param){return _f3_},
          res5_158=caml_call2(Node[1],_CQ_,arg5_147),
          _CR_=function(param){return _f4_},
          res6_159=caml_call2(Node[1],_CR_,arg6_148),
          _CS_=function(param){return _f5_},
          res7_160=caml_call2(Node[1],_CS_,arg7_149),
          _CT_=function(param){return _f6_},
          res8_161=caml_call2(Node[1],_CT_,arg8_150),
          _CU_=function(param){return _f7_},
          res9_162=caml_call2(Node[1],_CU_,arg9_151),
          _CV_=function(param){return _f8_},
          res10_163=caml_call2(Node[1],_CV_,arg10_152);
         return [1,
                 [0,
                  _f9_,
                  [0,
                   res0_153,
                   [0,
                    res1_154,
                    [0,
                     res2_155,
                     [0,
                      res3_156,
                      [0,
                       res4_157,
                       [0,
                        res5_158,
                        [0,
                         res6_159,
                         [0,res7_160,[0,res8_161,[0,res9_162,[0,res10_163,0]]]]]]]]]]]]];
        case 26:
         var
          arg11_175=param[12],
          arg10_174=param[11],
          arg9_173=param[10],
          arg8_172=param[9],
          arg7_171=param[8],
          arg6_170=param[7],
          arg5_169=param[6],
          arg4_168=param[5],
          arg3_167=param[4],
          arg2_166=param[3],
          arg1_165=param[2],
          _CW_=function(_D5_){return 0},
          res0_176=caml_call1(Sexplib0_Sexp_conv[24],_CW_),
          _CX_=function(param){return _f__},
          res1_177=caml_call2(Node[1],_CX_,arg1_165),
          _CY_=function(param){return _f$_},
          res2_178=caml_call2(Node[1],_CY_,arg2_166),
          _CZ_=function(param){return _ga_},
          res3_179=caml_call2(Node[1],_CZ_,arg3_167),
          _C0_=function(param){return _gb_},
          res4_180=caml_call2(Node[1],_C0_,arg4_168),
          _C1_=function(param){return _gc_},
          res5_181=caml_call2(Node[1],_C1_,arg5_169),
          _C2_=function(param){return _gd_},
          res6_182=caml_call2(Node[1],_C2_,arg6_170),
          _C3_=function(param){return _ge_},
          res7_183=caml_call2(Node[1],_C3_,arg7_171),
          _C4_=function(param){return _gf_},
          res8_184=caml_call2(Node[1],_C4_,arg8_172),
          _C5_=function(param){return _gg_},
          res9_185=caml_call2(Node[1],_C5_,arg9_173),
          _C6_=function(param){return _gh_},
          res10_186=caml_call2(Node[1],_C6_,arg10_174),
          _C7_=function(param){return _gi_},
          res11_187=caml_call2(Node[1],_C7_,arg11_175);
         return [1,
                 [0,
                  _gj_,
                  [0,
                   res0_176,
                   [0,
                    res1_177,
                    [0,
                     res2_178,
                     [0,
                      res3_179,
                      [0,
                       res4_180,
                       [0,
                        res5_181,
                        [0,
                         res6_182,
                         [0,
                          res7_183,
                          [0,res8_184,[0,res9_185,[0,res10_186,[0,res11_187,0]]]]]]]]]]]]]];
        case 27:
         var
          arg12_200=param[13],
          arg11_199=param[12],
          arg10_198=param[11],
          arg9_197=param[10],
          arg8_196=param[9],
          arg7_195=param[8],
          arg6_194=param[7],
          arg5_193=param[6],
          arg4_192=param[5],
          arg3_191=param[4],
          arg2_190=param[3],
          arg1_189=param[2],
          _C8_=function(_D4_){return 0},
          res0_201=caml_call1(Sexplib0_Sexp_conv[24],_C8_),
          _C9_=function(param){return _gk_},
          res1_202=caml_call2(Node[1],_C9_,arg1_189),
          _C__=function(param){return _gl_},
          res2_203=caml_call2(Node[1],_C__,arg2_190),
          _C$_=function(param){return _gm_},
          res3_204=caml_call2(Node[1],_C$_,arg3_191),
          _Da_=function(param){return _gn_},
          res4_205=caml_call2(Node[1],_Da_,arg4_192),
          _Db_=function(param){return _go_},
          res5_206=caml_call2(Node[1],_Db_,arg5_193),
          _Dc_=function(param){return _gp_},
          res6_207=caml_call2(Node[1],_Dc_,arg6_194),
          _Dd_=function(param){return _gq_},
          res7_208=caml_call2(Node[1],_Dd_,arg7_195),
          _De_=function(param){return _gr_},
          res8_209=caml_call2(Node[1],_De_,arg8_196),
          _Df_=function(param){return _gs_},
          res9_210=caml_call2(Node[1],_Df_,arg9_197),
          _Dg_=function(param){return _gt_},
          res10_211=caml_call2(Node[1],_Dg_,arg10_198),
          _Dh_=function(param){return _gu_},
          res11_212=caml_call2(Node[1],_Dh_,arg11_199),
          _Di_=function(param){return _gv_},
          res12_213=caml_call2(Node[1],_Di_,arg12_200);
         return [1,
                 [0,
                  _gw_,
                  [0,
                   res0_201,
                   [0,
                    res1_202,
                    [0,
                     res2_203,
                     [0,
                      res3_204,
                      [0,
                       res4_205,
                       [0,
                        res5_206,
                        [0,
                         res6_207,
                         [0,
                          res7_208,
                          [0,
                           res8_209,
                           [0,res9_210,[0,res10_211,[0,res11_212,[0,res12_213,0]]]]]]]]]]]]]]];
        case 28:
         var
          arg13_227=param[14],
          arg12_226=param[13],
          arg11_225=param[12],
          arg10_224=param[11],
          arg9_223=param[10],
          arg8_222=param[9],
          arg7_221=param[8],
          arg6_220=param[7],
          arg5_219=param[6],
          arg4_218=param[5],
          arg3_217=param[4],
          arg2_216=param[3],
          arg1_215=param[2],
          _Dj_=function(_D3_){return 0},
          res0_228=caml_call1(Sexplib0_Sexp_conv[24],_Dj_),
          _Dk_=function(param){return _gx_},
          res1_229=caml_call2(Node[1],_Dk_,arg1_215),
          _Dl_=function(param){return _gy_},
          res2_230=caml_call2(Node[1],_Dl_,arg2_216),
          _Dm_=function(param){return _gz_},
          res3_231=caml_call2(Node[1],_Dm_,arg3_217),
          _Dn_=function(param){return _gA_},
          res4_232=caml_call2(Node[1],_Dn_,arg4_218),
          _Do_=function(param){return _gB_},
          res5_233=caml_call2(Node[1],_Do_,arg5_219),
          _Dp_=function(param){return _gC_},
          res6_234=caml_call2(Node[1],_Dp_,arg6_220),
          _Dq_=function(param){return _gD_},
          res7_235=caml_call2(Node[1],_Dq_,arg7_221),
          _Dr_=function(param){return _gE_},
          res8_236=caml_call2(Node[1],_Dr_,arg8_222),
          _Ds_=function(param){return _gF_},
          res9_237=caml_call2(Node[1],_Ds_,arg9_223),
          _Dt_=function(param){return _gG_},
          res10_238=caml_call2(Node[1],_Dt_,arg10_224),
          _Du_=function(param){return _gH_},
          res11_239=caml_call2(Node[1],_Du_,arg11_225),
          _Dv_=function(param){return _gI_},
          res12_240=caml_call2(Node[1],_Dv_,arg12_226),
          _Dw_=function(param){return _gJ_},
          res13_241=caml_call2(Node[1],_Dw_,arg13_227);
         return [1,
                 [0,
                  _gK_,
                  [0,
                   res0_228,
                   [0,
                    res1_229,
                    [0,
                     res2_230,
                     [0,
                      res3_231,
                      [0,
                       res4_232,
                       [0,
                        res5_233,
                        [0,
                         res6_234,
                         [0,
                          res7_235,
                          [0,
                           res8_236,
                           [0,
                            res9_237,
                            [0,res10_238,[0,res11_239,[0,res12_240,[0,res13_241,0]]]]]]]]]]]]]]]];
        case 29:
         var
          arg14_256=param[15],
          arg13_255=param[14],
          arg12_254=param[13],
          arg11_253=param[12],
          arg10_252=param[11],
          arg9_251=param[10],
          arg8_250=param[9],
          arg7_249=param[8],
          arg6_248=param[7],
          arg5_247=param[6],
          arg4_246=param[5],
          arg3_245=param[4],
          arg2_244=param[3],
          arg1_243=param[2],
          _Dx_=function(_D2_){return 0},
          res0_257=caml_call1(Sexplib0_Sexp_conv[24],_Dx_),
          _Dy_=function(param){return _gL_},
          res1_258=caml_call2(Node[1],_Dy_,arg1_243),
          _Dz_=function(param){return _gM_},
          res2_259=caml_call2(Node[1],_Dz_,arg2_244),
          _DA_=function(param){return _gN_},
          res3_260=caml_call2(Node[1],_DA_,arg3_245),
          _DB_=function(param){return _gO_},
          res4_261=caml_call2(Node[1],_DB_,arg4_246),
          _DC_=function(param){return _gP_},
          res5_262=caml_call2(Node[1],_DC_,arg5_247),
          _DD_=function(param){return _gQ_},
          res6_263=caml_call2(Node[1],_DD_,arg6_248),
          _DE_=function(param){return _gR_},
          res7_264=caml_call2(Node[1],_DE_,arg7_249),
          _DF_=function(param){return _gS_},
          res8_265=caml_call2(Node[1],_DF_,arg8_250),
          _DG_=function(param){return _gT_},
          res9_266=caml_call2(Node[1],_DG_,arg9_251),
          _DH_=function(param){return _gU_},
          res10_267=caml_call2(Node[1],_DH_,arg10_252),
          _DI_=function(param){return _gV_},
          res11_268=caml_call2(Node[1],_DI_,arg11_253),
          _DJ_=function(param){return _gW_},
          res12_269=caml_call2(Node[1],_DJ_,arg12_254),
          _DK_=function(param){return _gX_},
          res13_270=caml_call2(Node[1],_DK_,arg13_255),
          _DL_=function(param){return _gY_},
          res14_271=caml_call2(Node[1],_DL_,arg14_256);
         return [1,
                 [0,
                  _gZ_,
                  [0,
                   res0_257,
                   [0,
                    res1_258,
                    [0,
                     res2_259,
                     [0,
                      res3_260,
                      [0,
                       res4_261,
                       [0,
                        res5_262,
                        [0,
                         res6_263,
                         [0,
                          res7_264,
                          [0,
                           res8_265,
                           [0,
                            res9_266,
                            [0,
                             res10_267,
                             [0,res11_268,[0,res12_269,[0,res13_270,[0,res14_271,0]]]]]]]]]]]]]]]]];
        default:
         var
          arg15_287=param[16],
          arg14_286=param[15],
          arg13_285=param[14],
          arg12_284=param[13],
          arg11_283=param[12],
          arg10_282=param[11],
          arg9_281=param[10],
          arg8_280=param[9],
          arg7_279=param[8],
          arg6_278=param[7],
          arg5_277=param[6],
          arg4_276=param[5],
          arg3_275=param[4],
          arg2_274=param[3],
          arg1_273=param[2],
          _DM_=function(_Ee_){return 0},
          res0_288=caml_call1(Sexplib0_Sexp_conv[24],_DM_),
          _DN_=function(param){return _g0_},
          res1_289=caml_call2(Node[1],_DN_,arg1_273),
          _DO_=function(param){return _g1_},
          res2_290=caml_call2(Node[1],_DO_,arg2_274),
          _DP_=function(param){return _g2_},
          res3_291=caml_call2(Node[1],_DP_,arg3_275),
          _DQ_=function(param){return _g3_},
          res4_292=caml_call2(Node[1],_DQ_,arg4_276),
          _DR_=function(param){return _g4_},
          res5_293=caml_call2(Node[1],_DR_,arg5_277),
          _DS_=function(param){return _g5_},
          res6_294=caml_call2(Node[1],_DS_,arg6_278),
          _DT_=function(param){return _g6_},
          res7_295=caml_call2(Node[1],_DT_,arg7_279),
          _DU_=function(param){return _g7_},
          res8_296=caml_call2(Node[1],_DU_,arg8_280),
          _DV_=function(param){return _g8_},
          res9_297=caml_call2(Node[1],_DV_,arg9_281),
          _DW_=function(param){return _g9_},
          res10_298=caml_call2(Node[1],_DW_,arg10_282),
          _DX_=function(param){return _g__},
          res11_299=caml_call2(Node[1],_DX_,arg11_283),
          _DY_=function(param){return _g$_},
          res12_300=caml_call2(Node[1],_DY_,arg12_284),
          _DZ_=function(param){return _ha_},
          res13_301=caml_call2(Node[1],_DZ_,arg13_285),
          _D0_=function(param){return _hb_},
          res14_302=caml_call2(Node[1],_D0_,arg14_286),
          _D1_=function(param){return _hc_},
          res15_303=caml_call2(Node[1],_D1_,arg15_287);
         return [1,
                 [0,
                  _hd_,
                  [0,
                   res0_288,
                   [0,
                    res1_289,
                    [0,
                     res2_290,
                     [0,
                      res3_291,
                      [0,
                       res4_292,
                       [0,
                        res5_293,
                        [0,
                         res6_294,
                         [0,
                          res7_295,
                          [0,
                           res8_296,
                           [0,
                            res9_297,
                            [0,
                             res10_298,
                             [0,
                              res11_299,
                              [0,res12_300,[0,res13_301,[0,res14_302,[0,res15_303,0]]]]]]]]]]]]]]]]]]}}
    function name(param)
     {if(typeof param === "number")
       return 0 === param?cst_Invalid:cst_Uninitialized;
      switch(param[0])
       {case 0:return cst_Array_fold;
        case 1:return cst_At;
        case 2:return cst_At_intervals;
        case 3:return cst_Bind_lhs_change;
        case 4:return cst_Bind_main;
        case 5:return cst_Const;
        case 6:return cst_Expert;
        case 7:return cst_Freeze;
        case 8:return cst_If_test_change;
        case 9:return cst_If_then_else;
        case 10:return cst_Join_lhs_change;
        case 11:return cst_Join_main;
        case 12:return cst_Map;
        case 13:return cst_Snapshot;
        case 14:return cst_Step_function;
        case 15:return cst_Unordered_array_fold;
        case 16:return cst_Var;
        case 17:return cst_Map2;
        case 18:return cst_Map3;
        case 19:return cst_Map4;
        case 20:return cst_Map5;
        case 21:return cst_Map6;
        case 22:return cst_Map7;
        case 23:return cst_Map8;
        case 24:return cst_Map9;
        case 25:return cst_Map10;
        case 26:return cst_Map11;
        case 27:return cst_Map12;
        case 28:return cst_Map13;
        case 29:return cst_Map14;
        default:return cst_Map15}}
    function invariant$18(invariant_a,t)
     {if(typeof t === "number")return 0 === t?0:0;
      switch(t[0])
       {case 0:
         var array_fold=t[1];
         return invariant$8(function(_BT_){return 0},invariant_a,array_fold);
        case 1:var at=t[1];return invariant$9(at);
        case 2:var at_intervals=t[1];return invariant$10(at_intervals);
        case 3:
         var bind=t[1],_BL_=function(_BS_){return 0};
         return invariant$11(function(_BR_){return 0},_BL_,bind);
        case 4:
         var bind$0=t[1];
         return invariant$11(function(_BQ_){return 0},invariant_a,bind$0);
        case 5:var a=t[1];return caml_call1(invariant_a,a);
        case 6:var e=t[1];return invariant$12(invariant_a,e);
        case 7:var freeze=t[1];return invariant$14(invariant_a,freeze);
        case 8:
         var if_then_else=t[1];
         return invariant$15(function(_BP_){return 0},if_then_else);
        case 9:
         var if_then_else$0=t[1];
         return invariant$15(invariant_a,if_then_else$0);
        case 10:
         var join=t[1];return invariant$16(function(_BO_){return 0},join);
        case 11:var join$0=t[1];return invariant$16(invariant_a,join$0);
        case 13:var snapshot=t[1];return invariant$17(invariant_a,snapshot);
        case 14:
         var step_function_node=t[1];
         return invariant$7(invariant_a,step_function_node);
        case 15:
         var unordered_array_fold=t[1];
         return invariant$5
                 (function(_BN_){return 0},invariant_a,unordered_array_fold);
        case 16:
         var var$0=t[1];return invariant$4(function(_BM_){return 0},var$0);
        default:return 0}}
    function initial_num_children(t)
     {if(typeof t === "number")return 0 === t?0:0;
      switch(t[0])
       {case 0:var match=t[1],children=match[3];return children.length - 1;
        case 1:return 0;
        case 2:return 0;
        case 3:return 1;
        case 4:return 2;
        case 5:return 0;
        case 6:return 0;
        case 7:return 1;
        case 8:return 1;
        case 9:return 2;
        case 10:return 1;
        case 11:return 2;
        case 12:return 1;
        case 13:return 0;
        case 14:return 1;
        case 15:
         var match$0=t[1],children$0=match$0[6];return children$0.length - 1;
        case 16:return 0;
        case 17:return 2;
        case 18:return 3;
        case 19:return 4;
        case 20:return 5;
        case 21:return 6;
        case 22:return 7;
        case 23:return 8;
        case 24:return 9;
        case 25:return 10;
        case 26:return 11;
        case 27:return 12;
        case 28:return 13;
        case 29:return 14;
        default:return 15}}
    var
     bind_rhs_child_index=1,
     freeze_child_index=0,
     if_branch_child_index=1,
     join_rhs_child_index=1;
    function iteri_children(t,f)
     {if(typeof t === "number")return 0 === t?0:0;
      switch(t[0])
       {case 0:
         var
          match=t[1],
          children=match[3],
          _By_=children.length - 1 - 1 | 0,
          _Bx_=0;
         if(_By_ >= 0)
          {var i=_Bx_;
           for(;;)
            {caml_call2(f,i,children[1 + i]);
             var _Bz_=i + 1 | 0;
             if(_By_ !== i){var i=_Bz_;continue}
             break}}
         return 0;
        case 1:return 0;
        case 2:return 0;
        case 3:var bind=t[1];return caml_call2(f,0,bind[3]);
        case 4:
         var match$0=t[1],lhs_change=match$0[4],rhs=match$0[5];
         caml_call2(f,0,lhs_change);
         var _BA_=caml_call1(Uopt[6],rhs);
         return _BA_?caml_call2(f,1,caml_call1(Uopt[11],rhs)):_BA_;
        case 5:return 0;
        case 6:
         var
          match$1=t[1],
          children$0=match$1[3],
          num_children=match$1[4],
          _BC_=num_children - 1 | 0,
          _BB_=0;
         if(_BC_ >= 0)
          {var i$0=_BB_;
           for(;;)
            {var
              _BD_=caml_call2(Uniform_array[20],children$0,i$0),
              r=caml_call1(Uopt[7],_BD_);
             caml_call2(f,i$0,r[1]);
             var _BE_=i$0 + 1 | 0;
             if(_BC_ !== i$0){var i$0=_BE_;continue}
             break}}
         return 0;
        case 7:var match$2=t[1],child=match$2[2];return caml_call2(f,0,child);
        case 8:var match$3=t[1],test=match$3[2];return caml_call2(f,0,test);
        case 9:
         var match$4=t[1],test_change=match$4[3],current_branch=match$4[4];
         caml_call2(f,0,test_change);
         var _BF_=caml_call1(Uopt[6],current_branch);
         return _BF_?caml_call2(f,1,caml_call1(Uopt[11],current_branch)):_BF_;
        case 10:var match$5=t[1],lhs=match$5[2];return caml_call2(f,0,lhs);
        case 11:
         var match$6=t[1],lhs_change$0=match$6[3],rhs$0=match$6[4];
         caml_call2(f,0,lhs_change$0);
         var _BG_=caml_call1(Uopt[6],rhs$0);
         return _BG_?caml_call2(f,1,caml_call1(Uopt[11],rhs$0)):_BG_;
        case 12:var node0=t[2];return caml_call2(f,0,node0);
        case 13:return 0;
        case 14:
         var match$7=t[1],child$0=match$7[2],_BH_=caml_call1(Uopt[6],child$0);
         return _BH_?caml_call2(f,0,caml_call1(Uopt[11],child$0)):_BH_;
        case 15:
         var
          match$8=t[1],
          children$1=match$8[6],
          _BJ_=children$1.length - 1 - 1 | 0,
          _BI_=0;
         if(_BJ_ >= 0)
          {var i$1=_BI_;
           for(;;)
            {caml_call2(f,i$1,children$1[1 + i$1]);
             var _BK_=i$1 + 1 | 0;
             if(_BJ_ !== i$1){var i$1=_BK_;continue}
             break}}
         return 0;
        case 16:return 0;
        case 17:
         var node1=t[3],node0$0=t[2];
         caml_call2(f,0,node0$0);
         return caml_call2(f,1,node1);
        case 18:
         var node2=t[4],node1$0=t[3],node0$1=t[2];
         caml_call2(f,0,node0$1);
         caml_call2(f,1,node1$0);
         return caml_call2(f,2,node2);
        case 19:
         var node3=t[5],node2$0=t[4],node1$1=t[3],node0$2=t[2];
         caml_call2(f,0,node0$2);
         caml_call2(f,1,node1$1);
         caml_call2(f,2,node2$0);
         return caml_call2(f,3,node3);
        case 20:
         var node4=t[6],node3$0=t[5],node2$1=t[4],node1$2=t[3],node0$3=t[2];
         caml_call2(f,0,node0$3);
         caml_call2(f,1,node1$2);
         caml_call2(f,2,node2$1);
         caml_call2(f,3,node3$0);
         return caml_call2(f,4,node4);
        case 21:
         var
          node5=t[7],
          node4$0=t[6],
          node3$1=t[5],
          node2$2=t[4],
          node1$3=t[3],
          node0$4=t[2];
         caml_call2(f,0,node0$4);
         caml_call2(f,1,node1$3);
         caml_call2(f,2,node2$2);
         caml_call2(f,3,node3$1);
         caml_call2(f,4,node4$0);
         return caml_call2(f,5,node5);
        case 22:
         var
          node6=t[8],
          node5$0=t[7],
          node4$1=t[6],
          node3$2=t[5],
          node2$3=t[4],
          node1$4=t[3],
          node0$5=t[2];
         caml_call2(f,0,node0$5);
         caml_call2(f,1,node1$4);
         caml_call2(f,2,node2$3);
         caml_call2(f,3,node3$2);
         caml_call2(f,4,node4$1);
         caml_call2(f,5,node5$0);
         return caml_call2(f,6,node6);
        case 23:
         var
          node7=t[9],
          node6$0=t[8],
          node5$1=t[7],
          node4$2=t[6],
          node3$3=t[5],
          node2$4=t[4],
          node1$5=t[3],
          node0$6=t[2];
         caml_call2(f,0,node0$6);
         caml_call2(f,1,node1$5);
         caml_call2(f,2,node2$4);
         caml_call2(f,3,node3$3);
         caml_call2(f,4,node4$2);
         caml_call2(f,5,node5$1);
         caml_call2(f,6,node6$0);
         return caml_call2(f,7,node7);
        case 24:
         var
          node8=t[10],
          node7$0=t[9],
          node6$1=t[8],
          node5$2=t[7],
          node4$3=t[6],
          node3$4=t[5],
          node2$5=t[4],
          node1$6=t[3],
          node0$7=t[2];
         caml_call2(f,0,node0$7);
         caml_call2(f,1,node1$6);
         caml_call2(f,2,node2$5);
         caml_call2(f,3,node3$4);
         caml_call2(f,4,node4$3);
         caml_call2(f,5,node5$2);
         caml_call2(f,6,node6$1);
         caml_call2(f,7,node7$0);
         return caml_call2(f,8,node8);
        case 25:
         var
          node9=t[11],
          node8$0=t[10],
          node7$1=t[9],
          node6$2=t[8],
          node5$3=t[7],
          node4$4=t[6],
          node3$5=t[5],
          node2$6=t[4],
          node1$7=t[3],
          node0$8=t[2];
         caml_call2(f,0,node0$8);
         caml_call2(f,1,node1$7);
         caml_call2(f,2,node2$6);
         caml_call2(f,3,node3$5);
         caml_call2(f,4,node4$4);
         caml_call2(f,5,node5$3);
         caml_call2(f,6,node6$2);
         caml_call2(f,7,node7$1);
         caml_call2(f,8,node8$0);
         return caml_call2(f,9,node9);
        case 26:
         var
          node10=t[12],
          node9$0=t[11],
          node8$1=t[10],
          node7$2=t[9],
          node6$3=t[8],
          node5$4=t[7],
          node4$5=t[6],
          node3$6=t[5],
          node2$7=t[4],
          node1$8=t[3],
          node0$9=t[2];
         caml_call2(f,0,node0$9);
         caml_call2(f,1,node1$8);
         caml_call2(f,2,node2$7);
         caml_call2(f,3,node3$6);
         caml_call2(f,4,node4$5);
         caml_call2(f,5,node5$4);
         caml_call2(f,6,node6$3);
         caml_call2(f,7,node7$2);
         caml_call2(f,8,node8$1);
         caml_call2(f,9,node9$0);
         return caml_call2(f,10,node10);
        case 27:
         var
          node11=t[13],
          node10$0=t[12],
          node9$1=t[11],
          node8$2=t[10],
          node7$3=t[9],
          node6$4=t[8],
          node5$5=t[7],
          node4$6=t[6],
          node3$7=t[5],
          node2$8=t[4],
          node1$9=t[3],
          node0$10=t[2];
         caml_call2(f,0,node0$10);
         caml_call2(f,1,node1$9);
         caml_call2(f,2,node2$8);
         caml_call2(f,3,node3$7);
         caml_call2(f,4,node4$6);
         caml_call2(f,5,node5$5);
         caml_call2(f,6,node6$4);
         caml_call2(f,7,node7$3);
         caml_call2(f,8,node8$2);
         caml_call2(f,9,node9$1);
         caml_call2(f,10,node10$0);
         return caml_call2(f,11,node11);
        case 28:
         var
          node12=t[14],
          node11$0=t[13],
          node10$1=t[12],
          node9$2=t[11],
          node8$3=t[10],
          node7$4=t[9],
          node6$5=t[8],
          node5$6=t[7],
          node4$7=t[6],
          node3$8=t[5],
          node2$9=t[4],
          node1$10=t[3],
          node0$11=t[2];
         caml_call2(f,0,node0$11);
         caml_call2(f,1,node1$10);
         caml_call2(f,2,node2$9);
         caml_call2(f,3,node3$8);
         caml_call2(f,4,node4$7);
         caml_call2(f,5,node5$6);
         caml_call2(f,6,node6$5);
         caml_call2(f,7,node7$4);
         caml_call2(f,8,node8$3);
         caml_call2(f,9,node9$2);
         caml_call2(f,10,node10$1);
         caml_call2(f,11,node11$0);
         return caml_call2(f,12,node12);
        case 29:
         var
          node13=t[15],
          node12$0=t[14],
          node11$1=t[13],
          node10$2=t[12],
          node9$3=t[11],
          node8$4=t[10],
          node7$5=t[9],
          node6$6=t[8],
          node5$7=t[7],
          node4$8=t[6],
          node3$9=t[5],
          node2$10=t[4],
          node1$11=t[3],
          node0$12=t[2];
         caml_call2(f,0,node0$12);
         caml_call2(f,1,node1$11);
         caml_call2(f,2,node2$10);
         caml_call2(f,3,node3$9);
         caml_call2(f,4,node4$8);
         caml_call2(f,5,node5$7);
         caml_call2(f,6,node6$6);
         caml_call2(f,7,node7$5);
         caml_call2(f,8,node8$4);
         caml_call2(f,9,node9$3);
         caml_call2(f,10,node10$2);
         caml_call2(f,11,node11$1);
         caml_call2(f,12,node12$0);
         return caml_call2(f,13,node13);
        default:
         var
          node14=t[16],
          node13$0=t[15],
          node12$1=t[14],
          node11$2=t[13],
          node10$3=t[12],
          node9$4=t[11],
          node8$5=t[10],
          node7$6=t[9],
          node6$7=t[8],
          node5$8=t[7],
          node4$9=t[6],
          node3$10=t[5],
          node2$11=t[4],
          node1$12=t[3],
          node0$13=t[2];
         caml_call2(f,0,node0$13);
         caml_call2(f,1,node1$12);
         caml_call2(f,2,node2$11);
         caml_call2(f,3,node3$10);
         caml_call2(f,4,node4$9);
         caml_call2(f,5,node5$8);
         caml_call2(f,6,node6$7);
         caml_call2(f,7,node7$6);
         caml_call2(f,8,node8$5);
         caml_call2(f,9,node9$4);
         caml_call2(f,10,node10$3);
         caml_call2(f,11,node11$2);
         caml_call2(f,12,node12$1);
         caml_call2(f,13,node13$0);
         return caml_call2(f,14,node14)}}
    function slow_get_child(t,index)
     {if(typeof t !== "number")
       switch(t[0])
        {case 0:
          var match=t[1],children=match[3];
          return caml_check_bound(children,index)[1 + index];
         case 6:
          var
           match$0=t[1],
           children$0=match$0[3],
           _Bu_=caml_call2(Uniform_array[19],children$0,index),
           match$1=caml_call1(Uopt[7],_Bu_);
          return match$1[1];
         case 15:
          var match$2=t[1],children$1=match$2[6];
          return caml_check_bound(children$1,index)[1 + index]
         }
      function _Bt_(r)
       {iteri_children
         (t,
          function(i,child)
           {var _Bw_=caml_call2(symbol$1,i,index);
            return _Bw_?caml_call1(r,child):_Bw_});
        function _Bv_(param)
         {var
           arg1_306=param[2],
           arg0_305=param[1],
           res0_307=caml_call1(Core[356],arg0_305),
           res1_308=sexp_of_t$29(function(param){return _he_},arg1_306);
          return [1,[0,res0_307,[0,res1_308,0]]]}
        return caml_call5
                (Core[236],
                 0,
                 _hf_,
                 cst_Kind_slow_get_child_got_in,
                 [0,index,t],
                 _Bv_)}
      return caml_call1(Core[260],_Bt_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$73);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Kind$0);
    var
     Incremental_Kind=
      [0,
       invariant$18,
       sexp_of_t$29,
       name,
       initial_num_children,
       slow_get_child,
       bind_rhs_child_index,
       freeze_child_index,
       if_branch_child_index,
       join_rhs_child_index,
       iteri_children];
    caml_register_global(1342,Incremental_Kind,"Incremental__Kind");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Node);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$74);
    caml_call1(Expect_test_collector[5][1],cst_src_node_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$75,cst$33);
    function my_child_index_in_parent_at_in(r){return r[25]}
    function set_my_child_index_in_parent_a(r,v){r[25] = v;return 0}
    function my_parent_index_in_child_at_in(r){return r[24]}
    function set_my_parent_index_in_child_a(r,v){r[24] = v;return 0}
    function observers(r){return r[21]}
    function set_observers(r,v){r[21] = v;return 0}
    function old_value_opt(r){return r[20]}
    function set_old_value_opt(r,v){r[20] = v;return 0}
    function next_in_adjust_heights_heap(r){return r[19]}
    function set_next_in_adjust_heights_hea(r,v){r[19] = v;return 0}
    function height_in_adjust_heights_heap(r){return r[18]}
    function set_height_in_adjust_heights_h(r,v){r[18] = v;return 0}
    function next_in_recompute_heap(r){return r[17]}
    function set_next_in_recompute_heap(r,v){r[17] = v;return 0}
    function prev_in_recompute_heap(r){return r[16]}
    function set_prev_in_recompute_heap(r,v){r[16] = v;return 0}
    function height_in_recompute_heap(r){return r[15]}
    function set_height_in_recompute_heap(r,v){r[15] = v;return 0}
    function height$0(r){return r[14]}
    function set_height(r,v){r[14] = v;return 0}
    function next_node_in_same_scope(r){return r[13]}
    function set_next_node_in_same_scope(r,v){r[13] = v;return 0}
    function created_in(r){return r[12]}
    function set_created_in(r,v){r[12] = v;return 0}
    function parent0(r){return r[11]}
    function set_parent0(r,v){r[11] = v;return 0}
    function parent1_and_beyond(r){return r[10]}
    function set_parent1_and_beyond(r,v){r[10] = v;return 0}
    function num_parents(r){return r[9]}
    function set_num_parents(r,v){r[9] = v;return 0}
    function num_on_update_handlers(r){return r[8]}
    function set_num_on_update_handlers(r,v){r[8] = v;return 0}
    function changed_at(r){return r[7]}
    function set_changed_at(r,v){r[7] = v;return 0}
    function cutoff(r){return r[6]}
    function set_cutoff(r,v){r[6] = v;return 0}
    function kind(r){return r[5]}
    function set_kind(r,v){r[5] = v;return 0}
    function value_opt(r){return r[4]}
    function set_value_opt(r,v){r[4] = v;return 0}
    function recomputed_at(r){return r[3]}
    function set_recomputed_at(r,v){r[3] = v;return 0}
    function id(r){return r[1]}
    function _hg_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              v,
              r[26],
              r[27],
              r[28]]}
    var
     _hh_=[0,set_my_child_index_in_parent_a],
     my_child_index_in_parent_at_in$0=
      [0,
       function(param){return 0},
       cst_my_child_index_in_parent_a,
       _hh_,
       my_child_index_in_parent_at_in,
       _hg_];
    function _hi_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              v,
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hj_=[0,set_my_parent_index_in_child_a],
     my_parent_index_in_child_at_in$0=
      [0,
       function(param){return 0},
       cst_my_parent_index_in_child_a,
       _hj_,
       my_parent_index_in_child_at_in,
       _hi_];
    function _hk_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              v,
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hl_=[0,set_observers],
     observers$0=
      [0,function(param){return 0},cst_observers,_hl_,observers,_hk_];
    function _hm_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              v,
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hn_=[0,set_old_value_opt],
     old_value_opt$0=
      [0,function(param){return 0},cst_old_value_opt,_hn_,old_value_opt,_hm_];
    function _ho_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              v,
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hp_=[0,set_next_in_adjust_heights_hea],
     next_in_adjust_heights_heap$0=
      [0,
       function(param){return 0},
       cst_next_in_adjust_heights_hea,
       _hp_,
       next_in_adjust_heights_heap,
       _ho_];
    function _hq_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              v,
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hr_=[0,set_height_in_adjust_heights_h],
     height_in_adjust_heights_heap$0=
      [0,
       function(param){return 0},
       cst_height_in_adjust_heights_h,
       _hr_,
       height_in_adjust_heights_heap,
       _hq_];
    function _hs_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              v,
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _ht_=[0,set_next_in_recompute_heap],
     next_in_recompute_heap$0=
      [0,
       function(param){return 0},
       cst_next_in_recompute_heap,
       _ht_,
       next_in_recompute_heap,
       _hs_];
    function _hu_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v,
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hv_=[0,set_prev_in_recompute_heap],
     prev_in_recompute_heap$0=
      [0,
       function(param){return 0},
       cst_prev_in_recompute_heap,
       _hv_,
       prev_in_recompute_heap,
       _hu_];
    function _hw_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hx_=[0,set_height_in_recompute_heap],
     height_in_recompute_heap$0=
      [0,
       function(param){return 0},
       cst_height_in_recompute_heap,
       _hx_,
       height_in_recompute_heap,
       _hw_];
    function _hy_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hz_=[0,set_height],
     height$1=[0,function(param){return 0},cst_height,_hz_,height$0,_hy_];
    function _hA_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hB_=[0,set_next_node_in_same_scope],
     next_node_in_same_scope$0=
      [0,
       function(param){return 0},
       cst_next_node_in_same_scope,
       _hB_,
       next_node_in_same_scope,
       _hA_];
    function _hC_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hD_=[0,set_created_in],
     created_in$0=
      [0,function(param){return 0},cst_created_in,_hD_,created_in,_hC_];
    function _hE_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hF_=[0,set_parent0],
     parent0$0=[0,function(param){return 0},cst_parent0,_hF_,parent0,_hE_];
    function _hG_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hH_=[0,set_parent1_and_beyond],
     parent1_and_beyond$0=
      [0,
       function(param){return 0},
       cst_parent1_and_beyond,
       _hH_,
       parent1_and_beyond,
       _hG_];
    function _hI_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hJ_=[0,set_num_parents],
     num_parents$0=
      [0,function(param){return 0},cst_num_parents,_hJ_,num_parents,_hI_];
    function _hK_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hL_=[0,set_num_on_update_handlers],
     num_on_update_handlers$0=
      [0,
       function(param){return 0},
       cst_num_on_update_handlers,
       _hL_,
       num_on_update_handlers,
       _hK_];
    function _hM_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hN_=[0,set_changed_at],
     changed_at$0=
      [0,function(param){return 0},cst_changed_at,_hN_,changed_at,_hM_];
    function _hO_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hP_=[0,set_cutoff],
     cutoff$0=[0,function(param){return 0},cst_cutoff,_hP_,cutoff,_hO_];
    function _hQ_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hR_=[0,set_kind],
     kind$0=[0,function(param){return 0},cst_kind,_hR_,kind,_hQ_];
    function _hS_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hT_=[0,set_value_opt],
     value_opt$0=
      [0,function(param){return 0},cst_value_opt,_hT_,value_opt,_hS_];
    function _hU_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var
     _hV_=[0,set_recomputed_at],
     recomputed_at$0=
      [0,function(param){return 0},cst_recomputed_at,_hV_,recomputed_at,_hU_];
    function _hW_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27],
              r[28]]}
    var _hX_=0,id$0=[0,function(param){return 0},cst_id,_hX_,id,_hW_];
    function sexp_of_t$30(of_a_001,param)
     {var
       state_005=param[2],
       id_003=param[1],
       recomputed_at_007=param[3],
       value_opt_009=param[4],
       kind_011=param[5],
       cutoff_013=param[6],
       changed_at_015=param[7],
       num_on_update_handlers_017=param[8],
       num_parents_019=param[9],
       parent1_and_beyond_021=param[10],
       parent0_023=param[11],
       created_in_025=param[12],
       next_node_in_same_scope_027=param[13],
       height_029=param[14],
       height_in_recompute_heap_031=param[15],
       prev_in_recompute_heap_033=param[16],
       next_in_recompute_heap_035=param[17],
       height_in_adjust_heights_heap_=param[18],
       next_in_adjust_heights_heap_03=param[19],
       old_value_opt_041=param[20],
       observers_043=param[21],
       is_in_handle_after_stabilizati=param[22],
       on_update_handlers_047=param[23],
       my_parent_index_in_child_at_in=param[24],
       my_child_index_in_parent_at_in=param[25],
       force_necessary_053=param[26],
       user_info_055=param[27],
       creation_backtrace_057=param[28],
       arg_058=caml_call2(Core[454],Base_Backtrace[1],creation_backtrace_057),
       bnds_002=[0,[1,[0,_hY_,[0,arg_058,0]]],0],
       arg_056=caml_call2(Core[454],sexp_of_t$5,user_info_055),
       bnds_002$0=[0,[1,[0,_hZ_,[0,arg_056,0]]],bnds_002],
       arg_054=caml_call1(Core[305],force_necessary_053),
       bnds_002$1=[0,[1,[0,_h0_,[0,arg_054,0]]],bnds_002$0],
       arg_052=caml_call2(Core[288],Core[356],my_child_index_in_parent_at_in),
       bnds_002$2=[0,[1,[0,_h1_,[0,arg_052,0]]],bnds_002$1],
       arg_050=caml_call2(Core[288],Core[356],my_parent_index_in_child_at_in),
       bnds_002$3=[0,[1,[0,_h2_,[0,arg_050,0]]],bnds_002$2];
      function _Bq_(_Bs_){return sexp_of_t$8(of_a_001,_Bs_)}
      var
       arg_048=caml_call2(Core[421],_Bq_,on_update_handlers_047),
       bnds_002$4=[0,[1,[0,_h3_,[0,arg_048,0]]],bnds_002$3],
       arg_046=caml_call1(Core[305],is_in_handle_after_stabilizati),
       bnds_002$5=[0,[1,[0,_h4_,[0,arg_046,0]]],bnds_002$4],
       arg_044=caml_call2(Uopt[1],Sexplib0_Sexp_conv[23],observers_043),
       bnds_002$6=[0,[1,[0,_h5_,[0,arg_044,0]]],bnds_002$5],
       arg_042=caml_call2(Uopt[1],of_a_001,old_value_opt_041),
       bnds_002$7=[0,[1,[0,_h6_,[0,arg_042,0]]],bnds_002$6],
       arg_040=caml_call2(Uopt[1],Node[2][1],next_in_adjust_heights_heap_03),
       bnds_002$8=[0,[1,[0,_h7_,[0,arg_040,0]]],bnds_002$7],
       arg_038=caml_call1(Core[356],height_in_adjust_heights_heap_),
       bnds_002$9=[0,[1,[0,_h8_,[0,arg_038,0]]],bnds_002$8],
       arg_036=caml_call2(Uopt[1],Node[2][1],next_in_recompute_heap_035),
       bnds_002$10=[0,[1,[0,_h9_,[0,arg_036,0]]],bnds_002$9],
       arg_034=caml_call2(Uopt[1],Node[2][1],prev_in_recompute_heap_033),
       bnds_002$11=[0,[1,[0,_h__,[0,arg_034,0]]],bnds_002$10],
       arg_032=caml_call1(Core[356],height_in_recompute_heap_031),
       bnds_002$12=[0,[1,[0,_h$_,[0,arg_032,0]]],bnds_002$11],
       arg_030=caml_call1(Core[356],height_029),
       bnds_002$13=[0,[1,[0,_ia_,[0,arg_030,0]]],bnds_002$12],
       arg_028=caml_call2(Uopt[1],Node[2][1],next_node_in_same_scope_027),
       bnds_002$14=[0,[1,[0,_ib_,[0,arg_028,0]]],bnds_002$13],
       arg_026=caml_call1(sexp_of_t$24,created_in_025),
       bnds_002$15=[0,[1,[0,_ic_,[0,arg_026,0]]],bnds_002$14],
       arg_024=caml_call2(Uopt[1],Node[2][1],parent0_023),
       bnds_002$16=[0,[1,[0,_id_,[0,arg_024,0]]],bnds_002$15],
       _Br_=caml_call1(Uopt[1],Node[2][1]),
       arg_022=caml_call2(Uniform_array[10],_Br_,parent1_and_beyond_021),
       bnds_002$17=[0,[1,[0,_ie_,[0,arg_022,0]]],bnds_002$16],
       arg_020=caml_call1(Core[356],num_parents_019),
       bnds_002$18=[0,[1,[0,_if_,[0,arg_020,0]]],bnds_002$17],
       arg_018=caml_call1(Core[356],num_on_update_handlers_017),
       bnds_002$19=[0,[1,[0,_ig_,[0,arg_018,0]]],bnds_002$18],
       arg_016=caml_call1(_D_,changed_at_015),
       bnds_002$20=[0,[1,[0,_ih_,[0,arg_016,0]]],bnds_002$19],
       arg_014=sexp_of_t$3(of_a_001,cutoff_013),
       bnds_002$21=[0,[1,[0,_ii_,[0,arg_014,0]]],bnds_002$20],
       arg_012=sexp_of_t$29(of_a_001,kind_011),
       bnds_002$22=[0,[1,[0,_ij_,[0,arg_012,0]]],bnds_002$21],
       arg_010=caml_call2(Uopt[1],of_a_001,value_opt_009),
       bnds_002$23=[0,[1,[0,_ik_,[0,arg_010,0]]],bnds_002$22],
       arg_008=caml_call1(_D_,recomputed_at_007),
       bnds_002$24=[0,[1,[0,_il_,[0,arg_008,0]]],bnds_002$23],
       arg_006=caml_call1(Sexplib0_Sexp_conv[23],state_005),
       bnds_002$25=[0,[1,[0,_im_,[0,arg_006,0]]],bnds_002$24],
       arg_004=caml_call1(sexp_of_t$6,id_003),
       bnds_002$26=[0,[1,[0,_in_,[0,arg_004,0]]],bnds_002$25];
      return [1,bnds_002$26]}
    function same$1(t1,t2){return caml_call2(Core[247],t1,t2)}
    function packed_same(param,t2){return same$1(param,t2)}
    var is_necessary$1=Node[4];
    function iteri_children$0(t,f){return iteri_children(t[5],f)}
    var is_valid$2=Node[3],type_equal_if_phys_same$0=Node[5];
    function user_info(t)
     {var _Bn_=t[27];
      if(! _Bn_)return 0;
      var _Bo_=_Bn_[1];
      if(1 === _Bo_[0]){var i=_Bo_[1];return [0,i]}
      var _Bp_=sexp_of_t$5(_Bo_);
      return [0,caml_call1(Core_Info[18],_Bp_)]}
    function set_user_info(t,info)
     {if(info)var i=info[1],_Bm_=[0,[1,i]];else var _Bm_=0;
      t[27] = _Bm_;
      return 0}
    function append_user_info_graphviz(t,label,attrs)
     {var new$0=dot(label,attrs),_Bk_=t[27];
      if(_Bk_)
       var other=_Bk_[1],_Bl_=[0,[2,other,new$0]];
      else
       var _Bl_=[0,new$0];
      t[27] = _Bl_;
      return 0}
    function edge_is_stale(child,parent)
     {return caml_call2(symbol$2,caml_call2(_H_,child[7],parent[3]),0)}
    function is_stale_with_respect_to_a_chi(t)
     {var is_stale=[0,0];
      iteri_children$0
       (t,
        function(param,child)
         {var _Bi_=edge_is_stale(child,t),_Bj_=_Bi_?(is_stale[1] = 1,0):_Bi_;
          return _Bj_});
      return is_stale[1]}
    function is_stale(t)
     {var _Bc_=t[5];
      if(typeof _Bc_ === "number")
       {if(0 === _Bc_)return 0;throw [0,Assert_failure,_io_]}
      switch(_Bc_[0])
       {case 1:return is_none(t[3]);
        case 2:return is_none(t[3]);
        case 3:
         var _Be_=is_none(t[3]);
         return _Be_?_Be_:is_stale_with_respect_to_a_chi(t);
        case 5:return is_none(t[3]);
        case 6:
         var match=_Bc_[1],force_stale=match[5];
         if(force_stale)
          var force_stale$0=force_stale;
         else
          {var _Bf_=is_none(t[3]);
           if(! _Bf_)return is_stale_with_respect_to_a_chi(t);
           var force_stale$0=_Bf_}
         return force_stale$0;
        case 8:
         var _Bg_=is_none(t[3]);
         return _Bg_?_Bg_:is_stale_with_respect_to_a_chi(t);
        case 10:
         var _Bh_=is_none(t[3]);
         return _Bh_?_Bh_:is_stale_with_respect_to_a_chi(t);
        case 13:return is_none(t[3]);
        case 16:
         var match$0=_Bc_[1],set_at=match$0[3];
         return caml_call2(symbol$2,caml_call2(_H_,set_at,t[3]),0);
        default:
         var _Bd_=is_none(t[3]);
         return _Bd_?_Bd_:is_stale_with_respect_to_a_chi(t)}}
    function needs_to_be_computed(t)
     {var _Bb_=caml_call1(is_necessary$1,t);return _Bb_?is_stale(t):_Bb_}
    function is_in_recompute_heap(t){return caml_call2(symbol,t[15],0)}
    function is_in_adjust_heights_heap(t){return caml_call2(symbol,t[18],0)}
    function get_parent(t,index)
     {var
       _Ba_=
        caml_call2(symbol$1,index,0)
         ?t[11]
         :caml_call2(Uniform_array[19],t[10],index - 1 | 0);
      return caml_call1(Uopt[7],_Ba_)}
    function iteri_parents(t,f)
     {var _A6_=caml_call2(symbol$2,t[9],0);
      if(_A6_)
       {caml_call2(f,0,caml_call1(Uopt[7],t[11]));
        var _A8_=t[9] - 1 | 0,_A7_=1;
        if(_A8_ >= 1)
         {var index=_A7_;
          for(;;)
           {var _A__=caml_call2(Uniform_array[19],t[10],index - 1 | 0);
            caml_call2(f,index,caml_call1(Uopt[7],_A__));
            var _A$_=index + 1 | 0;
            if(_A8_ !== index){var index=_A$_;continue}
            break}}
        var _A9_=0}
      else
       var _A9_=_A6_;
      return _A9_}
    function has_child(t,child)
     {var has=[0,0];
      iteri_children$0
       (t,
        function(param,child$0)
         {var _A4_=has[1],_A5_=_A4_ || same$1(child,child$0);
          has[1] = _A5_;
          return 0});
      return has[1]}
    function has_parent(t,parent)
     {var has=[0,0];
      iteri_parents
       (t,
        function(param,parent$0)
         {var _A2_=has[1],_A3_=_A2_ || same$1(parent,parent$0);
          has[1] = _A3_;
          return 0});
      return has[1]}
    function should_be_invalidated(t)
     {var _AZ_=t[5];
      if(typeof _AZ_ !== "number")
       switch(_AZ_[0])
        {case 1:return 0;
         case 2:return 0;
         case 3:
          var match=_AZ_[1],lhs=match[3];
          return 1 - caml_call1(is_valid$2,lhs);
         case 4:
          var match$0=_AZ_[1],lhs_change=match$0[4];
          return 1 - caml_call1(is_valid$2,lhs_change);
         case 6:return 0;
         case 8:
          var match$1=_AZ_[1],test=match$1[2];
          return 1 - caml_call1(is_valid$2,test);
         case 9:
          var match$2=_AZ_[1],test_change=match$2[3];
          return 1 - caml_call1(is_valid$2,test_change);
         case 10:
          var match$3=_AZ_[1],lhs$0=match$3[2];
          return 1 - caml_call1(is_valid$2,lhs$0);
         case 11:
          var match$4=_AZ_[1],lhs_change$0=match$4[3];
          return 1 - caml_call1(is_valid$2,lhs_change$0);
         case 5:
         case 13:
         case 16:return 0;
         default:
          var has=[0,0];
          iteri_children$0
           (t,
            function(param,child)
             {var _A0_=has[1],_A1_=_A0_ || 1 - caml_call1(is_valid$2,child);
              has[1] = _A1_;
              return 0});
          return has[1]}
      if(0 === _AZ_)return 0;
      throw [0,Assert_failure,_ip_]}
    function fold_observers(t,init,f)
     {var r=[0,t[21]],ac=[0,init];
      for(;;)
       {if(! caml_call1(Uopt[6],r[1]))return ac[1];
        var observer=caml_call1(Uopt[7],r[1]);
        r[1] = observer[7];
        ac[1] = caml_call2(f,ac[1],observer)}}
    function invariant$19(invariant_a,t)
     {function _AE_(param)
       {var
         t2=is_in_recompute_heap(t),
         t1=needs_to_be_computed(t),
         sexpifier=Core[305],
         equal=0,
         message=0,
         here=0;
        function comparator(a_060,b_061)
         {return caml_call2(Core[301],a_060,b_061)}
        caml_call8
         (Ppx_assert_lib_Runtime[2],
          pos$3,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          t1,
          t2);
        if(caml_call1(is_necessary$1,t))
         {var _AG_=height(t[12]);
          if(! caml_call2(symbol$2,t[14],_AG_))throw [0,Assert_failure,_iT_];
          iteri_children$0
           (t,
            function(param,child)
             {if(! caml_call2(symbol$2,t[14],child[14]))
               throw [0,Assert_failure,_ir_];
              if(has_parent(child,t))return 0;
              throw [0,Assert_failure,_iq_]});
          if(should_be_invalidated(t))throw [0,Assert_failure,_is_]}
        iteri_parents
         (t,
          function(param,parent)
           {if(! has_child(parent,t))throw [0,Assert_failure,_iv_];
            if(! caml_call1(is_necessary$1,parent))
             throw [0,Assert_failure,_iu_];
            if(caml_call2(symbol$3,t[14],parent[14]))return 0;
            throw [0,Assert_failure,_it_]});
        function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         my_child_index_in_parent_at_in=
          check
           (function(my_child_index_in_parent_at_in)
             {var
               got=my_child_index_in_parent_at_in.length - 1,
               expect=caml_call1(Uniform_array[18],t[10]) + 1 | 0,
               sexpifier=Core[356],
               equal=0,
               message=0,
               here=0;
              function comparator(a_070,b_071)
               {return caml_call2(Core[352],a_070,b_071)}
              caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos$4,
                sexpifier,
                comparator,
                here,
                message,
                equal,
                expect,
                got);
              iteri_parents
               (t,
                function(parent_index,parent)
                 {var
                   _AY_=
                    caml_check_bound
                      (my_child_index_in_parent_at_in,parent_index)
                     [1 + parent_index];
                  if(packed_same(t,slow_get_child(parent[5],_AY_)))return 0;
                  throw [0,Assert_failure,_iw_]});
              return debug}),
         my_parent_index_in_child_at_in=
          check
           (function(my_parent_index_in_child_at_in)
             {var switch$0=0,_AX_=t[5];
              if(typeof _AX_ !== "number" && 6 === _AX_[0])switch$0 = 1;
              if(! switch$0)
               {var
                 got=my_parent_index_in_child_at_in.length - 1,
                 expect=initial_num_children(t[5]),
                 sexpifier=Core[356],
                 equal=0,
                 message=0,
                 here=0,
                 comparator=
                  function(a_068,b_069)
                   {return caml_call2(Core[352],a_068,b_069)};
                caml_call8
                 (Ppx_assert_lib_Runtime[3],
                  pos$5,
                  sexpifier,
                  comparator,
                  here,
                  message,
                  equal,
                  expect,
                  got)}
              if(caml_call1(is_necessary$1,t))
               iteri_children$0
                (t,
                 function(child_index,child)
                  {if
                    (packed_same
                      (t,
                       get_parent
                        (child,
                         caml_check_bound(my_parent_index_in_child_at_in,child_index)
                          [1 + child_index])))
                    return 0;
                   throw [0,Assert_failure,_ix_]});
              return debug}),
         observers_fun=
          check
           (function(param)
             {return fold_observers
                      (t,
                       0,
                       function(param$0,param)
                        {var state=param[1],observing=param[2];
                         if(! caml_call2(Core[246],t,observing))
                          throw [0,Assert_failure,_iz_];
                         if(1 < state - 1 >>> 0)throw [0,Assert_failure,_iy_];
                         return 0})}),
         old_value_opt_fun=check(caml_call1(Uopt[2],invariant_a)),
         next_in_adjust_heights_heap_fu=
          check
           (function(next_in_adjust_heights_heap)
             {if(is_in_adjust_heights_heap(t))
               {var _AW_=caml_call1(Uopt[6],next_in_adjust_heights_heap);
                if(! _AW_)return _AW_;
                var next=caml_call1(Uopt[7],next_in_adjust_heights_heap);
                if(! is_in_adjust_heights_heap(next))
                 throw [0,Assert_failure,_iB_];
                if(caml_call2(symbol$1,t[18],next[18]))return 0;
                throw [0,Assert_failure,_iA_]}
              if(caml_call1(Uopt[5],next_in_adjust_heights_heap))return 0;
              throw [0,Assert_failure,_iC_]}),
         height_in_adjust_heights_heap_=
          check
           (function(height_in_adjust_heights_heap)
             {var _AV_=caml_call2(symbol,height_in_adjust_heights_heap,0);
              if(! _AV_)return _AV_;
              if(caml_call2(symbol$3,height_in_adjust_heights_heap,t[14]))
               return 0;
              throw [0,Assert_failure,_iD_]}),
         next_in_recompute_heap_fun=
          check
           (function(next_in_recompute_heap)
             {if
               (1
                -
                is_in_recompute_heap(t)
                &&
                !
                caml_call1(Uopt[5],next_in_recompute_heap))
               throw [0,Assert_failure,_iG_];
              var _AU_=caml_call1(Uopt[6],next_in_recompute_heap);
              if(! _AU_)return _AU_;
              var next=caml_call1(Uopt[7],next_in_recompute_heap);
              if(! packed_same(t,caml_call1(Uopt[7],next[16])))
               throw [0,Assert_failure,_iF_];
              if(caml_call2(symbol$1,t[15],next[15]))return 0;
              throw [0,Assert_failure,_iE_]}),
         prev_in_recompute_heap_fun=
          check
           (function(prev_in_recompute_heap)
             {if
               (1
                -
                is_in_recompute_heap(t)
                &&
                !
                caml_call1(Uopt[5],prev_in_recompute_heap))
               throw [0,Assert_failure,_iJ_];
              var _AT_=caml_call1(Uopt[6],prev_in_recompute_heap);
              if(! _AT_)return _AT_;
              var prev=caml_call1(Uopt[7],prev_in_recompute_heap);
              if(! packed_same(t,caml_call1(Uopt[7],prev[17])))
               throw [0,Assert_failure,_iI_];
              if(caml_call2(symbol$1,t[15],prev[15]))return 0;
              throw [0,Assert_failure,_iH_]}),
         height_in_recompute_heap_fun=
          check
           (function(height_in_recompute_heap)
             {if(! caml_call2(symbol,height_in_recompute_heap,-1))
               throw [0,Assert_failure,_iL_];
              if(caml_call2(symbol$0,height_in_recompute_heap,t[14]))return 0;
              throw [0,Assert_failure,_iK_]}),
         height_fun=
          check
           (function(height)
             {if(caml_call1(is_necessary$1,t))
               {if(caml_call2(symbol,height,0))return 0;
                throw [0,Assert_failure,_iM_]}
              if(caml_call2(symbol$1,height,-1))return 0;
              throw [0,Assert_failure,_iN_]}),
         next_node_in_same_scope_fun=
          check
           (function(next_node_in_same_scope)
             {var
               _AR_=is_top(t[12]),
               _AS_=_AR_ || 1 - caml_call1(is_valid$2,t);
              if(! _AS_)return _AS_;
              if(caml_call1(Uopt[5],next_node_in_same_scope))return 0;
              throw [0,Assert_failure,_iO_]}),
         created_in_fun=check(invariant$13),
         parent0_fun=
          check
           (function(parent0)
             {var
               t2=caml_call1(Uopt[6],parent0),
               t1=caml_call2(symbol$2,t[9],0),
               sexpifier=Core[305],
               equal=0,
               message=0,
               here=0;
              function comparator(a_066,b_067)
               {return caml_call2(Core[301],a_066,b_067)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[2],
                       pos$6,
                       sexpifier,
                       comparator,
                       here,
                       message,
                       equal,
                       t1,
                       t2)}),
         parent1_and_beyond_fun=
          check
           (function(parent1_and_beyond)
             {var
               _AO_=caml_call1(Uniform_array[18],parent1_and_beyond),
               _AN_=1;
              if(_AO_ >= 1)
               {var parent_index=_AN_;
                for(;;)
                 {var
                   _AP_=
                    caml_call2
                     (Uniform_array[19],parent1_and_beyond,parent_index - 1 | 0),
                   t2=caml_call1(Uopt[6],_AP_),
                   t1=caml_call2(symbol$3,parent_index,t[9]),
                   sexpifier=Core[305],
                   equal=0,
                   message=0,
                   here=0,
                   comparator=
                    function(a_064,b_065)
                     {return caml_call2(Core[301],a_064,b_065)};
                  caml_call8
                   (Ppx_assert_lib_Runtime[2],
                    pos$7,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    t1,
                    t2);
                  var _AQ_=parent_index + 1 | 0;
                  if(_AO_ !== parent_index){var parent_index=_AQ_;continue}
                  break}}
              return 0}),
         num_parents_fun=
          check
           (function(num_parents)
             {if(! caml_call2(symbol,num_parents,0))
               throw [0,Assert_failure,_iQ_];
              if
               (caml_call2
                 (symbol$0,
                  num_parents,
                  1 + caml_call1(Uniform_array[18],t[10]) | 0))
               return 0;
              throw [0,Assert_failure,_iP_]}),
         _AH_=
          fold_observers
           (t,
            0,
            function(n,param)
             {var on_update_handlers=param[3];
              return n + caml_call1(Core_List[7],on_update_handlers) | 0}),
         expect=caml_call1(Core_List[7],t[23]) + _AH_ | 0,
         num_on_update_handlers_fun=
          check
           (function(got)
             {var sexpifier=Core[356],equal=0,message=0,here=0;
              function comparator(a_062,b_063)
               {return caml_call2(Core[352],a_062,b_063)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$8,
                       sexpifier,
                       comparator,
                       here,
                       message,
                       equal,
                       expect,
                       got)}),
         changed_at_fun=
          check
           (function(changed_at)
             {invariant$3(changed_at);
              var _AM_=is_some(t[3]);
              if(! _AM_)return _AM_;
              if(caml_call2(symbol$0,caml_call2(_H_,changed_at,t[3]),0))
               return 0;
              throw [0,Assert_failure,_iR_]}),
         cutoff_fun=
          check(function(_AL_){return invariant$1(invariant_a,_AL_)}),
         kind_fun=
          check
           (function(kind)
             {invariant$18(invariant_a,kind);
              if(typeof kind !== "number" && 6 === kind[0])
               {var e=kind[1],_AK_=caml_call1(is_necessary$1,t);
                return caml_call1(invariant_about_num_invalid_ch(e),_AK_)}
              return 0}),
         value_opt_fun=
          check
           (function(value_opt)
             {var
               _AI_=caml_call1(is_valid$2,t),
               _AJ_=_AI_?1 - is_stale(t):_AI_;
              if(_AJ_ && ! caml_call1(Uopt[6],value_opt))
               throw [0,Assert_failure,_iS_];
              return caml_call2(Uopt[2],invariant_a,value_opt)}),
         recomputed_at_fun=check(invariant$3),
         id_fun=check(invariant$2);
        caml_call1(id_fun,id$0);
        caml_call1(recomputed_at_fun,recomputed_at$0);
        caml_call1(value_opt_fun,value_opt$0);
        caml_call1(kind_fun,kind$0);
        caml_call1(cutoff_fun,cutoff$0);
        caml_call1(changed_at_fun,changed_at$0);
        caml_call1(num_on_update_handlers_fun,num_on_update_handlers$0);
        caml_call1(num_parents_fun,num_parents$0);
        caml_call1(parent1_and_beyond_fun,parent1_and_beyond$0);
        caml_call1(parent0_fun,parent0$0);
        caml_call1(created_in_fun,created_in$0);
        caml_call1(next_node_in_same_scope_fun,next_node_in_same_scope$0);
        caml_call1(height_fun,height$1);
        caml_call1(height_in_recompute_heap_fun,height_in_recompute_heap$0);
        caml_call1(prev_in_recompute_heap_fun,prev_in_recompute_heap$0);
        caml_call1(next_in_recompute_heap_fun,next_in_recompute_heap$0);
        caml_call1
         (height_in_adjust_heights_heap_,height_in_adjust_heights_heap$0);
        caml_call1
         (next_in_adjust_heights_heap_fu,next_in_adjust_heights_heap$0);
        caml_call1(old_value_opt_fun,old_value_opt$0);
        caml_call1(observers_fun,observers$0);
        caml_call1
         (my_parent_index_in_child_at_in,my_parent_index_in_child_at_in$0);
        caml_call1
         (my_child_index_in_parent_at_in,my_child_index_in_parent_at_in$0);
        return 0}
      function _AF_(x_059)
       {return sexp_of_t$30(function(param){return _iU_},x_059)}
      return caml_call4(Base_Invariant[1],_iV_,t,_AF_,_AE_)}
    function unsafe_value(t){return caml_call1(Uopt[11],t[4])}
    function value_exn(t)
     {if(caml_call1(Uopt[6],t[4]))return caml_call1(Uopt[11],t[4]);
      function _AD_(x_072)
       {return sexp_of_t$30(function(param){return _iW_},x_072)}
      return caml_call5
              (Core[236],0,_iX_,cst_attempt_to_get_value_of_an,t,_AD_)}
    function get_cutoff(t){return t[6]}
    function set_cutoff$0(t,cutoff){t[6] = cutoff;return 0}
    function is_const(t)
     {var _AC_=t[5];
      if(typeof _AC_ !== "number" && 5 === _AC_[0])return 1;
      return 0}
    function on_update(t,on_update_handler)
     {t[23] = [0,on_update_handler,t[23]];t[8] = t[8] + 1 | 0;return 0}
    function run_on_update_handlers(t,node_update,now)
     {var r=[0,t[23]];
      for(;;)
       {if(! caml_call1(Core_List[8],r[1]))
         {var _AB_=r[1];
          if(! _AB_)throw [0,Assert_failure,_i0_];
          var rest$0=_AB_[2],on_update_handler$0=_AB_[1];
          r[1] = rest$0;
          run(on_update_handler$0,node_update,now);
          continue}
        var r$0=[0,t[21]];
        a:
        for(;;)
         {if(! caml_call1(Uopt[6],r$0[1]))return 0;
          var observer=caml_call1(Uopt[7],r$0[1]);
          r$0[1] = observer[7];
          var r$1=[0,observer[3]];
          for(;;)
           {if(caml_call1(Core_List[8],r$1[1]))continue a;
            var _Az_=r$1[1];
            if(! _Az_)throw [0,Assert_failure,_iZ_];
            var rest=_Az_[2],on_update_handler=_Az_[1];
            r$1[1] = rest;
            var _AA_=observer[1];
            if(_AA_)
             {var switch$0=0;
              switch(_AA_ - 1 | 0)
               {case 0:run(on_update_handler,node_update,now);break;
                case 1:break;
                default:switch$0 = 1}
              if(! switch$0)continue}
            throw [0,Assert_failure,_iY_]}}}}
    function set_kind$0(t,kind)
     {t[5] = kind;
      var _Ay_=initial_num_children(kind);
      t[24] = caml_call2(Array[38],_Ay_,-1);
      return 0}
    function create$6(state,created_in,kind)
     {var
       _Am_=state[18]?[0,caml_call2(Base_Backtrace[2],0,0)]:0,
       _An_=initial_num_children(kind),
       _Ao_=caml_call2(Array[38],_An_,-1),
       _Ap_=Uopt[3],
       _Aq_=Uopt[3],
       _Ar_=Uopt[3],
       _As_=Uopt[3],
       _At_=Uopt[3],
       _Au_=Uopt[3],
       _Av_=Uopt[3],
       _Aw_=Uniform_array[14],
       _Ax_=Uopt[3],
       t=
        [0,
         next$0(0),
         state,
         none,
         _Ax_,
         kind,
         phys_equal,
         none,
         0,
         0,
         _Aw_,
         _Av_,
         created_in,
         _Au_,
         -1,
         -1,
         _At_,
         _As_,
         -1,
         _Ar_,
         _Aq_,
         _Ap_,
         0,
         0,
         _Ao_,
         [0,-1],
         0,
         0,
         _Am_];
      add_node(created_in,t);
      return t}
    function max_num_parents(t)
     {return 1 + caml_call1(Uniform_array[18],t[10]) | 0}
    function set_parent(child,parent,parent_index)
     {return caml_call2(symbol$1,parent_index,0)
              ?(child[11] = parent,0)
              :caml_call3
                (Uniform_array[52],child[10],parent_index - 1 | 0,parent)}
    function link(child,child_index,parent,parent_index)
     {set_parent(child,caml_call1(Uopt[4],parent),parent_index);
      caml_check_bound(child[25],parent_index)[1 + parent_index]
      =
      child_index;
      caml_check_bound(parent[24],child_index)[1 + child_index]
      =
      parent_index;
      return 0}
    function add_parent(child,parent,child_index)
     {var _Al_=max_num_parents(child);
      if(caml_call2(symbol$1,child[9],_Al_))
       {var new_max_num_parents=2 * max_num_parents(child) | 0;
        child[10]
        =
        caml_call2(Uniform_array[53],child[10],new_max_num_parents - 1 | 0);
        child[25] = caml_call3(Array[123],child[25],new_max_num_parents,-1)}
      var max_num_children=parent[24].length - 1;
      if(caml_call2(symbol,child_index,max_num_children))
       {var
         new_max_num_children=
          caml_call2(include[93],2,2 * max_num_children | 0);
        parent[24] = caml_call3(Array[123],parent[24],new_max_num_children,-1)}
      link(child,child_index,parent,child[9]);
      child[9] = child[9] + 1 | 0;
      return 0}
    function remove_parent(child,parent,child_index)
     {var
       parent_index=caml_check_bound(parent[24],child_index)[1 + child_index],
       parent_index$0=child[9] - 1 | 0;
      if(caml_call2(symbol$3,parent_index,parent_index$0))
       {var
         _Ak_=caml_call2(Uniform_array[19],child[10],parent_index$0 - 1 | 0),
         match=caml_call1(Uopt[7],_Ak_);
        link
         (child,
          caml_check_bound(child[25],parent_index$0)[1 + parent_index$0],
          match,
          parent_index)}
      set_parent(child,Uopt[3],parent_index$0);
      child[9] = child[9] - 1 | 0;
      return 0}
    function swap_children_except_in_kind
     (parent,child1,child_index1,child2,child_index2)
     {var
       index_of_parent_in_child1=
        caml_check_bound(parent[24],child_index1)[1 + child_index1],
       index_of_parent_in_child2=
        caml_check_bound(parent[24],child_index2)[1 + child_index2];
      caml_check_bound(child1[25],index_of_parent_in_child1)
       [1 + index_of_parent_in_child1]
      =
      child_index2;
      caml_check_bound(child2[25],index_of_parent_in_child2)
       [1 + index_of_parent_in_child2]
      =
      child_index1;
      caml_check_bound(parent[24],child_index1)[1 + child_index1]
      =
      index_of_parent_in_child2;
      caml_check_bound(parent[24],child_index2)[1 + child_index2]
      =
      index_of_parent_in_child1;
      return 0}
    function sexp_of_t$31(x_073)
     {return sexp_of_t$30(function(param){return _i1_},x_073)}
    function invariant$20(param)
     {return invariant$19(function(_Aj_){return 0},param)}
    function iter_descendants_internal(ts,f)
     {var seen=caml_call3(_A_[3],0,0,0);
      function iter_descendants(t)
       {var _Ai_=1 - caml_call2(Core_Hash_set[20],seen,t[1]);
        return _Ai_
                ?(caml_call2(Core_Hash_set[22],seen,t[1]),
                  caml_call1(f,t),
                  iteri_children$0
                   (t,function(param,t){return iter_descendants(t)}))
                :_Ai_}
      caml_call2(Core_List[9],ts,iter_descendants);
      return seen}
    function iter_descendants(ts,f){iter_descendants_internal(ts,f);return 0}
    function append_user_info_graphviz$0(param)
     {return function(_Ag_,_Ah_)
       {return append_user_info_graphviz(param,_Ag_,_Ah_)}}
    function save_dot(out,ts)
     {var
       node_name=
        Core[541]
         ?function(param){return cst_n$0}
         :function(node)
           {var _Af_=caml_call1(to_string$1,node[1]);
            return caml_call2(Core[18],cst_n$1,_Af_)};
      caml_call2(Core[238],out,_i4_);
      caml_call2(Core[238],out,_i5_);
      var
       bind_edges=[0,0],
       seen=
        iter_descendants_internal
         (ts,
          function(t)
           {var
             name$0=node_name(t),
             _z$_=Core_String[140][3],
             _Aa_=[0,caml_call2(Core[257],_i2_,t[14]),0],
             default$0=dot([0,name$0,[0,name(t[5]),_Aa_]],_z$_),
             _Ab_=t[27];
            if(_Ab_)
             var user_info=_Ab_[1],info=[2,default$0,user_info];
            else
             var info=default$0;
            var _Ac_=to_string$0(name$0,to_dot(info));
            caml_call3(Core[238],out,_i3_,_Ac_);
            iteri_children$0
             (t,
              function(param,from)
               {var _Ae_=node_name(from);
                return caml_call4(Core[238],out,_i6_,_Ae_,name$0)});
            var _Ad_=t[5];
            if(typeof _Ad_ !== "number" && 3 === _Ad_[0])
             {var bind=_Ad_[1];
              return iter_nodes_created_on_rhs
                      (bind,
                       function(to)
                        {bind_edges[1] = [0,[0,t,to],bind_edges[1]];return 0})}
            return 0});
      function _z7_(param)
       {var
         to=param[2],
         match=param[1],
         _z8_=caml_call2(Core_Hash_set[20],seen,to[1]);
        if(! _z8_)return _z8_;
        var _z9_=node_name(to),_z__=node_name(match);
        return caml_call4(Core[238],out,_i7_,_z__,_z9_)}
      caml_call2(Core_List[9],bind_edges[1],_z7_);
      return caml_call2(Core[238],out,_i8_)}
    function save_dot_to_file(file,ts)
     {function _z6_(out){return save_dot(out,ts)}
      return caml_call6(Stdio_Out_channel[6],0,0,0,0,file,_z6_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$76);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Node$0);
    var
     Packed$0=
      [0,
       sexp_of_t$31,
       invariant$20,
       function(M)
        {function fold(t,init,f)
          {var ac=[0,init],r=[0,t];
           for(;;)
            {if(! caml_call1(Uopt[6],r[1]))return ac[1];
             var packed_node=caml_call1(Uopt[11],r[1]);
             r[1] = caml_call1(M[1],packed_node);
             ac[1] = caml_call2(f,ac[1],packed_node)}}
         function iter(t,f)
          {return fold(t,0,function(param,n){return caml_call1(f,n)})}
         function invariant(t){return iter(t,invariant$20)}
         function length(t)
          {return fold(t,0,function(n,param){return n + 1 | 0})}
         function sexp_of_t(t)
          {var
            _z5_=fold(t,0,function(ac,n){return [0,n,ac]}),
            x_074=caml_call1(Core_List[34],_z5_);
           return caml_call2(Core[421],Node[2][1],x_074)}
         return [0,sexp_of_t,invariant,length,iter]},
       iter_descendants,
       save_dot,
       save_dot_to_file,
       append_user_info_graphviz$0],
     include$6=
      [0,
       Packed$0,
       sexp_of_t$30,
       type_equal_if_phys_same$0,
       invariant$19,
       create$6,
       set_kind$0,
       same$1,
       iteri_children$0,
       get_parent,
       add_parent,
       remove_parent,
       swap_children_except_in_kind,
       is_const,
       is_in_recompute_heap,
       is_necessary$1,
       is_valid$2,
       should_be_invalidated,
       edge_is_stale,
       is_stale,
       needs_to_be_computed,
       value_exn,
       unsafe_value,
       get_cutoff,
       set_cutoff$0,
       on_update,
       run_on_update_handlers,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       has_child,
       has_parent];
    caml_register_global(1345,include$6,"Incremental__Node");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Recompute_heap);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$77);
    caml_call1(Expect_test_collector[5][1],cst_src_recompute_heap_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$78,cst$34);
    function next$1(param){return param[17]}
    var As_recompute_list=caml_call1(Packed$0[3],[0,next$1]);
    function nodes_by_height(r){return r[3]}
    function set_nodes_by_height(r,v){r[3] = v;return 0}
    function height_lower_bound(r){return r[2]}
    function set_height_lower_bound(r,v){r[2] = v;return 0}
    function length$0(r){return r[1]}
    function set_length(r,v){r[1] = v;return 0}
    function _i9_(r,v){return [0,r[1],r[2],v]}
    var
     _i__=[0,set_nodes_by_height],
     nodes_by_height$0=
      [0,
       function(param){return 0},
       cst_nodes_by_height,
       _i__,
       nodes_by_height,
       _i9_];
    function _i$_(r,v){return [0,r[1],v,r[3]]}
    var
     _ja_=[0,set_height_lower_bound],
     height_lower_bound$0=
      [0,
       function(param){return 0},
       cst_height_lower_bound,
       _ja_,
       height_lower_bound,
       _i$_];
    function _jb_(r,v){return [0,v,r[2],r[3]]}
    var
     _jc_=[0,set_length],
     length$1=[0,function(param){return 0},cst_length,_jc_,length$0,_jb_];
    function sexp_of_t$32(param)
     {var
       length_003=param[1],
       height_lower_bound_005=param[2],
       nodes_by_height_007=param[3],
       max_nonempty_index=[0,-1],
       bnds_002=0;
      function _z2_(i,l)
       {var
         _z3_=caml_call1(Uopt[6],l),
         _z4_=_z3_?(max_nonempty_index[1] = i,0):_z3_;
        return _z4_}
      caml_call2(Uniform_array[28],nodes_by_height_007,_z2_);
      var
       x_001=
        caml_call3
         (Uniform_array[37],
          nodes_by_height_007,
          0,
          max_nonempty_index[1] + 1 | 0),
       arg_008=caml_call2(Uniform_array[10],As_recompute_list[1],x_001),
       bnds_002$0=[0,[1,[0,_jd_,[0,arg_008,0]]],bnds_002],
       arg_006=caml_call1(Core[356],height_lower_bound_005),
       bnds_002$1=[0,[1,[0,_je_,[0,arg_006,0]]],bnds_002$0],
       arg_004=caml_call1(Core[356],length_003),
       bnds_002$2=[0,[1,[0,_jf_,[0,arg_004,0]]],bnds_002$1];
      return [1,bnds_002$2]}
    function max_height_allowed(t)
     {return caml_call1(Uniform_array[18],t[3]) - 1 | 0}
    function invariant$21(t)
     {function _zS_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         nodes_by_height_fun=
          check
           (function(nodes_by_height)
             {function _z0_(height,node)
               {function _z1_(node)
                 {if(! caml_call2(symbol$1,node[15],height))
                   throw [0,Assert_failure,_jh_];
                  if(needs_to_be_computed(node))return 0;
                  throw [0,Assert_failure,_jg_]}
                return caml_call2(As_recompute_list[4],node,_z1_)}
              return caml_call2(Uniform_array[28],nodes_by_height,_z0_)}),
         height_lower_bound_fun=
          check
           (function(height_lower_bound)
             {if(! caml_call2(symbol,height_lower_bound,0))
               throw [0,Assert_failure,_jk_];
              if
               (!
                caml_call2
                 (symbol$0,
                  height_lower_bound,
                  caml_call1(Uniform_array[18],t[3])))
               throw [0,Assert_failure,_jj_];
              var _zX_=height_lower_bound - 1 | 0,_zW_=0;
              if(_zX_ >= 0)
               {var height=_zW_;
                for(;;)
                 {var _zY_=caml_call2(Uniform_array[19],t[3],height);
                  if(! caml_call1(Uopt[5],_zY_))throw [0,Assert_failure,_ji_];
                  var _zZ_=height + 1 | 0;
                  if(_zX_ !== height){var height=_zZ_;continue}
                  break}}
              return 0}),
         length_fun=
          check
           (function(t1)
             {var actual_length=[0,0];
              function _zT_(node)
               {var _zV_=caml_call1(As_recompute_list[3],node);
                actual_length[1] = actual_length[1] + _zV_ | 0;
                return 0}
              caml_call2(Uniform_array[27],t[3],_zT_);
              var
               sexpifier=Core[356],
               _zU_=actual_length[1],
               equal=0,
               message=0,
               here=0;
              function comparator(a_009,b_010)
               {return caml_call2(Core[352],a_009,b_010)}
              return caml_call8
                      (Ppx_assert_lib_Runtime[2],
                       pos$9,
                       sexpifier,
                       comparator,
                       here,
                       message,
                       equal,
                       t1,
                       _zU_)});
        caml_call1(length_fun,length$1);
        caml_call1(height_lower_bound_fun,height_lower_bound$0);
        return caml_call1(nodes_by_height_fun,nodes_by_height$0)}
      return caml_call4(Base_Invariant[1],_jl_,t,sexp_of_t$32,_zS_)}
    function create_nodes_by_height(max_height_allowed)
     {return caml_call2(Uniform_array[15],max_height_allowed + 1 | 0,Uopt[3])}
    function set_max_height_allowed(t,max_height_allowed)
     {var
       src=t[3],
       dst=create_nodes_by_height(max_height_allowed),
       _zP_=caml_call1(Uniform_array[18],dst),
       _zQ_=caml_call2(min,caml_call1(Uniform_array[18],src),_zP_);
      caml_call5(Uniform_array[34],src,0,dst,0,_zQ_);
      t[3] = dst;
      var _zR_=caml_call1(Uniform_array[18],dst);
      t[2] = caml_call2(min,t[2],_zR_);
      return 0}
    function create$7(max_height_allowed)
     {return [0,
              0,
              max_height_allowed + 1 | 0,
              create_nodes_by_height(max_height_allowed)]}
    function set_prev(next,prev)
     {var _zN_=caml_call1(Uopt[6],next);
      if(_zN_)
       {var match=caml_call1(Uopt[11],next);match[16] = prev;var _zO_=0}
      else
       var _zO_=_zN_;
      return _zO_}
    function link$0(t,node)
     {var height=node[14];
      node[15] = height;
      var next=caml_call2(Uniform_array[19],t[3],height);
      node[17] = next;
      set_prev(next,caml_call1(Uopt[4],node));
      var _zM_=caml_call1(Uopt[4],node);
      return caml_call3(Uniform_array[51],t[3],height,_zM_)}
    function unlink(t,node)
     {var
       prev=node[16],
       next=node[17],
       _zK_=caml_call2(Uniform_array[19],t[3],node[15]),
       _zL_=caml_call1(Uopt[4],node);
      if(caml_call2(Core[247],_zL_,_zK_))
       caml_call3(Uniform_array[51],t[3],node[15],next);
      set_prev(next,prev);
      if(caml_call1(Uopt[6],prev))
       {var match=caml_call1(Uopt[11],prev);match[17] = next}
      node[16] = Uopt[3];
      return 0}
    function add$0(t,node)
     {var height=node[14];
      if(caml_call2(symbol$3,height,t[2]))t[2] = height;
      link$0(t,node);
      t[1] = t[1] + 1 | 0;
      return 0}
    function remove(t,node)
     {unlink(t,node);
      node[17] = Uopt[3];
      node[15] = -1;
      t[1] = t[1] - 1 | 0;
      return 0}
    function increase_height(t,node){unlink(t,node);return link$0(t,node)}
    function min_height(t)
     {if(caml_call2(symbol$1,t[1],0))
       t[2] = caml_call1(Uniform_array[18],t[3]);
      else
       {var nodes_by_height=t[3];
        for(;;)
         {var _zJ_=caml_call2(Uniform_array[19],nodes_by_height,t[2]);
          if(caml_call1(Uopt[5],_zJ_)){t[2] = t[2] + 1 | 0;continue}
          break}}
      return t[2]}
    function remove_min(t)
     {var
       nodes_by_height=t[3],
       node=[0,caml_call2(Uniform_array[19],nodes_by_height,t[2])];
      for(;;)
       {if(caml_call1(Uopt[5],node[1]))
         {t[2] = t[2] + 1 | 0;
          node[1] = caml_call2(Uniform_array[19],nodes_by_height,t[2]);
          continue}
        var node$0=caml_call1(Uopt[11],node[1]);
        node$0[15] = -1;
        t[1] = t[1] - 1 | 0;
        var next=node$0[17];
        caml_call3(Uniform_array[52],t[3],t[2],next);
        set_prev(next,Uopt[3]);
        node$0[17] = Uopt[3];
        return node$0}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$79);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Recompute_heap$0);
    var
     Incremental_Recompute_heap=
      [0,
       sexp_of_t$32,
       invariant$21,
       create$7,
       length$0,
       max_height_allowed,
       set_max_height_allowed,
       min_height,
       add$0,
       remove,
       remove_min,
       increase_height];
    caml_register_global
     (1346,Incremental_Recompute_heap,"Incremental__Recompute_heap");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Adjust_heights);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$80);
    caml_call1(Expect_test_collector[5][1],cst_src_adjust_heights_heap_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$81,cst$35);
    function next$2(param){return param[19]}
    var As_adjust_heights_list=caml_call1(Packed$0[3],[0,next$2]);
    function sexp_of_t$33(t)
     {var max_nonempty_index=[0,-1];
      function _zG_(i,l)
       {var
         _zH_=caml_call1(Uopt[6],l),
         _zI_=_zH_?(max_nonempty_index[1] = i,0):_zH_;
        return _zI_}
      caml_call2(Uniform_array[28],t,_zG_);
      var
       x_001=
        caml_call3(Uniform_array[37],t,0,max_nonempty_index[1] + 1 | 0);
      return caml_call2(Uniform_array[10],As_adjust_heights_list[1],x_001)}
    function invariant$22(t)
     {function _zC_(param)
       {function _zD_(height,nodes)
         {caml_call1(As_adjust_heights_list[2],nodes);
          function _zE_(node)
           {if(! caml_call2(symbol$1,node[18],height))
             throw [0,Assert_failure,_jo_];
            if(! caml_call2(symbol$2,node[14],node[18]))
             throw [0,Assert_failure,_jn_];
            var _zF_=is_in_recompute_heap(node);
            if(! _zF_)return _zF_;
            if(caml_call2(symbol$1,node[15],node[18]))return 0;
            throw [0,Assert_failure,_jm_]}
          return caml_call2(As_adjust_heights_list[4],nodes,_zE_)}
        return caml_call2(Uniform_array[28],t,_zD_)}
      return caml_call4(Base_Invariant[1],_jp_,t,sexp_of_t$33,_zC_)}
    function create$8(max_height_allowed)
     {return caml_call2(Uniform_array[15],max_height_allowed + 1 | 0,Uopt[3])}
    function nodes_by_height$1(r){return r[4]}
    function set_nodes_by_height$0(r,v){r[4] = v;return 0}
    function max_height_seen(r){return r[3]}
    function set_max_height_seen(r,v){r[3] = v;return 0}
    function height_lower_bound$1(r){return r[2]}
    function set_height_lower_bound$0(r,v){r[2] = v;return 0}
    function length$2(r){return r[1]}
    function set_length$0(r,v){r[1] = v;return 0}
    function _jq_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _jr_=[0,set_nodes_by_height$0],
     nodes_by_height$2=
      [0,
       function(param){return 0},
       cst_nodes_by_height$0,
       _jr_,
       nodes_by_height$1,
       _jq_];
    function _js_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _jt_=[0,set_max_height_seen],
     max_height_seen$0=
      [0,
       function(param){return 0},
       cst_max_height_seen,
       _jt_,
       max_height_seen,
       _js_];
    function _ju_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _jv_=[0,set_height_lower_bound$0],
     height_lower_bound$2=
      [0,
       function(param){return 0},
       cst_height_lower_bound$0,
       _jv_,
       height_lower_bound$1,
       _ju_];
    function _jw_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _jx_=[0,set_length$0],
     length$3=[0,function(param){return 0},cst_length$0,_jx_,length$2,_jw_];
    function sexp_of_t$34(param)
     {var
       length_003=param[1],
       height_lower_bound_005=param[2],
       max_height_seen_007=param[3],
       nodes_by_height_009=param[4],
       arg_010=sexp_of_t$33(nodes_by_height_009),
       bnds_002=[0,[1,[0,_jy_,[0,arg_010,0]]],0],
       arg_008=caml_call1(Core[356],max_height_seen_007),
       bnds_002$0=[0,[1,[0,_jz_,[0,arg_008,0]]],bnds_002],
       arg_006=caml_call1(Core[356],height_lower_bound_005),
       bnds_002$1=[0,[1,[0,_jA_,[0,arg_006,0]]],bnds_002$0],
       arg_004=caml_call1(Core[356],length_003),
       bnds_002$2=[0,[1,[0,_jB_,[0,arg_004,0]]],bnds_002$1];
      return [1,bnds_002$2]}
    function max_height_allowed$0(t)
     {return caml_call1(Uniform_array[18],t[4]) - 1 | 0}
    function invariant$23(t)
     {function _zu_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         nodes_by_height_fun=check(invariant$22),
         max_height_seen_fun=
          check
           (function(max_height_seen)
             {if(! caml_call2(symbol,max_height_seen,0))
               throw [0,Assert_failure,_jD_];
              if(caml_call2(symbol$0,max_height_seen,max_height_allowed$0(t)))
               return 0;
              throw [0,Assert_failure,_jC_]}),
         height_lower_bound_fun=
          check
           (function(height_lower_bound)
             {if(! caml_call2(symbol,height_lower_bound,0))
               throw [0,Assert_failure,_jG_];
              if
               (!
                caml_call2
                 (symbol$0,
                  height_lower_bound,
                  caml_call1(Uniform_array[18],t[4])))
               throw [0,Assert_failure,_jF_];
              var _zz_=height_lower_bound - 1 | 0,_zy_=0;
              if(_zz_ >= 0)
               {var height=_zy_;
                for(;;)
                 {var _zA_=caml_call2(Uniform_array[19],t[4],height);
                  if(! caml_call1(Uopt[5],_zA_))throw [0,Assert_failure,_jE_];
                  var _zB_=height + 1 | 0;
                  if(_zz_ !== height){var height=_zB_;continue}
                  break}}
              return 0}),
         length_fun=
          check
           (function(length)
             {var r=[0,0],_zw_=t[4];
              function _zv_(node)
               {var _zx_=caml_call1(As_adjust_heights_list[3],node);
                r[1] = r[1] + _zx_ | 0;
                return 0}
              caml_call2(Uniform_array[27],_zw_,_zv_);
              if(caml_call2(symbol$1,length,r[1]))return 0;
              throw [0,Assert_failure,_jH_]});
        caml_call1(length_fun,length$3);
        caml_call1(height_lower_bound_fun,height_lower_bound$2);
        caml_call1(max_height_seen_fun,max_height_seen$0);
        return caml_call1(nodes_by_height_fun,nodes_by_height$2)}
      return caml_call4(Base_Invariant[1],_jI_,t,sexp_of_t$34,_zu_)}
    function create$9(max_height_allowed)
     {return [0,0,max_height_allowed + 1 | 0,0,create$8(max_height_allowed)]}
    function set_max_height_allowed$0(t,max_height_allowed)
     {if(caml_call2(symbol$3,max_height_allowed,t[3]))
       {var
         _zt_=
          function(param)
           {var
             arg1_013=param[2],
             arg0_012=param[1],
             res0_014=caml_call1(Core[356],arg0_012),
             v_011=arg1_013[2],
             res1_015=[1,[0,_jJ_,[0,caml_call1(Core[356],v_011),0]]];
            return [1,[0,res0_014,[0,res1_015,0]]]};
        caml_call5
         (Core[236],
          0,
          _jK_,
          cst_cannot_set_max_height_allo,
          [0,max_height_allowed,[0,-794774856,t[3]]],
          _zt_)}
      t[4] = create$8(max_height_allowed);
      return 0}
    function set_height$0(t,node,height)
     {if(caml_call2(symbol$2,height,t[3]))
       {t[3] = height;
        if(caml_call2(symbol$2,height,max_height_allowed$0(t)))
         {var
           _zr_=
            function(param)
             {var
               arg1_019=param[2],
               arg0_018=param[1],
               v_016=arg0_018[2],
               res0_020=[1,[0,_jL_,[0,caml_call1(Core[356],v_016),0]]],
               v_017=arg1_019[2],
               res1_021=[1,[0,_jM_,[0,caml_call1(Core[356],v_017),0]]];
              return [1,[0,res0_020,[0,res1_021,0]]]},
           _zs_=[0,[0,920681479,height],[0,3850884,max_height_allowed$0(t)]];
          caml_call5
           (Core[236],0,_jN_,cst_node_with_too_large_height,_zs_,_zr_)}}
      node[14] = height;
      return 0}
    function ensure_height_requirement
     (t,original_child,original_parent,child,parent)
     {if(same$1(parent,original_child))
       {var
         _zn_=
          function(param)
           {var
             arg1_025=param[2],
             arg0_024=param[1],
             v_022=arg0_024[2],
             _zp_=0,
             res0_026=
              [1,
               [0,
                _jP_,
                [0,sexp_of_t$30(function(param){return _jO_},v_022),_zp_]]],
             v_023=arg1_025[2],
             _zq_=0,
             res1_027=
              [1,
               [0,
                _jR_,
                [0,sexp_of_t$30(function(param){return _jQ_},v_023),_zq_]]];
            return [1,[0,res0_026,[0,res1_027,0]]]};
        caml_call5
         (Core[236],
          0,
          _jS_,
          cst_adding_edge_made_graph_cyc,
          [0,[0,-977688164,original_child],[0,-310508246,original_parent]],
          _zn_)}
      var _zo_=caml_call2(symbol,child[14],parent[14]);
      if(! _zo_)return _zo_;
      if(caml_call2(symbol$1,parent[18],-1))
       {var height=parent[14];
        parent[18] = height;
        t[1] = t[1] + 1 | 0;
        parent[19] = caml_call2(Uniform_array[19],t[4],height);
        var _zm_=caml_call1(Uopt[4],parent);
        caml_call3(Uniform_array[51],t[4],height,_zm_)}
      return set_height$0(t,parent,child[14] + 1 | 0)}
    function adjust_heights(t,recompute_heap,original_child,original_parent)
     {t[2] = original_parent[14];
      ensure_height_requirement
       (t,original_child,original_parent,original_child,original_parent);
      b:
      for(;;)
       {if(! caml_call2(symbol$2,t[1],0))return debug;
        var r=[0,t[2]];
        for(;;)
         {var _zf_=caml_call2(Uniform_array[19],t[4],r[1]);
          if(caml_call1(Uopt[5],_zf_)){r[1]++;continue}
          var height=r[1];
          t[2] = height;
          var
           _zg_=caml_call2(Uniform_array[20],t[4],height),
           child=caml_call1(Uopt[11],_zg_);
          child[18] = -1;
          t[1] = t[1] - 1 | 0;
          caml_call3(Uniform_array[51],t[4],height,child[19]);
          child[19] = Uopt[3];
          if(is_in_recompute_heap(child))
           increase_height(recompute_heap,child);
          if(caml_call2(symbol$2,child[9],0))
           {var parent=caml_call1(Uopt[7],child[11]);
            ensure_height_requirement
             (t,original_child,original_parent,child,parent);
            var _zi_=child[9] - 1 | 0,_zh_=1;
            if(_zi_ >= 1)
             {var parent_index=_zh_;
              for(;;)
               {var
                 _zk_=
                  caml_call2(Uniform_array[19],child[10],parent_index - 1 | 0),
                 match$0=caml_call1(Uopt[7],_zk_);
                ensure_height_requirement
                 (t,original_child,original_parent,child,match$0);
                var _zl_=parent_index + 1 | 0;
                if(_zi_ !== parent_index){var parent_index=_zl_;continue}
                break}}}
          var _zj_=child[5],switch$0=0;
          if(typeof _zj_ !== "number" && 3 === _zj_[0])
           {var
             match=_zj_[1],
             all_nodes_created_on_rhs=match[7],
             r$0=[0,all_nodes_created_on_rhs];
            for(;;)
             {if(caml_call1(Uopt[6],r$0[1]))
               {var node_on_rhs=caml_call1(Uopt[11],r$0[1]);
                r$0[1] = node_on_rhs[13];
                if(caml_call1(is_necessary$1,node_on_rhs))
                 ensure_height_requirement
                  (t,original_child,original_parent,child,node_on_rhs);
                continue}
              switch$0 = 1;
              break}}
          continue b}}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$82);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Adjust_heights$0);
    var
     Incremental_Adjust_heights_hea=
      [0,
       sexp_of_t$34,
       invariant$23,
       create$9,
       length$2,
       max_height_allowed$0,
       set_max_height_allowed$0,
       max_height_seen,
       set_height$0,
       adjust_heights];
    caml_register_global
     (1347,Incremental_Adjust_heights_hea,"Incremental__Adjust_heights_heap");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Alarm_value);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$83);
    caml_call1(Expect_test_collector[5][1],cst_src_alarm_value_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$84,cst$36);
    function f(param)
     {switch(param[0])
       {case 0:var at=param[1];return invariant$9(at);
        case 1:var at_intervals=param[1];return invariant$10(at_intervals);
        case 2:
         var snapshot=param[1];
         return invariant$17(function(_zd_){return 0},snapshot);
        default:
         var step_function_node=param[1];
         return invariant$7(function(_ze_){return 0},step_function_node)}}
    function action(r){return r[1]}
    function _jZ_(r,v){return [0,v,r[2]]}
    var
     _j0_=0,
     action$0=[0,function(param){return 0},cst_action,_j0_,action,_jZ_];
    function sexp_of_t$35(param)
     {var
       action_010=param[1],
       next_fired_012=param[2],
       arg_013=caml_call1(Sexplib0_Sexp_conv[23],next_fired_012),
       bnds_009=[0,[1,[0,_j1_,[0,arg_013,0]]],0];
      switch(action_010[0])
       {case 0:
         var
          arg0_001=action_010[1],
          res0_002=sexp_of_t$19(arg0_001),
          arg_011=[1,[0,_jT_,[0,res0_002,0]]];
         break;
        case 1:
         var
          arg0_003=action_010[1],
          res0_004=sexp_of_t$20(arg0_003),
          arg_011=[1,[0,_jU_,[0,res0_004,0]]];
         break;
        case 2:
         var
          arg0_005=action_010[1],
          res0_006=sexp_of_t$28(function(param){return _jV_},arg0_005),
          arg_011=[1,[0,_jW_,[0,res0_006,0]]];
         break;
        default:
         var
          arg0_007=action_010[1],
          res0_008=sexp_of_t$17(function(param){return _jX_},arg0_007),
          arg_011=[1,[0,_jY_,[0,res0_008,0]]]}
      var bnds_009$0=[0,[1,[0,_j2_,[0,arg_011,0]]],bnds_009];
      return [1,bnds_009$0]}
    function invariant$24(t)
     {function _zc_(param)
       {var action_fun=caml_call2(Base_Invariant[2],t,f);
        caml_call1(action_fun,action$0);
        return 0}
      return caml_call4(Base_Invariant[1],_j3_,t,sexp_of_t$35,_zc_)}
    function create$10(action){return [0,action,Uopt[3]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$85);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Alarm_value$0);
    var Incremental_Alarm_value=[0,[0],invariant$24,sexp_of_t$35,create$10];
    caml_register_global
     (1348,Incremental_Alarm_value,"Incremental__Alarm_value");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Config_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$86);
    caml_call1(Expect_test_collector[5][1],cst_src_config_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$87,cst$37);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$88);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Config_intf$0);
    var Incremental_Config_intf=[0];
    caml_register_global
     (1349,Incremental_Config_intf,"Incremental__Config_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Config);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$89);
    caml_call1(Expect_test_collector[5][1],cst_src_config_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$90,cst$38);
    function Default(symbol){return [0,1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$91);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Config$0);
    var Incremental_Config=[0,Default];
    caml_register_global(1350,Incremental_Config,"Incremental__Config");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Internal_obser);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$92);
    caml_call1(Expect_test_collector[5][1],cst_src_internal_observer_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$93,cst$39);
    function sexp_of_t$36(param)
     {var _za_=param[2];
      function _zb_(param){return _j4_}
      return caml_call2(Node[1],_zb_,_za_)}
    function next_in_all(param){return param[5]}
    function set_prev_in_all(param,t2){param[4] = t2;return 0}
    function next_in_observing(r){return r[7]}
    function set_next_in_observing(r,v){r[7] = v;return 0}
    function prev_in_observing(r){return r[6]}
    function set_prev_in_observing(r,v){r[6] = v;return 0}
    function next_in_all$0(r){return r[5]}
    function set_next_in_all(r,v){r[5] = v;return 0}
    function prev_in_all(r){return r[4]}
    function set_prev_in_all$0(r,v){r[4] = v;return 0}
    function on_update_handlers(r){return r[3]}
    function set_on_update_handlers(r,v){r[3] = v;return 0}
    function observing(r){return r[2]}
    function _j9_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v]}
    var
     _j__=[0,set_next_in_observing],
     next_in_observing$0=
      [0,
       function(param){return 0},
       cst_next_in_observing,
       _j__,
       next_in_observing,
       _j9_];
    function _j$_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7]]}
    var
     _ka_=[0,set_prev_in_observing],
     prev_in_observing$0=
      [0,
       function(param){return 0},
       cst_prev_in_observing,
       _ka_,
       prev_in_observing,
       _j$_];
    function _kb_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7]]}
    var
     _kc_=[0,set_next_in_all],
     next_in_all$1=
      [0,function(param){return 0},cst_next_in_all,_kc_,next_in_all$0,_kb_];
    function _kd_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7]]}
    var
     _ke_=[0,set_prev_in_all$0],
     prev_in_all$0=
      [0,function(param){return 0},cst_prev_in_all,_ke_,prev_in_all,_kd_];
    function _kf_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7]]}
    var
     _kg_=[0,set_on_update_handlers],
     on_update_handlers$0=
      [0,
       function(param){return 0},
       cst_on_update_handlers,
       _kg_,
       on_update_handlers,
       _kf_];
    function _kh_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7]]}
    var
     _ki_=0,
     observing$0=
      [0,function(param){return 0},cst_observing,_ki_,observing,_kh_];
    function sexp_of_internal_observer(of_a_002,param)
     {var
       state_004=param[1],
       observing_006=param[2],
       on_update_handlers_008=param[3],
       prev_in_all_010=param[4],
       next_in_all_012=param[5],
       prev_in_observing_014=param[6],
       next_in_observing_016=param[7],
       arg_017=
        caml_call2(Uopt[1],Sexplib0_Sexp_conv[23],next_in_observing_016),
       bnds_003=[0,[1,[0,_kj_,[0,arg_017,0]]],0],
       arg_015=
        caml_call2(Uopt[1],Sexplib0_Sexp_conv[23],prev_in_observing_014),
       bnds_003$0=[0,[1,[0,_kk_,[0,arg_015,0]]],bnds_003],
       arg_013=caml_call2(Uopt[1],sexp_of_t$36,next_in_all_012),
       bnds_003$1=[0,[1,[0,_kl_,[0,arg_013,0]]],bnds_003$0],
       arg_011=caml_call2(Uopt[1],sexp_of_t$36,prev_in_all_010),
       bnds_003$2=[0,[1,[0,_km_,[0,arg_011,0]]],bnds_003$1];
      function _y__(_y$_){return sexp_of_t$8(of_a_002,_y$_)}
      var
       arg_009=caml_call2(Core[421],_y__,on_update_handlers_008),
       bnds_003$3=[0,[1,[0,_kn_,[0,arg_009,0]]],bnds_003$2],
       arg_007=sexp_of_t$30(of_a_002,observing_006),
       bnds_003$4=[0,[1,[0,_ko_,[0,arg_007,0]]],bnds_003$3];
      switch(state_004)
       {case 0:var arg_005=_j5_;break;
        case 1:var arg_005=_j6_;break;
        case 2:var arg_005=_j7_;break;
        default:var arg_005=_j8_}
      var bnds_003$5=[0,[1,[0,_kp_,[0,arg_005,0]]],bnds_003$4];
      return [1,bnds_003$5]}
    function incr_state$0(t){return t[2][2]}
    function use_is_allowed(t){return 2 <= t[1]?0:1}
    function same$2(t1,t2){return caml_call2(Core[247],t1,t2)}
    function same_as_packed(t1,param){return same$2(t1,param)}
    function invariant$25(invariant_a,t)
     {function _yX_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         next_in_observing_fun=
          check
           (function(next_in_observing)
             {if
               (1 < t[1] - 1 >>> 0 && ! caml_call1(Uopt[5],next_in_observing))
               throw [0,Assert_failure,_kr_];
              var _y7_=caml_call1(Uopt[6],next_in_observing);
              if(! _y7_)return _y7_;
              var
               _y8_=caml_call1(Uopt[7],next_in_observing)[6],
               _y9_=caml_call1(Uopt[7],_y8_);
              if(caml_call2(Core[246],t,_y9_))return 0;
              throw [0,Assert_failure,_kq_]}),
         prev_in_observing_fun=
          check
           (function(prev_in_observing)
             {if
               (1 < t[1] - 1 >>> 0 && ! caml_call1(Uopt[5],prev_in_observing))
               throw [0,Assert_failure,_kt_];
              var _y4_=caml_call1(Uopt[6],prev_in_observing);
              if(! _y4_)return _y4_;
              var
               _y5_=caml_call1(Uopt[7],prev_in_observing)[7],
               _y6_=caml_call1(Uopt[7],_y5_);
              if(caml_call2(Core[246],t,_y6_))return 0;
              throw [0,Assert_failure,_ks_]}),
         next_in_all_fun=
          check
           (function(next_in_all)
             {if(1 < t[1] - 1 >>> 0 && ! caml_call1(Uopt[5],next_in_all))
               throw [0,Assert_failure,_kv_];
              var _y2_=caml_call1(Uopt[6],next_in_all);
              if(! _y2_)return _y2_;
              var _y3_=caml_call1(Uopt[7],next_in_all)[4];
              if(same_as_packed(t,caml_call1(Uopt[7],_y3_)))return 0;
              throw [0,Assert_failure,_ku_]}),
         prev_in_all_fun=
          check
           (function(prev_in_all)
             {if(1 < t[1] - 1 >>> 0 && ! caml_call1(Uopt[5],prev_in_all))
               throw [0,Assert_failure,_kx_];
              var _y0_=caml_call1(Uopt[6],prev_in_all);
              if(! _y0_)return _y0_;
              var _y1_=caml_call1(Uopt[7],prev_in_all)[5];
              if(same_as_packed(t,caml_call1(Uopt[7],_y1_)))return 0;
              throw [0,Assert_failure,_kw_]}),
         on_update_handlers_fun=
          check
           (function(on_update_handlers)
             {if(3 > t[1])return 0;
              if(caml_call1(Core_List[8],on_update_handlers))return 0;
              throw [0,Assert_failure,_ky_]}),
         observing_fun=
          check(function(_yZ_){return invariant$19(invariant_a,_yZ_)});
        caml_call1(observing_fun,observing$0);
        caml_call1(on_update_handlers_fun,on_update_handlers$0);
        caml_call1(prev_in_all_fun,prev_in_all$0);
        caml_call1(next_in_all_fun,next_in_all$1);
        caml_call1(prev_in_observing_fun,prev_in_observing$0);
        return caml_call1(next_in_observing_fun,next_in_observing$0)}
      function _yY_(x_020)
       {return sexp_of_internal_observer(function(param){return _kz_},x_020)}
      return caml_call4(Base_Invariant[1],_kA_,t,_yY_,_yX_)}
    function value_exn$0(t)
     {var _yT_=t[1];
      if(1 === _yT_)
       {var uopt=t[2][4];
        if(caml_call1(Uopt[5],uopt))
         {var
           _yU_=
            function(x_023)
             {return sexp_of_internal_observer
                      (function(param){return _kB_},x_023)};
          caml_call5(Core[236],0,_kC_,cst_attempt_to_get_value_of_an$0,t,_yU_)}
        return caml_call1(Uopt[11],uopt)}
      if(_yT_)
       {var
         _yV_=
          function(x_022)
           {return sexp_of_internal_observer
                    (function(param){return _kD_},x_022)};
        return caml_call5
                (Core[236],0,_kE_,cst_Observer_value_exn_called_,t,_yV_)}
      function _yW_(x_021)
       {return sexp_of_internal_observer(function(param){return _kF_},x_021)}
      return caml_call5
              (Core[236],0,_kG_,cst_Observer_value_exn_called_$0,t,_yW_)}
    function on_update_exn(t,on_update_handler)
     {if(2 <= t[1])
       {var
         _yR_=
          function(x_024)
           {return sexp_of_internal_observer
                    (function(param){return _kH_},x_024)};
        return caml_call5(Core[236],0,_kI_,cst_on_update_disallowed,t,_yR_)}
      t[3] = [0,on_update_handler,t[3]];
      var _yS_=t[1];
      if(1 === _yS_)
       {var observing=t[2];observing[8] = observing[8] + 1 | 0;return 0}
      if(_yS_)throw [0,Assert_failure,_kJ_];
      return 0}
    function unlink$0(t)
     {var prev=t[6],next=t[7];
      t[6] = Uopt[3];
      t[7] = Uopt[3];
      if(caml_call1(Uopt[6],next))caml_call1(Uopt[11],next)[6] = prev;
      if(caml_call1(Uopt[6],prev))caml_call1(Uopt[11],prev)[7] = next;
      var observing=t[2],_yO_=caml_call1(Uopt[7],observing[21]);
      if(caml_call2(Core[246],t,_yO_))observing[21] = next;
      var _yP_=caml_call1(Core_List[7],t[3]);
      observing[8] = observing[8] - _yP_ | 0;
      t[3] = 0;
      var prev$0=t[4],next$0=t[5];
      t[4] = Uopt[3];
      t[5] = Uopt[3];
      if(caml_call1(Uopt[6],next$0))
       set_prev_in_all(caml_call1(Uopt[11],next$0),prev$0);
      var _yQ_=caml_call1(Uopt[6],prev$0);
      if(! _yQ_)return _yQ_;
      var param=caml_call1(Uopt[11],prev$0);
      param[5] = next$0;
      return 0}
    function sexp_of_t$37(x_025)
     {return sexp_of_internal_observer(function(param){return _kK_},x_025)}
    function invariant$26(param)
     {return invariant$25(function(_yN_){return 0},param)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$94);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Internal_obser$0);
    var
     _kL_=[0,sexp_of_t$37,invariant$26,next_in_all,set_prev_in_all],
     Incremental_Internal_observer=
      [0,
       invariant$25,
       sexp_of_internal_observer,
       same$2,
       observing,
       use_is_allowed,
       value_exn$0,
       on_update_exn,
       unlink$0,
       incr_state$0,
       _kL_];
    caml_register_global
     (1351,Incremental_Internal_observer,"Incremental__Internal_observer");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Observer);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$95);
    caml_call1(Expect_test_collector[5][1],cst_src_observer_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$96,cst$40);
    function sexp_of_t$38(of_a_001,x_002)
     {function _yL_(_yM_){return sexp_of_internal_observer(of_a_001,_yM_)}
      return caml_call2(Core[501],_yL_,x_002)}
    function invariant$27(invariant_a,t)
     {return invariant$25(invariant_a,t[1])}
    function observing$1(t){return t[1][2]}
    function use_is_allowed$0(t){return use_is_allowed(t[1])}
    function value_exn$1(t){return value_exn$0(t[1])}
    function incr_state$1(t){return incr_state$0(t[1])}
    function on_update_exn$0(t,on_update_handler)
     {return on_update_exn(t[1],on_update_handler)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$97);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Observer$0);
    var
     include$7=
      [0,
       invariant$27,
       sexp_of_t$38,
       observing$1,
       use_is_allowed$0,
       value_exn$1,
       on_update_exn$0,
       incr_state$1];
    caml_register_global(1352,include$7,"Incremental__Observer");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_State);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$98);
    caml_call1(Expect_test_collector[5][1],cst_src_state_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$99,cst$41);
    function sexp_of_status(param)
     {if(typeof param === "number")
       switch(param)
        {case 0:return _kM_;case 1:return _kN_;default:return _kO_}
      var arg0_001=param[1],res0_002=sexp_of_t$9(arg0_001);
      return [1,[0,_kP_,[0,res0_002,0]]]}
    function sexp_of_t$39(param)
     {var
       arg1_004=param[2],
       arg0_003=param[1],
       res0_005=sexp_of_t$30(function(param){return _kQ_},arg0_003);
      function _yK_(param){return _kR_}
      var res1_006=caml_call2(Node_update[2],_yK_,arg1_004);
      return [1,[0,_kS_,[0,res0_005,[0,res1_006,0]]]]}
    function invariant$28(t)
     {var node=t[1];
      function _yI_(param){return invariant$19(function(_yJ_){return 0},node)}
      return caml_call4(Base_Invariant[1],_kT_,t,sexp_of_t$39,_yI_)}
    var Run_on_update_handlers$0=[0,sexp_of_t$39,invariant$28];
    function expert_nodes_created_by_curren(r){return r[2]}
    function set_expert_nodes_created_by_cu(r,v){r[2] = v;return 0}
    function currently_running_node(r){return r[1]}
    function set_currently_running_node(r,v){r[1] = v;return 0}
    function _kU_(r,v){return [0,r[1],v]}
    var
     _kV_=[0,set_expert_nodes_created_by_cu],
     expert_nodes_created_by_curren$0=
      [0,
       function(param){return 0},
       cst_expert_nodes_created_by_cu,
       _kV_,
       expert_nodes_created_by_curren,
       _kU_];
    function _kW_(r,v){return [0,v,r[2]]}
    var
     _kX_=[0,set_currently_running_node],
     currently_running_node$0=
      [0,
       function(param){return 0},
       cst_currently_running_node,
       _kX_,
       currently_running_node,
       _kW_];
    function make_creator
     (currently_running_node_fun,expert_nodes_created_by_curren,compile_acc)
     {var
       match=
        caml_call2
         (currently_running_node_fun,currently_running_node$0,compile_acc),
       compile_acc$0=match[2],
       currently_running_node_gen=match[1],
       match$0=
        caml_call2
         (expert_nodes_created_by_curren,
          expert_nodes_created_by_curren$0,
          compile_acc$0),
       compile_acc$1=match$0[2],
       expert_nodes_created_by_curren$1=match$0[1];
      return [0,
              function(acc)
               {var
                 currently_running_node=
                  caml_call1(currently_running_node_gen,acc),
                 expert_nodes_created_by_curren=
                  caml_call1(expert_nodes_created_by_curren$1,acc);
                return [0,
                        currently_running_node,
                        expert_nodes_created_by_curren]},
              compile_acc$1]}
    function create$11(currently_running_node,expert_nodes_created_by_curren)
     {return [0,currently_running_node,expert_nodes_created_by_curren]}
    function map$1(currently_running_node_fun,expert_nodes_created_by_curren)
     {var
       _yH_=
        caml_call1
         (expert_nodes_created_by_curren,expert_nodes_created_by_curren$0);
      return [0,
              caml_call1(currently_running_node_fun,currently_running_node$0),
              _yH_]}
    function iter$1(currently_running_node_fun,expert_nodes_created_by_curren)
     {caml_call1(currently_running_node_fun,currently_running_node$0);
      return caml_call1
              (expert_nodes_created_by_curren,
               expert_nodes_created_by_curren$0)}
    function fold$0
     (init,currently_running_node_fun,expert_nodes_created_by_curren)
     {return caml_call2
              (expert_nodes_created_by_curren,
               caml_call2
                (currently_running_node_fun,init,currently_running_node$0),
               expert_nodes_created_by_curren$0)}
    function map_poly(record)
     {var _yG_=[0,caml_call1(record[1],expert_nodes_created_by_curren$0),0];
      return [0,caml_call1(record[1],currently_running_node$0),_yG_]}
    function for_all$1
     (currently_running_node_fun,expert_nodes_created_by_curren)
     {var
       _yF_=
        caml_call1(currently_running_node_fun,currently_running_node$0);
      return _yF_
              ?caml_call1
                (expert_nodes_created_by_curren,
                 expert_nodes_created_by_curren$0)
              :_yF_}
    function exists$1
     (currently_running_node_fun,expert_nodes_created_by_curren)
     {var
       _yE_=
        caml_call1(currently_running_node_fun,currently_running_node$0);
      return _yE_
              ?_yE_
              :caml_call1
                (expert_nodes_created_by_curren,
                 expert_nodes_created_by_curren$0)}
    function to_list$1
     (currently_running_node_fun,expert_nodes_created_by_curren)
     {var
       _yD_=
        [0,
         caml_call1
          (expert_nodes_created_by_curren,expert_nodes_created_by_curren$0),
         0];
      return [0,
              caml_call1(currently_running_node_fun,currently_running_node$0),
              _yD_]}
    function iter$2
     (record,currently_running_node_fun,expert_nodes_created_by_curren)
     {caml_call3
       (currently_running_node_fun,currently_running_node$0,record,record[1]);
      return caml_call3
              (expert_nodes_created_by_curren,
               expert_nodes_created_by_curren$0,
               record,
               record[2])}
    function fold$1
     (record,init,currently_running_node_fun,expert_nodes_created_by_curren)
     {var _yC_=record[2];
      return caml_call4
              (expert_nodes_created_by_curren,
               caml_call4
                (currently_running_node_fun,
                 init,
                 currently_running_node$0,
                 record,
                 record[1]),
               expert_nodes_created_by_curren$0,
               record,
               _yC_)}
    function for_all$2
     (record,currently_running_node_fun,expert_nodes_created_by_curren)
     {var
       _yB_=
        caml_call3
         (currently_running_node_fun,
          currently_running_node$0,
          record,
          record[1]);
      return _yB_
              ?caml_call3
                (expert_nodes_created_by_curren,
                 expert_nodes_created_by_curren$0,
                 record,
                 record[2])
              :_yB_}
    function exists$2
     (record,currently_running_node_fun,expert_nodes_created_by_curren)
     {var
       _yA_=
        caml_call3
         (currently_running_node_fun,
          currently_running_node$0,
          record,
          record[1]);
      return _yA_
              ?_yA_
              :caml_call3
                (expert_nodes_created_by_curren,
                 expert_nodes_created_by_curren$0,
                 record,
                 record[2])}
    function to_list$2
     (record,currently_running_node_fun,expert_nodes_created_by_curren)
     {var
       _yz_=
        [0,
         caml_call3
          (expert_nodes_created_by_curren,
           expert_nodes_created_by_curren$0,
           record,
           record[2]),
         0];
      return [0,
              caml_call3
               (currently_running_node_fun,
                currently_running_node$0,
                record,
                record[1]),
              _yz_]}
    function map$2
     (record,currently_running_node_fun,expert_nodes_created_by_curren)
     {var
       _yy_=
        caml_call3
         (expert_nodes_created_by_curren,
          expert_nodes_created_by_curren$0,
          record,
          record[2]);
      return [0,
              caml_call3
               (currently_running_node_fun,
                currently_running_node$0,
                record,
                record[1]),
              _yy_]}
    function set_all_mutable_fields
     (record,currently_running_node,expert_nodes_created_by_curren)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[1] = currently_running_node;
      record$0[2] = expert_nodes_created_by_curren;
      return 0}
    var
     Direct=
      [0,
       iter$2,
       fold$1,
       for_all$2,
       exists$2,
       to_list$2,
       map$2,
       set_all_mutable_fields],
     Fields=
      [0,
       names,
       expert_nodes_created_by_curren$0,
       currently_running_node$0,
       make_creator,
       create$11,
       map$1,
       iter$1,
       fold$0,
       map_poly,
       for_all$1,
       exists$1,
       to_list$1,
       Direct];
    function sexp_of_t$40(param)
     {var
       currently_running_node_008=param[1],
       expert_nodes_created_by_curren=param[2],
       arg_011=
        caml_call2(Core[421],Packed$0[1],expert_nodes_created_by_curren),
       bnds_007=[0,[1,[0,_kY_,[0,arg_011,0]]],0],
       arg_009=caml_call2(Core[454],Packed$0[1],currently_running_node_008),
       bnds_007$0=[0,[1,[0,_kZ_,[0,arg_009,0]]],bnds_007];
      return [1,bnds_007$0]}
    function invariant$29(t)
     {function _yt_(param)
       {function _yu_(_yx_){return 0}
        function _yv_(_yw_){return 0}
        return caml_call2(Fields[7],_yv_,_yu_)}
      return caml_call4(Base_Invariant[1],_k0_,t,sexp_of_t$40,_yt_)}
    function create$12(param){return [0,0,0]}
    var
     Only_in_debug$0=
      [0,
       expert_nodes_created_by_curren,
       set_expert_nodes_created_by_cu,
       currently_running_node,
       set_currently_running_node,
       Fields,
       sexp_of_t$40,
       invariant$29,
       create$12];
    function sexp_of_t$41(param)
     {var arg0_012=param[1];
      function _yr_(param){return _k1_}
      function _ys_(param){return _k2_}
      var res0_013=caml_call3(Weak_hashtbl[1],_ys_,_yr_,arg0_012);
      return [1,[0,_k3_,[0,res0_013,0]]]}
    var Packed_weak_hashtbl$0=[0,sexp_of_t$41];
    function num_var_sets(r){return r[27]}
    function set_num_var_sets(r,v){r[27] = v;return 0}
    function num_nodes_recomputed_directly_(r){return r[26]}
    function set_num_nodes_recomputed_direc(r,v){r[26] = v;return 0}
    function num_nodes_recomputed_directly_$0(r){return r[25]}
    function set_num_nodes_recomputed_direc$0(r,v){r[25] = v;return 0}
    function num_nodes_recomputed(r){return r[24]}
    function set_num_nodes_recomputed(r,v){r[24] = v;return 0}
    function num_nodes_invalidated(r){return r[23]}
    function set_num_nodes_invalidated(r,v){r[23] = v;return 0}
    function num_nodes_created(r){return r[22]}
    function set_num_nodes_created(r,v){r[22] = v;return 0}
    function num_nodes_changed(r){return r[21]}
    function set_num_nodes_changed(r,v){r[21] = v;return 0}
    function num_nodes_became_unnecessary(r){return r[20]}
    function set_num_nodes_became_unnecessa(r,v){r[20] = v;return 0}
    function num_nodes_became_necessary(r){return r[19]}
    function set_num_nodes_became_necessary(r,v){r[19] = v;return 0}
    function keep_node_creation_backtrace(r){return r[18]}
    function set_keep_node_creation_backtra(r,v){r[18] = v;return 0}
    function weak_hashtbls(r){return r[17]}
    function only_in_debug(r){return r[16]}
    function set_only_in_debug(r,v){r[16] = v;return 0}
    function run_on_update_handlers$0(r){return r[15]}
    function handle_after_stabilization(r){return r[14]}
    function set_during_stabilization(r){return r[13]}
    function disallowed_observers(r){return r[12]}
    function new_observers(r){return r[11]}
    function finalized_observers(r){return r[10]}
    function all_observers(r){return r[9]}
    function set_all_observers(r,v){r[9] = v;return 0}
    function num_active_observers(r){return r[8]}
    function set_num_active_observers(r,v){r[8] = v;return 0}
    function propagate_invalidity(r){return r[7]}
    function adjust_heights_heap(r){return r[6]}
    function recompute_heap(r){return r[5]}
    function current_scope(r){return r[4]}
    function set_current_scope(r,v){r[4] = v;return 0}
    function stabilization_num(r){return r[3]}
    function set_stabilization_num(r,v){r[3] = v;return 0}
    function bind_lhs_change_should_invalid(r){return r[2]}
    function status(r){return r[1]}
    function set_status(r,v){r[1] = v;return 0}
    function _k4_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              v]}
    var
     _k5_=[0,set_num_var_sets],
     num_var_sets$0=
      [0,function(param){return 0},cst_num_var_sets,_k5_,num_var_sets,_k4_];
    function _k6_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              v,
              r[27]]}
    var
     _k7_=[0,set_num_nodes_recomputed_direc],
     num_nodes_recomputed_directly_$1=
      [0,
       function(param){return 0},
       cst_num_nodes_recomputed_direc,
       _k7_,
       num_nodes_recomputed_directly_,
       _k6_];
    function _k8_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              v,
              r[26],
              r[27]]}
    var
     _k9_=[0,set_num_nodes_recomputed_direc$0],
     num_nodes_recomputed_directly_$2=
      [0,
       function(param){return 0},
       cst_num_nodes_recomputed_direc$0,
       _k9_,
       num_nodes_recomputed_directly_$0,
       _k8_];
    function _k__(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              v,
              r[25],
              r[26],
              r[27]]}
    var
     _k$_=[0,set_num_nodes_recomputed],
     num_nodes_recomputed$0=
      [0,
       function(param){return 0},
       cst_num_nodes_recomputed,
       _k$_,
       num_nodes_recomputed,
       _k__];
    function _la_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              v,
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lb_=[0,set_num_nodes_invalidated],
     num_nodes_invalidated$0=
      [0,
       function(param){return 0},
       cst_num_nodes_invalidated,
       _lb_,
       num_nodes_invalidated,
       _la_];
    function _lc_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              v,
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _ld_=[0,set_num_nodes_created],
     num_nodes_created$0=
      [0,
       function(param){return 0},
       cst_num_nodes_created,
       _ld_,
       num_nodes_created,
       _lc_];
    function _le_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              v,
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lf_=[0,set_num_nodes_changed],
     num_nodes_changed$0=
      [0,
       function(param){return 0},
       cst_num_nodes_changed,
       _lf_,
       num_nodes_changed,
       _le_];
    function _lg_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              v,
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lh_=[0,set_num_nodes_became_unnecessa],
     num_nodes_became_unnecessary$0=
      [0,
       function(param){return 0},
       cst_num_nodes_became_unnecessa,
       _lh_,
       num_nodes_became_unnecessary,
       _lg_];
    function _li_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              v,
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lj_=[0,set_num_nodes_became_necessary],
     num_nodes_became_necessary$0=
      [0,
       function(param){return 0},
       cst_num_nodes_became_necessary,
       _lj_,
       num_nodes_became_necessary,
       _li_];
    function _lk_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              v,
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _ll_=[0,set_keep_node_creation_backtra],
     keep_node_creation_backtrace$0=
      [0,
       function(param){return 0},
       cst_keep_node_creation_backtra,
       _ll_,
       keep_node_creation_backtrace,
       _lk_];
    function _lm_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              v,
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _ln_=0,
     weak_hashtbls$0=
      [0,function(param){return 0},cst_weak_hashtbls,_ln_,weak_hashtbls,_lm_];
    function _lo_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v,
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lp_=[0,set_only_in_debug],
     only_in_debug$0=
      [0,function(param){return 0},cst_only_in_debug,_lp_,only_in_debug,_lo_];
    function _lq_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lr_=0,
     run_on_update_handlers$1=
      [0,
       function(param){return 0},
       cst_run_on_update_handlers,
       _lr_,
       run_on_update_handlers$0,
       _lq_];
    function _ls_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lt_=0,
     handle_after_stabilization$0=
      [0,
       function(param){return 0},
       cst_handle_after_stabilization,
       _lt_,
       handle_after_stabilization,
       _ls_];
    function _lu_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lv_=0,
     set_during_stabilization$0=
      [0,
       function(param){return 0},
       cst_set_during_stabilization,
       _lv_,
       set_during_stabilization,
       _lu_];
    function _lw_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lx_=0,
     disallowed_observers$0=
      [0,
       function(param){return 0},
       cst_disallowed_observers,
       _lx_,
       disallowed_observers,
       _lw_];
    function _ly_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lz_=0,
     new_observers$0=
      [0,function(param){return 0},cst_new_observers,_lz_,new_observers,_ly_];
    function _lA_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lB_=0,
     finalized_observers$0=
      [0,
       function(param){return 0},
       cst_finalized_observers,
       _lB_,
       finalized_observers,
       _lA_];
    function _lC_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lD_=[0,set_all_observers],
     all_observers$0=
      [0,function(param){return 0},cst_all_observers,_lD_,all_observers,_lC_];
    function _lE_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lF_=[0,set_num_active_observers],
     num_active_observers$0=
      [0,
       function(param){return 0},
       cst_num_active_observers,
       _lF_,
       num_active_observers,
       _lE_];
    function _lG_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lH_=0,
     propagate_invalidity$0=
      [0,
       function(param){return 0},
       cst_propagate_invalidity,
       _lH_,
       propagate_invalidity,
       _lG_];
    function _lI_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lJ_=0,
     adjust_heights_heap$0=
      [0,
       function(param){return 0},
       cst_adjust_heights_heap,
       _lJ_,
       adjust_heights_heap,
       _lI_];
    function _lK_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lL_=0,
     recompute_heap$0=
      [0,
       function(param){return 0},
       cst_recompute_heap,
       _lL_,
       recompute_heap,
       _lK_];
    function _lM_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lN_=[0,set_current_scope],
     current_scope$0=
      [0,function(param){return 0},cst_current_scope,_lN_,current_scope,_lM_];
    function _lO_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lP_=[0,set_stabilization_num],
     stabilization_num$0=
      [0,
       function(param){return 0},
       cst_stabilization_num,
       _lP_,
       stabilization_num,
       _lO_];
    function _lQ_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lR_=0,
     bind_lhs_change_should_invalid$0=
      [0,
       function(param){return 0},
       cst_bind_lhs_change_should_inv,
       _lR_,
       bind_lhs_change_should_invalid,
       _lQ_];
    function _lS_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25],
              r[26],
              r[27]]}
    var
     _lT_=[0,set_status],
     status$0=[0,function(param){return 0},cst_status,_lT_,status,_lS_];
    function make_creator$0
     (status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun,
      compile_acc)
     {var
       match=caml_call2(status_fun,status$0,compile_acc),
       compile_acc$0=match[2],
       status_gen=match[1],
       match$0=
        caml_call2
         (bind_lhs_change_should_invalid,
          bind_lhs_change_should_invalid$0,
          compile_acc$0),
       compile_acc$1=match$0[2],
       bind_lhs_change_should_invalid$1=match$0[1],
       match$1=
        caml_call2(stabilization_num_fun,stabilization_num$0,compile_acc$1),
       compile_acc$2=match$1[2],
       stabilization_num_gen=match$1[1],
       match$2=caml_call2(current_scope_fun,current_scope$0,compile_acc$2),
       compile_acc$3=match$2[2],
       current_scope_gen=match$2[1],
       match$3=caml_call2(recompute_heap_fun,recompute_heap$0,compile_acc$3),
       compile_acc$4=match$3[2],
       recompute_heap_gen=match$3[1],
       match$4=
        caml_call2
         (adjust_heights_heap_fun,adjust_heights_heap$0,compile_acc$4),
       compile_acc$5=match$4[2],
       adjust_heights_heap_gen=match$4[1],
       match$5=
        caml_call2
         (propagate_invalidity_fun,propagate_invalidity$0,compile_acc$5),
       compile_acc$6=match$5[2],
       propagate_invalidity_gen=match$5[1],
       match$6=
        caml_call2
         (num_active_observers_fun,num_active_observers$0,compile_acc$6),
       compile_acc$7=match$6[2],
       num_active_observers_gen=match$6[1],
       match$7=caml_call2(all_observers_fun,all_observers$0,compile_acc$7),
       compile_acc$8=match$7[2],
       all_observers_gen=match$7[1],
       match$8=
        caml_call2
         (finalized_observers_fun,finalized_observers$0,compile_acc$8),
       compile_acc$9=match$8[2],
       finalized_observers_gen=match$8[1],
       match$9=caml_call2(new_observers_fun,new_observers$0,compile_acc$9),
       compile_acc$10=match$9[2],
       new_observers_gen=match$9[1],
       match$10=
        caml_call2
         (disallowed_observers_fun,disallowed_observers$0,compile_acc$10),
       compile_acc$11=match$10[2],
       disallowed_observers_gen=match$10[1],
       match$11=
        caml_call2
         (set_during_stabilization_fun,
          set_during_stabilization$0,
          compile_acc$11),
       compile_acc$12=match$11[2],
       set_during_stabilization_gen=match$11[1],
       match$12=
        caml_call2
         (handle_after_stabilization_fun,
          handle_after_stabilization$0,
          compile_acc$12),
       compile_acc$13=match$12[2],
       handle_after_stabilization_gen=match$12[1],
       match$13=
        caml_call2
         (run_on_update_handlers_fun,run_on_update_handlers$1,compile_acc$13),
       compile_acc$14=match$13[2],
       run_on_update_handlers_gen=match$13[1],
       match$14=caml_call2(only_in_debug_fun,only_in_debug$0,compile_acc$14),
       compile_acc$15=match$14[2],
       only_in_debug_gen=match$14[1],
       match$15=caml_call2(weak_hashtbls_fun,weak_hashtbls$0,compile_acc$15),
       compile_acc$16=match$15[2],
       weak_hashtbls_gen=match$15[1],
       match$16=
        caml_call2
         (keep_node_creation_backtrace_f,
          keep_node_creation_backtrace$0,
          compile_acc$16),
       compile_acc$17=match$16[2],
       keep_node_creation_backtrace_g=match$16[1],
       match$17=
        caml_call2
         (num_nodes_became_necessary_fun,
          num_nodes_became_necessary$0,
          compile_acc$17),
       compile_acc$18=match$17[2],
       num_nodes_became_necessary_gen=match$17[1],
       match$18=
        caml_call2
         (num_nodes_became_unnecessary_f,
          num_nodes_became_unnecessary$0,
          compile_acc$18),
       compile_acc$19=match$18[2],
       num_nodes_became_unnecessary_g=match$18[1],
       match$19=
        caml_call2(num_nodes_changed_fun,num_nodes_changed$0,compile_acc$19),
       compile_acc$20=match$19[2],
       num_nodes_changed_gen=match$19[1],
       match$20=
        caml_call2(num_nodes_created_fun,num_nodes_created$0,compile_acc$20),
       compile_acc$21=match$20[2],
       num_nodes_created_gen=match$20[1],
       match$21=
        caml_call2
         (num_nodes_invalidated_fun,num_nodes_invalidated$0,compile_acc$21),
       compile_acc$22=match$21[2],
       num_nodes_invalidated_gen=match$21[1],
       match$22=
        caml_call2
         (num_nodes_recomputed_fun,num_nodes_recomputed$0,compile_acc$22),
       compile_acc$23=match$22[2],
       num_nodes_recomputed_gen=match$22[1],
       match$23=
        caml_call2
         (num_nodes_recomputed_directly_$0,
          num_nodes_recomputed_directly_$2,
          compile_acc$23),
       compile_acc$24=match$23[2],
       num_nodes_recomputed_directly_$3=match$23[1],
       match$24=
        caml_call2
         (num_nodes_recomputed_directly_,
          num_nodes_recomputed_directly_$1,
          compile_acc$24),
       compile_acc$25=match$24[2],
       num_nodes_recomputed_directly_$4=match$24[1],
       match$25=caml_call2(num_var_sets_fun,num_var_sets$0,compile_acc$25),
       compile_acc$26=match$25[2],
       num_var_sets_gen=match$25[1];
      return [0,
              function(acc)
               {var
                 status=caml_call1(status_gen,acc),
                 bind_lhs_change_should_invalid=
                  caml_call1(bind_lhs_change_should_invalid$1,acc),
                 stabilization_num=caml_call1(stabilization_num_gen,acc),
                 current_scope=caml_call1(current_scope_gen,acc),
                 recompute_heap=caml_call1(recompute_heap_gen,acc),
                 adjust_heights_heap=caml_call1(adjust_heights_heap_gen,acc),
                 propagate_invalidity=caml_call1(propagate_invalidity_gen,acc),
                 num_active_observers=caml_call1(num_active_observers_gen,acc),
                 all_observers=caml_call1(all_observers_gen,acc),
                 finalized_observers=caml_call1(finalized_observers_gen,acc),
                 new_observers=caml_call1(new_observers_gen,acc),
                 disallowed_observers=caml_call1(disallowed_observers_gen,acc),
                 set_during_stabilization=
                  caml_call1(set_during_stabilization_gen,acc),
                 handle_after_stabilization=
                  caml_call1(handle_after_stabilization_gen,acc),
                 run_on_update_handlers=
                  caml_call1(run_on_update_handlers_gen,acc),
                 only_in_debug=caml_call1(only_in_debug_gen,acc),
                 weak_hashtbls=caml_call1(weak_hashtbls_gen,acc),
                 keep_node_creation_backtrace=
                  caml_call1(keep_node_creation_backtrace_g,acc),
                 num_nodes_became_necessary=
                  caml_call1(num_nodes_became_necessary_gen,acc),
                 num_nodes_became_unnecessary=
                  caml_call1(num_nodes_became_unnecessary_g,acc),
                 num_nodes_changed=caml_call1(num_nodes_changed_gen,acc),
                 num_nodes_created=caml_call1(num_nodes_created_gen,acc),
                 num_nodes_invalidated=
                  caml_call1(num_nodes_invalidated_gen,acc),
                 num_nodes_recomputed=caml_call1(num_nodes_recomputed_gen,acc),
                 num_nodes_recomputed_directly_=
                  caml_call1(num_nodes_recomputed_directly_$3,acc),
                 num_nodes_recomputed_directly_$0=
                  caml_call1(num_nodes_recomputed_directly_$4,acc),
                 num_var_sets=caml_call1(num_var_sets_gen,acc);
                return [0,
                        status,
                        bind_lhs_change_should_invalid,
                        stabilization_num,
                        current_scope,
                        recompute_heap,
                        adjust_heights_heap,
                        propagate_invalidity,
                        num_active_observers,
                        all_observers,
                        finalized_observers,
                        new_observers,
                        disallowed_observers,
                        set_during_stabilization,
                        handle_after_stabilization,
                        run_on_update_handlers,
                        only_in_debug,
                        weak_hashtbls,
                        keep_node_creation_backtrace,
                        num_nodes_became_necessary,
                        num_nodes_became_unnecessary,
                        num_nodes_changed,
                        num_nodes_created,
                        num_nodes_invalidated,
                        num_nodes_recomputed,
                        num_nodes_recomputed_directly_,
                        num_nodes_recomputed_directly_$0,
                        num_var_sets]},
              compile_acc$26]}
    function create$13
     (status,
      bind_lhs_change_should_invalid,
      stabilization_num,
      current_scope,
      recompute_heap,
      adjust_heights_heap,
      propagate_invalidity,
      num_active_observers,
      all_observers,
      finalized_observers,
      new_observers,
      disallowed_observers,
      set_during_stabilization,
      handle_after_stabilization,
      run_on_update_handlers,
      only_in_debug,
      weak_hashtbls,
      keep_node_creation_backtrace,
      num_nodes_became_necessary,
      num_nodes_became_unnecessary,
      num_nodes_changed,
      num_nodes_created,
      num_nodes_invalidated,
      num_nodes_recomputed,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets)
     {return [0,
              status,
              bind_lhs_change_should_invalid,
              stabilization_num,
              current_scope,
              recompute_heap,
              adjust_heights_heap,
              propagate_invalidity,
              num_active_observers,
              all_observers,
              finalized_observers,
              new_observers,
              disallowed_observers,
              set_during_stabilization,
              handle_after_stabilization,
              run_on_update_handlers,
              only_in_debug,
              weak_hashtbls,
              keep_node_creation_backtrace,
              num_nodes_became_necessary,
              num_nodes_became_unnecessary,
              num_nodes_changed,
              num_nodes_created,
              num_nodes_invalidated,
              num_nodes_recomputed,
              num_nodes_recomputed_directly_$0,
              num_nodes_recomputed_directly_,
              num_var_sets]}
    function map$3
     (status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _x3_=caml_call1(num_var_sets_fun,num_var_sets$0),
       _x4_=
        caml_call1
         (num_nodes_recomputed_directly_,num_nodes_recomputed_directly_$1),
       _x5_=
        caml_call1
         (num_nodes_recomputed_directly_$0,num_nodes_recomputed_directly_$2),
       _x6_=caml_call1(num_nodes_recomputed_fun,num_nodes_recomputed$0),
       _x7_=caml_call1(num_nodes_invalidated_fun,num_nodes_invalidated$0),
       _x8_=caml_call1(num_nodes_created_fun,num_nodes_created$0),
       _x9_=caml_call1(num_nodes_changed_fun,num_nodes_changed$0),
       _x__=
        caml_call1
         (num_nodes_became_unnecessary_f,num_nodes_became_unnecessary$0),
       _x$_=
        caml_call1
         (num_nodes_became_necessary_fun,num_nodes_became_necessary$0),
       _ya_=
        caml_call1
         (keep_node_creation_backtrace_f,keep_node_creation_backtrace$0),
       _yb_=caml_call1(weak_hashtbls_fun,weak_hashtbls$0),
       _yc_=caml_call1(only_in_debug_fun,only_in_debug$0),
       _yd_=caml_call1(run_on_update_handlers_fun,run_on_update_handlers$1),
       _ye_=
        caml_call1
         (handle_after_stabilization_fun,handle_after_stabilization$0),
       _yf_=
        caml_call1(set_during_stabilization_fun,set_during_stabilization$0),
       _yg_=caml_call1(disallowed_observers_fun,disallowed_observers$0),
       _yh_=caml_call1(new_observers_fun,new_observers$0),
       _yi_=caml_call1(finalized_observers_fun,finalized_observers$0),
       _yj_=caml_call1(all_observers_fun,all_observers$0),
       _yk_=caml_call1(num_active_observers_fun,num_active_observers$0),
       _yl_=caml_call1(propagate_invalidity_fun,propagate_invalidity$0),
       _ym_=caml_call1(adjust_heights_heap_fun,adjust_heights_heap$0),
       _yn_=caml_call1(recompute_heap_fun,recompute_heap$0),
       _yo_=caml_call1(current_scope_fun,current_scope$0),
       _yp_=caml_call1(stabilization_num_fun,stabilization_num$0),
       _yq_=
        caml_call1
         (bind_lhs_change_should_invalid,bind_lhs_change_should_invalid$0);
      return [0,
              caml_call1(status_fun,status$0),
              _yq_,
              _yp_,
              _yo_,
              _yn_,
              _ym_,
              _yl_,
              _yk_,
              _yj_,
              _yi_,
              _yh_,
              _yg_,
              _yf_,
              _ye_,
              _yd_,
              _yc_,
              _yb_,
              _ya_,
              _x$_,
              _x__,
              _x9_,
              _x8_,
              _x7_,
              _x6_,
              _x5_,
              _x4_,
              _x3_]}
    function iter$3
     (status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {caml_call1(status_fun,status$0);
      caml_call1
       (bind_lhs_change_should_invalid,bind_lhs_change_should_invalid$0);
      caml_call1(stabilization_num_fun,stabilization_num$0);
      caml_call1(current_scope_fun,current_scope$0);
      caml_call1(recompute_heap_fun,recompute_heap$0);
      caml_call1(adjust_heights_heap_fun,adjust_heights_heap$0);
      caml_call1(propagate_invalidity_fun,propagate_invalidity$0);
      caml_call1(num_active_observers_fun,num_active_observers$0);
      caml_call1(all_observers_fun,all_observers$0);
      caml_call1(finalized_observers_fun,finalized_observers$0);
      caml_call1(new_observers_fun,new_observers$0);
      caml_call1(disallowed_observers_fun,disallowed_observers$0);
      caml_call1(set_during_stabilization_fun,set_during_stabilization$0);
      caml_call1(handle_after_stabilization_fun,handle_after_stabilization$0);
      caml_call1(run_on_update_handlers_fun,run_on_update_handlers$1);
      caml_call1(only_in_debug_fun,only_in_debug$0);
      caml_call1(weak_hashtbls_fun,weak_hashtbls$0);
      caml_call1
       (keep_node_creation_backtrace_f,keep_node_creation_backtrace$0);
      caml_call1(num_nodes_became_necessary_fun,num_nodes_became_necessary$0);
      caml_call1
       (num_nodes_became_unnecessary_f,num_nodes_became_unnecessary$0);
      caml_call1(num_nodes_changed_fun,num_nodes_changed$0);
      caml_call1(num_nodes_created_fun,num_nodes_created$0);
      caml_call1(num_nodes_invalidated_fun,num_nodes_invalidated$0);
      caml_call1(num_nodes_recomputed_fun,num_nodes_recomputed$0);
      caml_call1
       (num_nodes_recomputed_directly_$0,num_nodes_recomputed_directly_$2);
      caml_call1
       (num_nodes_recomputed_directly_,num_nodes_recomputed_directly_$1);
      return caml_call1(num_var_sets_fun,num_var_sets$0)}
    function fold$2
     (init,
      status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {return caml_call2
              (num_var_sets_fun,
               caml_call2
                (num_nodes_recomputed_directly_,
                 caml_call2
                  (num_nodes_recomputed_directly_$0,
                   caml_call2
                    (num_nodes_recomputed_fun,
                     caml_call2
                      (num_nodes_invalidated_fun,
                       caml_call2
                        (num_nodes_created_fun,
                         caml_call2
                          (num_nodes_changed_fun,
                           caml_call2
                            (num_nodes_became_unnecessary_f,
                             caml_call2
                              (num_nodes_became_necessary_fun,
                               caml_call2
                                (keep_node_creation_backtrace_f,
                                 caml_call2
                                  (weak_hashtbls_fun,
                                   caml_call2
                                    (only_in_debug_fun,
                                     caml_call2
                                      (run_on_update_handlers_fun,
                                       caml_call2
                                        (handle_after_stabilization_fun,
                                         caml_call2
                                          (set_during_stabilization_fun,
                                           caml_call2
                                            (disallowed_observers_fun,
                                             caml_call2
                                              (new_observers_fun,
                                               caml_call2
                                                (finalized_observers_fun,
                                                 caml_call2
                                                  (all_observers_fun,
                                                   caml_call2
                                                    (num_active_observers_fun,
                                                     caml_call2
                                                      (propagate_invalidity_fun,
                                                       caml_call2
                                                        (adjust_heights_heap_fun,
                                                         caml_call2
                                                          (recompute_heap_fun,
                                                           caml_call2
                                                            (current_scope_fun,
                                                             caml_call2
                                                              (stabilization_num_fun,
                                                               caml_call2
                                                                (bind_lhs_change_should_invalid,
                                                                 caml_call2(status_fun,init,status$0),
                                                                 bind_lhs_change_should_invalid$0),
                                                               stabilization_num$0),
                                                             current_scope$0),
                                                           recompute_heap$0),
                                                         adjust_heights_heap$0),
                                                       propagate_invalidity$0),
                                                     num_active_observers$0),
                                                   all_observers$0),
                                                 finalized_observers$0),
                                               new_observers$0),
                                             disallowed_observers$0),
                                           set_during_stabilization$0),
                                         handle_after_stabilization$0),
                                       run_on_update_handlers$1),
                                     only_in_debug$0),
                                   weak_hashtbls$0),
                                 keep_node_creation_backtrace$0),
                               num_nodes_became_necessary$0),
                             num_nodes_became_unnecessary$0),
                           num_nodes_changed$0),
                         num_nodes_created$0),
                       num_nodes_invalidated$0),
                     num_nodes_recomputed$0),
                   num_nodes_recomputed_directly_$2),
                 num_nodes_recomputed_directly_$1),
               num_var_sets$0)}
    function map_poly$0(record)
     {var
       _xD_=[0,caml_call1(record[1],num_var_sets$0),0],
       _xE_=[0,caml_call1(record[1],num_nodes_recomputed_directly_$1),_xD_],
       _xF_=[0,caml_call1(record[1],num_nodes_recomputed_directly_$2),_xE_],
       _xG_=[0,caml_call1(record[1],num_nodes_recomputed$0),_xF_],
       _xH_=[0,caml_call1(record[1],num_nodes_invalidated$0),_xG_],
       _xI_=[0,caml_call1(record[1],num_nodes_created$0),_xH_],
       _xJ_=[0,caml_call1(record[1],num_nodes_changed$0),_xI_],
       _xK_=[0,caml_call1(record[1],num_nodes_became_unnecessary$0),_xJ_],
       _xL_=[0,caml_call1(record[1],num_nodes_became_necessary$0),_xK_],
       _xM_=[0,caml_call1(record[1],keep_node_creation_backtrace$0),_xL_],
       _xN_=[0,caml_call1(record[1],weak_hashtbls$0),_xM_],
       _xO_=[0,caml_call1(record[1],only_in_debug$0),_xN_],
       _xP_=[0,caml_call1(record[1],run_on_update_handlers$1),_xO_],
       _xQ_=[0,caml_call1(record[1],handle_after_stabilization$0),_xP_],
       _xR_=[0,caml_call1(record[1],set_during_stabilization$0),_xQ_],
       _xS_=[0,caml_call1(record[1],disallowed_observers$0),_xR_],
       _xT_=[0,caml_call1(record[1],new_observers$0),_xS_],
       _xU_=[0,caml_call1(record[1],finalized_observers$0),_xT_],
       _xV_=[0,caml_call1(record[1],all_observers$0),_xU_],
       _xW_=[0,caml_call1(record[1],num_active_observers$0),_xV_],
       _xX_=[0,caml_call1(record[1],propagate_invalidity$0),_xW_],
       _xY_=[0,caml_call1(record[1],adjust_heights_heap$0),_xX_],
       _xZ_=[0,caml_call1(record[1],recompute_heap$0),_xY_],
       _x0_=[0,caml_call1(record[1],current_scope$0),_xZ_],
       _x1_=[0,caml_call1(record[1],stabilization_num$0),_x0_],
       _x2_=[0,caml_call1(record[1],bind_lhs_change_should_invalid$0),_x1_];
      return [0,caml_call1(record[1],status$0),_x2_]}
    function for_all$3
     (status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _xd_=caml_call1(status_fun,status$0),
       _xe_=
        _xd_
         ?caml_call1
           (bind_lhs_change_should_invalid,bind_lhs_change_should_invalid$0)
         :_xd_,
       _xf_=_xe_?caml_call1(stabilization_num_fun,stabilization_num$0):_xe_,
       _xg_=_xf_?caml_call1(current_scope_fun,current_scope$0):_xf_,
       _xh_=_xg_?caml_call1(recompute_heap_fun,recompute_heap$0):_xg_,
       _xi_=
        _xh_?caml_call1(adjust_heights_heap_fun,adjust_heights_heap$0):_xh_,
       _xj_=
        _xi_?caml_call1(propagate_invalidity_fun,propagate_invalidity$0):_xi_,
       _xk_=
        _xj_?caml_call1(num_active_observers_fun,num_active_observers$0):_xj_,
       _xl_=_xk_?caml_call1(all_observers_fun,all_observers$0):_xk_,
       _xm_=
        _xl_?caml_call1(finalized_observers_fun,finalized_observers$0):_xl_,
       _xn_=_xm_?caml_call1(new_observers_fun,new_observers$0):_xm_,
       _xo_=
        _xn_?caml_call1(disallowed_observers_fun,disallowed_observers$0):_xn_,
       _xp_=
        _xo_
         ?caml_call1(set_during_stabilization_fun,set_during_stabilization$0)
         :_xo_,
       _xq_=
        _xp_
         ?caml_call1
           (handle_after_stabilization_fun,handle_after_stabilization$0)
         :_xp_,
       _xr_=
        _xq_
         ?caml_call1(run_on_update_handlers_fun,run_on_update_handlers$1)
         :_xq_,
       _xs_=_xr_?caml_call1(only_in_debug_fun,only_in_debug$0):_xr_,
       _xt_=_xs_?caml_call1(weak_hashtbls_fun,weak_hashtbls$0):_xs_,
       _xu_=
        _xt_
         ?caml_call1
           (keep_node_creation_backtrace_f,keep_node_creation_backtrace$0)
         :_xt_,
       _xv_=
        _xu_
         ?caml_call1
           (num_nodes_became_necessary_fun,num_nodes_became_necessary$0)
         :_xu_,
       _xw_=
        _xv_
         ?caml_call1
           (num_nodes_became_unnecessary_f,num_nodes_became_unnecessary$0)
         :_xv_,
       _xx_=_xw_?caml_call1(num_nodes_changed_fun,num_nodes_changed$0):_xw_,
       _xy_=_xx_?caml_call1(num_nodes_created_fun,num_nodes_created$0):_xx_,
       _xz_=
        _xy_
         ?caml_call1(num_nodes_invalidated_fun,num_nodes_invalidated$0)
         :_xy_,
       _xA_=
        _xz_?caml_call1(num_nodes_recomputed_fun,num_nodes_recomputed$0):_xz_,
       _xB_=
        _xA_
         ?caml_call1
           (num_nodes_recomputed_directly_$0,num_nodes_recomputed_directly_$2)
         :_xA_,
       _xC_=
        _xB_
         ?caml_call1
           (num_nodes_recomputed_directly_,num_nodes_recomputed_directly_$1)
         :_xB_;
      return _xC_?caml_call1(num_var_sets_fun,num_var_sets$0):_xC_}
    function exists$3
     (status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _xc_=caml_call1(status_fun,status$0),
       _wP_=
        _xc_
        ||
        caml_call1
         (bind_lhs_change_should_invalid,bind_lhs_change_should_invalid$0),
       _wQ_=_wP_ || caml_call1(stabilization_num_fun,stabilization_num$0),
       _wR_=_wQ_ || caml_call1(current_scope_fun,current_scope$0),
       _wS_=_wR_ || caml_call1(recompute_heap_fun,recompute_heap$0),
       _wT_=_wS_ || caml_call1(adjust_heights_heap_fun,adjust_heights_heap$0),
       _wU_=
        _wT_
        ||
        caml_call1(propagate_invalidity_fun,propagate_invalidity$0),
       _wV_=
        _wU_
        ||
        caml_call1(num_active_observers_fun,num_active_observers$0),
       _wW_=_wV_ || caml_call1(all_observers_fun,all_observers$0),
       _wX_=_wW_ || caml_call1(finalized_observers_fun,finalized_observers$0),
       _wY_=_wX_ || caml_call1(new_observers_fun,new_observers$0),
       _wZ_=
        _wY_
        ||
        caml_call1(disallowed_observers_fun,disallowed_observers$0),
       _w0_=
        _wZ_
        ||
        caml_call1(set_during_stabilization_fun,set_during_stabilization$0),
       _w1_=
        _w0_
        ||
        caml_call1
         (handle_after_stabilization_fun,handle_after_stabilization$0),
       _w2_=
        _w1_
        ||
        caml_call1(run_on_update_handlers_fun,run_on_update_handlers$1),
       _w3_=_w2_ || caml_call1(only_in_debug_fun,only_in_debug$0),
       _w4_=_w3_ || caml_call1(weak_hashtbls_fun,weak_hashtbls$0),
       _w5_=
        _w4_
        ||
        caml_call1
         (keep_node_creation_backtrace_f,keep_node_creation_backtrace$0),
       _w6_=
        _w5_
        ||
        caml_call1
         (num_nodes_became_necessary_fun,num_nodes_became_necessary$0),
       _w7_=
        _w6_
        ||
        caml_call1
         (num_nodes_became_unnecessary_f,num_nodes_became_unnecessary$0),
       _w8_=_w7_ || caml_call1(num_nodes_changed_fun,num_nodes_changed$0),
       _w9_=_w8_ || caml_call1(num_nodes_created_fun,num_nodes_created$0),
       _w__=
        _w9_
        ||
        caml_call1(num_nodes_invalidated_fun,num_nodes_invalidated$0),
       _w$_=
        _w__
        ||
        caml_call1(num_nodes_recomputed_fun,num_nodes_recomputed$0),
       _xa_=
        _w$_
        ||
        caml_call1
         (num_nodes_recomputed_directly_$0,num_nodes_recomputed_directly_$2),
       _xb_=
        _xa_
        ||
        caml_call1
         (num_nodes_recomputed_directly_,num_nodes_recomputed_directly_$1);
      return _xb_?_xb_:caml_call1(num_var_sets_fun,num_var_sets$0)}
    function to_list$3
     (status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _wp_=[0,caml_call1(num_var_sets_fun,num_var_sets$0),0],
       _wq_=
        [0,
         caml_call1
          (num_nodes_recomputed_directly_,num_nodes_recomputed_directly_$1),
         _wp_],
       _wr_=
        [0,
         caml_call1
          (num_nodes_recomputed_directly_$0,num_nodes_recomputed_directly_$2),
         _wq_],
       _ws_=
        [0,caml_call1(num_nodes_recomputed_fun,num_nodes_recomputed$0),_wr_],
       _wt_=
        [0,caml_call1(num_nodes_invalidated_fun,num_nodes_invalidated$0),_ws_],
       _wu_=[0,caml_call1(num_nodes_created_fun,num_nodes_created$0),_wt_],
       _wv_=[0,caml_call1(num_nodes_changed_fun,num_nodes_changed$0),_wu_],
       _ww_=
        [0,
         caml_call1
          (num_nodes_became_unnecessary_f,num_nodes_became_unnecessary$0),
         _wv_],
       _wx_=
        [0,
         caml_call1
          (num_nodes_became_necessary_fun,num_nodes_became_necessary$0),
         _ww_],
       _wy_=
        [0,
         caml_call1
          (keep_node_creation_backtrace_f,keep_node_creation_backtrace$0),
         _wx_],
       _wz_=[0,caml_call1(weak_hashtbls_fun,weak_hashtbls$0),_wy_],
       _wA_=[0,caml_call1(only_in_debug_fun,only_in_debug$0),_wz_],
       _wB_=
        [0,
         caml_call1(run_on_update_handlers_fun,run_on_update_handlers$1),
         _wA_],
       _wC_=
        [0,
         caml_call1
          (handle_after_stabilization_fun,handle_after_stabilization$0),
         _wB_],
       _wD_=
        [0,
         caml_call1(set_during_stabilization_fun,set_during_stabilization$0),
         _wC_],
       _wE_=
        [0,caml_call1(disallowed_observers_fun,disallowed_observers$0),_wD_],
       _wF_=[0,caml_call1(new_observers_fun,new_observers$0),_wE_],
       _wG_=[0,caml_call1(finalized_observers_fun,finalized_observers$0),_wF_],
       _wH_=[0,caml_call1(all_observers_fun,all_observers$0),_wG_],
       _wI_=
        [0,caml_call1(num_active_observers_fun,num_active_observers$0),_wH_],
       _wJ_=
        [0,caml_call1(propagate_invalidity_fun,propagate_invalidity$0),_wI_],
       _wK_=[0,caml_call1(adjust_heights_heap_fun,adjust_heights_heap$0),_wJ_],
       _wL_=[0,caml_call1(recompute_heap_fun,recompute_heap$0),_wK_],
       _wM_=[0,caml_call1(current_scope_fun,current_scope$0),_wL_],
       _wN_=[0,caml_call1(stabilization_num_fun,stabilization_num$0),_wM_],
       _wO_=
        [0,
         caml_call1
          (bind_lhs_change_should_invalid,bind_lhs_change_should_invalid$0),
         _wN_];
      return [0,caml_call1(status_fun,status$0),_wO_]}
    function iter$4
     (record,
      status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {caml_call3(status_fun,status$0,record,record[1]);
      caml_call3
       (bind_lhs_change_should_invalid,
        bind_lhs_change_should_invalid$0,
        record,
        record[2]);
      caml_call3(stabilization_num_fun,stabilization_num$0,record,record[3]);
      caml_call3(current_scope_fun,current_scope$0,record,record[4]);
      caml_call3(recompute_heap_fun,recompute_heap$0,record,record[5]);
      caml_call3
       (adjust_heights_heap_fun,adjust_heights_heap$0,record,record[6]);
      caml_call3
       (propagate_invalidity_fun,propagate_invalidity$0,record,record[7]);
      caml_call3
       (num_active_observers_fun,num_active_observers$0,record,record[8]);
      caml_call3(all_observers_fun,all_observers$0,record,record[9]);
      caml_call3
       (finalized_observers_fun,finalized_observers$0,record,record[10]);
      caml_call3(new_observers_fun,new_observers$0,record,record[11]);
      caml_call3
       (disallowed_observers_fun,disallowed_observers$0,record,record[12]);
      caml_call3
       (set_during_stabilization_fun,
        set_during_stabilization$0,
        record,
        record[13]);
      caml_call3
       (handle_after_stabilization_fun,
        handle_after_stabilization$0,
        record,
        record[14]);
      caml_call3
       (run_on_update_handlers_fun,run_on_update_handlers$1,record,record[15]);
      caml_call3(only_in_debug_fun,only_in_debug$0,record,record[16]);
      caml_call3(weak_hashtbls_fun,weak_hashtbls$0,record,record[17]);
      caml_call3
       (keep_node_creation_backtrace_f,
        keep_node_creation_backtrace$0,
        record,
        record[18]);
      caml_call3
       (num_nodes_became_necessary_fun,
        num_nodes_became_necessary$0,
        record,
        record[19]);
      caml_call3
       (num_nodes_became_unnecessary_f,
        num_nodes_became_unnecessary$0,
        record,
        record[20]);
      caml_call3(num_nodes_changed_fun,num_nodes_changed$0,record,record[21]);
      caml_call3(num_nodes_created_fun,num_nodes_created$0,record,record[22]);
      caml_call3
       (num_nodes_invalidated_fun,num_nodes_invalidated$0,record,record[23]);
      caml_call3
       (num_nodes_recomputed_fun,num_nodes_recomputed$0,record,record[24]);
      caml_call3
       (num_nodes_recomputed_directly_$0,
        num_nodes_recomputed_directly_$2,
        record,
        record[25]);
      caml_call3
       (num_nodes_recomputed_directly_,
        num_nodes_recomputed_directly_$1,
        record,
        record[26]);
      return caml_call3(num_var_sets_fun,num_var_sets$0,record,record[27])}
    function fold$3
     (record,
      init,
      status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _v1_=record[27],
       _v2_=record[26],
       _v3_=record[25],
       _v4_=record[24],
       _v5_=record[23],
       _v6_=record[22],
       _v7_=record[21],
       _v8_=record[20],
       _v9_=record[19],
       _v__=record[18],
       _v$_=record[17],
       _wa_=record[16],
       _wb_=record[15],
       _wc_=record[14],
       _wd_=record[13],
       _we_=record[12],
       _wf_=record[11],
       _wg_=record[10],
       _wh_=record[9],
       _wi_=record[8],
       _wj_=record[7],
       _wk_=record[6],
       _wl_=record[5],
       _wm_=record[4],
       _wn_=record[3],
       _wo_=record[2];
      return caml_call4
              (num_var_sets_fun,
               caml_call4
                (num_nodes_recomputed_directly_,
                 caml_call4
                  (num_nodes_recomputed_directly_$0,
                   caml_call4
                    (num_nodes_recomputed_fun,
                     caml_call4
                      (num_nodes_invalidated_fun,
                       caml_call4
                        (num_nodes_created_fun,
                         caml_call4
                          (num_nodes_changed_fun,
                           caml_call4
                            (num_nodes_became_unnecessary_f,
                             caml_call4
                              (num_nodes_became_necessary_fun,
                               caml_call4
                                (keep_node_creation_backtrace_f,
                                 caml_call4
                                  (weak_hashtbls_fun,
                                   caml_call4
                                    (only_in_debug_fun,
                                     caml_call4
                                      (run_on_update_handlers_fun,
                                       caml_call4
                                        (handle_after_stabilization_fun,
                                         caml_call4
                                          (set_during_stabilization_fun,
                                           caml_call4
                                            (disallowed_observers_fun,
                                             caml_call4
                                              (new_observers_fun,
                                               caml_call4
                                                (finalized_observers_fun,
                                                 caml_call4
                                                  (all_observers_fun,
                                                   caml_call4
                                                    (num_active_observers_fun,
                                                     caml_call4
                                                      (propagate_invalidity_fun,
                                                       caml_call4
                                                        (adjust_heights_heap_fun,
                                                         caml_call4
                                                          (recompute_heap_fun,
                                                           caml_call4
                                                            (current_scope_fun,
                                                             caml_call4
                                                              (stabilization_num_fun,
                                                               caml_call4
                                                                (bind_lhs_change_should_invalid,
                                                                 caml_call4(status_fun,init,status$0,record,record[1]),
                                                                 bind_lhs_change_should_invalid$0,
                                                                 record,
                                                                 _wo_),
                                                               stabilization_num$0,
                                                               record,
                                                               _wn_),
                                                             current_scope$0,
                                                             record,
                                                             _wm_),
                                                           recompute_heap$0,
                                                           record,
                                                           _wl_),
                                                         adjust_heights_heap$0,
                                                         record,
                                                         _wk_),
                                                       propagate_invalidity$0,
                                                       record,
                                                       _wj_),
                                                     num_active_observers$0,
                                                     record,
                                                     _wi_),
                                                   all_observers$0,
                                                   record,
                                                   _wh_),
                                                 finalized_observers$0,
                                                 record,
                                                 _wg_),
                                               new_observers$0,
                                               record,
                                               _wf_),
                                             disallowed_observers$0,
                                             record,
                                             _we_),
                                           set_during_stabilization$0,
                                           record,
                                           _wd_),
                                         handle_after_stabilization$0,
                                         record,
                                         _wc_),
                                       run_on_update_handlers$1,
                                       record,
                                       _wb_),
                                     only_in_debug$0,
                                     record,
                                     _wa_),
                                   weak_hashtbls$0,
                                   record,
                                   _v$_),
                                 keep_node_creation_backtrace$0,
                                 record,
                                 _v__),
                               num_nodes_became_necessary$0,
                               record,
                               _v9_),
                             num_nodes_became_unnecessary$0,
                             record,
                             _v8_),
                           num_nodes_changed$0,
                           record,
                           _v7_),
                         num_nodes_created$0,
                         record,
                         _v6_),
                       num_nodes_invalidated$0,
                       record,
                       _v5_),
                     num_nodes_recomputed$0,
                     record,
                     _v4_),
                   num_nodes_recomputed_directly_$2,
                   record,
                   _v3_),
                 num_nodes_recomputed_directly_$1,
                 record,
                 _v2_),
               num_var_sets$0,
               record,
               _v1_)}
    function for_all$4
     (record,
      status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _vB_=caml_call3(status_fun,status$0,record,record[1]),
       _vC_=
        _vB_
         ?caml_call3
           (bind_lhs_change_should_invalid,
            bind_lhs_change_should_invalid$0,
            record,
            record[2])
         :_vB_,
       _vD_=
        _vC_
         ?caml_call3
           (stabilization_num_fun,stabilization_num$0,record,record[3])
         :_vC_,
       _vE_=
        _vD_
         ?caml_call3(current_scope_fun,current_scope$0,record,record[4])
         :_vD_,
       _vF_=
        _vE_
         ?caml_call3(recompute_heap_fun,recompute_heap$0,record,record[5])
         :_vE_,
       _vG_=
        _vF_
         ?caml_call3
           (adjust_heights_heap_fun,adjust_heights_heap$0,record,record[6])
         :_vF_,
       _vH_=
        _vG_
         ?caml_call3
           (propagate_invalidity_fun,propagate_invalidity$0,record,record[7])
         :_vG_,
       _vI_=
        _vH_
         ?caml_call3
           (num_active_observers_fun,num_active_observers$0,record,record[8])
         :_vH_,
       _vJ_=
        _vI_
         ?caml_call3(all_observers_fun,all_observers$0,record,record[9])
         :_vI_,
       _vK_=
        _vJ_
         ?caml_call3
           (finalized_observers_fun,finalized_observers$0,record,record[10])
         :_vJ_,
       _vL_=
        _vK_
         ?caml_call3(new_observers_fun,new_observers$0,record,record[11])
         :_vK_,
       _vM_=
        _vL_
         ?caml_call3
           (disallowed_observers_fun,disallowed_observers$0,record,record[12])
         :_vL_,
       _vN_=
        _vM_
         ?caml_call3
           (set_during_stabilization_fun,
            set_during_stabilization$0,
            record,
            record[13])
         :_vM_,
       _vO_=
        _vN_
         ?caml_call3
           (handle_after_stabilization_fun,
            handle_after_stabilization$0,
            record,
            record[14])
         :_vN_,
       _vP_=
        _vO_
         ?caml_call3
           (run_on_update_handlers_fun,
            run_on_update_handlers$1,
            record,
            record[15])
         :_vO_,
       _vQ_=
        _vP_
         ?caml_call3(only_in_debug_fun,only_in_debug$0,record,record[16])
         :_vP_,
       _vR_=
        _vQ_
         ?caml_call3(weak_hashtbls_fun,weak_hashtbls$0,record,record[17])
         :_vQ_,
       _vS_=
        _vR_
         ?caml_call3
           (keep_node_creation_backtrace_f,
            keep_node_creation_backtrace$0,
            record,
            record[18])
         :_vR_,
       _vT_=
        _vS_
         ?caml_call3
           (num_nodes_became_necessary_fun,
            num_nodes_became_necessary$0,
            record,
            record[19])
         :_vS_,
       _vU_=
        _vT_
         ?caml_call3
           (num_nodes_became_unnecessary_f,
            num_nodes_became_unnecessary$0,
            record,
            record[20])
         :_vT_,
       _vV_=
        _vU_
         ?caml_call3
           (num_nodes_changed_fun,num_nodes_changed$0,record,record[21])
         :_vU_,
       _vW_=
        _vV_
         ?caml_call3
           (num_nodes_created_fun,num_nodes_created$0,record,record[22])
         :_vV_,
       _vX_=
        _vW_
         ?caml_call3
           (num_nodes_invalidated_fun,
            num_nodes_invalidated$0,
            record,
            record[23])
         :_vW_,
       _vY_=
        _vX_
         ?caml_call3
           (num_nodes_recomputed_fun,num_nodes_recomputed$0,record,record[24])
         :_vX_,
       _vZ_=
        _vY_
         ?caml_call3
           (num_nodes_recomputed_directly_$0,
            num_nodes_recomputed_directly_$2,
            record,
            record[25])
         :_vY_,
       _v0_=
        _vZ_
         ?caml_call3
           (num_nodes_recomputed_directly_,
            num_nodes_recomputed_directly_$1,
            record,
            record[26])
         :_vZ_;
      return _v0_
              ?caml_call3(num_var_sets_fun,num_var_sets$0,record,record[27])
              :_v0_}
    function exists$4
     (record,
      status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _vA_=caml_call3(status_fun,status$0,record,record[1]),
       _vb_=
        _vA_
        ||
        caml_call3
         (bind_lhs_change_should_invalid,
          bind_lhs_change_should_invalid$0,
          record,
          record[2]),
       _vc_=
        _vb_
        ||
        caml_call3(stabilization_num_fun,stabilization_num$0,record,record[3]),
       _vd_=
        _vc_
        ||
        caml_call3(current_scope_fun,current_scope$0,record,record[4]),
       _ve_=
        _vd_
        ||
        caml_call3(recompute_heap_fun,recompute_heap$0,record,record[5]),
       _vf_=
        _ve_
        ||
        caml_call3
         (adjust_heights_heap_fun,adjust_heights_heap$0,record,record[6]),
       _vg_=
        _vf_
        ||
        caml_call3
         (propagate_invalidity_fun,propagate_invalidity$0,record,record[7]),
       _vh_=
        _vg_
        ||
        caml_call3
         (num_active_observers_fun,num_active_observers$0,record,record[8]),
       _vi_=
        _vh_
        ||
        caml_call3(all_observers_fun,all_observers$0,record,record[9]),
       _vj_=
        _vi_
        ||
        caml_call3
         (finalized_observers_fun,finalized_observers$0,record,record[10]),
       _vk_=
        _vj_
        ||
        caml_call3(new_observers_fun,new_observers$0,record,record[11]),
       _vl_=
        _vk_
        ||
        caml_call3
         (disallowed_observers_fun,disallowed_observers$0,record,record[12]),
       _vm_=
        _vl_
        ||
        caml_call3
         (set_during_stabilization_fun,
          set_during_stabilization$0,
          record,
          record[13]),
       _vn_=
        _vm_
        ||
        caml_call3
         (handle_after_stabilization_fun,
          handle_after_stabilization$0,
          record,
          record[14]),
       _vo_=
        _vn_
        ||
        caml_call3
         (run_on_update_handlers_fun,
          run_on_update_handlers$1,
          record,
          record[15]),
       _vp_=
        _vo_
        ||
        caml_call3(only_in_debug_fun,only_in_debug$0,record,record[16]),
       _vq_=
        _vp_
        ||
        caml_call3(weak_hashtbls_fun,weak_hashtbls$0,record,record[17]),
       _vr_=
        _vq_
        ||
        caml_call3
         (keep_node_creation_backtrace_f,
          keep_node_creation_backtrace$0,
          record,
          record[18]),
       _vs_=
        _vr_
        ||
        caml_call3
         (num_nodes_became_necessary_fun,
          num_nodes_became_necessary$0,
          record,
          record[19]),
       _vt_=
        _vs_
        ||
        caml_call3
         (num_nodes_became_unnecessary_f,
          num_nodes_became_unnecessary$0,
          record,
          record[20]),
       _vu_=
        _vt_
        ||
        caml_call3
         (num_nodes_changed_fun,num_nodes_changed$0,record,record[21]),
       _vv_=
        _vu_
        ||
        caml_call3
         (num_nodes_created_fun,num_nodes_created$0,record,record[22]),
       _vw_=
        _vv_
        ||
        caml_call3
         (num_nodes_invalidated_fun,num_nodes_invalidated$0,record,record[23]),
       _vx_=
        _vw_
        ||
        caml_call3
         (num_nodes_recomputed_fun,num_nodes_recomputed$0,record,record[24]),
       _vy_=
        _vx_
        ||
        caml_call3
         (num_nodes_recomputed_directly_$0,
          num_nodes_recomputed_directly_$2,
          record,
          record[25]),
       _vz_=
        _vy_
        ||
        caml_call3
         (num_nodes_recomputed_directly_,
          num_nodes_recomputed_directly_$1,
          record,
          record[26]);
      return _vz_
              ?_vz_
              :caml_call3(num_var_sets_fun,num_var_sets$0,record,record[27])}
    function to_list$4
     (record,
      status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _uN_=
        [0,caml_call3(num_var_sets_fun,num_var_sets$0,record,record[27]),0],
       _uO_=
        [0,
         caml_call3
          (num_nodes_recomputed_directly_,
           num_nodes_recomputed_directly_$1,
           record,
           record[26]),
         _uN_],
       _uP_=
        [0,
         caml_call3
          (num_nodes_recomputed_directly_$0,
           num_nodes_recomputed_directly_$2,
           record,
           record[25]),
         _uO_],
       _uQ_=
        [0,
         caml_call3
          (num_nodes_recomputed_fun,num_nodes_recomputed$0,record,record[24]),
         _uP_],
       _uR_=
        [0,
         caml_call3
          (num_nodes_invalidated_fun,
           num_nodes_invalidated$0,
           record,
           record[23]),
         _uQ_],
       _uS_=
        [0,
         caml_call3
          (num_nodes_created_fun,num_nodes_created$0,record,record[22]),
         _uR_],
       _uT_=
        [0,
         caml_call3
          (num_nodes_changed_fun,num_nodes_changed$0,record,record[21]),
         _uS_],
       _uU_=
        [0,
         caml_call3
          (num_nodes_became_unnecessary_f,
           num_nodes_became_unnecessary$0,
           record,
           record[20]),
         _uT_],
       _uV_=
        [0,
         caml_call3
          (num_nodes_became_necessary_fun,
           num_nodes_became_necessary$0,
           record,
           record[19]),
         _uU_],
       _uW_=
        [0,
         caml_call3
          (keep_node_creation_backtrace_f,
           keep_node_creation_backtrace$0,
           record,
           record[18]),
         _uV_],
       _uX_=
        [0,
         caml_call3(weak_hashtbls_fun,weak_hashtbls$0,record,record[17]),
         _uW_],
       _uY_=
        [0,
         caml_call3(only_in_debug_fun,only_in_debug$0,record,record[16]),
         _uX_],
       _uZ_=
        [0,
         caml_call3
          (run_on_update_handlers_fun,
           run_on_update_handlers$1,
           record,
           record[15]),
         _uY_],
       _u0_=
        [0,
         caml_call3
          (handle_after_stabilization_fun,
           handle_after_stabilization$0,
           record,
           record[14]),
         _uZ_],
       _u1_=
        [0,
         caml_call3
          (set_during_stabilization_fun,
           set_during_stabilization$0,
           record,
           record[13]),
         _u0_],
       _u2_=
        [0,
         caml_call3
          (disallowed_observers_fun,disallowed_observers$0,record,record[12]),
         _u1_],
       _u3_=
        [0,
         caml_call3(new_observers_fun,new_observers$0,record,record[11]),
         _u2_],
       _u4_=
        [0,
         caml_call3
          (finalized_observers_fun,finalized_observers$0,record,record[10]),
         _u3_],
       _u5_=
        [0,
         caml_call3(all_observers_fun,all_observers$0,record,record[9]),
         _u4_],
       _u6_=
        [0,
         caml_call3
          (num_active_observers_fun,num_active_observers$0,record,record[8]),
         _u5_],
       _u7_=
        [0,
         caml_call3
          (propagate_invalidity_fun,propagate_invalidity$0,record,record[7]),
         _u6_],
       _u8_=
        [0,
         caml_call3
          (adjust_heights_heap_fun,adjust_heights_heap$0,record,record[6]),
         _u7_],
       _u9_=
        [0,
         caml_call3(recompute_heap_fun,recompute_heap$0,record,record[5]),
         _u8_],
       _u__=
        [0,
         caml_call3(current_scope_fun,current_scope$0,record,record[4]),
         _u9_],
       _u$_=
        [0,
         caml_call3
          (stabilization_num_fun,stabilization_num$0,record,record[3]),
         _u__],
       _va_=
        [0,
         caml_call3
          (bind_lhs_change_should_invalid,
           bind_lhs_change_should_invalid$0,
           record,
           record[2]),
         _u$_];
      return [0,caml_call3(status_fun,status$0,record,record[1]),_va_]}
    function map$4
     (record,
      status_fun,
      bind_lhs_change_should_invalid,
      stabilization_num_fun,
      current_scope_fun,
      recompute_heap_fun,
      adjust_heights_heap_fun,
      propagate_invalidity_fun,
      num_active_observers_fun,
      all_observers_fun,
      finalized_observers_fun,
      new_observers_fun,
      disallowed_observers_fun,
      set_during_stabilization_fun,
      handle_after_stabilization_fun,
      run_on_update_handlers_fun,
      only_in_debug_fun,
      weak_hashtbls_fun,
      keep_node_creation_backtrace_f,
      num_nodes_became_necessary_fun,
      num_nodes_became_unnecessary_f,
      num_nodes_changed_fun,
      num_nodes_created_fun,
      num_nodes_invalidated_fun,
      num_nodes_recomputed_fun,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets_fun)
     {var
       _un_=caml_call3(num_var_sets_fun,num_var_sets$0,record,record[27]),
       _uo_=
        caml_call3
         (num_nodes_recomputed_directly_,
          num_nodes_recomputed_directly_$1,
          record,
          record[26]),
       _up_=
        caml_call3
         (num_nodes_recomputed_directly_$0,
          num_nodes_recomputed_directly_$2,
          record,
          record[25]),
       _uq_=
        caml_call3
         (num_nodes_recomputed_fun,num_nodes_recomputed$0,record,record[24]),
       _ur_=
        caml_call3
         (num_nodes_invalidated_fun,num_nodes_invalidated$0,record,record[23]),
       _us_=
        caml_call3
         (num_nodes_created_fun,num_nodes_created$0,record,record[22]),
       _ut_=
        caml_call3
         (num_nodes_changed_fun,num_nodes_changed$0,record,record[21]),
       _uu_=
        caml_call3
         (num_nodes_became_unnecessary_f,
          num_nodes_became_unnecessary$0,
          record,
          record[20]),
       _uv_=
        caml_call3
         (num_nodes_became_necessary_fun,
          num_nodes_became_necessary$0,
          record,
          record[19]),
       _uw_=
        caml_call3
         (keep_node_creation_backtrace_f,
          keep_node_creation_backtrace$0,
          record,
          record[18]),
       _ux_=caml_call3(weak_hashtbls_fun,weak_hashtbls$0,record,record[17]),
       _uy_=caml_call3(only_in_debug_fun,only_in_debug$0,record,record[16]),
       _uz_=
        caml_call3
         (run_on_update_handlers_fun,
          run_on_update_handlers$1,
          record,
          record[15]),
       _uA_=
        caml_call3
         (handle_after_stabilization_fun,
          handle_after_stabilization$0,
          record,
          record[14]),
       _uB_=
        caml_call3
         (set_during_stabilization_fun,
          set_during_stabilization$0,
          record,
          record[13]),
       _uC_=
        caml_call3
         (disallowed_observers_fun,disallowed_observers$0,record,record[12]),
       _uD_=caml_call3(new_observers_fun,new_observers$0,record,record[11]),
       _uE_=
        caml_call3
         (finalized_observers_fun,finalized_observers$0,record,record[10]),
       _uF_=caml_call3(all_observers_fun,all_observers$0,record,record[9]),
       _uG_=
        caml_call3
         (num_active_observers_fun,num_active_observers$0,record,record[8]),
       _uH_=
        caml_call3
         (propagate_invalidity_fun,propagate_invalidity$0,record,record[7]),
       _uI_=
        caml_call3
         (adjust_heights_heap_fun,adjust_heights_heap$0,record,record[6]),
       _uJ_=caml_call3(recompute_heap_fun,recompute_heap$0,record,record[5]),
       _uK_=caml_call3(current_scope_fun,current_scope$0,record,record[4]),
       _uL_=
        caml_call3(stabilization_num_fun,stabilization_num$0,record,record[3]),
       _uM_=
        caml_call3
         (bind_lhs_change_should_invalid,
          bind_lhs_change_should_invalid$0,
          record,
          record[2]);
      return [0,
              caml_call3(status_fun,status$0,record,record[1]),
              _uM_,
              _uL_,
              _uK_,
              _uJ_,
              _uI_,
              _uH_,
              _uG_,
              _uF_,
              _uE_,
              _uD_,
              _uC_,
              _uB_,
              _uA_,
              _uz_,
              _uy_,
              _ux_,
              _uw_,
              _uv_,
              _uu_,
              _ut_,
              _us_,
              _ur_,
              _uq_,
              _up_,
              _uo_,
              _un_]}
    function set_all_mutable_fields$0
     (record,
      status,
      stabilization_num,
      current_scope,
      num_active_observers,
      all_observers,
      only_in_debug,
      keep_node_creation_backtrace,
      num_nodes_became_necessary,
      num_nodes_became_unnecessary,
      num_nodes_changed,
      num_nodes_created,
      num_nodes_invalidated,
      num_nodes_recomputed,
      num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_,
      num_var_sets)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[1] = status;
      record$0[3] = stabilization_num;
      record$0[4] = current_scope;
      record$0[8] = num_active_observers;
      record$0[9] = all_observers;
      record$0[16] = only_in_debug;
      record$0[18] = keep_node_creation_backtrace;
      record$0[19] = num_nodes_became_necessary;
      record$0[20] = num_nodes_became_unnecessary;
      record$0[21] = num_nodes_changed;
      record$0[22] = num_nodes_created;
      record$0[23] = num_nodes_invalidated;
      record$0[24] = num_nodes_recomputed;
      record$0[25] = num_nodes_recomputed_directly_$0;
      record$0[26] = num_nodes_recomputed_directly_;
      record$0[27] = num_var_sets;
      return 0}
    var
     Direct$0=
      [0,
       iter$4,
       fold$3,
       for_all$4,
       exists$4,
       to_list$4,
       map$4,
       set_all_mutable_fields$0],
     Fields$0=
      [0,
       names$0,
       num_var_sets$0,
       num_nodes_recomputed_directly_$1,
       num_nodes_recomputed_directly_$2,
       num_nodes_recomputed$0,
       num_nodes_invalidated$0,
       num_nodes_created$0,
       num_nodes_changed$0,
       num_nodes_became_unnecessary$0,
       num_nodes_became_necessary$0,
       keep_node_creation_backtrace$0,
       weak_hashtbls$0,
       only_in_debug$0,
       run_on_update_handlers$1,
       handle_after_stabilization$0,
       set_during_stabilization$0,
       disallowed_observers$0,
       new_observers$0,
       finalized_observers$0,
       all_observers$0,
       num_active_observers$0,
       propagate_invalidity$0,
       adjust_heights_heap$0,
       recompute_heap$0,
       current_scope$0,
       stabilization_num$0,
       bind_lhs_change_should_invalid$0,
       status$0,
       make_creator$0,
       create$13,
       map$3,
       iter$3,
       fold$2,
       map_poly$0,
       for_all$3,
       exists$3,
       to_list$3,
       Direct$0];
    function sexp_of_t$42(param)
     {var
       status_015=param[1],
       bind_lhs_change_should_invalid=param[2],
       stabilization_num_019=param[3],
       current_scope_021=param[4],
       propagate_invalidity_027=param[7],
       adjust_heights_heap_025=param[6],
       recompute_heap_023=param[5],
       num_active_observers_029=param[8],
       all_observers_031=param[9],
       run_on_update_handlers_043=param[15],
       handle_after_stabilization_041=param[14],
       set_during_stabilization_039=param[13],
       disallowed_observers_037=param[12],
       new_observers_035=param[11],
       finalized_observers_033=param[10],
       only_in_debug_045=param[16],
       weak_hashtbls_047=param[17],
       keep_node_creation_backtrace_0=param[18],
       num_nodes_became_necessary_051=param[19],
       num_nodes_became_unnecessary_0=param[20],
       num_nodes_changed_055=param[21],
       num_nodes_created_057=param[22],
       num_nodes_invalidated_059=param[23],
       num_nodes_recomputed_061=param[24],
       num_nodes_recomputed_directly_=param[25],
       num_nodes_recomputed_directly_$0=param[26],
       num_var_sets_067=param[27],
       arg_068=caml_call1(Core[356],num_var_sets_067),
       bnds_014=[0,[1,[0,_lU_,[0,arg_068,0]]],0],
       arg_066=caml_call1(Core[356],num_nodes_recomputed_directly_$0),
       bnds_014$0=[0,[1,[0,_lV_,[0,arg_066,0]]],bnds_014],
       arg_064=caml_call1(Core[356],num_nodes_recomputed_directly_),
       bnds_014$1=[0,[1,[0,_lW_,[0,arg_064,0]]],bnds_014$0],
       arg_062=caml_call1(Core[356],num_nodes_recomputed_061),
       bnds_014$2=[0,[1,[0,_lX_,[0,arg_062,0]]],bnds_014$1],
       arg_060=caml_call1(Core[356],num_nodes_invalidated_059),
       bnds_014$3=[0,[1,[0,_lY_,[0,arg_060,0]]],bnds_014$2],
       arg_058=caml_call1(Core[356],num_nodes_created_057),
       bnds_014$4=[0,[1,[0,_lZ_,[0,arg_058,0]]],bnds_014$3],
       arg_056=caml_call1(Core[356],num_nodes_changed_055),
       bnds_014$5=[0,[1,[0,_l0_,[0,arg_056,0]]],bnds_014$4],
       arg_054=caml_call1(Core[356],num_nodes_became_unnecessary_0),
       bnds_014$6=[0,[1,[0,_l1_,[0,arg_054,0]]],bnds_014$5],
       arg_052=caml_call1(Core[356],num_nodes_became_necessary_051),
       bnds_014$7=[0,[1,[0,_l2_,[0,arg_052,0]]],bnds_014$6],
       arg_050=caml_call1(Core[305],keep_node_creation_backtrace_0),
       bnds_014$8=[0,[1,[0,_l3_,[0,arg_050,0]]],bnds_014$7],
       arg_048=
        caml_call2
         (Thread_safe_queue[1],Packed_weak_hashtbl$0[1],weak_hashtbls_047),
       bnds_014$9=[0,[1,[0,_l4_,[0,arg_048,0]]],bnds_014$8],
       arg_046=caml_call1(Only_in_debug$0[6],only_in_debug_045),
       bnds_014$10=[0,[1,[0,_l5_,[0,arg_046,0]]],bnds_014$9],
       arg_044=
        caml_call2
         (Core_Stack[2],
          Run_on_update_handlers$0[1],
          run_on_update_handlers_043),
       bnds_014$11=[0,[1,[0,_l6_,[0,arg_044,0]]],bnds_014$10],
       arg_042=
        caml_call2(Core_Stack[2],Packed$0[1],handle_after_stabilization_041),
       bnds_014$12=[0,[1,[0,_l7_,[0,arg_042,0]]],bnds_014$11],
       arg_040=
        caml_call2(Core_Stack[2],Packed[1],set_during_stabilization_039),
       bnds_014$13=[0,[1,[0,_l8_,[0,arg_040,0]]],bnds_014$12],
       arg_038=caml_call2(Core_Stack[2],_kL_[1],disallowed_observers_037),
       bnds_014$14=[0,[1,[0,_l9_,[0,arg_038,0]]],bnds_014$13],
       arg_036=caml_call2(Core_Stack[2],_kL_[1],new_observers_035),
       bnds_014$15=[0,[1,[0,_l__,[0,arg_036,0]]],bnds_014$14],
       arg_034=
        caml_call2(Thread_safe_queue[1],_kL_[1],finalized_observers_033),
       bnds_014$16=[0,[1,[0,_l$_,[0,arg_034,0]]],bnds_014$15],
       arg_032=caml_call2(Uopt[1],_kL_[1],all_observers_031),
       bnds_014$17=[0,[1,[0,_ma_,[0,arg_032,0]]],bnds_014$16],
       arg_030=caml_call1(Core[356],num_active_observers_029),
       bnds_014$18=[0,[1,[0,_mb_,[0,arg_030,0]]],bnds_014$17],
       arg_028=caml_call2(Core_Stack[2],Packed$0[1],propagate_invalidity_027),
       bnds_014$19=[0,[1,[0,_mc_,[0,arg_028,0]]],bnds_014$18],
       arg_026=sexp_of_t$34(adjust_heights_heap_025),
       bnds_014$20=[0,[1,[0,_md_,[0,arg_026,0]]],bnds_014$19],
       arg_024=sexp_of_t$32(recompute_heap_023),
       bnds_014$21=[0,[1,[0,_me_,[0,arg_024,0]]],bnds_014$20],
       arg_022=caml_call1(sexp_of_t$24,current_scope_021),
       bnds_014$22=[0,[1,[0,_mf_,[0,arg_022,0]]],bnds_014$21],
       arg_020=caml_call1(_D_,stabilization_num_019),
       bnds_014$23=[0,[1,[0,_mg_,[0,arg_020,0]]],bnds_014$22],
       arg_018=caml_call1(Core[305],bind_lhs_change_should_invalid),
       bnds_014$24=[0,[1,[0,_mh_,[0,arg_018,0]]],bnds_014$23],
       arg_016=sexp_of_status(status_015),
       bnds_014$25=[0,[1,[0,_mi_,[0,arg_016,0]]],bnds_014$24];
      return [1,bnds_014$25]}
    function fired_alarm_values(r){return r[4]}
    function set_fired_alarm_values(r,v){r[4] = v;return 0}
    function handle_fired(r){return r[3]}
    function now$0(r){return r[2]}
    function timing_wheel(r){return r[1]}
    function _mj_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _mk_=[0,set_fired_alarm_values],
     fired_alarm_values$0=
      [0,
       function(param){return 0},
       cst_fired_alarm_values,
       _mk_,
       fired_alarm_values,
       _mj_];
    function _ml_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _mm_=0,
     handle_fired$0=
      [0,function(param){return 0},cst_handle_fired,_mm_,handle_fired,_ml_];
    function _mn_(r,v){return [0,r[1],v,r[3],r[4]]}
    var _mo_=0,now$1=[0,function(param){return 0},cst_now,_mo_,now$0,_mn_];
    function _mp_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _mq_=0,
     timing_wheel$0=
      [0,function(param){return 0},cst_timing_wheel,_mq_,timing_wheel,_mp_];
    function make_creator$1
     (timing_wheel_fun,
      now_fun,
      handle_fired_fun,
      fired_alarm_values_fun,
      compile_acc)
     {var
       match=caml_call2(timing_wheel_fun,timing_wheel$0,compile_acc),
       compile_acc$0=match[2],
       timing_wheel_gen=match[1],
       match$0=caml_call2(now_fun,now$1,compile_acc$0),
       compile_acc$1=match$0[2],
       now_gen=match$0[1],
       match$1=caml_call2(handle_fired_fun,handle_fired$0,compile_acc$1),
       compile_acc$2=match$1[2],
       handle_fired_gen=match$1[1],
       match$2=
        caml_call2(fired_alarm_values_fun,fired_alarm_values$0,compile_acc$2),
       compile_acc$3=match$2[2],
       fired_alarm_values_gen=match$2[1];
      return [0,
              function(acc)
               {var
                 timing_wheel=caml_call1(timing_wheel_gen,acc),
                 now=caml_call1(now_gen,acc),
                 handle_fired=caml_call1(handle_fired_gen,acc),
                 fired_alarm_values=caml_call1(fired_alarm_values_gen,acc);
                return [0,timing_wheel,now,handle_fired,fired_alarm_values]},
              compile_acc$3]}
    function create$14(timing_wheel,now,handle_fired,fired_alarm_values)
     {return [0,timing_wheel,now,handle_fired,fired_alarm_values]}
    function map$5
     (timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {var
       _uk_=caml_call1(fired_alarm_values_fun,fired_alarm_values$0),
       _ul_=caml_call1(handle_fired_fun,handle_fired$0),
       _um_=caml_call1(now_fun,now$1);
      return [0,caml_call1(timing_wheel_fun,timing_wheel$0),_um_,_ul_,_uk_]}
    function iter$5
     (timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {caml_call1(timing_wheel_fun,timing_wheel$0);
      caml_call1(now_fun,now$1);
      caml_call1(handle_fired_fun,handle_fired$0);
      return caml_call1(fired_alarm_values_fun,fired_alarm_values$0)}
    function fold$4
     (init,timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {return caml_call2
              (fired_alarm_values_fun,
               caml_call2
                (handle_fired_fun,
                 caml_call2
                  (now_fun,
                   caml_call2(timing_wheel_fun,init,timing_wheel$0),
                   now$1),
                 handle_fired$0),
               fired_alarm_values$0)}
    function map_poly$1(record)
     {var
       _uh_=[0,caml_call1(record[1],fired_alarm_values$0),0],
       _ui_=[0,caml_call1(record[1],handle_fired$0),_uh_],
       _uj_=[0,caml_call1(record[1],now$1),_ui_];
      return [0,caml_call1(record[1],timing_wheel$0),_uj_]}
    function for_all$5
     (timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {var
       _ue_=caml_call1(timing_wheel_fun,timing_wheel$0),
       _uf_=_ue_?caml_call1(now_fun,now$1):_ue_,
       _ug_=_uf_?caml_call1(handle_fired_fun,handle_fired$0):_uf_;
      return _ug_?caml_call1(fired_alarm_values_fun,fired_alarm_values$0):_ug_}
    function exists$5
     (timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {var
       _ud_=caml_call1(timing_wheel_fun,timing_wheel$0),
       _ub_=_ud_ || caml_call1(now_fun,now$1),
       _uc_=_ub_ || caml_call1(handle_fired_fun,handle_fired$0);
      return _uc_?_uc_:caml_call1(fired_alarm_values_fun,fired_alarm_values$0)}
    function to_list$5
     (timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {var
       _t__=[0,caml_call1(fired_alarm_values_fun,fired_alarm_values$0),0],
       _t$_=[0,caml_call1(handle_fired_fun,handle_fired$0),_t__],
       _ua_=[0,caml_call1(now_fun,now$1),_t$_];
      return [0,caml_call1(timing_wheel_fun,timing_wheel$0),_ua_]}
    function iter$6
     (record,timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {caml_call3(timing_wheel_fun,timing_wheel$0,record,record[1]);
      caml_call3(now_fun,now$1,record,record[2]);
      caml_call3(handle_fired_fun,handle_fired$0,record,record[3]);
      return caml_call3
              (fired_alarm_values_fun,fired_alarm_values$0,record,record[4])}
    function fold$5
     (record,
      init,
      timing_wheel_fun,
      now_fun,
      handle_fired_fun,
      fired_alarm_values_fun)
     {var _t7_=record[4],_t8_=record[3],_t9_=record[2];
      return caml_call4
              (fired_alarm_values_fun,
               caml_call4
                (handle_fired_fun,
                 caml_call4
                  (now_fun,
                   caml_call4
                    (timing_wheel_fun,init,timing_wheel$0,record,record[1]),
                   now$1,
                   record,
                   _t9_),
                 handle_fired$0,
                 record,
                 _t8_),
               fired_alarm_values$0,
               record,
               _t7_)}
    function for_all$6
     (record,timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {var
       _t4_=caml_call3(timing_wheel_fun,timing_wheel$0,record,record[1]),
       _t5_=_t4_?caml_call3(now_fun,now$1,record,record[2]):_t4_,
       _t6_=
        _t5_?caml_call3(handle_fired_fun,handle_fired$0,record,record[3]):_t5_;
      return _t6_
              ?caml_call3
                (fired_alarm_values_fun,fired_alarm_values$0,record,record[4])
              :_t6_}
    function exists$6
     (record,timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {var
       _t3_=caml_call3(timing_wheel_fun,timing_wheel$0,record,record[1]),
       _t1_=_t3_ || caml_call3(now_fun,now$1,record,record[2]),
       _t2_=
        _t1_
        ||
        caml_call3(handle_fired_fun,handle_fired$0,record,record[3]);
      return _t2_
              ?_t2_
              :caml_call3
                (fired_alarm_values_fun,fired_alarm_values$0,record,record[4])}
    function to_list$6
     (record,timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {var
       _tY_=
        [0,
         caml_call3
          (fired_alarm_values_fun,fired_alarm_values$0,record,record[4]),
         0],
       _tZ_=
        [0,caml_call3(handle_fired_fun,handle_fired$0,record,record[3]),_tY_],
       _t0_=[0,caml_call3(now_fun,now$1,record,record[2]),_tZ_];
      return [0,
              caml_call3(timing_wheel_fun,timing_wheel$0,record,record[1]),
              _t0_]}
    function map$6
     (record,timing_wheel_fun,now_fun,handle_fired_fun,fired_alarm_values_fun)
     {var
       _tV_=
        caml_call3
         (fired_alarm_values_fun,fired_alarm_values$0,record,record[4]),
       _tW_=caml_call3(handle_fired_fun,handle_fired$0,record,record[3]),
       _tX_=caml_call3(now_fun,now$1,record,record[2]);
      return [0,
              caml_call3(timing_wheel_fun,timing_wheel$0,record,record[1]),
              _tX_,
              _tW_,
              _tV_]}
    function set_all_mutable_fields$1(record,fired_alarm_values)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[4] = fired_alarm_values;
      return 0}
    var
     Direct$1=
      [0,
       iter$6,
       fold$5,
       for_all$6,
       exists$6,
       to_list$6,
       map$6,
       set_all_mutable_fields$1],
     Fields$1=
      [0,
       names$1,
       fired_alarm_values$0,
       handle_fired$0,
       now$1,
       timing_wheel$0,
       make_creator$1,
       create$14,
       map$5,
       iter$5,
       fold$4,
       map_poly$1,
       for_all$5,
       exists$5,
       to_list$5,
       Direct$1];
    function sexp_of_t$43(param)
     {var
       now_072=param[2],
       timing_wheel_070=param[1],
       fired_alarm_values_076=param[4],
       arg_077=caml_call2(Uopt[1],sexp_of_t$35,fired_alarm_values_076),
       bnds_069=[0,[1,[0,_mr_,[0,arg_077,0]]],0];
      function _tT_(_tU_){return 0}
      var
       arg_075=caml_call1(Sexplib0_Sexp_conv[24],_tT_),
       bnds_069$0=[0,[1,[0,_ms_,[0,arg_075,0]]],bnds_069],
       arg_073=sexp_of_t$12(Time_ns[119],now_072),
       bnds_069$1=[0,[1,[0,_mt_,[0,arg_073,0]]],bnds_069$0],
       arg_071=caml_call2(Timing_wheel[2],sexp_of_t$35,timing_wheel_070),
       bnds_069$2=[0,[1,[0,_mu_,[0,arg_071,0]]],bnds_069$1];
      return [1,bnds_069$2]}
    function invariant$30(t)
     {function _tM_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         _tN_=
          check
           (function(fired_alarm_values)
             {if(caml_call1(Uopt[5],fired_alarm_values))return 0;
              throw [0,Assert_failure,_mv_]});
        function _tO_(_tS_){return 0}
        var
         _tP_=
          check
           (function(now)
             {var _tR_=caml_call1(Timing_wheel[11],t[1]);
              if(caml_call2(Time_ns[21],now[1],_tR_))return 0;
              throw [0,Assert_failure,_mw_]}),
         _tQ_=check(caml_call1(Timing_wheel[6],invariant$24));
        return caml_call4(Fields$1[9],_tQ_,_tP_,_tO_,_tN_)}
      return caml_call4(Base_Invariant[1],_mx_,t,sexp_of_t$43,_tM_)}
    function incr_state$2(t){return incr_state(t[2])}
    var
     Clock$0=
      [0,
       fired_alarm_values,
       set_fired_alarm_values,
       handle_fired,
       now$0,
       timing_wheel,
       Fields$1,
       sexp_of_t$43,
       invariant$30,
       incr_state$2];
    function now$2(clock){return clock[2][1]}
    function timing_wheel_length(clock)
     {return caml_call1(Timing_wheel[14],clock[1])}
    function num_stabilizes(t){return caml_call1(_C_,t[3])}
    function max_height_allowed$1(t){return max_height_allowed$0(t[6])}
    function max_height_seen$1(t){return t[6][3]}
    function iter_observers(t,f)
     {var r=[0,t[9]];
      for(;;)
       {if(! caml_call1(Uopt[6],r[1]))return 0;
        var observer=caml_call1(Uopt[11],r[1]);
        r[1] = caml_call1(_kL_[3],observer);
        caml_call1(f,observer)}}
    function directly_observed(t)
     {var r=[0,0];
      iter_observers(t,function(param){r[1] = [0,param[2],r[1]];return 0});
      return r[1]}
    function save_dot$0(t,out)
     {var _tL_=directly_observed(t);return caml_call2(Packed$0[5],out,_tL_)}
    function save_dot_to_file$0(t,file)
     {var _tK_=directly_observed(t);return caml_call2(Packed$0[6],file,_tK_)}
    function iter_observer_descendants(t,f)
     {var _tJ_=directly_observed(t);return caml_call2(Packed$0[4],_tJ_,f)}
    function t_of_sexp$2(sexp_079)
     {if(0 === sexp_079[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_095,sexp_079);
      var
       field_sexps_080=sexp_079[1],
       max_num_parents_081=[0,0],
       percentage_of_nodes_by_num_par=[0,0],
       duplicates_085=[0,0],
       extra_086=[0,0],
       param=field_sexps_080;
      for(;;)
       {if(param)
         {var _ty_=param[1];
          if(1 === _ty_[0])
           {var _tz_=_ty_[1];
            if(_tz_)
             {var _tA_=_tz_[1];
              if(0 === _tA_[0])
               {var _tB_=_tz_[2],_tC_=_tA_[1],switch$0=0;
                if(! _tB_ || ! _tB_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_099=param[2],
                   field_sexp_088$2=
                    function(_tI_)
                     {function field_sexp_088(param)
                       {if(! _tI_)
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[10],error_source_095,sexp_079);
                        if(_tI_[2])throw [0,Assert_failure,_my_];
                        var x_100=_tI_[1];
                        return x_100}
                      return field_sexp_088},
                   field_sexp_088=field_sexp_088$2(_tB_);
                  if(caml_string_notequal(_tC_,cst_max_num_parents))
                   if
                    (caml_string_notequal(_tC_,cst_percentage_of_nodes_by_num))
                    {if(Sexplib0_Sexp_conv[26][1])
                      extra_086[1] = [0,_tC_,extra_086[1]]}
                   else
                    if(percentage_of_nodes_by_num_par[1])
                     duplicates_085[1] = [0,_tC_,duplicates_085[1]];
                    else
                     {var
                       field_sexp_088$0=field_sexp_088(0),
                       _tD_=
                        function(sexp_094)
                         {if(1 === sexp_094[0])
                           {var _tG_=sexp_094[1];
                            if(_tG_)
                             {var _tH_=_tG_[2];
                              if(_tH_ && ! _tH_[2])
                               {var
                                 arg1_091=_tH_[1],
                                 arg0_090=_tG_[1],
                                 res0_092=caml_call1(Core[357],arg0_090),
                                 res1_093=caml_call1(Core_Percent[7],arg1_091);
                                return [0,res0_092,res1_093]}}}
                          return caml_call3
                                  (Sexplib0_Sexp_conv_error[2],error_source_095,2,sexp_094)},
                       fvalue_096=caml_call2(Core[422],_tD_,field_sexp_088$0);
                      percentage_of_nodes_by_num_par[1] = [0,fvalue_096]}
                  else
                   if(max_num_parents_081[1])
                    duplicates_085[1] = [0,_tC_,duplicates_085[1]];
                   else
                    {var
                      field_sexp_088$1=field_sexp_088(0),
                      fvalue_097=caml_call1(Core[357],field_sexp_088$1);
                     max_num_parents_081[1] = [0,fvalue_097]}
                  var param=tail_099;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_095,_ty_)}
        if(duplicates_085[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_095,
                  duplicates_085[1],
                  sexp_079);
        if(extra_086[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_095,
                  extra_086[1],
                  sexp_079);
        var
         _tE_=max_num_parents_081[1],
         _tF_=percentage_of_nodes_by_num_par[1];
        if(_tE_ && _tF_)
         {var
           percentage_of_nodes_by_num_par$0=_tF_[1],
           max_num_parents_082=_tE_[1];
          return [0,max_num_parents_082,percentage_of_nodes_by_num_par$0]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_095,
                 sexp_079,
                 [0,
                  [0,0 === max_num_parents_081[1]?1:0,cst_max_num_parents$0],
                  [0,
                   [0,
                    0 === percentage_of_nodes_by_num_par[1]?1:0,
                    cst_percentage_of_nodes_by_num$0],
                   0]])}}
    function sexp_of_t$44(param)
     {var
       percentage_of_nodes_by_num_par=param[2],
       max_num_parents_102=param[1],
       bnds_101=0;
      function _tx_(param)
       {var
         arg1_107=param[2],
         arg0_106=param[1],
         res0_108=caml_call1(Core[356],arg0_106),
         res1_109=caml_call1(Core_Percent[8],arg1_107);
        return [1,[0,res0_108,[0,res1_109,0]]]}
      var
       arg_105=caml_call2(Core[421],_tx_,percentage_of_nodes_by_num_par),
       bnds_101$0=[0,[1,[0,_mz_,[0,arg_105,0]]],bnds_101],
       arg_103=caml_call1(Core[356],max_num_parents_102),
       bnds_101$1=[0,[1,[0,_mA_,[0,arg_103,0]]],bnds_101$0];
      return [1,bnds_101$1]}
    var Stats=[0,t_of_sexp$2,sexp_of_t$44];
    function stats(t)
     {var max_num_parents=[0,-1],num_necessary_nodes=[0,0];
      iter_observer_descendants
       (t,
        function(param)
         {num_necessary_nodes[1]++;
          max_num_parents[1]
          =
          caml_call2(include[93],max_num_parents[1],param[9]);
          return 0});
      var
       max_num_parents$0=max_num_parents[1],
       num_nodes_by_num_parents=
        caml_call2(Array[38],max_num_parents$0 + 1 | 0,0);
      iter_observer_descendants
       (t,
        function(param)
         {var
           num_parents=param[9],
           _tw_=
            caml_check_bound(num_nodes_by_num_parents,num_parents)
             [1 + num_parents]
            +
            1
            |
            0;
          caml_check_bound(num_nodes_by_num_parents,num_parents)
           [1 + num_parents]
          =
          _tw_;
          return 0});
      function _tu_(i,ac,num_nodes)
       {return caml_call2(symbol$1,num_nodes,0)
                ?ac
                :[0,
                  [0,
                   i,
                   caml_call1
                    (Core_Percent[71],num_nodes / num_necessary_nodes[1])],
                  ac]}
      var
       _tv_=caml_call3(Array[60],num_nodes_by_num_parents,0,_tu_),
       percentage_of_nodes_by_num_par=caml_call1(Core_List[34],_tv_);
      return [0,max_num_parents$0,percentage_of_nodes_by_num_par]}
    function am_stabilizing(t)
     {var _tt_=t[1];
      if(typeof _tt_ === "number")return 2 <= _tt_?0:1;
      var raised_exn=_tt_[1];
      return caml_call5
              (Core[236],
               0,
               _mB_,
               cst_cannot_call_am_stabilizing,
               raised_exn,
               sexp_of_t$9)}
    function invariant$31(t)
     {if(typeof t[1] !== "number")return 0;
      function _sG_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        iter_observers
         (t,
          function(internal_observer)
           {if(1 < internal_observer[1] - 1 >>> 0)
             {var
               _tr_=
                function(x_110)
                 {return sexp_of_internal_observer
                          (function(param){return _mC_},x_110)};
              caml_call5
               (Core[236],
                0,
                _mD_,
                cst_member_of_all_observers_wi,
                internal_observer,
                _tr_)}
            return invariant$25(function(_ts_){return 0},internal_observer)});
        iter_observer_descendants
         (t,
          function(node)
           {invariant$19(function(_tq_){return 0},node);
            if(1 - am_stabilizing(t) && ! caml_call1(Uopt[5],node[20]))
             throw [0,Assert_failure,_mF_];
            if(caml_call2(symbol$0,node[14],t[6][3]))return 0;
            throw [0,Assert_failure,_mE_]});
        var _sH_=max_height_allowed(t[5]);
        if(! caml_call2(symbol$1,max_height_allowed$0(t[6]),_sH_))
         throw [0,Assert_failure,_mP_];
        function _sI_(_tp_){return 0}
        function _sJ_(_to_){return 0}
        function _sK_(_tn_){return 0}
        function _sL_(_tm_){return 0}
        function _sM_(_tl_){return 0}
        function _sN_(_tk_){return 0}
        function _sO_(_tj_){return 0}
        function _sP_(_ti_){return 0}
        function _sQ_(_th_){return 0}
        function _sR_(_tg_){return 0}
        function _sS_(_tf_){return 0}
        var
         _sT_=check(Only_in_debug$0[7]),
         _sU_=check(caml_call1(Core_Stack[4],Run_on_update_handlers$0[2])),
         _sV_=check(caml_call1(Core_Stack[4],Packed$0[2])),
         _sW_=
          check
           (function(set_during_stabilization)
             {var _td_=t[1];
              if(typeof _td_ !== "number")throw [0,Assert_failure,_mI_];
              if(! _td_)
               {var
                 _te_=
                  function(param)
                   {if(caml_call1(Uopt[6],param[2]))return 0;
                    throw [0,Assert_failure,_mH_]};
                return caml_call2(Core_Stack[4],_te_,set_during_stabilization)}
              if(caml_call1(Core_Stack[7],set_during_stabilization))return 0;
              throw [0,Assert_failure,_mG_]});
        function _sX_(packed)
         {caml_call1(_kL_[2],packed);
          if(2 === packed[1])return 0;
          throw [0,Assert_failure,_mJ_]}
        var _sY_=check(caml_call1(Core_Stack[4],_sX_));
        function _sZ_(packed)
         {caml_call1(_kL_[2],packed);
          if(1 < packed[1] - 1 >>> 0)return 0;
          throw [0,Assert_failure,_mK_]}
        var _s0_=check(caml_call1(Core_Stack[4],_sZ_));
        function _s1_(_tc_){return 0}
        function _s2_(_tb_){return 0}
        var
         _s3_=
          check
           (function(num_active_observers)
             {if(caml_call2(symbol,num_active_observers,0))return 0;
              throw [0,Assert_failure,_mL_]}),
         _s4_=
          check
           (function(propagate_invalidity)
             {if(caml_call1(Core_Stack[7],propagate_invalidity))return 0;
              throw [0,Assert_failure,_mM_]}),
         _s5_=
          check
           (function(adjust_heights_heap)
             {if(caml_call2(symbol$1,adjust_heights_heap[1],0))
               return invariant$23(adjust_heights_heap);
              throw [0,Assert_failure,_mN_]}),
         _s6_=check(invariant$21),
         _s7_=
          check
           (function(current_scope)
             {if(caml_call2(Core[246],current_scope,top))return 0;
              throw [0,Assert_failure,_mO_]}),
         _s8_=check(invariant$3);
        function _s9_(_ta_){return 0}
        function _s__(_s$_){return 0}
        return caml_call27
                (Fields$0[32],
                 _s__,
                 _s9_,
                 _s8_,
                 _s7_,
                 _s6_,
                 _s5_,
                 _s4_,
                 _s3_,
                 _s2_,
                 _s1_,
                 _s0_,
                 _sY_,
                 _sW_,
                 _sV_,
                 _sU_,
                 _sT_,
                 _sS_,
                 _sR_,
                 _sQ_,
                 _sP_,
                 _sO_,
                 _sN_,
                 _sM_,
                 _sL_,
                 _sK_,
                 _sJ_,
                 _sI_)}
      return caml_call4(Base_Invariant[1],_mQ_,t,sexp_of_t$42,_sG_)}
    function ensure_not_stabilizing(t,name,allow_in_update_handler)
     {var _sy_=t[1];
      if(typeof _sy_ === "number")
       switch(_sy_)
        {case 0:
          var
           backtrace=caml_call2(Base_Backtrace[2],0,0),
           _sz_=Base_Backtrace[1],
           _sA_=caml_call2(Core[257],_mR_,name);
          return caml_call5(Core[236],0,_mS_,_sA_,backtrace,_sz_);
         case 1:
          var _sB_=1 - allow_in_update_handler;
          if(! _sB_)return _sB_;
          var
           backtrace$0=caml_call2(Base_Backtrace[2],0,0),
           _sC_=Base_Backtrace[1],
           _sD_=caml_call2(Core[257],_mT_,name);
          return caml_call5(Core[236],0,_mU_,_sD_,backtrace$0,_sC_);
         default:return 0}
      var raised_exn=_sy_[1],backtrace$1=caml_call2(Base_Backtrace[2],0,0);
      function _sE_(param)
       {var
         arg1_112=param[2],
         arg0_111=param[1],
         res0_113=sexp_of_t$9(arg0_111),
         res1_114=caml_call1(Base_Backtrace[1],arg1_112);
        return [1,[0,res0_113,[0,res1_114,0]]]}
      var _sF_=caml_call2(Core[257],_mV_,name);
      return caml_call5(Core[236],0,_mW_,_sF_,[0,raised_exn,backtrace$1],_sE_)}
    function set_height$1(node,height)
     {var t=node[2];return set_height$0(t[6],node,height)}
    function set_max_height_allowed$1(t,height)
     {ensure_not_stabilizing(t,cst_set_max_height_allowed,1);
      set_max_height_allowed$0(t[6],height);
      return set_max_height_allowed(t[5],height)}
    function handle_after_stabilization$1(node)
     {var _sx_=1 - node[22];
      if(! _sx_)return _sx_;
      var t=node[2];
      node[22] = 1;
      return caml_call2(Core_Stack[25],t[14],node)}
    function remove_children(parent)
     {return iteri_children$0
              (parent,
               function(child_index,param)
                {return remove_child(param,parent,child_index)})}
    function became_unnecessary(node)
     {var t=node[2];
      t[20] = t[20] + 1 | 0;
      if(caml_call2(symbol$2,node[8],0))handle_after_stabilization$1(node);
      node[14] = -1;
      remove_children(node);
      var _sv_=node[5],switch$0=0;
      if(typeof _sv_ === "number")
       switch$0 = 1;
      else
       switch(_sv_[0])
        {case 6:var p=_sv_[1];observability_change(p,0);break;
         case 15:var u=_sv_[1];force_full_compute(u);break;
         default:switch$0 = 1}
      var _sw_=is_in_recompute_heap(node);
      return _sw_?remove(t[5],node):_sw_}
    function check_if_unnecessary(node)
     {var _su_=1 - caml_call1(is_necessary$1,node);
      return _su_?became_unnecessary(node):_su_}
    function remove_child(child,parent,child_index)
     {remove_parent(child,parent,child_index);
      return check_if_unnecessary(child)}
    function remove_alarm(clock,alarm)
     {var _st_=caml_call2(Timing_wheel[27],clock[1],alarm);
      return _st_?caml_call2(Timing_wheel[28],clock[1],alarm):_st_}
    function invalidate_node(node)
     {var _sl_=caml_call1(is_valid$2,node);
      if(_sl_)
       {var t=node[2];
        if(caml_call2(symbol$2,node[8],0))handle_after_stabilization$1(node);
        node[4] = Uopt[3];
        node[7] = t[3];
        node[3] = t[3];
        t[23] = t[23] + 1 | 0;
        if(caml_call1(is_necessary$1,node))
         {remove_children(node);node[14] = height(node[12]) + 1 | 0}
        var _sm_=node[5],switch$0=0;
        if(typeof _sm_ === "number")
         switch$0 = 1;
        else
         switch(_sm_[0])
          {case 1:var at=_sm_[1];remove_alarm(at[4],at[3]);break;
           case 2:
            var at_intervals=_sm_[1];
            remove_alarm(at_intervals[5],at_intervals[4]);
            break;
           case 4:
            var bind=_sm_[1];invalidate_nodes_created_on_rh(bind[7]);break;
           case 14:
            var match=_sm_[1],alarm=match[6],clock=match[8];
            remove_alarm(clock,alarm);
            break;
           default:switch$0 = 1}
        set_kind$0(node,0);
        var _so_=node[9] - 1 | 0,_sn_=0;
        if(_so_ >= 0)
         {var index=_sn_;
          for(;;)
           {var _sr_=get_parent(node,index);
            caml_call2(Core_Stack[25],t[7],_sr_);
            var _ss_=index + 1 | 0;
            if(_so_ !== index){var index=_ss_;continue}
            break}}
        var _sp_=is_in_recompute_heap(node);
        if(_sp_)return remove(t[5],node);
        var _sq_=_sp_}
      else
       var _sq_=_sl_;
      return _sq_}
    function invalidate_nodes_created_on_rh(node)
     {var r=[0,node];
      for(;;)
       {if(! caml_call1(Uopt[6],r[1]))return 0;
        var match=caml_call1(Uopt[11],r[1]);
        r[1] = match[13];
        match[13] = Uopt[3];
        invalidate_node(match)}}
    function rescope_nodes_created_on_rhs(t,first_node_on_rhs,new_scope)
     {var r=[0,first_node_on_rhs];
      for(;;)
       {if(! caml_call1(Uopt[6],r[1]))return 0;
        var match=caml_call1(Uopt[11],r[1]);
        r[1] = match[13];
        match[13] = Uopt[3];
        match[12] = new_scope;
        add_node(new_scope,match)}}
    function propagate_invalidity$1(t)
     {for(;;)
       {if(caml_call1(Core_Stack[7],t[7]))return 0;
        var node=caml_call1(Core_Stack[27],t[7]);
        if(caml_call1(is_valid$2,node))
         if(should_be_invalidated(node))
          invalidate_node(node);
         else
          {var _sk_=node[5],switch$0=0;
           if(typeof _sk_ !== "number" && 6 === _sk_[0])
            {var expert=_sk_[1];incr_invalid_children(expert);switch$0 = 1}
           if(1 - is_in_recompute_heap(node))add$0(t[5],node)}}}
    function add_parent_without_adjusting_h(child,parent,child_index)
     {var t=child[2],was_necessary=caml_call1(is_necessary$1,child);
      add_parent(child,parent,child_index);
      if(1 - caml_call1(is_valid$2,child))
       caml_call2(Core_Stack[25],t[7],parent);
      if(1 - was_necessary)_mX_(child);
      var _sj_=parent[5];
      if(typeof _sj_ !== "number" && 6 === _sj_[0])
       {var e=_sj_[1];return run_edge_callback(e,child_index)}
      return 0}
    function _mX_(node)
     {var
       _se_=caml_call1(is_valid$2,node),
       _sf_=_se_?1 - is_necessary$0(node[12]):_se_;
      if(_sf_)
       {var
         _sg_=
          function(x_115)
           {return sexp_of_t$30(function(param){return _mY_},x_115)};
        caml_call5(Core[236],0,_mZ_,cst_Trying_to_make_a_node_nece,node,_sg_)}
      var t=node[2];
      t[19] = t[19] + 1 | 0;
      if(caml_call2(symbol$2,node[8],0))handle_after_stabilization$1(node);
      set_height$1(node,height(node[12]) + 1 | 0);
      iteri_children$0
       (node,
        function(child_index,child)
         {add_parent_without_adjusting_h(child,node,child_index);
          var _si_=caml_call2(symbol,child[14],node[14]);
          return _si_?set_height$1(node,child[14] + 1 | 0):_si_});
      if(is_stale(node))add$0(t[5],node);
      var _sh_=node[5];
      if(typeof _sh_ !== "number" && 6 === _sh_[0])
       {var p=_sh_[1];return observability_change(p,1)}
      return 0}
    function became_necessary(node)
     {_mX_(node);return propagate_invalidity$1(node[2])}
    function add_parent$0(child,parent,child_index)
     {var t=parent[2];
      add_parent_without_adjusting_h(child,parent,child_index);
      if(caml_call2(symbol,child[14],parent[14]))
       adjust_heights(t[6],t[5],child,parent);
      propagate_invalidity$1(t);
      var _sb_=1 - is_in_recompute_heap(parent);
      if(_sb_)
       var _sc_=is_none(parent[3]),_sd_=_sc_ || edge_is_stale(child,parent);
      else
       var _sd_=_sb_;
      return _sd_?add$0(t[5],parent):_sd_}
    function run_with_scope(t,scope,f)
     {var saved=t[4];
      t[4] = scope;
      try
       {var v=caml_call1(f,0);t[4] = saved;return v}
      catch(exn){exn = caml_wrap_exception(exn);t[4] = saved;throw exn}}
    function within_scope(t,scope,f)
     {if(1 - is_valid$1(scope))
       caml_call5
        (Core[236],0,_m0_,cst_attempt_to_run_within_an_i,t,sexp_of_t$42);
      return run_with_scope(t,scope,f)}
    function change_child(parent,old_child,new_child,child_index)
     {if(caml_call1(Uopt[5],old_child))
       return add_parent$0(new_child,parent,child_index);
      var
       old_child$0=caml_call1(Uopt[11],old_child),
       _sa_=1 - caml_call2(Core[246],old_child$0,new_child);
      return _sa_
              ?(remove_parent(old_child$0,parent,child_index),
                old_child$0[26]
                =
                1,
                add_parent$0(new_child,parent,child_index),
                old_child$0[26]
                =
                0,
                check_if_unnecessary(old_child$0))
              :_sa_}
    function add_alarm(clock,at,alarm_value)
     {return caml_call3(Timing_wheel[25],clock[1],at,alarm_value)}
    function maybe_change_value(node,new_value)
     {var
       t=node[2],
       old_value_opt=node[4],
       _rV_=caml_call1(Uopt[5],old_value_opt);
      if(_rV_)
       var _rW_=_rV_;
      else
       var
        _r$_=caml_call1(Uopt[11],old_value_opt),
        _rW_=1 - should_cutoff(node[6],_r$_,new_value);
      if(_rW_)
       {node[4] = caml_call1(Uopt[4],new_value);
        node[7] = t[3];
        t[21] = t[21] + 1 | 0;
        if(caml_call2(symbol$2,node[8],0))
         {node[20] = old_value_opt;handle_after_stabilization$1(node)}
        if(caml_call2(symbol,node[9],1))
         {var _rY_=node[9] - 1 | 0,_rX_=1;
          if(_rY_ >= 1)
           {var parent_index=_rX_;
            for(;;)
             {var
               _r8_=
                caml_call2(Uniform_array[19],node[10],parent_index - 1 | 0),
               parent$0=caml_call1(Uopt[7],_r8_),
               _r9_=parent$0[5],
               switch$0=0;
              if(typeof _r9_ === "number")
               switch$0 = 1;
              else
               switch(_r9_[0])
                {case 6:
                  var
                   expert=_r9_[1],
                   child_index$0=
                    caml_check_bound(node[25],parent_index)[1 + parent_index];
                  run_edge_callback(expert,child_index$0);
                  break;
                 case 15:
                  var u$0=_r9_[1];
                  child_changed
                   (u$0,
                    node,
                    caml_check_bound(node[25],parent_index)[1 + parent_index],
                    old_value_opt,
                    new_value);
                  break;
                 default:switch$0 = 1}
              if(1 - is_in_recompute_heap(parent$0))add$0(t[5],parent$0);
              var _r__=parent_index + 1 | 0;
              if(_rY_ !== parent_index){var parent_index=_r__;continue}
              break}}
          var parent=caml_call1(Uopt[7],node[11]),_rZ_=parent[5],switch$1=0;
          if(typeof _rZ_ === "number")
           switch$1 = 1;
          else
           switch(_rZ_[0])
            {case 6:
              var p=_rZ_[1],child_index=caml_check_bound(node[25],0)[1];
              run_edge_callback(p,child_index);
              break;
             case 15:
              var u=_rZ_[1];
              child_changed
               (u,
                node,
                caml_check_bound(node[25],0)[1],
                old_value_opt,
                new_value);
              break;
             default:switch$1 = 1}
          if(1 - is_in_recompute_heap(parent))
           {var _r0_=parent[5],switch$2=0;
            if(typeof _r0_ === "number")
             {if(1 === _r0_)throw [0,Assert_failure,_m4_];switch$2 = 1}
            else
             switch(_r0_[0])
              {case 1:throw [0,Assert_failure,_m5_];
               case 2:throw [0,Assert_failure,_m6_];
               case 3:
                var
                 _r2_=height(parent[12]),
                 can_recompute_now=caml_call2(symbol$2,node[14],_r2_);
                break;
               case 4:
                var
                 b=_r0_[1],
                 can_recompute_now=caml_call2(symbol$2,node[14],b[4][14]);
                break;
               case 7:
                var
                 _r3_=height(parent[12]),
                 can_recompute_now=caml_call2(symbol$2,node[14],_r3_);
                break;
               case 8:
                var
                 _r4_=height(parent[12]),
                 can_recompute_now=caml_call2(symbol$2,node[14],_r4_);
                break;
               case 9:
                var
                 i=_r0_[1],
                 can_recompute_now=caml_call2(symbol$2,node[14],i[3][14]);
                break;
               case 10:
                var
                 _r5_=height(parent[12]),
                 can_recompute_now=caml_call2(symbol$2,node[14],_r5_);
                break;
               case 11:
                var
                 j=_r0_[1],
                 can_recompute_now=caml_call2(symbol$2,node[14],j[3][14]);
                break;
               case 12:
                var
                 _r6_=height(parent[12]),
                 can_recompute_now=caml_call2(symbol$2,node[14],_r6_);
                break;
               case 14:
                var
                 _r7_=height(parent[12]),
                 can_recompute_now=caml_call2(symbol$2,node[14],_r7_);
                break;
               case 5:
               case 13:
               case 16:switch$2 = 1;break;
               default:var can_recompute_now=0}
            if(switch$2)throw [0,Assert_failure,_m3_];
            if(can_recompute_now)
             {t[25] = t[25] + 1 | 0;recompute(parent)}
            else
             {var _r1_=min_height(t[5]);
              if(caml_call2(symbol$0,parent[14],_r1_))
               {t[26] = t[26] + 1 | 0;recompute(parent)}
              else
               add$0(t[5],parent)}}}}
      return debug}
    function copy_child(parent,child)
     {return caml_call1(is_valid$2,child)
              ?maybe_change_value(parent,value_exn(child))
              :(invalidate_node(parent),propagate_invalidity$1(parent[2]))}
    function recompute(node)
     {var t=node[2];
      t[24] = t[24] + 1 | 0;
      node[3] = t[3];
      var _qe_=node[5];
      if(typeof _qe_ === "number")
       {if(0 === _qe_)throw [0,Assert_failure,_m1_];
        throw [0,Assert_failure,_m2_]}
      switch(_qe_[0])
       {case 0:
         var array_fold=_qe_[1];
         return maybe_change_value(node,compute$0(array_fold));
        case 1:return maybe_change_value(node,0);
        case 2:return maybe_change_value(node,0);
        case 3:
         var
          bind=_qe_[1],
          main=bind[1],
          f=bind[2],
          lhs=bind[3],
          old_rhs=bind[5],
          rhs_scope=bind[6],
          old_all_nodes_created_on_rhs=bind[7];
         bind[7] = Uopt[3];
         var
          rhs=
           run_with_scope
            (t,rhs_scope,function(param){return caml_call1(f,value_exn(lhs))});
         bind[5] = caml_call1(Uopt[4],rhs);
         node[7] = t[3];
         change_child(main,old_rhs,rhs,bind_rhs_child_index);
         if(caml_call1(Uopt[6],old_rhs))
          {if(t[2])
            invalidate_nodes_created_on_rh(old_all_nodes_created_on_rhs);
           else
            rescope_nodes_created_on_rhs
             (t,old_all_nodes_created_on_rhs,main[12]);
           propagate_invalidity$1(t)}
         return maybe_change_value(node,0);
        case 4:
         var match=_qe_[1],rhs$0=match[5];
         return copy_child(node,caml_call1(Uopt[7],rhs$0));
        case 5:var a=_qe_[1];return maybe_change_value(node,a);
        case 6:
         var expert=_qe_[1],match$0=before_main_computation(expert);
         return 144245463 <= match$0
                 ?(invalidate_node(node),propagate_invalidity$1(t))
                 :maybe_change_value(node,caml_call1(expert[1],0));
        case 7:
         var
          match$1=_qe_[1],
          only_freeze_when=match$1[3],
          child=match$1[2],
          value=value_exn(child);
         if(caml_call1(only_freeze_when,value))
          {remove_children(node);
           set_kind$0(node,[5,value]);
           if(caml_call1(is_necessary$1,node))
            set_height$1(node,0);
           else
            became_unnecessary(node)}
         return maybe_change_value(node,value);
        case 8:
         var
          if_then_else=_qe_[1],
          test=if_then_else[2],
          main$0=if_then_else[1],
          current_branch=if_then_else[4],
          else$0=if_then_else[6],
          then=if_then_else[5],
          desired_branch=value_exn(test)?then:else$0;
         if_then_else[4] = caml_call1(Uopt[4],desired_branch);
         node[7] = t[3];
         change_child
          (main$0,current_branch,desired_branch,if_branch_child_index);
         return maybe_change_value(node,0);
        case 9:
         var match$2=_qe_[1],current_branch$0=match$2[4];
         return copy_child(node,caml_call1(Uopt[7],current_branch$0));
        case 10:
         var
          join=_qe_[1],
          lhs$0=join[2],
          main$1=join[1],
          old_rhs$0=join[4],
          rhs$1=value_exn(lhs$0);
         join[4] = caml_call1(Uopt[4],rhs$1);
         node[7] = t[3];
         change_child(main$1,old_rhs$0,rhs$1,join_rhs_child_index);
         return maybe_change_value(node,0);
        case 11:
         var match$3=_qe_[1],rhs$2=match$3[4];
         return copy_child(node,caml_call1(Uopt[7],rhs$2));
        case 12:
         var n1=_qe_[2],f$0=_qe_[1];
         return maybe_change_value(node,caml_call1(f$0,value_exn(n1)));
        case 13:
         var match$4=_qe_[1],before=match$4[3];
         return maybe_change_value(node,before);
        case 14:
         var
          step_function_node=_qe_[1],
          child$0=step_function_node[2],
          clock=step_function_node[8];
         if(caml_call1(Uopt[6],child$0))
          {var child$1=caml_call1(Uopt[7],child$0);
           if
            (caml_call2
              (symbol$2,caml_call2(_H_,child$1[7],step_function_node[3]),0))
            {step_function_node[3] = child$1[7];
             remove_alarm(clock,step_function_node[6]);
             var
              step_function=value_exn(child$1),
              _qf_=caml_call1(Incremental_step_function[3],step_function);
             step_function_node[4] = caml_call1(Uopt[4],_qf_);
             step_function_node[5]
             =
             caml_call1(Incremental_step_function[4],step_function);
             if(is_const(child$1))
              {remove_children(node);
               step_function_node[2] = Uopt[3];
               set_height$1(node,height(node[12]) + 1 | 0)}}}
         advance(step_function_node,now$2(clock));
         var
          step_function_value=caml_call1(Uopt[7],step_function_node[4]),
          match$5=caml_call1(Core_Sequence[63],step_function_node[5]);
         if(match$5)
          {var match$6=match$5[1],at=match$6[1];
           step_function_node[6] = add_alarm(clock,at,step_function_node[7])}
         else
          if(caml_call1(Uopt[5],child$0))
           set_kind$0(node,[5,step_function_value]);
         return maybe_change_value(node,step_function_value);
        case 15:var u=_qe_[1];return maybe_change_value(node,compute(u));
        case 16:var var$0=_qe_[1];return maybe_change_value(node,var$0[1]);
        case 17:
         var n2=_qe_[3],n1$0=_qe_[2],f$1=_qe_[1],_qg_=value_exn(n2);
         return maybe_change_value(node,caml_call2(f$1,value_exn(n1$0),_qg_));
        case 18:
         var
          n3=_qe_[4],
          n2$0=_qe_[3],
          n1$1=_qe_[2],
          f$2=_qe_[1],
          _qh_=value_exn(n3),
          _qi_=value_exn(n2$0);
         return maybe_change_value
                 (node,caml_call3(f$2,value_exn(n1$1),_qi_,_qh_));
        case 19:
         var
          n4=_qe_[5],
          n3$0=_qe_[4],
          n2$1=_qe_[3],
          n1$2=_qe_[2],
          f$3=_qe_[1],
          _qj_=value_exn(n4),
          _qk_=value_exn(n3$0),
          _ql_=value_exn(n2$1);
         return maybe_change_value
                 (node,caml_call4(f$3,value_exn(n1$2),_ql_,_qk_,_qj_));
        case 20:
         var
          n5=_qe_[6],
          n4$0=_qe_[5],
          n3$1=_qe_[4],
          n2$2=_qe_[3],
          n1$3=_qe_[2],
          f$4=_qe_[1],
          _qm_=value_exn(n5),
          _qn_=value_exn(n4$0),
          _qo_=value_exn(n3$1),
          _qp_=value_exn(n2$2);
         return maybe_change_value
                 (node,caml_call5(f$4,value_exn(n1$3),_qp_,_qo_,_qn_,_qm_));
        case 21:
         var
          n6=_qe_[7],
          n5$0=_qe_[6],
          n4$1=_qe_[5],
          n3$2=_qe_[4],
          n2$3=_qe_[3],
          n1$4=_qe_[2],
          f$5=_qe_[1],
          _qq_=value_exn(n6),
          _qr_=value_exn(n5$0),
          _qs_=value_exn(n4$1),
          _qt_=value_exn(n3$2),
          _qu_=value_exn(n2$3);
         return maybe_change_value
                 (node,
                  caml_call6(f$5,value_exn(n1$4),_qu_,_qt_,_qs_,_qr_,_qq_));
        case 22:
         var
          n7=_qe_[8],
          n6$0=_qe_[7],
          n5$1=_qe_[6],
          n4$2=_qe_[5],
          n3$3=_qe_[4],
          n2$4=_qe_[3],
          n1$5=_qe_[2],
          f$6=_qe_[1],
          _qv_=value_exn(n7),
          _qw_=value_exn(n6$0),
          _qx_=value_exn(n5$1),
          _qy_=value_exn(n4$2),
          _qz_=value_exn(n3$3),
          _qA_=value_exn(n2$4);
         return maybe_change_value
                 (node,
                  caml_call7
                   (f$6,value_exn(n1$5),_qA_,_qz_,_qy_,_qx_,_qw_,_qv_));
        case 23:
         var
          n8=_qe_[9],
          n7$0=_qe_[8],
          n6$1=_qe_[7],
          n5$2=_qe_[6],
          n4$3=_qe_[5],
          n3$4=_qe_[4],
          n2$5=_qe_[3],
          n1$6=_qe_[2],
          f$7=_qe_[1],
          _qB_=value_exn(n8),
          _qC_=value_exn(n7$0),
          _qD_=value_exn(n6$1),
          _qE_=value_exn(n5$2),
          _qF_=value_exn(n4$3),
          _qG_=value_exn(n3$4),
          _qH_=value_exn(n2$5);
         return maybe_change_value
                 (node,
                  caml_call8
                   (f$7,value_exn(n1$6),_qH_,_qG_,_qF_,_qE_,_qD_,_qC_,_qB_));
        case 24:
         var
          n9=_qe_[10],
          n8$0=_qe_[9],
          n7$1=_qe_[8],
          n6$2=_qe_[7],
          n5$3=_qe_[6],
          n4$4=_qe_[5],
          n3$5=_qe_[4],
          n2$6=_qe_[3],
          n1$7=_qe_[2],
          f$8=_qe_[1],
          _qI_=value_exn(n9),
          _qJ_=value_exn(n8$0),
          _qK_=value_exn(n7$1),
          _qL_=value_exn(n6$2),
          _qM_=value_exn(n5$3),
          _qN_=value_exn(n4$4),
          _qO_=value_exn(n3$5),
          _qP_=value_exn(n2$6);
         return maybe_change_value
                 (node,
                  caml_call9
                   (f$8,
                    value_exn(n1$7),
                    _qP_,
                    _qO_,
                    _qN_,
                    _qM_,
                    _qL_,
                    _qK_,
                    _qJ_,
                    _qI_));
        case 25:
         var
          n10=_qe_[11],
          n9$0=_qe_[10],
          n8$1=_qe_[9],
          n7$2=_qe_[8],
          n6$3=_qe_[7],
          n5$4=_qe_[6],
          n4$5=_qe_[5],
          n3$6=_qe_[4],
          n2$7=_qe_[3],
          n1$8=_qe_[2],
          f$9=_qe_[1],
          _qQ_=value_exn(n10),
          _qR_=value_exn(n9$0),
          _qS_=value_exn(n8$1),
          _qT_=value_exn(n7$2),
          _qU_=value_exn(n6$3),
          _qV_=value_exn(n5$4),
          _qW_=value_exn(n4$5),
          _qX_=value_exn(n3$6),
          _qY_=value_exn(n2$7);
         return maybe_change_value
                 (node,
                  caml_call10
                   (f$9,
                    value_exn(n1$8),
                    _qY_,
                    _qX_,
                    _qW_,
                    _qV_,
                    _qU_,
                    _qT_,
                    _qS_,
                    _qR_,
                    _qQ_));
        case 26:
         var
          n11=_qe_[12],
          n10$0=_qe_[11],
          n9$1=_qe_[10],
          n8$2=_qe_[9],
          n7$3=_qe_[8],
          n6$4=_qe_[7],
          n5$5=_qe_[6],
          n4$6=_qe_[5],
          n3$7=_qe_[4],
          n2$8=_qe_[3],
          n1$9=_qe_[2],
          f$10=_qe_[1],
          _qZ_=value_exn(n11),
          _q0_=value_exn(n10$0),
          _q1_=value_exn(n9$1),
          _q2_=value_exn(n8$2),
          _q3_=value_exn(n7$3),
          _q4_=value_exn(n6$4),
          _q5_=value_exn(n5$5),
          _q6_=value_exn(n4$6),
          _q7_=value_exn(n3$7),
          _q8_=value_exn(n2$8);
         return maybe_change_value
                 (node,
                  caml_call11
                   (f$10,
                    value_exn(n1$9),
                    _q8_,
                    _q7_,
                    _q6_,
                    _q5_,
                    _q4_,
                    _q3_,
                    _q2_,
                    _q1_,
                    _q0_,
                    _qZ_));
        case 27:
         var
          n12=_qe_[13],
          n11$0=_qe_[12],
          n10$1=_qe_[11],
          n9$2=_qe_[10],
          n8$3=_qe_[9],
          n7$4=_qe_[8],
          n6$5=_qe_[7],
          n5$6=_qe_[6],
          n4$7=_qe_[5],
          n3$8=_qe_[4],
          n2$9=_qe_[3],
          n1$10=_qe_[2],
          f$11=_qe_[1],
          _q9_=value_exn(n12),
          _q__=value_exn(n11$0),
          _q$_=value_exn(n10$1),
          _ra_=value_exn(n9$2),
          _rb_=value_exn(n8$3),
          _rc_=value_exn(n7$4),
          _rd_=value_exn(n6$5),
          _re_=value_exn(n5$6),
          _rf_=value_exn(n4$7),
          _rg_=value_exn(n3$8),
          _rh_=value_exn(n2$9);
         return maybe_change_value
                 (node,
                  caml_call12
                   (f$11,
                    value_exn(n1$10),
                    _rh_,
                    _rg_,
                    _rf_,
                    _re_,
                    _rd_,
                    _rc_,
                    _rb_,
                    _ra_,
                    _q$_,
                    _q__,
                    _q9_));
        case 28:
         var
          n13=_qe_[14],
          n12$0=_qe_[13],
          n11$1=_qe_[12],
          n10$2=_qe_[11],
          n9$3=_qe_[10],
          n8$4=_qe_[9],
          n7$5=_qe_[8],
          n6$6=_qe_[7],
          n5$7=_qe_[6],
          n4$8=_qe_[5],
          n3$9=_qe_[4],
          n2$10=_qe_[3],
          n1$11=_qe_[2],
          f$12=_qe_[1],
          _ri_=value_exn(n13),
          _rj_=value_exn(n12$0),
          _rk_=value_exn(n11$1),
          _rl_=value_exn(n10$2),
          _rm_=value_exn(n9$3),
          _rn_=value_exn(n8$4),
          _ro_=value_exn(n7$5),
          _rp_=value_exn(n6$6),
          _rq_=value_exn(n5$7),
          _rr_=value_exn(n4$8),
          _rs_=value_exn(n3$9),
          _rt_=value_exn(n2$10);
         return maybe_change_value
                 (node,
                  caml_call13
                   (f$12,
                    value_exn(n1$11),
                    _rt_,
                    _rs_,
                    _rr_,
                    _rq_,
                    _rp_,
                    _ro_,
                    _rn_,
                    _rm_,
                    _rl_,
                    _rk_,
                    _rj_,
                    _ri_));
        case 29:
         var
          n14=_qe_[15],
          n13$0=_qe_[14],
          n12$1=_qe_[13],
          n11$2=_qe_[12],
          n10$3=_qe_[11],
          n9$4=_qe_[10],
          n8$5=_qe_[9],
          n7$6=_qe_[8],
          n6$7=_qe_[7],
          n5$8=_qe_[6],
          n4$9=_qe_[5],
          n3$10=_qe_[4],
          n2$11=_qe_[3],
          n1$12=_qe_[2],
          f$13=_qe_[1],
          _ru_=value_exn(n14),
          _rv_=value_exn(n13$0),
          _rw_=value_exn(n12$1),
          _rx_=value_exn(n11$2),
          _ry_=value_exn(n10$3),
          _rz_=value_exn(n9$4),
          _rA_=value_exn(n8$5),
          _rB_=value_exn(n7$6),
          _rC_=value_exn(n6$7),
          _rD_=value_exn(n5$8),
          _rE_=value_exn(n4$9),
          _rF_=value_exn(n3$10),
          _rG_=value_exn(n2$11);
         return maybe_change_value
                 (node,
                  caml_call14
                   (f$13,
                    value_exn(n1$12),
                    _rG_,
                    _rF_,
                    _rE_,
                    _rD_,
                    _rC_,
                    _rB_,
                    _rA_,
                    _rz_,
                    _ry_,
                    _rx_,
                    _rw_,
                    _rv_,
                    _ru_));
        default:
         var
          n15=_qe_[16],
          n14$0=_qe_[15],
          n13$1=_qe_[14],
          n12$2=_qe_[13],
          n11$3=_qe_[12],
          n10$4=_qe_[11],
          n9$5=_qe_[10],
          n8$6=_qe_[9],
          n7$7=_qe_[8],
          n6$8=_qe_[7],
          n5$9=_qe_[6],
          n4$10=_qe_[5],
          n3$11=_qe_[4],
          n2$12=_qe_[3],
          n1$13=_qe_[2],
          f$14=_qe_[1],
          _rH_=value_exn(n15),
          _rI_=value_exn(n14$0),
          _rJ_=value_exn(n13$1),
          _rK_=value_exn(n12$2),
          _rL_=value_exn(n11$3),
          _rM_=value_exn(n10$4),
          _rN_=value_exn(n9$5),
          _rO_=value_exn(n8$6),
          _rP_=value_exn(n7$7),
          _rQ_=value_exn(n6$8),
          _rR_=value_exn(n5$9),
          _rS_=value_exn(n4$10),
          _rT_=value_exn(n3$11),
          _rU_=value_exn(n2$12);
         return maybe_change_value
                 (node,
                  caml_call15
                   (f$14,
                    value_exn(n1$13),
                    _rU_,
                    _rT_,
                    _rS_,
                    _rR_,
                    _rQ_,
                    _rP_,
                    _rO_,
                    _rN_,
                    _rM_,
                    _rL_,
                    _rK_,
                    _rJ_,
                    _rI_,
                    _rH_))}}
    function recompute_first_node_that_is_n(r)
     {var node=remove_min(r);return recompute(node)}
    function unlink_disallowed_observers(t)
     {for(;;)
       {if(! caml_call2(symbol$2,caml_call1(Core_Stack[6],t[12]),0))return 0;
        var internal_observer=caml_call1(Core_Stack[27],t[12]);
        internal_observer[1] = 3;
        var all_observers=caml_call1(Uopt[7],t[9]);
        if(same$2(internal_observer,all_observers))
         t[9] = internal_observer[5];
        unlink$0(internal_observer);
        check_if_unnecessary(internal_observer[2])}}
    function disallow_future_use(internal_observer)
     {var t=incr_state$0(internal_observer),_qd_=internal_observer[1];
      return 1 === _qd_
              ?(t[8]
                =
                t[8]
                -
                1
                |
                0,
                internal_observer[1]
                =
                2,
                caml_call2(Core_Stack[25],t[12],internal_observer))
              :_qd_
                ?0
                :(t[8]
                  =
                  t[8]
                  -
                  1
                  |
                  0,
                  internal_observer[1]
                  =
                  3,
                  internal_observer[3]
                  =
                  0,
                  0)}
    function disallow_finalized_observers(t)
     {for(;;)
       {if(! caml_call2(symbol$2,caml_call1(Thread_safe_queue[4],t[10]),0))
         return 0;
        var internal_observer=caml_call1(Thread_safe_queue[6],t[10]);
        if(caml_call1(Core_List[8],internal_observer[3]))
         disallow_future_use(internal_observer)}}
    function observer_finalizer(t)
     {function _qc_(observer)
       {var internal_observer=observer[1];
        return caml_call2(Thread_safe_queue[5],t[10],internal_observer)}
      return caml_call1(Core[258],_qc_)}
    function observe(opt,observing)
     {if(opt)var sth=opt[1],should_finalize=sth;else var should_finalize=1;
      var
       t=observing[2],
       internal_observer=[0,0,observing,0,Uopt[3],Uopt[3],Uopt[3],Uopt[3]];
      caml_call2(Core_Stack[25],t[11],internal_observer);
      var observer=[0,internal_observer];
      if(should_finalize)
       {var _qa_=observer_finalizer(t),_qb_=caml_call1(Core[259],_qa_);
        caml_call2(Core_Gc[10][2],observer,_qb_)}
      t[8] = t[8] + 1 | 0;
      return observer}
    function add_new_observers(t)
     {for(;;)
       {if(! caml_call2(symbol$2,caml_call1(Core_Stack[6],t[11]),0))return 0;
        var
         internal_observer=caml_call1(Core_Stack[27],t[11]),
         _p7_=internal_observer[1];
        if(_p7_)
         {if(3 > _p7_)throw [0,Assert_failure,_m7_]}
        else
         {internal_observer[1] = 1;
          var old_all_observers=t[9];
          if(caml_call1(Uopt[6],old_all_observers))
           {internal_observer[5] = old_all_observers;
            var
             _p8_=caml_call1(Uopt[4],internal_observer),
             _p9_=caml_call1(Uopt[11],old_all_observers);
            caml_call2(_kL_[4],_p9_,_p8_)}
          t[9] = caml_call1(Uopt[4],internal_observer);
          var
           observing=internal_observer[2],
           was_necessary=caml_call1(is_necessary$1,observing),
           _p__=caml_call1(Core_List[7],internal_observer[3]);
          observing[8] = observing[8] + _p__ | 0;
          var old_observers=observing[21];
          if(caml_call1(Uopt[6],old_observers))
           {internal_observer[7] = old_observers;
            var _p$_=caml_call1(Uopt[4],internal_observer);
            caml_call1(Uopt[11],old_observers)[6] = _p$_}
          observing[21] = caml_call1(Uopt[4],internal_observer);
          handle_after_stabilization$1(observing);
          if(1 - was_necessary)became_necessary(observing)}}}
    function observer_value_exn(observer)
     {var t=incr_state$1(observer),_p5_=t[1];
      if(typeof _p5_ !== "number")
       {var raised_exn=_p5_[1];
        return caml_call5
                (Core[236],
                 0,
                 _m__,
                 cst_Observer_value_exn_called_$2,
                 raised_exn,
                 sexp_of_t$9)}
      if(_p5_)return value_exn$1(observer);
      function _p6_(x_117)
       {return sexp_of_t$38(function(param){return _m8_},x_117)}
      return caml_call5
              (Core[236],
               0,
               _m9_,
               cst_Observer_value_exn_called_$1,
               observer,
               _p6_)}
    function observer_value(observer)
     {try
       {var _p4_=[0,observer_value_exn(observer)];return _p4_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return [1,caml_call2(Core_Error[25],0,exn)]}}
    function on_update$0(node,f)
     {var t=node[2];
      on_update(node,create$2(f,t[3]));
      return handle_after_stabilization$1(node)}
    function observer_on_update_exn(observer,f)
     {var t=incr_state$1(observer);
      on_update_exn$0(observer,create$2(f,t[3]));
      return handle_after_stabilization$1(observing$1(observer))}
    function set_var_while_not_stabilizing(var$0,value)
     {var t=incr_state(var$0);
      t[27] = t[27] + 1 | 0;
      var$0[1] = value;
      var _p0_=caml_call2(symbol$3,caml_call2(_H_,var$0[3],t[3]),0);
      if(_p0_)
       {var$0[3] = t[3];
        var
         watch=var$0[4],
         _p1_=caml_call1(is_necessary$1,watch),
         _p2_=_p1_?1 - is_in_recompute_heap(watch):_p1_;
        if(_p2_)return add$0(t[5],watch);
        var _p3_=_p2_}
      else
       var _p3_=_p0_;
      return _p3_}
    function set(var$0,value)
     {var t=incr_state(var$0),_pZ_=t[1];
      if(typeof _pZ_ !== "number")
       {var raised_exn=_pZ_[1];
        return caml_call5
                (Core[236],
                 0,
                 _m$_,
                 cst_cannot_set_var_stabilizati,
                 raised_exn,
                 sexp_of_t$9)}
      if(_pZ_)return set_var_while_not_stabilizing(var$0,value);
      if(caml_call1(Uopt[5],var$0[2]))caml_call2(Core_Stack[25],t[13],var$0);
      var$0[2] = caml_call1(Uopt[4],value);
      return 0}
    function reclaim_space_in_weak_hashtbls(t)
     {for(;;)
       {if(! caml_call2(symbol$2,caml_call1(Thread_safe_queue[4],t[17]),0))
         return 0;
        var
         match=caml_call1(Thread_safe_queue[6],t[17]),
         weak_hashtbl=match[1];
        caml_call1(Weak_hashtbl[11],weak_hashtbl)}}
    function stabilize_start(t)
     {t[1] = 0;
      disallow_finalized_observers(t);
      add_new_observers(t);
      unlink_disallowed_observers(t);
      return debug}
    function stabilize_end(t)
     {t[3] = t[3] + 1 | 0;
      for(;;)
       {if(! caml_call1(Core_Stack[7],t[13]))
         {var
           var$0=caml_call1(Core_Stack[27],t[13]),
           value=caml_call1(Uopt[7],var$0[2]);
          var$0[2] = Uopt[3];
          set_var_while_not_stabilizing(var$0,value);
          continue}
        for(;;)
         {if(! caml_call1(Core_Stack[7],t[14]))
           {var node$0=caml_call1(Core_Stack[27],t[14]);
            node$0[22] = 0;
            var old_value=node$0[20];
            node$0[20] = Uopt[3];
            if(caml_call1(is_valid$2,node$0))
             if(caml_call1(is_necessary$1,node$0))
              var
               new_value=caml_call1(Uopt[7],node$0[4]),
               _pY_=
                caml_call1(Uopt[5],old_value)
                 ?[0,new_value]
                 :[1,caml_call1(Uopt[11],old_value),new_value],
               node_update$0=_pY_;
             else
              var node_update$0=1;
            else
             var node_update$0=0;
            caml_call2(Core_Stack[25],t[15],[0,node$0,node_update$0]);
            continue}
          t[1] = 1;
          var now=t[3];
          for(;;)
           {if(caml_call1(Core_Stack[7],t[15]))
             {t[1] = 2;return reclaim_space_in_weak_hashtbls(t)}
            var
             match=caml_call1(Core_Stack[27],t[15]),
             node_update=match[2],
             node=match[1];
            run_on_update_handlers(node,node_update,now)}}}}
    function raise_during_stabilization(t,exn)
     {t[1] = [0,create$3(exn)];throw exn}
    function stabilize(t)
     {ensure_not_stabilizing(t,cst_stabilize,0);
      try
       {stabilize_start(t);
        var r=t[5];
        for(;;)
         {if(caml_call2(symbol$2,r[1],0))
           {recompute_first_node_that_is_n(r);continue}
          var _pX_=stabilize_end(t);
          return _pX_}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return raise_during_stabilization(t,exn)}}
    function sexp_of_t$45(param){return param?_na_:_nb_}
    var Step_result=[0,sexp_of_t$45];
    function do_one_step_of_stabilize(t)
     {try
       {var _pU_=t[1];
        if(typeof _pU_ === "number")
         {var switch$0=0;
          switch(_pU_)
           {case 0:
             var
              r=t[5],
              _pV_=
               caml_call2(symbol$2,r[1],0)
                ?(recompute_first_node_that_is_n(r),0)
                :(stabilize_end(t),1),
              _pW_=_pV_;
             switch$0 = 1;
             break;
            case 2:stabilize_start(t);var _pW_=0;switch$0 = 1;break
            }
          if(switch$0)return _pW_}
        ensure_not_stabilizing(t,cst_step,0);
        throw [0,Assert_failure,_nc_]}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(typeof t[1] === "number")return raise_during_stabilization(t,exn);
        throw exn}}
    function create_node_in(t,created_in,kind)
     {t[22] = t[22] + 1 | 0;return create$6(t,created_in,kind)}
    function create_node(t,kind){return create_node_in(t,t[4],kind)}
    function create_node_top(t,kind){return create_node_in(t,top,kind)}
    function create$15(t,opt,value)
     {if(opt)
       var sth=opt[1],use_current_scope=sth;
      else
       var use_current_scope=0;
      var
       scope=use_current_scope?t[4]:top,
       watch=create_node_in(t,scope,1),
       var$0=[0,value,Uopt[3],t[3],watch];
      set_kind$0(watch,[16,var$0]);
      return var$0}
    function const$0(t,a){return create_node(t,[5,a])}
    function map$7(n,f){return create_node(n[2],[12,f,n])}
    function map2(n1,n2,f){return create_node(n1[2],[17,f,n1,n2])}
    function both(n1,n2)
     {var _pR_=n1[5],switch$0=0;
      if(typeof _pR_ !== "number" && 5 === _pR_[0])
       {var _pT_=n2[5],_pS_=_pR_[1];
        if(typeof _pT_ !== "number" && 5 === _pT_[0])
         {var b=_pT_[1];return const$0(n1[2],[0,_pS_,b])}
        switch$0 = 1}
      return map2(n1,n2,Core_Tuple[1][6])}
    function map3(n1,n2,n3,f){return create_node(n1[2],[18,f,n1,n2,n3])}
    function map4(n1,n2,n3,n4,f){return create_node(n1[2],[19,f,n1,n2,n3,n4])}
    function map5(n1,n2,n3,n4,n5,f)
     {return create_node(n1[2],[20,f,n1,n2,n3,n4,n5])}
    function map6(n1,n2,n3,n4,n5,n6,f)
     {return create_node(n1[2],[21,f,n1,n2,n3,n4,n5,n6])}
    function map7(n1,n2,n3,n4,n5,n6,n7,f)
     {return create_node(n1[2],[22,f,n1,n2,n3,n4,n5,n6,n7])}
    function map8(n1,n2,n3,n4,n5,n6,n7,n8,f)
     {return create_node(n1[2],[23,f,n1,n2,n3,n4,n5,n6,n7,n8])}
    function map9(n1,n2,n3,n4,n5,n6,n7,n8,n9,f)
     {return create_node(n1[2],[24,f,n1,n2,n3,n4,n5,n6,n7,n8,n9])}
    function map10(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,f)
     {return create_node(n1[2],[25,f,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10])}
    function map11(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,f)
     {return create_node(n1[2],[26,f,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11])}
    function map12(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,f)
     {return create_node(n1[2],[27,f,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12])}
    function map13(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,f)
     {return create_node
              (n1[2],[28,f,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13])}
    function map14(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,f)
     {return create_node
              (n1[2],[29,f,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14])}
    function map15(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,f)
     {return create_node
              (n1[2],
               [30,f,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15])}
    function preserve_cutoff(input,output)
     {return set_cutoff$0
              (output,
               [2,
                function(param,_pQ_)
                 {return caml_call2(_G_,input[7],output[7])}])}
    function depend_on(input,depend_on)
     {var output=map2(input,depend_on,function(a,param){return a});
      preserve_cutoff(input,output);
      return output}
    function necessary_if_alive(input)
     {var
       observer=observe(0,input),
       output=
        map$7(input,function(a){caml_call1(Core_Gc[5],observer);return a});
      preserve_cutoff(input,output);
      return output}
    function bind(lhs,f)
     {var
       t=lhs[2],
       lhs_change=create_node(t,1),
       main=create_node(t,1),
       bind=[0,main,f,lhs,lhs_change,Uopt[3],top,Uopt[3]];
      set_cutoff$0(lhs_change,never);
      bind[6] = [0,bind];
      set_kind$0(lhs_change,[3,bind]);
      set_kind$0(main,[4,bind]);
      return main}
    function bind2(n1,n2,f)
     {function _pP_(param)
       {var v2=param[2],v1=param[1];return caml_call2(f,v1,v2)}
      return bind(map2(n1,n2,function(v1,v2){return [0,v1,v2]}),_pP_)}
    function bind3(n1,n2,n3,f)
     {function _pO_(param)
       {var v3=param[3],v2=param[2],v1=param[1];return caml_call3(f,v1,v2,v3)}
      return bind(map3(n1,n2,n3,function(v1,v2,v3){return [0,v1,v2,v3]}),_pO_)}
    function bind4(n1,n2,n3,n4,f)
     {function _pN_(param)
       {var v4=param[4],v3=param[3],v2=param[2],v1=param[1];
        return caml_call4(f,v1,v2,v3,v4)}
      return bind
              (map4(n1,n2,n3,n4,function(v1,v2,v3,v4){return [0,v1,v2,v3,v4]}),
               _pN_)}
    function join(lhs)
     {var
       t=lhs[2],
       lhs_change=create_node(t,1),
       main=create_node(t,1),
       join=[0,main,lhs,lhs_change,Uopt[3]];
      set_cutoff$0(lhs_change,never);
      set_kind$0(lhs_change,[10,join]);
      set_kind$0(main,[11,join]);
      return main}
    function if$0(test,then,else$0)
     {var
       t=test[2],
       test_change=create_node(t,1),
       main=create_node(t,1),
       if_then_else=[0,main,test,test_change,Uopt[3],then,else$0];
      set_cutoff$0(test_change,never);
      set_kind$0(test_change,[8,if_then_else]);
      set_kind$0(main,[9,if_then_else]);
      return main}
    function lazy_from_fun(t,f)
     {var scope=t[4];
      function _pM_(param){return within_scope(t,scope,f)}
      return caml_call1(Core_Lazy[33],_pM_)}
    var default_hash_table_initial_siz=4;
    function memoize_fun_by_key(opt,t,hashable,project_key,f)
     {if(opt)
       var sth=opt[1],initial_size=sth;
      else
       var initial_size=default_hash_table_initial_siz;
      var
       scope=t[4],
       table=caml_call3(Core_Hashtbl[4],0,[0,initial_size],hashable);
      function _pL_(a)
       {var
         key=caml_call1(project_key,a),
         match=caml_call2(Core_Hashtbl[53],table,key);
        if(match){var b=match[1];return b}
        var b$0=within_scope(t,scope,function(param){return caml_call1(f,a)});
        caml_call3(Core_Hashtbl[36],table,key,b$0);
        return b$0}
      return caml_call1(Core[258],_pL_)}
    function array_fold(t,children,init,f)
     {return caml_call2(symbol$1,children.length - 1,0)
              ?const$0(t,init)
              :create_node(t,[0,[0,init,f,children]])}
    function all(t,ts)
     {function _pK_(ac,a){return [0,a,ac]}
      return array_fold(t,caml_call1(Array[90],ts),0,_pK_)}
    function unordered_array_fold(t,opt,children,init,f,update)
     {if(opt)
       var sth=opt[1],full_compute_every_n_changes=sth;
      else
       var full_compute_every_n_changes=include[41];
      if(caml_call2(symbol$1,children.length - 1,0))return const$0(t,init);
      if(caml_call2(symbol$0,full_compute_every_n_changes,0))
       return caml_call5
               (Core[236],
                0,
                _nd_,
                cst_unordered_array_fold_got_n,
                full_compute_every_n_changes,
                Core[356]);
      var main=create_node(t,1);
      set_kind$0
       (main,
        [15,
         create$4(init,f,update,full_compute_every_n_changes,children,main)]);
      return main}
    function opt_unordered_array_fold
     (t,full_compute_every_n_changes,ts,init,f,f_inverse)
     {function f$0(param,x)
       {var num_invalid=param[2],accum=param[1];
        if(! x)return [0,accum,num_invalid + 1 | 0];
        var x$0=x[1];
        return [0,caml_call2(f,accum,x$0),num_invalid]}
      function f_inverse$0(param,x)
       {var num_invalid=param[2],accum=param[1];
        if(! x)return [0,accum,num_invalid - 1 | 0];
        var x$0=x[1];
        return [0,caml_call2(f_inverse,accum,x$0),num_invalid]}
      function _pJ_(param)
       {var num_invalid=param[2],accum=param[1];
        return caml_call2(symbol$1,num_invalid,0)?[0,accum]:0}
      return map$7
              (unordered_array_fold
                (t,
                 full_compute_every_n_changes,
                 ts,
                 [0,init,0],
                 f$0,
                 [0,f_inverse$0]),
               _pJ_)}
    function at_least_k_of(t,nodes,k)
     {function bool_to_int(b){return b?1:0}
      function _pH_(i){return caml_call2(symbol,i,k)}
      var _pI_=[0,function(num_true,b){return num_true - bool_to_int(b) | 0}];
      return map$7
              (unordered_array_fold
                (t,
                 0,
                 nodes,
                 0,
                 function(num_true,b){return num_true + bool_to_int(b) | 0},
                 _pI_),
               _pH_)}
    function exists$7(t,nodes){return at_least_k_of(t,nodes,1)}
    function for_all$7(t,nodes)
     {return at_least_k_of(t,nodes,nodes.length - 1)}
    function sum$0(t,full_compute_every_n_changes,nodes,zero,add,sub)
     {return unordered_array_fold
              (t,full_compute_every_n_changes,nodes,zero,add,[0,sub])}
    function opt_sum(t,full_compute_every_n_changes,nodes,zero,add,sub)
     {return opt_unordered_array_fold
              (t,full_compute_every_n_changes,nodes,zero,add,sub)}
    function sum_int(t,nodes)
     {function _pC_(_pG_,_pF_){return _pG_ - _pF_ | 0}
      return sum$0
              (t,0,nodes,0,function(_pE_,_pD_){return _pE_ + _pD_ | 0},_pC_)}
    function sum_float(t,nodes)
     {function _px_(_pB_,_pA_){return _pB_ - _pA_}
      return sum$0
              (t,
               [0,nodes.length - 1],
               nodes,
               0.,
               function(_pz_,_py_){return _pz_ + _py_},
               _px_)}
    function set_freeze(node,child,only_freeze_when)
     {var was_necessary=caml_call1(is_necessary$1,node);
      set_kind$0(node,[7,[0,node,child,only_freeze_when]]);
      return was_necessary
              ?add_parent$0(child,node,freeze_child_index)
              :became_necessary(node)}
    function freeze(child,only_freeze_when)
     {var t=child[2],node=create_node_top(t,1);
      set_freeze(node,child,only_freeze_when);
      return node}
    function at(clock,time)
     {var t=caml_call1(Clock$0[9],clock),_pw_=now$2(clock);
      if(caml_call2(Time_ns[16],time,_pw_))return const$0(t,1);
      var main=create_node(t,1),at=[0,main,time,null$0,clock];
      set_kind$0(main,[1,at]);
      at[3] = add_alarm(clock,time,create$10([0,at]));
      return main}
    function after(clock,span)
     {var _pv_=now$2(clock);
      return at(clock,caml_call2(Time_ns[66],_pv_,span))}
    function next_interval_alarm_strict(clock,base,interval)
     {var
       after=now$2(clock),
       at=caml_call5(Time_ns[80],_ne_,base,after,interval,0);
      return at}
    function at_intervals(clock,interval)
     {var
       t=caml_call1(Clock$0[9],clock),
       _pt_=caml_call1(Timing_wheel[10],clock[1]);
      if(caml_call2(Time_ns[1][19],interval,_pt_))
       caml_call5
        (Core[236],
         0,
         _nf_,
         cst_at_intervals_got_too_small,
         interval,
         Time_ns[1][10]);
      var
       main=create_node(t,1),
       base=now$2(clock),
       at_intervals=[0,main,base,interval,null$0,clock];
      set_kind$0(main,[2,at_intervals]);
      set_cutoff$0(main,never);
      var _pu_=create$10([1,at_intervals]);
      at_intervals[4]
      =
      add_alarm(clock,next_interval_alarm_strict(clock,base,interval),_pu_);
      return main}
    function snapshot(clock,value_at,at,before)
     {var t=caml_call1(Clock$0[9],clock),_pr_=now$2(clock);
      if(caml_call2(Time_ns[16],at,_pr_))
       {var _ps_=now$2(clock);
        return caml_call2(Time_ns[19],at,_ps_)
                ?caml_call5
                  (Core_Or_error[39],
                   0,
                   0,
                   cst_cannot_take_snapshot_in_th,
                   at,
                   Time_ns[119])
                :[0,freeze(value_at,caml_call1(Core_Fn[1],1))]}
      var
       main=create_node_top(t,1),
       snapshot=[0,main,at,before,value_at,clock];
      set_kind$0(main,[13,snapshot]);
      add_alarm(clock,at,create$10([2,snapshot]));
      return [0,main]}
    function incremental_step_function(clock,child)
     {var
       t=caml_call1(Clock$0[9],clock),
       main=create_node(t,1),
       _pp_=Core_Sequence[46],
       _pq_=Uopt[3],
       step_function_node=
        [0,main,caml_call1(Uopt[4],child),none,_pq_,_pp_,null$0,0,clock];
      step_function_node[7] = create$10([3,step_function_node]);
      set_kind$0(main,[14,step_function_node]);
      return main}
    function make_stale$0(node)
     {var t=node[2];
      node[3] = none;
      var
       _pn_=needs_to_be_computed(node),
       _po_=_pn_?1 - is_in_recompute_heap(node):_pn_;
      return _po_?add$0(t[5],node):_po_}
    function advance_clock(clock,to)
     {var t=caml_call1(Clock$0[9],clock);
      ensure_not_stabilizing(t,cst_advance_clock,1);
      var _pj_=now$2(clock),_pk_=caml_call2(Time_ns[18],to,_pj_);
      if(_pk_)
       {set_var_while_not_stabilizing(clock[2],to);
        caml_call3(Timing_wheel[20],clock[1],to,clock[3]);
        caml_call2(Timing_wheel[21],clock[1],clock[3]);
        for(;;)
         {if(caml_call1(Uopt[6],clock[4]))
           {var alarm_value=caml_call1(Uopt[11],clock[4]);
            clock[4] = alarm_value[2];
            alarm_value[2] = Uopt[3];
            var _pl_=alarm_value[1];
            switch(_pl_[0])
             {case 0:
               var match=_pl_[1],main=match[1];
               if(caml_call1(is_valid$2,main))
                {set_kind$0(main,_ng_);make_stale$0(main)}
               break;
              case 1:
               var
                at_intervals=_pl_[1],
                interval=at_intervals[3],
                base=at_intervals[2],
                main$0=at_intervals[1];
               if(caml_call1(is_valid$2,main$0))
                {at_intervals[4]
                 =
                 add_alarm
                  (clock,
                   next_interval_alarm_strict(clock,base,interval),
                   alarm_value);
                 make_stale$0(main$0)}
               break;
              case 2:
               var match$0=_pl_[1],value_at=match$0[4],main$1=match$0[1];
               set_freeze(main$1,value_at,function(param){return 1});
               make_stale$0(main$1);
               break;
              default:
               var match$1=_pl_[1],main$2=match$1[1];
               if(caml_call1(is_valid$2,main$2))make_stale$0(main$2)}
            continue}
          var _pm_=debug;
          break}}
      else
       var _pm_=_pk_;
      return _pm_}
    function create_clock(t,timing_wheel_config,start)
     {var
       timing_wheel=caml_call2(Timing_wheel[9],timing_wheel_config,start),
       clock=[],
       handle_fired=function _pi_(_ph_){return _pi_.fun(_ph_)},
       _pg_=Uopt[3];
      caml_update_dummy
       (clock,[0,timing_wheel,create$15(t,0,start),handle_fired,_pg_]);
      caml_update_dummy
       (handle_fired,
        function(alarm)
         {var alarm_value=caml_call2(Timing_wheel[5][5],clock[1],alarm);
          alarm_value[2] = clock[4];
          clock[4] = caml_call1(Uopt[4],alarm_value);
          return 0});
      return clock}
    function create_internal(Config)
     {return function(max_height_allowed)
       {var
         adjust_heights_heap=create$9(max_height_allowed),
         recompute_heap=create$7(max_height_allowed),
         _o8_=caml_call1(Thread_safe_queue[3],0),
         _o9_=caml_call1(Only_in_debug$0[8],0),
         _o__=caml_call1(Core_Stack[23],0),
         _o$_=caml_call1(Core_Stack[23],0),
         _pa_=caml_call1(Core_Stack[23],0),
         _pb_=caml_call1(Core_Stack[23],0),
         _pc_=caml_call1(Core_Stack[23],0),
         _pd_=caml_call1(Thread_safe_queue[3],0),
         _pe_=Uopt[3],
         _pf_=caml_call1(Core_Stack[23],0),
         t=
          [0,
           2,
           Config[1],
           _B_,
           top,
           recompute_heap,
           adjust_heights_heap,
           _pf_,
           0,
           _pe_,
           _pd_,
           _pc_,
           _pb_,
           _pa_,
           _o$_,
           _o__,
           _o9_,
           _o8_,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0];
        return t}}
    function weak_memoize_fun_by_key(opt,t,hashable,project_key,f)
     {if(opt)
       var sth=opt[1],initial_size=sth;
      else
       var initial_size=default_hash_table_initial_siz;
      var
       scope=t[4],
       table=caml_call3(Weak_hashtbl[2],0,[0,initial_size],hashable),
       packed=[0,table];
      function _o6_(param)
       {return caml_call2(Thread_safe_queue[5],t[17],packed)}
      caml_call2(Weak_hashtbl[12],table,_o6_);
      function _o7_(a)
       {var
         key=caml_call1(project_key,a),
         match=caml_call2(Weak_hashtbl[5],table,key);
        if(match){var b=match[1];return b}
        var b$0=within_scope(t,scope,function(param){return caml_call1(f,a)});
        caml_call3(Weak_hashtbl[8],table,key,b$0);
        return b$0}
      return caml_call1(Core[258],_o7_)}
    function expert_kind_of_node(node)
     {var _o2_=node[5];
      if(typeof _o2_ === "number")
       {if(0 === _o2_)return Uopt[3]}
      else
       if(6 === _o2_[0]){var e=_o2_[1];return caml_call1(Uopt[4],e)}
      var
       _o3_=0,
       _o4_=[0,sexp_of_t$29(function(param){return _nh_},_o2_),_o3_],
       _o5_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_unexpected_kind_for_expert),
          _o4_]];
      return caml_call1(Core[253],_o5_)}
    function create$16(state,on_observability_change,f)
     {var e=create$5(f,on_observability_change),node=create_node(state,[6,e]);
      return node}
    function currently_running_node_exn(state,name)
     {var _oY_=state[16][1];
      if(_oY_){var current=_oY_[1];return current}
      var
       _oZ_=caml_call2(Core[18],name,cst_during_stabilization),
       _o0_=caml_call2(Core[18],cst_can_only_call,_oZ_),
       _o1_=caml_call1(Core[471],_o0_);
      return caml_call1(Core[253],_o1_)}
    function assert_currently_running_node_(state,node,name)
     {var
       current=currently_running_node_exn(state,name),
       _oN_=1 - has_child(node,current);
      if(! _oN_)return _oN_;
      var
       _oO_=0,
       _oP_=0,
       _oQ_=current[5],
       _oR_=
        [0,
         [1,[0,_nj_,[0,sexp_of_t$29(function(param){return _ni_},_oQ_),_oP_]]],
         _oO_],
       _oS_=0,
       _oT_=node[5],
       _oU_=
        [0,
         [1,[0,_nl_,[0,sexp_of_t$29(function(param){return _nk_},_oT_),_oS_]]],
         _oR_],
       _oV_=caml_call2(Core[18],name,cst_on_parent_nodes),
       _oW_=caml_call2(Core[18],cst_can_only_call$0,_oV_),
       _oX_=[1,[0,caml_call1(Core[471],_oW_),_oU_]];
      return caml_call1(Core[253],_oX_)}
    function assert_currently_running_node_$0(state,node,name)
     {var
       current=currently_running_node_exn(state,name),
       _oC_=1 - has_parent(node,current);
      if(! _oC_)return _oC_;
      var
       _oD_=0,
       _oE_=0,
       _oF_=current[5],
       _oG_=
        [0,
         [1,[0,_nn_,[0,sexp_of_t$29(function(param){return _nm_},_oF_),_oE_]]],
         _oD_],
       _oH_=0,
       _oI_=node[5],
       _oJ_=
        [0,
         [1,[0,_np_,[0,sexp_of_t$29(function(param){return _no_},_oI_),_oH_]]],
         _oG_],
       _oK_=caml_call2(Core[18],name,cst_on_children_nodes),
       _oL_=caml_call2(Core[18],cst_can_only_call$1,_oK_),
       _oM_=[1,[0,caml_call1(Core[471],_oL_),_oJ_]];
      return caml_call1(Core[253],_oM_)}
    function make_stale$1(node)
     {var
       state=node[2],
       e_opt=expert_kind_of_node(node),
       _oy_=caml_call1(Uopt[6],e_opt);
      if(_oy_)
       {var e=caml_call1(Uopt[11],e_opt),match=make_stale(e);
        if(534011858 <= match)return 0;
        var
         _oz_=caml_call1(is_necessary$1,node),
         _oA_=_oz_?1 - is_in_recompute_heap(node):_oz_;
        if(_oA_)return add$0(state[5],node);
        var _oB_=_oA_}
      else
       var _oB_=_oy_;
      return _oB_}
    function invalidate(node)
     {var state=node[2];
      invalidate_node(node);
      return propagate_invalidity$1(state)}
    function add_dependency(node,dep)
     {var
       state=node[2],
       e_opt=expert_kind_of_node(node),
       _ot_=caml_call1(Uopt[6],e_opt);
      if(_ot_)
       {var
         e=caml_call1(Uopt[11],e_opt),
         new_child_index=add_child_edge(e,dep),
         _ou_=caml_call1(is_necessary$1,node);
        if(_ou_)
         {add_parent$0(dep[1],node,new_child_index);
          var _ov_=1 - is_in_recompute_heap(node);
          if(_ov_)return add$0(state[5],node);
          var _ow_=_ov_}
        else
         var _ow_=_ou_;
        var _ox_=_ow_}
      else
       var _ox_=_ot_;
      return _ox_}
    function remove_dependency(node,edge)
     {var
       state=node[2],
       e_opt=expert_kind_of_node(node),
       _oo_=caml_call1(Uopt[6],e_opt);
      if(_oo_)
       {var
         e=caml_call1(Uopt[11],e_opt),
         edge_index=caml_call1(Uopt[7],edge[3]),
         last_edge=last_child_edge_exn(e),
         last_edge_index=caml_call1(Uopt[7],last_edge[3]);
        if(caml_call2(symbol$4,edge_index,last_edge_index))
         {if(caml_call1(is_necessary$1,node))
           swap_children_except_in_kind
            (node,edge[1],edge_index,last_edge[1],last_edge_index);
          swap_children(e,edge_index,last_edge_index)}
        remove_last_child_edge_exn(e);
        var _op_=caml_call1(is_necessary$1,node);
        if(_op_)
         {remove_child(edge[1],node,last_edge_index);
          if(1 - is_in_recompute_heap(node))add$0(state[5],node);
          var _oq_=1 - caml_call1(is_valid$2,edge[1]);
          if(_oq_)return decr_invalid_children(e);
          var _or_=_oq_}
        else
         var _or_=_op_;
        var _os_=_or_}
      else
       var _os_=_oo_;
      return _os_}
    var
     Expert$0=
      [0,
       expert_kind_of_node,
       create$16,
       currently_running_node_exn,
       assert_currently_running_node_,
       assert_currently_running_node_$0,
       make_stale$1,
       invalidate,
       add_dependency,
       remove_dependency];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$100);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_State$0);
    var
     include$8=
      [0,
       sexp_of_status,
       Run_on_update_handlers$0,
       Only_in_debug$0,
       Packed_weak_hashtbl$0,
       num_var_sets,
       set_num_var_sets,
       num_nodes_recomputed_directly_,
       set_num_nodes_recomputed_direc,
       num_nodes_recomputed_directly_$0,
       set_num_nodes_recomputed_direc$0,
       num_nodes_recomputed,
       set_num_nodes_recomputed,
       num_nodes_invalidated,
       set_num_nodes_invalidated,
       num_nodes_created,
       set_num_nodes_created,
       num_nodes_changed,
       set_num_nodes_changed,
       num_nodes_became_unnecessary,
       set_num_nodes_became_unnecessa,
       num_nodes_became_necessary,
       set_num_nodes_became_necessary,
       keep_node_creation_backtrace,
       set_keep_node_creation_backtra,
       weak_hashtbls,
       only_in_debug,
       set_only_in_debug,
       run_on_update_handlers$0,
       set_during_stabilization,
       disallowed_observers,
       new_observers,
       finalized_observers,
       all_observers,
       set_all_observers,
       num_active_observers,
       set_num_active_observers,
       adjust_heights_heap,
       recompute_heap,
       current_scope,
       set_current_scope,
       stabilization_num,
       set_stabilization_num,
       bind_lhs_change_should_invalid,
       status,
       set_status,
       Fields$0,
       sexp_of_t$42,
       Clock$0,
       now$2,
       timing_wheel_length,
       num_stabilizes,
       max_height_allowed$1,
       max_height_seen$1,
       iter_observers,
       directly_observed,
       save_dot$0,
       save_dot_to_file$0,
       iter_observer_descendants,
       Stats,
       stats,
       am_stabilizing,
       invariant$31,
       ensure_not_stabilizing,
       set_height$1,
       set_max_height_allowed$1,
       handle_after_stabilization$1,
       remove_children,
       remove_child,
       check_if_unnecessary,
       became_unnecessary,
       remove_alarm,
       invalidate_node,
       invalidate_nodes_created_on_rh,
       rescope_nodes_created_on_rhs,
       propagate_invalidity$1,
       add_parent_without_adjusting_h,
       became_necessary,
       add_parent$0,
       run_with_scope,
       within_scope,
       change_child,
       add_alarm,
       recompute,
       copy_child,
       maybe_change_value,
       recompute_first_node_that_is_n,
       unlink_disallowed_observers,
       disallow_future_use,
       disallow_finalized_observers,
       observer_finalizer,
       observe,
       add_new_observers,
       observer_value_exn,
       observer_value,
       on_update$0,
       observer_on_update_exn,
       set_var_while_not_stabilizing,
       set,
       reclaim_space_in_weak_hashtbls,
       stabilize_start,
       stabilize_end,
       raise_during_stabilization,
       stabilize,
       Step_result,
       do_one_step_of_stabilize,
       create_node_in,
       create_node,
       create_node_top,
       create$15,
       const$0,
       map$7,
       map2,
       both,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       preserve_cutoff,
       depend_on,
       necessary_if_alive,
       bind,
       bind2,
       bind3,
       bind4,
       join,
       if$0,
       lazy_from_fun,
       default_hash_table_initial_siz,
       memoize_fun_by_key,
       array_fold,
       all,
       unordered_array_fold,
       opt_unordered_array_fold,
       at_least_k_of,
       exists$7,
       for_all$7,
       sum$0,
       opt_sum,
       sum_int,
       sum_float,
       set_freeze,
       freeze,
       at,
       after,
       next_interval_alarm_strict,
       at_intervals,
       snapshot,
       incremental_step_function,
       make_stale$0,
       advance_clock,
       create_clock,
       create_internal,
       weak_memoize_fun_by_key,
       Expert$0];
    caml_register_global(1366,include$8,"Incremental__State");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Expert1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$101);
    caml_call1(Expect_test_collector[5][1],cst_src_expert1_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$102,cst$42);
    function create$17(opt,child)
     {if(opt)
       var sth=opt[1],on_change=sth;
      else
       var on_change=function(_on_){return 0};
      return [0,child,on_change,Uopt[3]]}
    function value$3(t){return value_exn(t[1])}
    var Dependency=[0,sexp_of_t$22,create$17,value$3];
    function create$18(state,opt,f)
     {if(opt)
       var sth=opt[1],on_observability_change=sth;
      else
       var on_observability_change=function(param){return 0};
      return caml_call3(Expert$0[2],state,on_observability_change,f)}
    var make_stale$2=Expert$0[6];
    function watch$1(_om_){return _om_}
    var
     invalidate$0=Expert$0[7],
     add_dependency$0=Expert$0[8],
     remove_dependency$0=Expert$0[9];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$103);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Expert1$0);
    var
     Node$0=
      [0,
       sexp_of_t$30,
       create$18,
       watch$1,
       make_stale$2,
       invalidate$0,
       add_dependency$0,
       remove_dependency$0],
     include$9=[0,Dependency,Node$0];
    caml_register_global(1367,include$9,"Incremental__Expert1");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Reduce_balance);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$104);
    caml_call1(Expect_test_collector[5][1],cst_src_reduce_balanced_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$105,cst$43);
    function create$19(state,children,f,reduce)
     {var len=children.length - 1;
      if(caml_call2(symbol$1,len,0))return 0;
      var reducer=caml_call4(Balanced_reducer[3],0,0,len,reduce);
      function _oe_(param)
       {var a=caml_call1(Balanced_reducer[6],reducer);return a}
      var node=caml_call3(Node$0[2],state,0,_oe_),_og_=len - 1 | 0,_of_=0;
      if(_og_ >= 0)
       {var i=_of_;
        for(;;)
         {var
           _oh_=caml_check_bound(children,i)[1 + i],
           _oi_=
            [0,
             function(i)
               {return function(a)
                 {var _ol_=caml_call1(f,a);
                  caml_call3(Balanced_reducer[4],reducer,i,_ol_);
                  return debug}}
              (i)],
           _oj_=caml_call2(Dependency[2],_oi_,_oh_);
          caml_call2(Node$0[6],node,_oj_);
          var _ok_=i + 1 | 0;
          if(_og_ !== i){var i=_ok_;continue}
          break}}
      return [0,caml_call1(Node$0[3],node)]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$106);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Reduce_balance$0);
    var Incremental_Reduce_balanced=[0,create$19];
    caml_register_global
     (1369,Incremental_Reduce_balanced,"Incremental__Reduce_balanced");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental_Incremental_in);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$107);
    caml_call1(Expect_test_collector[5][1],cst_src_incremental_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$108,cst$44);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$109);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental_Incremental_in$0);
    var Incremental_Incremental_intf=[0];
    caml_register_global
     (1370,Incremental_Incremental_intf,"Incremental__Incremental_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Incremental);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_incremental$110);
    caml_call1(Expect_test_collector[5][1],cst_src_incremental_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_incremental$111,cst$45);
    var default_max_height_allowed=128;
    function create$20(opt,param)
     {if(opt)
       var sth=opt[1],max_height_allowed=sth;
      else
       var max_height_allowed=default_max_height_allowed;
      function sexp_of_state_witness(param){throw [0,Assert_failure,_nq_]}
      var
       t=
        caml_call1
         (create_internal(caml_call1(Incremental_Config[1],[0])),
          max_height_allowed);
      return [0,sexp_of_state_witness,t]}
    function current(state,param){return state[4]}
    function within(state,t,f){return within_scope(state,t,f)}
    function state(t){return t[2]}
    function pack(t){return t}
    function return$0(state,a){return const$0(state,a)}
    var
     N_ary_map_and_bind=
      [0,
       map2,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       bind2,
       bind3,
       bind4],
     map2$0=N_ary_map_and_bind[1],
     map3$0=N_ary_map_and_bind[2],
     map4$0=N_ary_map_and_bind[3],
     map5$0=N_ary_map_and_bind[4],
     map6$0=N_ary_map_and_bind[5],
     map7$0=N_ary_map_and_bind[6],
     map8$0=N_ary_map_and_bind[7],
     map9$0=N_ary_map_and_bind[8],
     map10$0=N_ary_map_and_bind[9],
     map11$0=N_ary_map_and_bind[10],
     map12$0=N_ary_map_and_bind[11],
     map13$0=N_ary_map_and_bind[12],
     map14$0=N_ary_map_and_bind[13],
     map15$0=N_ary_map_and_bind[14],
     bind2$0=N_ary_map_and_bind[15],
     bind3$0=N_ary_map_and_bind[16],
     bind4$0=N_ary_map_and_bind[17];
    function symbol_map(t,f){return map$7(t,f)}
    function symbol_bind(t,f){return bind(t,f)}
    var
     Infix=[0,symbol_map,symbol_bind],
     symbol_map$0=Infix[1],
     symbol_bind$0=Infix[2];
    function lazy_from_fun$0(state,f){return lazy_from_fun(state,f)}
    function memoize_fun(initial_size,state,hashable,f)
     {return memoize_fun_by_key
              (initial_size,state,hashable,function(_od_){return _od_},f)}
    function array_fold$0(state,ts,init,f){return array_fold(state,ts,init,f)}
    function reduce_balanced(state,ts,f,reduce)
     {return create$19(state,ts,f,reduce)}
    function value$4(t){return t[1]}
    function watch$2(t){return t[4]}
    function sexp_of_t$46(sexp_of_a,t){return caml_call1(sexp_of_a,t[1])}
    function replace(t,f){return set(t,caml_call1(f,latest_value(t)))}
    function compare$5(cmp_a,a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(typeof a_001 === "number")
       {if(typeof b_002 === "number")return 0;if(1 === b_002[0])return 1}
      else
       {if(0 === a_001[0])
         {var _oa_=a_001[1];
          if(typeof b_002 !== "number" && 0 === b_002[0])
           {var b_004=b_002[1];return caml_call2(cmp_a,_oa_,b_004)}
          return -1}
        var _ob_=a_001[2],_oc_=a_001[1];
        if(typeof b_002 === "number")return -1;
        if(0 !== b_002[0])
         {var b_008=b_002[2],b_006=b_002[1],n=caml_call2(cmp_a,_oc_,b_006);
          return 0 === n?caml_call2(cmp_a,_ob_,b_008):n}}
      return 1}
    function sexp_of_t$47(of_a_009,param)
     {if(typeof param === "number")return _nr_;
      if(0 === param[0])
       {var arg0_010=param[1],res0_011=caml_call1(of_a_009,arg0_010);
        return [1,[0,_ns_,[0,res0_011,0]]]}
      var
       arg1_013=param[2],
       arg0_012=param[1],
       res0_014=caml_call1(of_a_009,arg0_012),
       res1_015=caml_call1(of_a_009,arg1_013);
      return [1,[0,_nt_,[0,res0_014,[0,res1_015,0]]]]}
    var Update=[0,compare$5,sexp_of_t$47];
    function on_update_exn$1(t,f)
     {return observer_on_update_exn
              (t,
               function(param)
                {if(typeof param === "number")
                  {if(0 === param)return caml_call1(f,0);
                   var
                    _n$_=
                     function(x_017)
                      {return sexp_of_t$38(function(param){return _nu_},x_017)};
                   return caml_call5
                           (Core[236],0,_nv_,cst_Incremental_bug_Observer_o,t,_n$_)}
                 if(0 === param[0]){var a=param[1];return caml_call1(f,[0,a])}
                 var a2=param[2],a1=param[1];
                 return caml_call1(f,[1,a1,a2])})}
    function disallow_future_use$0(t){return disallow_future_use(t[1])}
    function sexp_of_t$48(sexp_of_a,t)
     {var _n__=t[1][1];
      if(1 !== _n__)
       return _n__
               ?caml_call1(Sexplib0_Sexp_conv[7],cst_disallowed)
               :caml_call1(Sexplib0_Sexp_conv[7],cst_unstabilized);
      var uopt=t[1][2][4];
      return caml_call1(Uopt[5],uopt)
              ?caml_call1(Sexplib0_Sexp_conv[7],cst_invalid)
              :caml_call1(sexp_of_a,caml_call1(Uopt[11],uopt))}
    var
     Observer$0=
      [0,
       invariant$27,
       observing$1,
       use_is_allowed$0,
       incr_state$1,
       Update,
       on_update_exn$1,
       disallow_future_use$0,
       observer_value,
       observer_value_exn,
       sexp_of_t$48],
     fired_alarm_values$1=Clock$0[1],
     set_fired_alarm_values$0=Clock$0[2],
     handle_fired$1=Clock$0[3],
     timing_wheel$1=Clock$0[5],
     Fields$2=Clock$0[6],
     sexp_of_t$49=Clock$0[7],
     invariant$32=Clock$0[8],
     state$0=Clock$0[9],
     alarm_precision=Timing_wheel[1][10],
     _nx_=[0,caml_call2(Timing_wheel[7][5],_nw_,level_bits)],
     default_timing_wheel_config=
      caml_call4(Timing_wheel[8][4],0,_nx_,alarm_precision,0);
    function create$21(state,opt,start,param)
     {if(opt)
       var sth=opt[1],timing_wheel_config=sth;
      else
       var timing_wheel_config=default_timing_wheel_config;
      var
       _n9_=caml_call1(Time_ns[86],start),
       start$0=caml_call1(Time_ns[88],_n9_);
      return create_clock(state,timing_wheel_config,start$0)}
    function alarm_precision$0(t){return caml_call1(Timing_wheel[10],t[1])}
    function watch_now(t){return t[2][4]}
    function advance_clock_by(t,span)
     {var _n8_=now$2(t);
      return advance_clock(t,caml_call2(Time_ns[66],_n8_,span))}
    function step_function(t,init,steps)
     {var _n7_=caml_call2(Incremental_step_function[7],init,steps);
      return incremental_step_function(t,return$0(caml_call1(state$0,t),_n7_))}
    function freeze$0(opt,t)
     {if(opt)var sth=opt[1],when=sth;else var when=function(param){return 1};
      return freeze(t,when)}
    function depend_on$0(t,depend_on$0){return depend_on(t,depend_on$0)}
    function stabilize$0(state){return stabilize(state)}
    function am_stabilizing$0(state){return am_stabilizing(state)}
    function sexp_of_t$50(of_a_018,param)
     {if(typeof param === "number")return _ny_;
      if(0 === param[0])
       {var
         arg0_019=param[1],
         res0_020=caml_call2(Core[454],of_a_018,arg0_019);
        return [1,[0,_nz_,[0,res0_020,0]]]}
      var arg0_021=param[1],res0_022=caml_call2(Core[454],of_a_018,arg0_021);
      return [1,[0,_nA_,[0,res0_022,0]]]}
    var Node_value=[0,sexp_of_t$50];
    function node_value(t)
     {return caml_call1(is_valid$2,t)
              ?caml_call1(is_necessary$1,t)
                ?[0,caml_call1(Uopt[8],t[4])]
                :[1,caml_call1(Uopt[8],t[4])]
              :0}
    function sexp_of_t$51(sexp_of_a,t)
     {return caml_call1(is_valid$2,t)
              ?caml_call1(is_necessary$1,t)
                ?caml_call1(Uopt[5],t[4])
                  ?caml_call1(Core[471],cst_uncomputed)
                  :caml_call1(sexp_of_a,unsafe_value(t))
                :caml_call1(Core[471],cst_unnecessary)
              :caml_call1(Core[471],cst_invalid$0)}
    function both$0(t1,t2)
     {return caml_call3(map2$0,t1,t2,function(x1,x2){return [0,x1,x2]})}
    var
     map2$1=N_ary_map_and_bind[1],
     map3$1=N_ary_map_and_bind[2],
     map4$1=N_ary_map_and_bind[3],
     map5$1=N_ary_map_and_bind[4],
     map6$1=N_ary_map_and_bind[5],
     map7$1=N_ary_map_and_bind[6],
     map8$1=N_ary_map_and_bind[7],
     map9$1=N_ary_map_and_bind[8],
     map10$1=N_ary_map_and_bind[9],
     map11$1=N_ary_map_and_bind[10],
     map12$1=N_ary_map_and_bind[11],
     map13$1=N_ary_map_and_bind[12],
     map14$1=N_ary_map_and_bind[13],
     map15$1=N_ary_map_and_bind[14],
     bind2$1=N_ary_map_and_bind[15],
     bind3$1=N_ary_map_and_bind[16],
     bind4$1=N_ary_map_and_bind[17],
     Open_on_rhs=[0,watch$2];
    function weak_memoize_fun(initial_size,state,hashable,f)
     {return weak_memoize_fun_by_key
              (initial_size,state,hashable,function(_n6_){return _n6_},f)}
    function Make_with_config(Incremental_config,symbol)
     {function sexp_of_state_witness(param){throw [0,Assert_failure,_nB_]}
      var
       t=caml_call1(create_internal(Incremental_config),128),
       State=
        [0,
         sexp_of_status,
         Run_on_update_handlers$0,
         Only_in_debug$0,
         Packed_weak_hashtbl$0,
         num_var_sets,
         set_num_var_sets,
         num_nodes_recomputed_directly_,
         set_num_nodes_recomputed_direc,
         num_nodes_recomputed_directly_$0,
         set_num_nodes_recomputed_direc$0,
         num_nodes_recomputed,
         set_num_nodes_recomputed,
         num_nodes_invalidated,
         set_num_nodes_invalidated,
         num_nodes_created,
         set_num_nodes_created,
         num_nodes_changed,
         set_num_nodes_changed,
         num_nodes_became_unnecessary,
         set_num_nodes_became_unnecessa,
         num_nodes_became_necessary,
         set_num_nodes_became_necessary,
         keep_node_creation_backtrace,
         set_keep_node_creation_backtra,
         weak_hashtbls,
         only_in_debug,
         set_only_in_debug,
         run_on_update_handlers$0,
         set_during_stabilization,
         disallowed_observers,
         new_observers,
         finalized_observers,
         all_observers,
         set_all_observers,
         num_active_observers,
         set_num_active_observers,
         adjust_heights_heap,
         recompute_heap,
         current_scope,
         set_current_scope,
         stabilization_num,
         set_stabilization_num,
         bind_lhs_change_should_invalid,
         status,
         set_status,
         Fields$0,
         sexp_of_t$42,
         Clock$0,
         now$2,
         timing_wheel_length,
         num_stabilizes,
         max_height_allowed$1,
         max_height_seen$1,
         iter_observers,
         directly_observed,
         save_dot$0,
         save_dot_to_file$0,
         iter_observer_descendants,
         Stats,
         stats,
         am_stabilizing,
         invariant$31,
         ensure_not_stabilizing,
         set_height$1,
         set_max_height_allowed$1,
         handle_after_stabilization$1,
         remove_children,
         remove_child,
         check_if_unnecessary,
         became_unnecessary,
         remove_alarm,
         invalidate_node,
         invalidate_nodes_created_on_rh,
         rescope_nodes_created_on_rhs,
         propagate_invalidity$1,
         add_parent_without_adjusting_h,
         became_necessary,
         add_parent$0,
         run_with_scope,
         within_scope,
         change_child,
         add_alarm,
         recompute,
         copy_child,
         maybe_change_value,
         recompute_first_node_that_is_n,
         unlink_disallowed_observers,
         disallow_future_use,
         disallow_finalized_observers,
         observer_finalizer,
         observe,
         add_new_observers,
         observer_value_exn,
         observer_value,
         on_update$0,
         observer_on_update_exn,
         set_var_while_not_stabilizing,
         set,
         reclaim_space_in_weak_hashtbls,
         stabilize_start,
         stabilize_end,
         raise_during_stabilization,
         stabilize,
         Step_result,
         do_one_step_of_stabilize,
         create_node_in,
         create_node,
         create_node_top,
         create$15,
         const$0,
         map$7,
         map2,
         both,
         map3,
         map4,
         map5,
         map6,
         map7,
         map8,
         map9,
         map10,
         map11,
         map12,
         map13,
         map14,
         map15,
         preserve_cutoff,
         depend_on,
         necessary_if_alive,
         bind,
         bind2,
         bind3,
         bind4,
         join,
         if$0,
         lazy_from_fun,
         default_hash_table_initial_siz,
         memoize_fun_by_key,
         array_fold,
         all,
         unordered_array_fold,
         opt_unordered_array_fold,
         at_least_k_of,
         exists$7,
         for_all$7,
         sum$0,
         opt_sum,
         sum_int,
         sum_float,
         set_freeze,
         freeze,
         at,
         after,
         next_interval_alarm_strict,
         at_intervals,
         snapshot,
         incremental_step_function,
         make_stale$0,
         advance_clock,
         create_clock,
         weak_memoize_fun_by_key,
         Expert$0,
         create_internal,
         create$20,
         t];
      function create(timing_wheel_config,start,param)
       {return create$21(State[165],timing_wheel_config,start,0)}
      var
       Clock=
        [0,
         fired_alarm_values$1,
         set_fired_alarm_values$0,
         handle_fired$1,
         timing_wheel$1,
         Fields$2,
         sexp_of_t$49,
         invariant$32,
         state$0,
         state$0,
         default_timing_wheel_config,
         alarm_precision$0,
         timing_wheel_length,
         now$2,
         watch_now,
         at,
         after,
         at_intervals,
         advance_clock,
         advance_clock_by,
         incremental_step_function,
         step_function,
         snapshot,
         create],
       sexp_of_t=Node$0[1],
       watch=Node$0[3],
       make_stale=Node$0[4],
       invalidate=Node$0[5],
       add_dependency=Node$0[6],
       remove_dependency=Node$0[7],
       _n5_=Node$0[2];
      function create$0(on_observability_change,f)
       {return caml_call3(_n5_,State[165],on_observability_change,f)}
      var
       Node=
        [0,
         sexp_of_t,
         watch,
         make_stale,
         invalidate,
         add_dependency,
         remove_dependency,
         create$0];
      function do_one_step_of_stabilize$0(param)
       {return caml_call1(State[105],State[165])}
      var Expert=[0,Dependency,Node,do_one_step_of_stabilize$0];
      function return$1(a){return return$0(State[165],a)}
      var
       Let_syntax=
        [0,
         bind,
         map$7,
         both$0,
         map2$1,
         map3$1,
         map4$1,
         map5$1,
         map6$1,
         map7$1,
         map8$1,
         map9$1,
         map10$1,
         map11$1,
         map12$1,
         map13$1,
         map14$1,
         map15$1,
         bind2$1,
         bind3$1,
         bind4$1,
         Open_on_rhs,
         return$1],
       Let_syntax$0=[0,symbol_map$0,symbol_bind$0,return$1,Let_syntax];
      function current(param){return State[165][4]}
      function within$0(t,f){return within(State[165],t,f)}
      var
       Scope=
        [0,
         sexp_of_t$24,
         invariant$13,
         top,
         is_top,
         height,
         is_valid$1,
         is_necessary$0,
         add_node,
         current,
         within$0];
      function create$1(use_current_scope,value)
       {return create$15(State[165],use_current_scope,value)}
      var
       Var=
        [0,
         invariant$4,
         Packed,
         latest_value,
         incr_state,
         set,
         value$4,
         watch$2,
         sexp_of_t$46,
         replace,
         create$1];
      function const$1(a){return return$0(State[165],a)}
      function return$2(a){return return$0(State[165],a)}
      function all$0(ts){return all(State[165],ts)}
      function exists(ts){return exists$7(State[165],ts)}
      function for_all(ts){return for_all$7(State[165],ts)}
      function memoize_fun_by_key$0(initial_size,hashable,project_key,f)
       {return memoize_fun_by_key
                (initial_size,State[165],hashable,project_key,f)}
      function memoize_fun$0(initial_size,hashable,f)
       {return memoize_fun(initial_size,State[165],hashable,f)}
      function array_fold$1(ts,init,f)
       {return array_fold$0(State[165],ts,init,f)}
      function reduce_balanced$0(ts,f,reduce)
       {return reduce_balanced(State[165],ts,f,reduce)}
      function unordered_array_fold$0
       (full_compute_every_n_changes,ts,init,f,update)
       {return unordered_array_fold
                (State[165],full_compute_every_n_changes,ts,init,f,update)}
      function opt_unordered_array_fold$0
       (full_compute_every_n_changes,ts,init,f,f_inverse)
       {return opt_unordered_array_fold
                (State[165],full_compute_every_n_changes,ts,init,f,f_inverse)}
      function sum(full_compute_every_n_changes,ts,zero,add,sub)
       {return sum$0(State[165],full_compute_every_n_changes,ts,zero,add,sub)}
      function opt_sum$0(full_compute_every_n_changes,ts,zero,add,sub)
       {return opt_sum
                (State[165],full_compute_every_n_changes,ts,zero,add,sub)}
      function sum_int$0(ts){return sum_int(State[165],ts)}
      function sum_float$0(ts){return sum_float(State[165],ts)}
      function stabilize$1(param){return stabilize$0(State[165])}
      function am_stabilizing$1(param){return am_stabilizing$0(State[165])}
      function save_dot(out){return save_dot$0(State[165],out)}
      function save_dot_to_file(file)
       {return caml_call6(Stdio_Out_channel[6],0,0,0,0,file,save_dot)}
      function lazy_from_fun$0(f){return caml_call2(State[136],State[165],f)}
      function weak_memoize_fun_by_key$0(initial_size,hashable,project_key,f)
       {return weak_memoize_fun_by_key
                (initial_size,State[165],hashable,project_key,f)}
      function weak_memoize_fun$0(initial_size,hashable,f)
       {return weak_memoize_fun(initial_size,State[165],hashable,f)}
      return [0,
              sexp_of_state_witness,
              Packed$0,
              type_equal_if_phys_same$0,
              invariant$19,
              create$6,
              set_kind$0,
              same$1,
              iteri_children$0,
              get_parent,
              add_parent,
              remove_parent,
              swap_children_except_in_kind,
              is_const,
              is_in_recompute_heap,
              is_necessary$1,
              is_valid$2,
              should_be_invalidated,
              edge_is_stale,
              is_stale,
              needs_to_be_computed,
              value_exn,
              unsafe_value,
              get_cutoff,
              set_cutoff$0,
              run_on_update_handlers,
              user_info,
              set_user_info,
              append_user_info_graphviz,
              has_child,
              has_parent,
              state,
              pack,
              observe,
              map$7,
              bind,
              N_ary_map_and_bind,
              map2$0,
              map3$0,
              map4$0,
              map5$0,
              map6$0,
              map7$0,
              map8$0,
              map9$0,
              map10$0,
              map11$0,
              map12$0,
              map13$0,
              map14$0,
              map15$0,
              bind2$0,
              bind3$0,
              bind4$0,
              Infix,
              symbol_map$0,
              symbol_bind$0,
              join,
              if$0,
              default_hash_table_initial_siz,
              _cf_,
              both,
              Observer$0,
              freeze$0,
              depend_on$0,
              necessary_if_alive,
              on_update$0,
              Node_value,
              node_value,
              sexp_of_t$51,
              State,
              Clock,
              Expert,
              Let_syntax$0,
              Scope,
              Var,
              const$1,
              return$2,
              all$0,
              exists,
              for_all,
              memoize_fun_by_key$0,
              memoize_fun$0,
              array_fold$1,
              reduce_balanced$0,
              unordered_array_fold$0,
              opt_unordered_array_fold$0,
              sum,
              opt_sum$0,
              sum_int$0,
              sum_float$0,
              stabilize$1,
              am_stabilizing$1,
              save_dot,
              save_dot_to_file,
              lazy_from_fun$0,
              weak_memoize_fun_by_key$0,
              weak_memoize_fun$0]}
    function Add_witness0(M)
     {function invariant(param,t){return caml_call1(M[2],t)}
      function sexp_of_t(param,t){return caml_call1(M[1],t)}
      return [0,sexp_of_t,invariant]}
    function Add_witness1(M)
     {function invariant(invariant_a,param,t)
       {return caml_call2(M[2],invariant_a,t)}
      function sexp_of_t(sexp_of_a,param,t)
       {return caml_call2(M[1],sexp_of_a,t)}
      return [0,sexp_of_t,invariant]}
    var
     include$10=Add_witness0([0,sexp_of_t$49,invariant$32]),
     sexp_of_t$52=include$10[1],
     create$22=Dependency[2],
     value$5=Dependency[3],
     sexp_of_t$53=Dependency[1];
    function invariant$33(param,_n4_){return 0}
    var
     include$11=Add_witness1([0,sexp_of_t$53,invariant$33]),
     sexp_of_t$54=include$11[1],
     create$23=Node$0[2],
     watch$3=Node$0[3],
     make_stale$3=Node$0[4],
     invalidate$1=Node$0[5],
     add_dependency$1=Node$0[6],
     remove_dependency$1=Node$0[7],
     sexp_of_t$55=Node$0[1];
    function invariant$34(param,_n3_){return 0}
    var
     include$12=Add_witness1([0,sexp_of_t$55,invariant$34]),
     sexp_of_t$56=include$12[1];
    function do_one_step_of_stabilize$0(state)
     {return do_one_step_of_stabilize(state)}
    var
     include$13=Add_witness1([0,sexp_of_t$30,invariant$19]),
     sexp_of_t$57=include$13[1],
     invariant$35=include$13[2],
     observing$2=Observer$0[2],
     use_is_allowed$1=Observer$0[3],
     Update$0=Observer$0[5],
     on_update_exn$2=Observer$0[6],
     disallow_future_use$1=Observer$0[7],
     value$6=Observer$0[8],
     value_exn$2=Observer$0[9],
     include$14=Add_witness1([0,Observer$0[10],Observer$0[1]]),
     sexp_of_t$58=include$14[1],
     invariant$36=include$14[2],
     include$15=Add_witness0([0,sexp_of_t$42,invariant$31]),
     sexp_of_t$59=include$15[1],
     include$16=Add_witness1([0,sexp_of_t$46,invariant$4]),
     sexp_of_t$60=include$16[1],
     Private=[0,debug];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_incremental$112);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Incremental$0);
    function _nC_(_nR_,_nQ_)
     {var
       _nS_=Make_with_config(_nR_,_nQ_),
       _nT_=_nS_[72],
       _nU_=_nT_[2],
       _nV_=_nS_[71],
       _nW_=_nS_[73],
       _nX_=_nW_[4],
       _nY_=_nS_[2],
       _nZ_=_nS_[62],
       _n0_=_nS_[75],
       _n1_=_nS_[74],
       _n2_=_nS_[70];
      return [0,
              _nS_[1],
              [0,
               _n2_[47],
               _n2_[62],
               _n2_[165],
               _n2_[23],
               _n2_[24],
               _n2_[52],
               _n2_[65],
               _n2_[35],
               _n2_[53],
               _n2_[21],
               _n2_[19],
               _n2_[17],
               _n2_[15],
               _n2_[13],
               _n2_[11],
               _n2_[9],
               _n2_[7],
               _n2_[51],
               _n2_[5],
               [0,_n2_[59][2]],
               _n2_[60]],
              _nS_[69],
              _nS_[4],
              _nS_[13],
              _nS_[16],
              _nS_[15],
              _nS_[76],
              _nS_[77],
              _nS_[34],
              _nS_[55],
              _nS_[37],
              _nS_[38],
              _nS_[39],
              _nS_[40],
              _nS_[41],
              _nS_[42],
              _nS_[43],
              _nS_[44],
              _nS_[45],
              _nS_[46],
              _nS_[47],
              _nS_[48],
              _nS_[49],
              _nS_[50],
              _nS_[35],
              _nS_[56],
              _nS_[51],
              _nS_[52],
              _nS_[53],
              _nS_[54],
              _nS_[57],
              _nS_[58],
              _nS_[63],
              _nS_[64],
              _nS_[65],
              _nS_[80],
              _nS_[79],
              _nS_[78],
              _nS_[61],
              _nS_[83],
              _nS_[84],
              [0],
              _nS_[85],
              _nS_[86],
              _nS_[87],
              _nS_[88],
              _nS_[89],
              _nS_[90],
              [0,_n1_[3],_n1_[9],_n1_[10]],
              [0,_n0_[8],_n0_[10],_n0_[5],_n0_[7],_n0_[6],_n0_[3],_n0_[9]],
              [0,
               _nZ_[10],
               _nZ_[1],
               _nZ_[2],
               _nZ_[3],
               _nZ_[8],
               _nZ_[9],
               _nZ_[5],
               _nZ_[6],
               _nZ_[7]],
              _nS_[33],
              Node_update,
              _nS_[66],
              _nS_[91],
              _nS_[92],
              [0,
               sexp_of_t$3,
               invariant$1,
               create$1,
               of_compare,
               of_equal,
               always,
               never,
               phys_equal,
               poly_equal,
               should_cutoff,
               equal$1],
              _nS_[24],
              _nS_[23],
              _nS_[95],
              _nS_[59],
              _nS_[82],
              _nS_[81],
              _nS_[97],
              _nS_[96],
              _nS_[26],
              _nS_[27],
              _nS_[28],
              _nS_[67],
              _nS_[68],
              [0,_nY_[5],_nY_[6],_nY_[7]],
              _nS_[32],
              _nS_[93],
              _nS_[94],
              [0,
               _nW_[3],
               _nW_[1],
               _nW_[2],
               [0,
                _nX_[1],
                _nX_[22],
                _nX_[18],
                _nX_[19],
                _nX_[20],
                _nX_[2],
                _nX_[4],
                _nX_[5],
                _nX_[6],
                _nX_[7],
                _nX_[8],
                _nX_[9],
                _nX_[10],
                _nX_[11],
                _nX_[12],
                _nX_[13],
                _nX_[14],
                _nX_[15],
                _nX_[16],
                _nX_[17],
                _nX_[3],
                _nX_[21]]],
              Incremental_Before_or_after,
              [0,
               _nV_[6],
               _nV_[10],
               _nV_[23],
               _nV_[11],
               _nV_[12],
               _nV_[13],
               _nV_[14],
               _nV_[18],
               _nV_[19],
               _nV_[15],
               _nV_[16],
               _nV_[17],
               _nV_[21],
               _nV_[20],
               _nV_[22]],
              [0,
               _nT_[1],
               [0,_nU_[1],_nU_[7],_nU_[2],_nU_[3],_nU_[4],_nU_[5],_nU_[6]],
               _nS_[70][104],
               _nT_[3]]]}
    function _nD_(_nE_)
     {var
       _nP_=Make_with_config(caml_call1(Incremental_Config[1],[0]),[0]),
       _nF_=_nP_[72],
       _nG_=_nF_[2],
       _nH_=_nP_[71],
       _nI_=_nP_[73],
       _nJ_=_nI_[4],
       _nK_=_nP_[2],
       _nL_=_nP_[62],
       _nM_=_nP_[75],
       _nN_=_nP_[74],
       _nO_=_nP_[70];
      return [0,
              _nP_[1],
              [0,
               _nO_[47],
               _nO_[62],
               _nO_[165],
               _nO_[23],
               _nO_[24],
               _nO_[52],
               _nO_[65],
               _nO_[35],
               _nO_[53],
               _nO_[21],
               _nO_[19],
               _nO_[17],
               _nO_[15],
               _nO_[13],
               _nO_[11],
               _nO_[9],
               _nO_[7],
               _nO_[51],
               _nO_[5],
               [0,_nO_[59][2]],
               _nO_[60]],
              _nP_[69],
              _nP_[4],
              _nP_[13],
              _nP_[16],
              _nP_[15],
              _nP_[76],
              _nP_[77],
              _nP_[34],
              _nP_[55],
              _nP_[37],
              _nP_[38],
              _nP_[39],
              _nP_[40],
              _nP_[41],
              _nP_[42],
              _nP_[43],
              _nP_[44],
              _nP_[45],
              _nP_[46],
              _nP_[47],
              _nP_[48],
              _nP_[49],
              _nP_[50],
              _nP_[35],
              _nP_[56],
              _nP_[51],
              _nP_[52],
              _nP_[53],
              _nP_[54],
              _nP_[57],
              _nP_[58],
              _nP_[63],
              _nP_[64],
              _nP_[65],
              _nP_[80],
              _nP_[79],
              _nP_[78],
              _nP_[61],
              _nP_[83],
              _nP_[84],
              [0],
              _nP_[85],
              _nP_[86],
              _nP_[87],
              _nP_[88],
              _nP_[89],
              _nP_[90],
              [0,_nN_[3],_nN_[9],_nN_[10]],
              [0,_nM_[8],_nM_[10],_nM_[5],_nM_[7],_nM_[6],_nM_[3],_nM_[9]],
              [0,
               _nL_[10],
               _nL_[1],
               _nL_[2],
               _nL_[3],
               _nL_[8],
               _nL_[9],
               _nL_[5],
               _nL_[6],
               _nL_[7]],
              _nP_[33],
              Node_update,
              _nP_[66],
              _nP_[91],
              _nP_[92],
              [0,
               sexp_of_t$3,
               invariant$1,
               create$1,
               of_compare,
               of_equal,
               always,
               never,
               phys_equal,
               poly_equal,
               should_cutoff,
               equal$1],
              _nP_[24],
              _nP_[23],
              _nP_[95],
              _nP_[59],
              _nP_[82],
              _nP_[81],
              _nP_[97],
              _nP_[96],
              _nP_[26],
              _nP_[27],
              _nP_[28],
              _nP_[67],
              _nP_[68],
              [0,_nK_[5],_nK_[6],_nK_[7]],
              _nP_[32],
              _nP_[93],
              _nP_[94],
              [0,
               _nI_[3],
               _nI_[1],
               _nI_[2],
               [0,
                _nJ_[1],
                _nJ_[22],
                _nJ_[18],
                _nJ_[19],
                _nJ_[20],
                _nJ_[2],
                _nJ_[4],
                _nJ_[5],
                _nJ_[6],
                _nJ_[7],
                _nJ_[8],
                _nJ_[9],
                _nJ_[10],
                _nJ_[11],
                _nJ_[12],
                _nJ_[13],
                _nJ_[14],
                _nJ_[15],
                _nJ_[16],
                _nJ_[17],
                _nJ_[3],
                _nJ_[21]]],
              Incremental_Before_or_after,
              [0,
               _nH_[6],
               _nH_[10],
               _nH_[23],
               _nH_[11],
               _nH_[12],
               _nH_[13],
               _nH_[14],
               _nH_[18],
               _nH_[19],
               _nH_[15],
               _nH_[16],
               _nH_[17],
               _nH_[21],
               _nH_[20],
               _nH_[22]],
              [0,
               _nF_[1],
               [0,_nG_[1],_nG_[7],_nG_[2],_nG_[3],_nG_[4],_nG_[5],_nG_[6]],
               _nP_[70][104],
               _nF_[3]]]}
    var
     Incremental$0=
      [0,
       [0,
        sexp_of_t$59,
        create$20,
        keep_node_creation_backtrace,
        set_keep_node_creation_backtra,
        max_height_allowed$1,
        set_max_height_allowed$1,
        num_active_observers,
        max_height_seen$1,
        num_nodes_became_necessary,
        num_nodes_became_unnecessary,
        num_nodes_changed,
        num_nodes_created,
        num_nodes_invalidated,
        num_nodes_recomputed,
        num_nodes_recomputed_directly_$0,
        num_nodes_recomputed_directly_,
        num_stabilizes,
        num_var_sets,
        [0,Stats[2]],
        stats],
       sexp_of_t$57,
       invariant$35,
       state,
       is_const,
       is_valid$2,
       is_necessary$1,
       return$0,
       return$0,
       map$7,
       symbol_map$0,
       map2$0,
       map3$0,
       map4$0,
       map5$0,
       map6$0,
       map7$0,
       map8$0,
       map9$0,
       map10$0,
       map11$0,
       map12$0,
       map13$0,
       map14$0,
       map15$0,
       bind,
       symbol_bind$0,
       bind2$0,
       bind3$0,
       bind4$0,
       Infix,
       join,
       if$0,
       freeze$0,
       depend_on$0,
       necessary_if_alive,
       for_all$7,
       exists$7,
       all,
       both,
       array_fold$0,
       reduce_balanced,
       [0],
       unordered_array_fold,
       opt_unordered_array_fold,
       sum$0,
       opt_sum,
       sum_int,
       sum_float,
       [0,top,current,within],
       [0,sexp_of_t$60,create$15,set,watch$2,value$4,latest_value,replace],
       [0,
        sexp_of_t$58,
        invariant$36,
        observing$2,
        use_is_allowed$1,
        value$6,
        value_exn$2,
        Update$0,
        on_update_exn$2,
        disallow_future_use$1],
       observe,
       Node_update,
       on_update$0,
       stabilize$0,
       am_stabilizing$0,
       [0,
        sexp_of_t$3,
        invariant$1,
        create$1,
        of_compare,
        of_equal,
        always,
        never,
        phys_equal,
        poly_equal,
        should_cutoff,
        equal$1],
       set_cutoff$0,
       get_cutoff,
       lazy_from_fun$0,
       default_hash_table_initial_siz,
       memoize_fun,
       memoize_fun_by_key,
       weak_memoize_fun,
       weak_memoize_fun_by_key,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       Node_value,
       node_value,
       [0,Packed$0[5],Packed$0[6]],
       pack,
       save_dot$0,
       save_dot_to_file$0,
       [0,
        symbol_map$0,
        symbol_bind$0,
        [0,
         bind,
         bind2$1,
         bind3$1,
         bind4$1,
         map$7,
         map2$1,
         map3$1,
         map4$1,
         map5$1,
         map6$1,
         map7$1,
         map8$1,
         map9$1,
         map10$1,
         map11$1,
         map12$1,
         map13$1,
         map14$1,
         map15$1,
         both$0,
         Open_on_rhs]],
       Incremental_Before_or_after,
       [0,
        sexp_of_t$52,
        default_timing_wheel_config,
        create$21,
        alarm_precision$0,
        state$0,
        timing_wheel_length,
        now$2,
        watch_now,
        advance_clock,
        advance_clock_by,
        at,
        after,
        at_intervals,
        step_function,
        incremental_step_function,
        snapshot],
       [0,
        [0,sexp_of_t$54,create$22,value$5],
        [0,
         sexp_of_t$56,
         create$23,
         watch$3,
         make_stale$3,
         invalidate$1,
         add_dependency$1,
         remove_dependency$1],
        Step_result,
        do_one_step_of_stabilize$0],
       _nD_,
       Incremental_Config,
       _nC_,
       Private];
    caml_register_global(1371,Incremental$0,"Incremental");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
