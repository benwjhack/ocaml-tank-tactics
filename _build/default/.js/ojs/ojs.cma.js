// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     joo_global_object=globalThis,
     runtime=globalThis.jsoo_runtime,
     caml_js_from_string=runtime.caml_js_from_string,
     caml_js_to_bool=runtime.caml_js_to_bool,
     caml_js_to_string=runtime.caml_js_to_string,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Object=caml_string_of_jsbytes("Object"),
     cst_object=caml_string_of_jsbytes("object"),
     cst=caml_string_of_jsbytes(""),
     cst_to_js=caml_string_of_jsbytes("to_js"),
     cst_length=caml_string_of_jsbytes("length"),
     cst_Array=caml_string_of_jsbytes("Array"),
     shared=[0,caml_string_of_jsbytes("to_js")],
     cst_stack=caml_string_of_jsbytes("stack"),
     cst_message=caml_string_of_jsbytes("message"),
     cst_name=caml_string_of_jsbytes("name"),
     CamlinternalOO=global_data.CamlinternalOO,
     Stdlib_Array=global_data.Stdlib__Array,
     Jsoo_runtime=global_data.Jsoo_runtime,
     Stdlib_Printexc=global_data.Stdlib__Printexc;
    function type_of(x){return caml_js_to_string(typeof x)}
    function instance_of(x,constr){return (x instanceof constr?1:0) | 0}
    var null$0=null,undefined$0=undefined,global=joo_global_object;
    function array_make(n){return new (global[cst_Array])(n)}
    function array_get(t,i){return t[i]}
    function array_set(t,i,x){return t[i] = x}
    function array_of_js_from(f,objs,start)
     {var n=objs[cst_length];
      function _I_(i){return caml_call1(f,objs[start + i | 0])}
      return caml_call2(Stdlib_Array[2],n - start | 0,_I_)}
    function array_of_js(f,objs){return array_of_js_from(f,objs,0)}
    function array_to_js(f,arr)
     {var n=arr.length - 1,a=array_make(n),_G_=n - 1 | 0,_F_=0;
      if(_G_ >= 0)
       {var i=_F_;
        for(;;)
         {a[i] = caml_call1(f,runtime.caml_check_bound(arr,i)[1 + i]);
          var _H_=i + 1 | 0;
          if(_G_ !== i){var i=_H_;continue}
          break}}
      return a}
    function list_of_js_from(f,objs,start)
     {var _E_=array_of_js_from(f,objs,start);
      return caml_call1(Stdlib_Array[11],_E_)}
    function list_of_js(f,objs){return list_of_js_from(f,objs,0)}
    function list_to_js(f,l)
     {return array_to_js(f,caml_call1(Stdlib_Array[12],l))}
    function option_of_js(f,x)
     {if(x != null$0 && x !== undefined$0)return [0,caml_call1(f,x)];return 0}
    function option_to_js(f,param)
     {if(! param)return null$0;var x=param[1];return caml_call1(f,x)}
    function unit_to_js(param){return undefined$0}
    function unit_of_js(param){return 0}
    function _a_(_w_)
     {var
       _x_=caml_call2(CamlinternalOO[3],_w_,cst),
       _y_=caml_call2(CamlinternalOO[7],_w_,cst_to_js);
      function _z_(self_1){return self_1[1 + _x_]}
      caml_call3(CamlinternalOO[10],_w_,_y_,_z_);
      return function(_C_,_B_,_A_)
       {var _D_=caml_call2(CamlinternalOO[24],_B_,_w_);
        _D_[1 + _x_] = _A_;
        return _D_}}
    var obj=caml_call2(CamlinternalOO[19],shared,_a_);
    function has_property(o,x)
     {var _t_=runtime.caml_string_equal(type_of(o),cst_object);
      if(_t_)
       var
        _u_=o !== null$0?1:0,
        _v_=_u_?o[caml_js_from_string(x)] !== undefined$0?1:0:_u_;
      else
       var _v_=_t_;
      return _v_}
    function empty_obj(param){return new (global[cst_Object])()}
    function apply_arr(o,arr){return o.apply(null$0,arr)}
    function call_arr(o,s,arr){return o[caml_js_from_string(s)].apply(o,arr)}
    function is_null(x){return x == null$0?1:0}
    function obj_type(x)
     {return caml_js_to_string(Object.prototype.toString.call(x))}
    function t_to_js(_s_){return _s_}
    function t_of_js(_r_){return _r_}
    var
     Int=[0,t_to_js,t_of_js],
     t_to_js$0=caml_js_from_string,
     t_of_js$0=caml_js_to_string,
     String=[0,t_to_js$0,t_of_js$0],
     t_to_js$1=runtime.caml_js_from_bool,
     t_of_js$1=caml_js_to_bool,
     Bool=[0,t_to_js$1,t_of_js$1];
    function t_to_js$2(_q_){return _q_}
    function t_of_js$2(_p_){return _p_}
    var Float=[0,t_to_js$2,t_of_js$2];
    function Array(A)
     {var _l_=A[1];
      function t_to_js(_o_){return array_to_js(_l_,_o_)}
      var _m_=A[2];
      function t_of_js(_n_){return array_of_js(_m_,_n_)}
      return [0,t_to_js,t_of_js]}
    function List(A)
     {var _h_=A[1];
      function t_to_js(_k_){return list_to_js(_h_,_k_)}
      var _i_=A[2];
      function t_of_js(_j_){return list_of_js(_i_,_j_)}
      return [0,t_to_js,t_of_js]}
    function Option(A)
     {var _d_=A[1];
      function t_to_js(_g_){return option_to_js(_d_,_g_)}
      var _e_=A[2];
      function t_of_js(_f_){return option_of_js(_e_,_f_)}
      return [0,t_to_js,t_of_js]}
    var
     Ojs=
      [0,
       array_of_js,
       array_to_js,
       list_of_js,
       list_to_js,
       array_of_js_from,
       list_of_js_from,
       option_of_js,
       option_to_js,
       unit_of_js,
       unit_to_js,
       empty_obj,
       has_property,
       call_arr,
       apply_arr,
       array_make,
       array_get,
       array_set,
       global,
       null$0,
       type_of,
       instance_of,
       obj,
       is_null,
       obj_type,
       Int,
       String,
       Bool,
       Float,
       Array,
       List,
       Option];
    caml_register_global(20,Ojs,"Ojs");
    function name(x){return caml_js_to_string(x[cst_name])}
    function message(x){return caml_js_to_string(x[cst_message])}
    function stack(x){return option_of_js(caml_js_to_string,x[cst_stack])}
    function to_string(x){return caml_js_to_string(x.toString())}
    var _b_=Jsoo_runtime[3][4];
    function _c_(param)
     {if(param[1] !== _b_)return 0;var x=param[2];return [0,to_string(x)]}
    caml_call1(Stdlib_Printexc[9],_c_);
    var Ojs_exn=[0,name,message,stack,to_string,_b_];
    caml_register_global(23,Ojs_exn,"Ojs_exn");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJvanMuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInR5cGVfb2YiLCJ4IiwiaW5zdGFuY2Vfb2YiLCJjb25zdHIiLCJudWxsJDAiLCJudWxsIiwidW5kZWZpbmVkJDAiLCJ1bmRlZmluZWQiLCJnbG9iYWwiLCJqb29fZ2xvYmFsX29iamVjdCIsImFycmF5X21ha2UiLCJuIiwiYXJyYXlfZ2V0IiwidCIsImkiLCJhcnJheV9zZXQiLCJhcnJheV9vZl9qc19mcm9tIiwiZiIsIm9ianMiLCJzdGFydCIsImFycmF5X29mX2pzIiwiYXJyYXlfdG9fanMiLCJhcnIiLCJhIiwibGlzdF9vZl9qc19mcm9tIiwibGlzdF9vZl9qcyIsImxpc3RfdG9fanMiLCJsIiwib3B0aW9uX29mX2pzIiwib3B0aW9uX3RvX2pzIiwidW5pdF90b19qcyIsInVuaXRfb2ZfanMiLCJzZWxmXzEiLCJoYXNfcHJvcGVydHkiLCJvIiwiZW1wdHlfb2JqIiwiYXBwbHlfYXJyIiwiY2FsbF9hcnIiLCJzIiwiaXNfbnVsbCIsIm9ial90eXBlIiwiT2JqZWN0IiwidF90b19qcyIsInRfb2ZfanMiLCJ0X3RvX2pzJDAiLCJ0X29mX2pzJDAiLCJ0X3RvX2pzJDEiLCJ0X29mX2pzJDEiLCJ0X3RvX2pzJDIiLCJ0X29mX2pzJDIiLCJuYW1lIiwibWVzc2FnZSIsInN0YWNrIiwidG9fc3RyaW5nIl0sInNvdXJjZXMiOlsiL2hvbWUvYmVuLy5vcGFtLzQuMTQvbGliL29qcy9vanMubWwiLCIvaG9tZS9iZW4vLm9wYW0vNC4xNC9saWIvb2pzL29qc19leG4ubWwiXSwibWFwcGluZ3MiOiI7Ozs7O0k7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQWlESUEsUUFBUUMsR0FBcUMsZ0NBQXJDQSxFQUFxQzthQUc3Q0MsWUFBWUQsRUFBR0UsUUFBbUQsUUFBdERGLGFBQUdFLGVBQW1EO0lBRzNELFdBQVhFLEtBQ2dCLFlBQWhCRSxVQUlhLE9BQWJFO0lBQWEsU0FPVEMsV0FBV0MsR0FBMkMs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QXVFQXFDO09BR0FDOzs7Ozs7OztJQWxFUzthQ3JEVFUsS0FBS2pELEdBQTJELHlCQUEzREEsWUFBMkQ7YUFDaEVrRCxRQUFRbEQsR0FBOEQseUJBQTlEQSxlQUE4RDthQUN0RW1ELE1BQU1uRCxHQUFzQyxPRG1GNUMyQiwrQkNuRk0zQixhQUE2RTthQUNuRm9ELFVBQVVwRCxHQUEwRCx5QkFBckMsYUFBcUM7OztNQUs1QyxvQkFFZixTQURNLElBQUxBLFdBQVUsVUFOcEJvRCxVQU1VcEQsR0FFVDtJQUhIO21CQVJFaUQsS0FDQUMsUUFDQUMsTUFDQUM7SUFLRjtVIiwic291cmNlc0NvbnRlbnQiOlsiKCogVGhlIGdlbl9qc19hcGkgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIHRlcm1zIG9mIGFuIE1JVC1saWtlIGxpY2Vuc2UuICAgICAqKVxuKCogU2VlIHRoZSBhdHRhY2hlZCBMSUNFTlNFIGZpbGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogQ29weXJpZ2h0IDIwMTUgYnkgTGV4aUZpLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuXG4oKiBUaGlzIG1vZHVsZSAobW9zdGx5KSBhYnN0cmFjdHMgYXdheSBmcm9tIGpzX29mX29jYW1sIGVuY29kaW5nIG9mXG4gICBPQ2FtbCB2YWx1ZXMuICBJdCBzZXJ2ZXMgYXMgYSBzdXBwb3J0IGxpYnJhcnkgZm9yIHRoZSBjb2RlIGdlbmVyYXRlZFxuICAgYnkgZ2VuX2pzX2FwaS5cblxuICAgVGhlIG1vZHVsZSBjb3VsZCBtb3N0bHkgYmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mIGpzX29mX29jYW1sJ3MgSnMgbW9kdWxlXG4gICAoYW5kIGluIHBhcnRpY3VsYXIgSnMuVW5zYWZlKSwgYnV0IHdlIHByZWZlciB0byBkcm9wIHRoZSBkZXBlbmRlbmN5XG4gICB0byBqc19vZl9vY2FtbCdzIGxpYnJhcnkgYW5kIHRvIHJlbHkgb25seSBvbiBpdHMgY29tcGlsZXIgYW5kIEpTXG4gICBydW50aW1lIGNvZGUuXG4qKVxuXG5cbnR5cGUgdFxuXG5leHRlcm5hbCB0X29mX2pzOiB0IC0+IHQgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCB0X3RvX2pzOiB0IC0+IHQgPSBcIiVpZGVudGl0eVwiXG5cbmV4dGVybmFsIHN0cmluZ19vZl9qczogdCAtPiBzdHJpbmcgPSBcImNhbWxfanNfdG9fc3RyaW5nXCJcbmV4dGVybmFsIHN0cmluZ190b19qczogc3RyaW5nIC0+IHQgPSBcImNhbWxfanNfZnJvbV9zdHJpbmdcIlxuXG5leHRlcm5hbCBpbnRfb2ZfanM6IHQgLT4gaW50ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgaW50X3RvX2pzOiBpbnQgLT4gdCA9IFwiJWlkZW50aXR5XCJcblxuZXh0ZXJuYWwgYm9vbF9vZl9qczogdCAtPiBib29sID0gXCJjYW1sX2pzX3RvX2Jvb2xcIlxuZXh0ZXJuYWwgYm9vbF90b19qczogYm9vbCAtPiB0ID0gXCJjYW1sX2pzX2Zyb21fYm9vbFwiXG5cbmV4dGVybmFsIGZsb2F0X29mX2pzOiB0IC0+IGZsb2F0ID0gXCIlaWRlbnRpdHlcIlxuZXh0ZXJuYWwgZmxvYXRfdG9fanM6IGZsb2F0IC0+IHQgPSBcIiVpZGVudGl0eVwiXG5cbmV4dGVybmFsIG9iajogKHN0cmluZyAqIHQpIGFycmF5IC0+IHQgPSBcImNhbWxfanNfb2JqZWN0XCJcblxuZXh0ZXJuYWwgdmFyaWFibGU6IHN0cmluZyAtPiB0ID0gXCJjYW1sX2pzX3ZhclwiXG5cbmV4dGVybmFsIGdldDogdCAtPiBzdHJpbmcgLT4gdCA9IFwiY2FtbF9qc19nZXRcIlxuZXh0ZXJuYWwgc2V0OiB0IC0+IHN0cmluZyAtPiB0IC0+IHVuaXQgPSBcImNhbWxfanNfc2V0XCJcbmV4dGVybmFsIGRlbGV0ZTogdCAtPiBzdHJpbmcgLT4gdW5pdCA9IFwiY2FtbF9qc19kZWxldGVcIlxuXG5leHRlcm5hbCBnZXRfcHJvcDogdCAtPiB0IC0+IHQgPSBcImNhbWxfanNfZ2V0XCJcbmV4dGVybmFsIHNldF9wcm9wOiB0IC0+IHQgLT4gdCAtPiB1bml0ID0gXCJjYW1sX2pzX3NldFwiXG5leHRlcm5hbCBkZWxldGVfcHJvcDogdCAtPiB0IC0+IHVuaXQgPSBcImNhbWxfanNfZGVsZXRlXCJcblxuZXh0ZXJuYWwgZ2V0X3Byb3BfYXNjaWk6IHQgLT4gc3RyaW5nIC0+IHQgPSBcImNhbWxfanNfZ2V0XCJcbmV4dGVybmFsIHNldF9wcm9wX2FzY2lpOiB0IC0+IHN0cmluZyAtPiB0IC0+IHVuaXQgPSBcImNhbWxfanNfc2V0XCJcbmV4dGVybmFsIGRlbGV0ZV9wcm9wX2FzY2lpOiB0IC0+IHN0cmluZyAtPiB1bml0ID0gXCJjYW1sX2pzX2RlbGV0ZVwiXG5cbmV4dGVybmFsIGludGVybmFsX3R5cGVfb2Y6IHQgLT4gdCA9IFwiY2FtbF9qc190eXBlb2ZcIlxubGV0IHR5cGVfb2YgeCA9IHN0cmluZ19vZl9qcyAoaW50ZXJuYWxfdHlwZV9vZiB4KVxuXG5leHRlcm5hbCBpbnRlcm5hbF9pbnN0YW5jZV9vZjogdCAtPiB0IC0+IHQgPSBcImNhbWxfanNfaW5zdGFuY2VvZlwiXG5sZXQgaW5zdGFuY2Vfb2YgeCB+Y29uc3RyID0gYm9vbF9vZl9qcyAoaW50ZXJuYWxfaW5zdGFuY2Vfb2YgeCBjb25zdHIpXG5cbmV4dGVybmFsIHB1cmVfanNfZXhwcjogc3RyaW5nIC0+IHQgPSBcImNhbWxfcHVyZV9qc19leHByXCJcbmxldCBudWxsID0gcHVyZV9qc19leHByIFwibnVsbFwiXG5sZXQgdW5kZWZpbmVkID0gcHVyZV9qc19leHByIFwidW5kZWZpbmVkXCJcblxuZXh0ZXJuYWwgZXF1YWxzOiB0IC0+IHQgLT4gYm9vbCA9IFwiY2FtbF9qc19lcXVhbHNcIlxuXG5sZXQgZ2xvYmFsID0gcHVyZV9qc19leHByIFwiam9vX2dsb2JhbF9vYmplY3RcIlxuXG5leHRlcm5hbCBuZXdfb2JqOiB0IC0+IHQgYXJyYXkgLT4gdCA9IFwiY2FtbF9qc19uZXdcIlxuXG5leHRlcm5hbCBjYWxsOiB0IC0+IHN0cmluZyAtPiB0IGFycmF5IC0+IHQgPSBcImNhbWxfanNfbWV0aF9jYWxsXCJcbmV4dGVybmFsIGFwcGx5OiB0IC0+IHQgYXJyYXkgLT4gdCA9IFwiY2FtbF9qc19mdW5fY2FsbFwiXG5cbmxldCBhcnJheV9tYWtlIG4gPSBuZXdfb2JqIChnZXRfcHJvcF9hc2NpaSBnbG9iYWwgXCJBcnJheVwiKSBbfGludF90b19qcyBufF1cbmxldCBhcnJheV9nZXQgdCBpID0gZ2V0X3Byb3AgdCAoaW50X3RvX2pzIGkpXG5sZXQgYXJyYXlfc2V0IHQgaSB4ID0gc2V0X3Byb3AgdCAoaW50X3RvX2pzIGkpIHhcblxubGV0IGFycmF5X29mX2pzX2Zyb20gZiBvYmpzIHN0YXJ0ID1cbiAgbGV0IG4gPSBpbnRfb2ZfanMgKGdldF9wcm9wX2FzY2lpIG9ianMgXCJsZW5ndGhcIikgaW5cbiAgQXJyYXkuaW5pdCAobiAtIHN0YXJ0KSAoZnVuIGkgLT4gZiAoYXJyYXlfZ2V0IG9ianMgKHN0YXJ0ICsgaSkpKVxuXG5sZXQgYXJyYXlfb2ZfanMgZiBvYmpzID0gYXJyYXlfb2ZfanNfZnJvbSBmIG9ianMgMFxuXG5sZXQgYXJyYXlfdG9fanMgZiBhcnIgPVxuICBsZXQgbiA9IEFycmF5Lmxlbmd0aCBhcnIgaW5cbiAgbGV0IGEgPSBhcnJheV9tYWtlIG4gaW5cbiAgZm9yIGkgPSAwIHRvIG4gLSAxIGRvXG4gICAgYXJyYXlfc2V0IGEgaSAoZiBhcnIuKGkpKVxuICBkb25lO1xuICBhXG5cbmxldCBsaXN0X29mX2pzX2Zyb20gZiBvYmpzIHN0YXJ0ID0gQXJyYXkudG9fbGlzdCAoYXJyYXlfb2ZfanNfZnJvbSBmIG9ianMgc3RhcnQpXG5cbmxldCBsaXN0X29mX2pzIGYgb2JqcyA9IGxpc3Rfb2ZfanNfZnJvbSBmIG9ianMgMFxuXG5sZXQgbGlzdF90b19qcyBmIGwgPVxuICBhcnJheV90b19qcyBmIChBcnJheS5vZl9saXN0IGwpXG5cbmxldCBvcHRpb25fb2ZfanMgZiB4ID1cbiAgaWYgZXF1YWxzIHggbnVsbCB8fCB4ID09IHVuZGVmaW5lZCB0aGVuIE5vbmVcbiAgZWxzZSBTb21lIChmIHgpXG5cbmxldCBvcHRpb25fdG9fanMgZiA9IGZ1bmN0aW9uXG4gIHwgU29tZSB4IC0+IGYgeFxuICB8IE5vbmUgLT4gbnVsbFxuXG5sZXQgdW5pdF90b19qcyAoKSA9IHVuZGVmaW5lZFxubGV0IHVuaXRfb2ZfanMgXyA9ICgpXG5cbmNsYXNzIG9iaiAoeDp0KSA9XG4gIG9iamVjdFxuICAgIG1ldGhvZCB0b19qcyA9IHhcbiAgZW5kXG5cbmV4dGVybmFsIGZ1bl90b19qczogaW50IC0+ICh0IC0+ICdhKSAtPiB0ID0gXCJjYW1sX2pzX3dyYXBfY2FsbGJhY2tfc3RyaWN0XCJcbmV4dGVybmFsIGZ1bl90b19qc19hcmdzOiAodCAtPiAnYSkgLT4gdCA9IFwiY2FtbF9vanNfd3JhcF9mdW5fYXJndW1lbnRzXCJcblxubGV0IGhhc19wcm9wZXJ0eSBvIHggPVxuICB0eXBlX29mIG8gPSBcIm9iamVjdFwiICYmIG8gIT0gbnVsbFxuICAmJiBnZXRfcHJvcCBvIChzdHJpbmdfdG9fanMgeCkgIT0gdW5kZWZpbmVkXG5cbmV4dGVybmFsIG5ld19vYmpfYXJyOiB0IC0+IHQgLT4gdCA9IFwiY2FtbF9vanNfbmV3X2FyclwiXG5cbmxldCBlbXB0eV9vYmogKCkgPSBuZXdfb2JqIChnZXRfcHJvcF9hc2NpaSBnbG9iYWwgXCJPYmplY3RcIikgW3x8XVxuXG5leHRlcm5hbCBpdGVyX3Byb3BlcnRpZXM6IHQgLT4gKHN0cmluZyAtPiB1bml0KSAtPiB1bml0ID0gXCJjYW1sX29qc19pdGVyYXRlX3Byb3BlcnRpZXNcIlxubGV0IGFwcGx5X2FyciBvIGFyciA9IGNhbGwgbyBcImFwcGx5XCIgW3wgbnVsbDsgYXJyIHxdXG5sZXQgY2FsbF9hcnIgbyBzIGFyciA9IGNhbGwgKGdldF9wcm9wIG8gKHN0cmluZ190b19qcyBzKSkgXCJhcHBseVwiIFt8IG87IGFyciB8XVxuXG5sZXQgaXNfbnVsbCB4ID1cbiAgZXF1YWxzIHggbnVsbFxuXG5sZXQgb2JqX3R5cGUgeCA9XG4gIHN0cmluZ19vZl9qcyAoY2FsbCAocHVyZV9qc19leHByIFwiT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1wiKSBcImNhbGxcIiBbfHh8XSlcblxubW9kdWxlIHR5cGUgVCA9IHNpZ1xuICB0eXBlIGpzIDo9IHRcbiAgdHlwZSB0XG4gIHZhbCB0X3RvX2pzIDogdCAtPiBqc1xuICB2YWwgdF9vZl9qcyA6IGpzIC0+IHRcbmVuZFxuXG4oKiBPanMuVCBpbnN0YW5jZXMgZm9yIGJ1aWx0LWluIHR5cGVzICopXG5tb2R1bGUgSW50ID0gc3RydWN0XG4gIHR5cGUgdCA9IGludFxuICBsZXQgdF90b19qcyA9IGludF90b19qc1xuICBsZXQgdF9vZl9qcyA9IGludF9vZl9qc1xuIGVuZFxubW9kdWxlIFN0cmluZyA9IHN0cnVjdFxuICB0eXBlIHQgPSBzdHJpbmdcbiAgbGV0IHRfdG9fanMgPSBzdHJpbmdfdG9fanNcbiAgbGV0IHRfb2ZfanMgPSBzdHJpbmdfb2ZfanNcbmVuZFxubW9kdWxlIEJvb2wgPSBzdHJ1Y3RcbiAgdHlwZSB0ID0gYm9vbFxuICBsZXQgdF90b19qcyA9IGJvb2xfdG9fanNcbiAgbGV0IHRfb2ZfanMgPSBib29sX29mX2pzXG5lbmRcbm1vZHVsZSBGbG9hdCA9IHN0cnVjdFxuICB0eXBlIHQgPSBmbG9hdFxuICBsZXQgdF90b19qcyA9IGZsb2F0X3RvX2pzXG4gIGxldCB0X29mX2pzID0gZmxvYXRfb2ZfanNcbmVuZFxubW9kdWxlIEFycmF5IChBOiBUKSA9IHN0cnVjdFxuICB0eXBlIHQgPSBBLnQgYXJyYXlcbiAgbGV0IHRfdG9fanMgPSBhcnJheV90b19qcyBBLnRfdG9fanNcbiAgbGV0IHRfb2ZfanMgPSBhcnJheV9vZl9qcyBBLnRfb2ZfanNcbmVuZFxubW9kdWxlIExpc3QgKEE6IFQpID0gc3RydWN0XG4gIHR5cGUgdCA9IEEudCBsaXN0XG4gIGxldCB0X3RvX2pzID0gbGlzdF90b19qcyBBLnRfdG9fanNcbiAgbGV0IHRfb2ZfanMgPSBsaXN0X29mX2pzIEEudF9vZl9qc1xuZW5kXG5tb2R1bGUgT3B0aW9uIChBOiBUKSA9IHN0cnVjdFxuICB0eXBlIHQgPSBBLnQgb3B0aW9uXG4gIGxldCB0X3RvX2pzID0gb3B0aW9uX3RvX2pzIEEudF90b19qc1xuICBsZXQgdF9vZl9qcyA9IG9wdGlvbl9vZl9qcyBBLnRfb2ZfanNcbmVuZFxuIiwiKCogVGhlIGdlbl9qc19hcGkgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIHRlcm1zIG9mIGFuIE1JVC1saWtlIGxpY2Vuc2UuICAgICAqKVxuKCogU2VlIHRoZSBhdHRhY2hlZCBMSUNFTlNFIGZpbGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuKCogQ29weXJpZ2h0IDIwMTUgYnkgTGV4aUZpLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKVxuXG50eXBlIHQgPSBKc29vX3J1bnRpbWUuRXJyb3IudFxuXG5leHRlcm5hbCBjb2VyY2UgOiB0IC0+IE9qcy50ID0gXCIlaWRlbnRpdHlcIlxubGV0IG5hbWUgeCA9IE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAoY29lcmNlIHgpIFwibmFtZVwiKVxubGV0IG1lc3NhZ2UgeCA9IE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAoY29lcmNlIHgpIFwibWVzc2FnZVwiKVxubGV0IHN0YWNrIHggPSBPanMub3B0aW9uX29mX2pzIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAoY29lcmNlIHgpIFwic3RhY2tcIilcbmxldCB0b19zdHJpbmcgeCA9IE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5jYWxsIChjb2VyY2UgeCkgXCJ0b1N0cmluZ1wiIFt8fF0pXG5cbmV4Y2VwdGlvbiBFcnJvciA9IEpzb29fcnVudGltZS5FcnJvci5FeG5cblxubGV0ICgpID1cbiAgUHJpbnRleGMucmVnaXN0ZXJfcHJpbnRlciAoZnVuY3Rpb25cbiAgICAgIHwgRXJyb3IgeCAtPiBTb21lICh0b19zdHJpbmcgeClcbiAgICAgIHwgXyAtPiBOb25lXG4gICAgKVxuIl19
