// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_got_unexpected_result=caml_string_of_jsbytes("got unexpected result"),
     cst_comparison_failed=caml_string_of_jsbytes("comparison failed"),
     cst_predicate_failed=caml_string_of_jsbytes("predicate failed"),
     cst=caml_string_of_jsbytes(": "),
     cst_Ppx_assert_lib_Runtime_E=
      caml_string_of_jsbytes("Ppx_assert_lib.Runtime.E"),
     Base=global_data.Base,
     Base_Source_code_position=global_data.Base__Source_code_position,
     Assert_failure=global_data.Assert_failure,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Ppx_assert_lib=[0];
    caml_register_global(13,Ppx_assert_lib,"Ppx_assert_lib");
    var
     E=[248,cst_Ppx_assert_lib_Runtime_E,runtime.caml_fresh_oo_id(0)],
     _h_=[0,caml_string_of_jsbytes("got")],
     _i_=[0,caml_string_of_jsbytes("expected")],
     _g_=[0,caml_string_of_jsbytes("vs")],
     _f_=[0,caml_string_of_jsbytes("Value")],
     _d_=[0,caml_string_of_jsbytes("Stack")],
     _e_=[0,caml_string_of_jsbytes("Loc")],
     _b_=[0,caml_string_of_jsbytes("runtime-lib/runtime.ml.E")],
     _c_=[0,caml_string_of_jsbytes("_none_"),0,-1];
    function _a_(param)
     {if(param[1] !== E)throw [0,Assert_failure,_c_];
      var
       arg1_002=param[3],
       arg0_001=param[2],
       res0_003=caml_call1(Base[164],arg0_001),
       res1_004=caml_call1(Base[84][4],arg1_002);
      return [1,[0,_b_,[0,res0_003,[0,res1_004,0]]]]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,E,_a_);
    function exn_sexp_style(message,pos,here,tag,body)
     {if(message)
       var
        s=message[1],
        _l_=caml_call2(Base[197],cst,tag),
        message$0=caml_call2(Base[197],s,_l_);
      else
       var message$0=tag;
      var
       _m_=
        here
         ?[0,
           [1,
            [0,
             _d_,
             [0,caml_call2(Base[139],Base_Source_code_position[3],here),0]]],
           0]
         :0,
       _n_=caml_call2(Base[178],[0,[1,[0,_e_,[0,[0,pos],0]]],0],_m_),
       sexp=[1,caml_call2(Base[178],body,_n_)];
      return [0,E,message$0,sexp]}
    function test_pred(pos,sexpifier,here,message,predicate,t)
     {var _k_=1 - caml_call1(predicate,t);
      if(_k_)
       throw exn_sexp_style
              (message,
               pos,
               here,
               cst_predicate_failed,
               [0,[1,[0,_f_,[0,caml_call1(sexpifier,t),0]]],0]);
      return _k_}
    var r_diff=[0,0];
    function set_diff_function(f){r_diff[1] = f;return 0}
    function test_result_or_eq(sexpifier,comparator,equal,expect$0,got$0)
     {if(equal)
       var f=equal[1],pass=caml_call2(f,got$0,expect$0);
      else
       var pass=0 === caml_call2(comparator,got$0,expect$0)?1:0;
      if(pass)return 892014833;
      var
       got=caml_call1(sexpifier,got$0),
       expect=caml_call1(sexpifier,expect$0),
       _j_=r_diff[1];
      if(_j_)
       {var
         diff=_j_[1],
         from=caml_call2(Base[84][13],0,expect),
         to=caml_call2(Base[84][13],0,got);
        caml_call2(diff,from,to)}
      return [0,781116926,[0,expect,got]]}
    function test_eq(pos,sexpifier,comparator,here,message,equal,t1,t2)
     {var match=test_result_or_eq(sexpifier,comparator,equal,t1,t2);
      if(typeof match === "number")return 0;
      var match$0=match[2],t2$0=match$0[2],t1$0=match$0[1];
      throw exn_sexp_style
             (message,
              pos,
              here,
              cst_comparison_failed,
              [0,t1$0,[0,_g_,[0,t2$0,0]]])}
    function test_result
     (pos,sexpifier,comparator,here,message,equal,expect,got)
     {var match=test_result_or_eq(sexpifier,comparator,equal,expect,got);
      if(typeof match === "number")return 0;
      var match$0=match[2],got$0=match$0[2],expect$0=match$0[1];
      throw exn_sexp_style
             (message,
              pos,
              here,
              cst_got_unexpected_result,
              [0,[1,[0,_i_,[0,expect$0,0]]],[0,[1,[0,_h_,[0,got$0,0]]],0]])}
    var
     Ppx_assert_lib_Runtime=
      [0,test_pred,test_eq,test_result,set_diff_function];
    caml_register_global(18,Ppx_assert_lib_Runtime,"Ppx_assert_lib__Runtime");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwcHhfYXNzZXJ0X2xpYi5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsiZXhuX3NleHBfc3R5bGUiLCJtZXNzYWdlIiwicG9zIiwiaGVyZSIsInRhZyIsImJvZHkiLCJzIiwibWVzc2FnZSQwIiwic2V4cCIsInRlc3RfcHJlZCIsInNleHBpZmllciIsInByZWRpY2F0ZSIsInQiLCJyX2RpZmYiLCJzZXRfZGlmZl9mdW5jdGlvbiIsImYiLCJ0ZXN0X3Jlc3VsdF9vcl9lcSIsImNvbXBhcmF0b3IiLCJlcXVhbCIsImV4cGVjdCQwIiwiZ290JDAiLCJwYXNzIiwiZ290IiwiZXhwZWN0IiwiZGlmZiIsImZyb20iLCJ0byIsInRlc3RfZXEiLCJ0MSIsInQyIiwidDIkMCIsInQxJDAiLCJ0ZXN0X3Jlc3VsdCJdLCJzb3VyY2VzIjpbIi9ob21lL2Jlbi8ub3BhbS80LjE0L2xpYi9wcHhfYXNzZXJ0L3J1bnRpbWUtbGliL3J1bnRpbWUubWwiXSwibWFwcGluZ3MiOiI7Ozs7O0k7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQTJCSUEsZUFBZ0JDLFFBQVNDLElBQUtDLEtBQU1DLElBQUlDO01BQzFDLEdBRGtCSjtPQUlKO1VBSklBO1FBSUEsNkJBSm9CRztRQUNsQ0csVUFHVSxxQkFBTEQ7O1dBSExDLFVBRGtDSDtNQU10Qzs7UUFOZ0NEOzs7Ozs7OztPQVMxQiw0Q0FUcUJEO09BT2YsNkJBUDhCRztNQU85QixZQU5SRSxVQUtBQyxLQWVhO2FBT2ZDLFVBQVdQLElBQUtRLFVBQVdQLEtBQU1GLFFBQVFVLFVBQVVDO01BQzlDLHVCQURvQ0QsVUFBVUM7TUFDOUM7YUE3QkxaO2VBNEJpQ0M7ZUFBdEJDO2VBQWdCQzs7K0JBSEcsV0FHZE8sVUFBbUNFO2dCQUVHO1FBRXREQzthQUNBQyxrQkFBa0JDLEdBQUksWUFBSkEsRUFBSSxRQUFXO2FBY2pDQyxrQkFBbUJOLFVBQVdPLFdBQVlDLE1BQU9DLFNBQVFDO01BQzNELEdBRDRDRjtPQUk5QixNQUo4QkEsU0FDeENHLEtBR1UsV0FBTE4sRUFKa0RLLE1BQVJEOztXQUMvQ0UsV0FFUSxXQUhvQkosV0FBMkJHLE1BQVJEO01BTW5ELEdBTElFLEtBTUM7TUFsQks7c0JBV1dYLFVBQXNDVTtPQVY5QyxrQkFVUVYsVUFBOEJTO09BVnRDLElBTFhOO01BS1c7UUFJWDs7U0FBWSwrQkFKVlU7U0FLVSw2QkFOVkQ7UUFPRixXQUhLRSxLQUNEQyxLQUNBQztNQUdOLHVCQVJJSCxPQURBRCxLQW1CaUQ7YUFTbkRLLFFBQVN6QixJQUFLUSxVQUFXTyxXQUFZZCxLQUFNRixRQUFTaUIsTUFBTVUsR0FBR0M7TUFDekQsVUFsQkpiLGtCQWlCY04sVUFBV08sV0FBMkJDLE1BQU1VLEdBQUdDO01BQ3pELDZCQUNLO01BREwscUJBRU9DLGdCQUFKQztZQW5FUC9CO2NBZ0UyQ0M7Y0FBbENDO2NBQTRCQzs7aUJBRzlCNEIsZUFBSUQsVUFBc0Q7YUFRakRFO01BQWE5QixJQUFLUSxVQUFXTyxXQUFZZCxLQUFNRixRQUFTaUIsTUFBT0ssT0FBUUQ7TUFDbkYsVUE3QkpOLGtCQTRCa0NOLFVBQVdPLFdBQTJCQyxNQUFPSyxPQUFRRDtNQUNuRiw2QkFDSztNQURMLHFCQUVXRixpQkFBUkQ7WUE5RVBuQjtjQTJFK0RDO2NBQWxDQztjQUE0QkM7OzhCQUdsRGdCLDhCQUFRQyxlQUFnRTs7O1NBbEQvRVgsVUFvQ0FrQixRQVdnQkssWUExQ2hCbEI7O1UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuIEJhc2VcblxudHlwZSAnYSB0ZXN0X3ByZWRcbiAgPSA/aGVyZTpMZXhpbmcucG9zaXRpb24gbGlzdFxuICAtPiA/bWVzc2FnZTpzdHJpbmdcbiAgLT4gKCdhIC0+IGJvb2wpXG4gIC0+ICdhXG4gIC0+IHVuaXRcblxudHlwZSAnYSB0ZXN0X2VxXG4gID0gP2hlcmU6TGV4aW5nLnBvc2l0aW9uIGxpc3RcbiAgLT4gP21lc3NhZ2U6c3RyaW5nXG4gIC0+ID9lcXVhbDooJ2EgLT4gJ2EgLT4gYm9vbClcbiAgLT4gJ2FcbiAgLT4gJ2FcbiAgLT4gdW5pdFxuXG50eXBlICdhIHRlc3RfcmVzdWx0XG4gID0gP2hlcmU6TGV4aW5nLnBvc2l0aW9uIGxpc3RcbiAgLT4gP21lc3NhZ2U6c3RyaW5nXG4gIC0+ID9lcXVhbDooJ2EgLT4gJ2EgLT4gYm9vbClcbiAgLT4gZXhwZWN0OidhXG4gIC0+ICdhXG4gIC0+IHVuaXRcblxuZXhjZXB0aW9uIEUgb2Ygc3RyaW5nICogU2V4cC50IFtAQGRlcml2aW5nIHNleHBdXG5cbmxldCBleG5fc2V4cF9zdHlsZSB+bWVzc2FnZSB+cG9zIH5oZXJlIH50YWcgYm9keSA9XG4gIGxldCBtZXNzYWdlID1cbiAgICBtYXRjaCBtZXNzYWdlIHdpdGhcbiAgICB8IE5vbmUgLT4gdGFnXG4gICAgfCBTb21lIHMgLT4gcyBeIFwiOiBcIiBeIHRhZ1xuICBpblxuICBsZXQgc2V4cCA9XG4gICAgU2V4cC5MaXN0IChcbiAgICAgIGJvZHlcbiAgICAgIEAgWyBTZXhwLkxpc3QgWyBTZXhwLkF0b20gXCJMb2NcIjsgU2V4cC5BdG9tIHBvcyBdIF1cbiAgICAgIEAgYmVnaW4gbWF0Y2ggaGVyZSB3aXRoXG4gICAgICAgIHwgW10gLT4gW11cbiAgICAgICAgfCBfIC0+IFsgU2V4cC5MaXN0IFsgU2V4cC5BdG9tIFwiU3RhY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBbJXNleHBfb2Y6IFNvdXJjZV9jb2RlX3Bvc2l0aW9uLnQgbGlzdF0gaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXSBdXG4gICAgICBlbmRcbiAgICApXG4gIGluXG4gICgqIEhlcmUgYW5kIGluIG90aGVyIHBsYWNlcyB3ZSByZXR1cm4gZXhjZXB0aW9ucywgcmF0aGVyIHRoYW4gZGlyZWN0bHkgcmFpc2luZywgYW5kXG4gICAgIGluc3RlYWQgcmFpc2UgYXQgdGhlIGxhdGVzdCBtb21lbnQgcG9zc2libGUsIHNvIGJhY2t0cmFjZSBkb24ndCBpbmNsdWRlIG5vaXNlIGZyb21cbiAgICAgdGhlc2UgZnVuY3Rpb25zIHRoYXQgY29uc3RydWN0IGV4Y2VwdGlvbnMuICopXG4gIEUgKG1lc3NhZ2UsIHNleHApXG5cbmxldCBbQGNvbGRdIGV4bl90ZXN0X3ByZWQgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+c2V4cGlmaWVyIHQgPVxuICBleG5fc2V4cF9zdHlsZSB+bWVzc2FnZSB+cG9zIH5oZXJlIH50YWc6XCJwcmVkaWNhdGUgZmFpbGVkXCIgW1xuICAgIFNleHAuTGlzdCBbU2V4cC5BdG9tIFwiVmFsdWVcIjsgc2V4cGlmaWVyIHRdXG4gIF1cblxubGV0IHRlc3RfcHJlZCB+cG9zIH5zZXhwaWZpZXIgfmhlcmUgP21lc3NhZ2UgcHJlZGljYXRlIHQgPVxuICBpZiBub3QgKHByZWRpY2F0ZSB0KSB0aGVuXG4gICAgcmFpc2UgKGV4bl90ZXN0X3ByZWQgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+c2V4cGlmaWVyIHQpXG5cbmxldCByX2RpZmYgOiAoZnJvbV86c3RyaW5nIC0+IHRvXzpzdHJpbmcgLT4gdW5pdCkgb3B0aW9uIHJlZiA9IHJlZiAgIE5vbmVcbmxldCBzZXRfZGlmZl9mdW5jdGlvbiBmID0gcl9kaWZmIDo9IGZcblxubGV0IFtAY29sZF0gdGVzdF9yZXN1bHRfb3JfZXFfZmFpbGVkIH5zZXhwaWZpZXIgfmV4cGVjdCB+Z290ID1cbiAgbGV0IGdvdCA9IHNleHBpZmllciBnb3QgaW5cbiAgbGV0IGV4cGVjdCA9IHNleHBpZmllciBleHBlY3QgaW5cbiAgYmVnaW4gbWF0Y2ggIXJfZGlmZiB3aXRoXG4gIHwgTm9uZSAtPiAoKVxuICB8IFNvbWUgZGlmZiAtPlxuICAgIGxldCBmcm9tXyA9IFNleHAudG9fc3RyaW5nX2h1bSBleHBlY3QgaW5cbiAgICBsZXQgdG9fICAgPSBTZXhwLnRvX3N0cmluZ19odW0gZ290IGluXG4gICAgZGlmZiB+ZnJvbV8gfnRvX1xuICBlbmQ7XG4gIGBGYWlsIChleHBlY3QsIGdvdClcblxubGV0IHRlc3RfcmVzdWx0X29yX2VxIH5zZXhwaWZpZXIgfmNvbXBhcmF0b3IgfmVxdWFsIH5leHBlY3QgfmdvdCA9XG4gIGxldCBwYXNzID1cbiAgICBtYXRjaCBlcXVhbCB3aXRoXG4gICAgfCBOb25lIC0+IGNvbXBhcmF0b3IgZ290IGV4cGVjdCA9IDBcbiAgICB8IFNvbWUgZiAtPiBmIGdvdCBleHBlY3RcbiAgaW5cbiAgaWYgcGFzc1xuICB0aGVuIGBQYXNzXG4gIGVsc2UgdGVzdF9yZXN1bHRfb3JfZXFfZmFpbGVkIH5zZXhwaWZpZXIgfmV4cGVjdCB+Z290XG5cbmxldCBbQGNvbGRdIGV4bl90ZXN0X2VxIH5tZXNzYWdlIH5wb3MgfmhlcmUgfnQxIH50MiA9XG4gIGV4bl9zZXhwX3N0eWxlIH5tZXNzYWdlIH5wb3MgfmhlcmUgfnRhZzpcImNvbXBhcmlzb24gZmFpbGVkXCIgW1xuICAgIHQxO1xuICAgIFNleHAuQXRvbSBcInZzXCI7XG4gICAgdDI7XG4gIF1cblxubGV0IHRlc3RfZXEgfnBvcyB+c2V4cGlmaWVyIH5jb21wYXJhdG9yIH5oZXJlID9tZXNzYWdlID9lcXVhbCB0MSB0MiA9XG4gIG1hdGNoIHRlc3RfcmVzdWx0X29yX2VxIH5zZXhwaWZpZXIgfmNvbXBhcmF0b3IgfmVxdWFsIH5leHBlY3Q6dDEgfmdvdDp0MiB3aXRoXG4gIHwgYFBhc3MgLT4gKClcbiAgfCBgRmFpbCAodDEsIHQyKSAtPiByYWlzZSAoZXhuX3Rlc3RfZXEgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+dDEgfnQyKVxuXG5sZXQgW0Bjb2xkXSBleG5fdGVzdF9yZXN1bHQgfm1lc3NhZ2UgfnBvcyB+aGVyZSB+ZXhwZWN0IH5nb3QgPVxuICBleG5fc2V4cF9zdHlsZSB+bWVzc2FnZSB+cG9zIH5oZXJlIH50YWc6XCJnb3QgdW5leHBlY3RlZCByZXN1bHRcIiBbXG4gICAgU2V4cC5MaXN0IFtTZXhwLkF0b20gXCJleHBlY3RlZFwiOyBleHBlY3RdO1xuICAgIFNleHAuTGlzdCBbU2V4cC5BdG9tIFwiZ290XCI7IGdvdF07XG4gIF1cblxubGV0W0B3YXJuaW5nIFwiLTE2XCJdIHRlc3RfcmVzdWx0IH5wb3MgfnNleHBpZmllciB+Y29tcGFyYXRvciB+aGVyZSA/bWVzc2FnZSA/ZXF1YWwgfmV4cGVjdCB+Z290ID1cbiAgbWF0Y2ggdGVzdF9yZXN1bHRfb3JfZXEgfnNleHBpZmllciB+Y29tcGFyYXRvciB+ZXF1YWwgfmV4cGVjdCB+Z290IHdpdGhcbiAgfCBgUGFzcyAtPiAoKVxuICB8IGBGYWlsIChleHBlY3QsIGdvdCkgLT4gcmFpc2UgKGV4bl90ZXN0X3Jlc3VsdCB+bWVzc2FnZSB+cG9zIH5oZXJlIH5leHBlY3QgfmdvdClcbiJdfQ==
