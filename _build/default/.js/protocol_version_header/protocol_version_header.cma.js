// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_int_compare=runtime.caml_int_compare,
     caml_register_global=runtime.caml_register_global,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    var
     global_data=runtime.caml_get_global_data(),
     pos=caml_string_of_jsbytes("src/known_protocol.ml:50:15"),
     cst_KRB2=caml_string_of_jsbytes("KRB2"),
     cst_KBT=caml_string_of_jsbytes("KBT"),
     cst_RPC=caml_string_of_jsbytes("RPC"),
     cst_Krb=caml_string_of_jsbytes("Krb"),
     cst_Krb_test_mode=caml_string_of_jsbytes("Krb_test_mode"),
     cst_Rpc=caml_string_of_jsbytes("Rpc"),
     cst_krb=caml_string_of_jsbytes("krb"),
     cst_krb_test_mode=caml_string_of_jsbytes("krb_test_mode"),
     cst_rpc=caml_string_of_jsbytes("rpc"),
     cst_Krb$0=caml_string_of_jsbytes("Krb"),
     cst_Krb_test_mode$0=caml_string_of_jsbytes("Krb_test_mode"),
     cst_Rpc$0=caml_string_of_jsbytes("Rpc"),
     cst_krb$0=caml_string_of_jsbytes("krb"),
     cst_krb_test_mode$0=caml_string_of_jsbytes("krb_test_mode"),
     cst_rpc$0=caml_string_of_jsbytes("rpc"),
     cst_Protocol_version_header_Kn=
      caml_string_of_jsbytes("Protocol_version_header__Known_protocol"),
     cst_protocol_version_header=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_src_known_protocol_ml=caml_string_of_jsbytes("src/known_protocol.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_protocol_version_header$0=
      caml_string_of_jsbytes("protocol_version_header"),
     all=[0,0,[0,1,[0,2,0]]],
     error_source_005=caml_string_of_jsbytes("src/known_protocol.ml.t"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_src_known_protocol_ml_3_0=
      caml_string_of_jsbytes("src/known_protocol.ml:3:0"),
     cst_t$0=caml_string_of_jsbytes("t"),
     retired_krb_word=caml_string_of_jsbytes("KRB"),
     cst_src_known_protocol_ml$0=
      caml_string_of_jsbytes("src/known_protocol.ml"),
     cst_validate_magic_words=caml_string_of_jsbytes("validate magic words"),
     cst_src_known_protocol_ml$1=
      caml_string_of_jsbytes("src/known_protocol.ml"),
     cst_magic_numbers=caml_string_of_jsbytes("magic numbers"),
     cst_src_known_protocol_ml$2=
      caml_string_of_jsbytes("src/known_protocol.ml"),
     cst_magic_number_bin_size_is_c=
      caml_string_of_jsbytes("magic_number_bin_size is correct"),
     cst_protocol_version_header$1=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_Protocol_version_header_Kn$0=
      caml_string_of_jsbytes("Protocol_version_header__Known_protocol"),
     cst_Protocol_version_header_Li=
      caml_string_of_jsbytes
       ("Protocol_version_header__List_with_max_len_intf"),
     cst_protocol_version_header$2=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_src_list_with_max_len_intf=
      caml_string_of_jsbytes("src/list_with_max_len_intf.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_protocol_version_header$3=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_protocol_version_header$4=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_Protocol_version_header_Li$0=
      caml_string_of_jsbytes
       ("Protocol_version_header__List_with_max_len_intf"),
     cst_List_is_too_large=caml_string_of_jsbytes("List is too large"),
     cst_t$2=caml_string_of_jsbytes("t"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_src_list_with_max_len_ml_7=
      caml_string_of_jsbytes("src/list_with_max_len.ml:7:14"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_t$1=caml_string_of_jsbytes("t"),
     cst_src_list_with_max_len_ml_7$0=
      caml_string_of_jsbytes("src/list_with_max_len.ml:7:2"),
     cst_Protocol_version_header_Li$1=
      caml_string_of_jsbytes("Protocol_version_header__List_with_max_len"),
     cst_protocol_version_header$5=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_src_list_with_max_len_ml=
      caml_string_of_jsbytes("src/list_with_max_len.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_protocol_version_header$6=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_protocol_version_header$7=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_Protocol_version_header_Li$2=
      caml_string_of_jsbytes("Protocol_version_header__List_with_max_len"),
     cst_Protocol_version_header_ne$1=
      caml_string_of_jsbytes
       ("[Protocol_version_header.negotiate]: conflicting magic protocol numbers"),
     cst_Protocol_version_header_ne$0=
      caml_string_of_jsbytes
       ("[Protocol_version_header.negotiate]: no shared version numbers"),
     cst_Protocol_version_header_ne$2=
      caml_string_of_jsbytes
       ("[Protocol_version_header.negotiate]: conflicting magic protocol numbers"),
     cst_No_magic_numbers_seen=caml_string_of_jsbytes("No magic numbers seen"),
     cst_Protocol_version_header_ne=
      caml_string_of_jsbytes
       ("[Protocol_version_header.negotiate]: multiple magic numbers seen."),
     cst_Protocol_version_header=
      caml_string_of_jsbytes("Protocol_version_header"),
     cst_protocol_version_header$8=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_src_protocol_version_heade=
      caml_string_of_jsbytes("src/protocol_version_header.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_protocol_version_header$9=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_Protocol_version_header$0=
      caml_string_of_jsbytes("Protocol_version_header"),
     cst_t$3=caml_string_of_jsbytes("t"),
     cst_src_protocol_version_heade$0=
      caml_string_of_jsbytes("src/protocol_version_header.ml:10:0"),
     cst_t$4=caml_string_of_jsbytes("t"),
     cst_t$5=caml_string_of_jsbytes("t"),
     cst_src_protocol_version_heade$1=
      caml_string_of_jsbytes("src/protocol_version_header.ml:99:2"),
     cst_t$6=caml_string_of_jsbytes("t"),
     cst_src_protocol_version_heade$2=
      caml_string_of_jsbytes("src/protocol_version_header.ml"),
     cst_bin_sizes_are_not_changed_=
      caml_string_of_jsbytes("bin sizes are not changed by accident"),
     cst_protocol_version_header$10=
      caml_string_of_jsbytes("protocol_version_header"),
     cst_Protocol_version_header$1=
      caml_string_of_jsbytes("Protocol_version_header"),
     Core=global_data.Core,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Core_Int=global_data.Core__Int,
     Core_List=global_data.Core__List,
     Assert_failure=global_data.Assert_failure,
     Core_Char=global_data.Core__Char,
     Core_String=global_data.Core__String,
     Bin_prot_Read=global_data.Bin_prot__Read;
    global_data.Bin_prot__Common;
    global_data.Bin_prot__Write;
    var
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Inline_test_config=global_data.Inline_test_config,
     Core_Info=global_data.Core__Info,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Base_Exn=global_data.Base__Exn,
     Core_Map=global_data.Core__Map,
     Bin_prot_Type_class=global_data.Bin_prot__Type_class,
     Core_Or_error=global_data.Core__Or_error,
     Core_Set=global_data.Core__Set,
     Base_Or_error=global_data.Base__Or_error,
     Protocol_version_header=[0];
    caml_register_global
     (109,Protocol_version_header,"Protocol_version_header__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Protocol_version_header_Kn);
    caml_call1
     (Ppx_bench_lib_Benchmark_accumu[1][1],cst_protocol_version_header);
    caml_call1(Expect_test_collector[5][1],cst_src_known_protocol_ml);
    caml_call2
     (Ppx_inline_test_lib_Runtime[2],cst_protocol_version_header$0,cst);
    var
     compare=caml_int_compare,
     _r_=[0,caml_string_of_jsbytes("src/known_protocol.ml"),40,2],
     _q_=[0,caml_string_of_jsbytes("src/known_protocol.ml"),41,2],
     _p_=[0,caml_string_of_jsbytes("src/known_protocol.ml"),42,2],
     _o_=[0,caml_string_of_jsbytes("src/known_protocol.ml"),43,2],
     _m_=[0,caml_string_of_jsbytes("src/known_protocol.ml"),33,2],
     _l_=[0,caml_string_of_jsbytes("src/known_protocol.ml"),35,2],
     _a_=[0,caml_string_of_jsbytes("Krb")],
     _b_=[0,caml_string_of_jsbytes("Krb_test_mode")],
     _c_=[0,caml_string_of_jsbytes("Rpc")],
     _d_=
      [0,
       [0,caml_string_of_jsbytes("Krb"),0],
       [0,
        [0,caml_string_of_jsbytes("Krb_test_mode"),0],
        [0,[0,caml_string_of_jsbytes("Rpc"),0],0]]],
     _t_=[0,caml_string_of_jsbytes("max_len")],
     _u_=[0,caml_string_of_jsbytes("len")],
     _v_=[0,caml_string_of_jsbytes("context")],
     _U_=[0,caml_string_of_jsbytes("src/protocol_version_header.ml"),145,2],
     _T_=[0,caml_string_of_jsbytes("src/protocol_version_header.ml"),146,2],
     _S_=[0,caml_string_of_jsbytes("src/protocol_version_header.ml"),147,2],
     _I_=[0,caml_string_of_jsbytes("Unknown")],
     _G_=[0,caml_string_of_jsbytes("peer_protocol")],
     _H_=[0,caml_string_of_jsbytes("us_protocol")],
     _D_=[0,caml_string_of_jsbytes("protocol")],
     _E_=[0,caml_string_of_jsbytes("peer_versions")],
     _F_=[0,caml_string_of_jsbytes("us_versions")],
     _J_=[0,caml_string_of_jsbytes("peer_protocol")],
     _K_=[0,caml_string_of_jsbytes("us_protocol")],
     _L_=[0,caml_string_of_jsbytes("us_versions")],
     _B_=[0,caml_string_of_jsbytes("versions")],
     _C_=[0,caml_string_of_jsbytes("protocols")];
    function t_of_sexp(sexp_006)
     {if(0 === sexp_006[0])
       {var _a7_=sexp_006[1],switch$0=0;
        if(caml_string_notequal(_a7_,cst_Krb))
         {var switch$1=0;
          if(caml_string_notequal(_a7_,cst_Krb_test_mode))
           {var switch$2=0;
            if(caml_string_notequal(_a7_,cst_Rpc))
             if(caml_string_notequal(_a7_,cst_krb))
              if(caml_string_notequal(_a7_,cst_krb_test_mode))
               {if(caml_string_notequal(_a7_,cst_rpc))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 2}
          if(! switch$1)return 1}
        if(! switch$0)return 0}
      else
       {var _a8_=sexp_006[1];
        if(! _a8_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_005,sexp_006);
        var _a9_=_a8_[1];
        if(0 !== _a9_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_005,sexp_006);
        var _a__=_a9_[1],switch$3=0;
        if(caml_string_notequal(_a__,cst_Krb$0))
         {var switch$4=0;
          if(caml_string_notequal(_a__,cst_Krb_test_mode$0))
           {var switch$5=0;
            if(caml_string_notequal(_a__,cst_Rpc$0))
             if(caml_string_notequal(_a__,cst_krb$0))
              if(caml_string_notequal(_a__,cst_krb_test_mode$0))
               {if(caml_string_notequal(_a__,cst_rpc$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006)}
          if(! switch$4)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006)}
        if(! switch$3)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_005,sexp_006)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_005,sexp_006)}
    function sexp_of_t(param)
     {switch(param){case 0:return _a_;case 1:return _b_;default:return _c_}}
    var
     _e_=caml_call1(Bin_prot_Shape[9],_d_),
     _f_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t),0,_e_],0],
     _g_=caml_call1(Bin_prot_Shape[4][1],cst_src_known_protocol_ml_3_0),
     group=caml_call2(Bin_prot_Shape[6],_g_,_f_),
     _h_=caml_call1(Bin_prot_Shape[2][1],cst_t$0);
    caml_call1(caml_call2(Bin_prot_Shape[14],group,_h_),0);
    function magic_word(param)
     {switch(param)
       {case 0:return cst_KRB2;case 1:return cst_KBT;default:return cst_RPC}}
    var t2=5;
    function gen_magic_number(word)
     {function _a5_(acc,c)
       {return (acc * 256 | 0) + caml_call1(Core_Char[6],c) | 0}
      var _a6_=caml_call1(Core_String[54],word);
      return caml_call3(Core_List[10],_a6_,0,_a5_)}
    function magic_number(t){return gen_magic_number(magic_word(t))}
    function _i_(p){return [0,magic_number(p),p]}
    var
     _j_=caml_call2(Core_List[72],all,_i_),
     by_magic_number=caml_call1(Core_Int[101][9],_j_);
    function _k_(param)
     {var
       magic_words=
        [0,retired_krb_word,caml_call2(Core_List[72],all,magic_word)],
       magic_numbers=caml_call2(Core_List[72],magic_words,gen_magic_number);
      function _a3_(n)
       {var _a4_=caml_call1(Core_Int[2],1073741823.);
        return caml_call2(Core[89],n,_a4_)}
      if(! caml_call2(Core_List[14],magic_numbers,_a3_))
       throw [0,Assert_failure,_m_];
      if(caml_call2(Core_List[112],magic_numbers,Core_Int[91]))
       throw [0,Assert_failure,_l_];
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_validate_magic_words,
      0,
      cst_src_known_protocol_ml$0,
      29,
      0,
      449,
      _k_);
    function _n_(param)
     {var _aZ_=gen_magic_number(retired_krb_word);
      if(! caml_call2(Core[90],_aZ_,4346443))throw [0,Assert_failure,_r_];
      var _a0_=magic_number(0);
      if(! caml_call2(Core[90],_a0_,843207243))throw [0,Assert_failure,_q_];
      var _a1_=magic_number(1);
      if(! caml_call2(Core[90],_a1_,5521995))throw [0,Assert_failure,_p_];
      var _a2_=magic_number(2);
      if(caml_call2(Core[90],_a2_,4411474))return 0;
      throw [0,Assert_failure,_o_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_magic_numbers,
      0,
      cst_src_known_protocol_ml$1,
      39,
      0,
      223,
      _n_);
    function _s_(param)
     {function _aY_(t)
       {var
         magic_number$0=magic_number(t),
         t1=caml_call1(Core_Int[71],magic_number$0),
         sexpifier=Core[356],
         equal=0,
         message=0,
         here=0;
        function comparator(a_007,b_008)
         {return caml_call2(Core[352],a_007,b_008)}
        return caml_call8
                (Ppx_assert_lib_Runtime[2],
                 pos,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 t1,
                 t2)}
      caml_call2(Core_List[9],all,_aY_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_magic_number_bin_size_is_c,
      0,
      cst_src_known_protocol_ml$2,
      46,
      0,
      214,
      _s_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_protocol_version_header$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Protocol_version_header_Kn$0);
    var
     Protocol_version_header_Known_=
      [0,compare,all,t_of_sexp,sexp_of_t,magic_number,by_magic_number,t2];
    caml_register_global
     (127,
      Protocol_version_header_Known_,
      "Protocol_version_header__Known_protocol");
    caml_call1(Ppx_module_timer_runtime[4],cst_Protocol_version_header_Li);
    caml_call1
     (Ppx_bench_lib_Benchmark_accumu[1][1],cst_protocol_version_header$2);
    caml_call1(Expect_test_collector[5][1],cst_src_list_with_max_len_intf);
    caml_call2
     (Ppx_inline_test_lib_Runtime[2],cst_protocol_version_header$3,cst$0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_protocol_version_header$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Protocol_version_header_Li$0);
    var Protocol_version_header_List_w=[0];
    caml_register_global
     (128,
      Protocol_version_header_List_w,
      "Protocol_version_header__List_with_max_len_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Protocol_version_header_Li$1);
    caml_call1
     (Ppx_bench_lib_Benchmark_accumu[1][1],cst_protocol_version_header$5);
    caml_call1(Expect_test_collector[5][1],cst_src_list_with_max_len_ml);
    caml_call2
     (Ppx_inline_test_lib_Runtime[2],cst_protocol_version_header$6,cst$1);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_protocol_version_header$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Protocol_version_header_Li$2);
    function _w_(_aG_)
     {var
       _ax_=_aG_[1],
       _ay_=_aG_[2],
       _az_=caml_call1(Bin_prot_Shape[3][1],cst_a),
       _aA_=caml_call1(Bin_prot_Shape[4][1],cst_src_list_with_max_len_ml_7),
       _aB_=caml_call2(Bin_prot_Shape[15],_aA_,_az_),
       _aC_=caml_call1(Core[410],_aB_),
       _aD_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$0),0],
       _aE_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$1),_aD_,_aC_],0],
       _aF_=caml_call1(Bin_prot_Shape[4][1],cst_src_list_with_max_len_ml_7$0),
       group=caml_call2(Bin_prot_Shape[6],_aF_,_aE_);
      function bin_shape_t(a)
       {var _aX_=caml_call1(Bin_prot_Shape[2][1],cst_t$2);
        return caml_call1(caml_call2(Bin_prot_Shape[14],group,_aX_),[0,a,0])}
      function bin_size_t(size_of_a,v)
       {return caml_call2(Core[411],size_of_a,v)}
      function bin_write_t(write_a,buf,pos,v)
       {return caml_call3(caml_call1(Core[412],write_a),buf,pos,v)}
      function bin_writer_t(bin_writer_a)
       {function _aT_(v)
         {var _aU_=bin_writer_a[2];
          return function(_aV_,_aW_){return bin_write_t(_aU_,v,_aV_,_aW_)}}
        return [0,function(v){return bin_size_t(bin_writer_a[1],v)},_aT_]}
      var bin_read_t=Core_List[150];
      function bin_read_t$0(bin_read_el,buf,pos_ref)
       {try
         {var _aS_=caml_call4(Bin_prot_Read[41],_ax_,bin_read_el,buf,pos_ref);
          return _aS_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var _aR_=caml_call1(Core_Info[9],_ay_);
          return caml_call2(Base_Exn[8],exn,_aR_)}}
      function bin_reader_t(bin_reader_a)
       {var _aN_=caml_call1(bin_read_t,bin_reader_a[1]),_aO_=bin_reader_a[1];
        return [0,
                function(_aP_,_aQ_){return bin_read_t$0(_aO_,_aP_,_aQ_)},
                _aN_]}
      function bin_t(bin_a)
       {var _aL_=bin_reader_t(bin_a[3]),_aM_=bin_writer_t(bin_a[2]);
        return [0,bin_shape_t(bin_a[1]),_aM_,_aL_]}
      function of_list_exn(l)
       {var len=caml_call1(Core_List[7],l);
        if(caml_call2(Core[91],len,_ax_))
         {var
           _aH_=[0,[1,[0,_t_,[0,caml_call1(Core[356],_ax_),0]]],0],
           _aI_=[0,[1,[0,_u_,[0,caml_call1(Core[356],len),0]]],_aH_],
           _aJ_=[0,[1,[0,_v_,[0,caml_call1(Core_Info[6],_ay_),0]]],_aI_],
           _aK_=
            [1,
             [0,caml_call1(Sexplib0_Sexp_conv[7],cst_List_is_too_large),_aJ_]];
          caml_call1(Core[253],_aK_)}
        return l}
      var sexp_of_t=Core_List[4];
      function t_of_sexp(t_of_a,sexp)
       {var t=caml_call2(Core_List[3],t_of_a,sexp);return of_list_exn(t)}
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_list_exn,
              _ax_]}
    var Protocol_version_header_List_w$0=[0,_w_];
    caml_register_global
     (132,
      Protocol_version_header_List_w$0,
      "Protocol_version_header__List_with_max_len");
    caml_call1(Ppx_module_timer_runtime[4],cst_Protocol_version_header);
    caml_call1
     (Ppx_bench_lib_Benchmark_accumu[1][1],cst_protocol_version_header$8);
    caml_call1(Expect_test_collector[5][1],cst_src_protocol_version_heade);
    caml_call2
     (Ppx_inline_test_lib_Runtime[2],cst_protocol_version_header$9,cst$2);
    var
     context=caml_call1(Core_Info[12],cst_Protocol_version_header$0),
     Bounded_list_in_case_someone_s=_w_([0,100,context]),
     _x_=caml_call1(Bounded_list_in_case_someone_s[1],Core[344]),
     _y_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$3),0,_x_],0],
     _z_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_version_heade$0),
     group$0=caml_call2(Bin_prot_Shape[6],_z_,_y_),
     _A_=caml_call1(Bin_prot_Shape[2][1],cst_t$4),
     bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_A_),0);
    function bin_size_t(v)
     {return caml_call2(Bounded_list_in_case_someone_s[2],Core[345],v)}
    function bin_write_t(buf,pos,v)
     {return caml_call3
              (caml_call1(Bounded_list_in_case_someone_s[3],Core[346]),
               buf,
               pos,
               v)}
    var bin_writer_t=[0,bin_size_t,bin_write_t];
    function bin_read_t(buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(Bounded_list_in_case_someone_s[5],Core[348]),
               buf,
               pos_ref,
               vint)}
    function bin_read_t$0(buf,pos_ref)
     {return caml_call2
              (caml_call1(Bounded_list_in_case_someone_s[4],Core[348]),
               buf,
               pos_ref)}
    var
     bin_reader_t=[0,bin_read_t$0,bin_read_t],
     bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
    function t_of_sexp$0(x_002)
     {return caml_call2(Bounded_list_in_case_someone_s[9],Core[357],x_002)}
    function sexp_of_t$0(x_003)
     {return caml_call2(Bounded_list_in_case_someone_s[10],Core[356],x_003)}
    function create_exn(protocol,supported_versions)
     {var _aw_=[0,magic_number(protocol),supported_versions];
      return caml_call1(Bounded_list_in_case_someone_s[11],_aw_)}
    function get_protocol(t)
     {function _as_(v)
       {var match=caml_call2(Core_Map[38],by_magic_number,v);
        if(! match)return [1,v];
        var p=match[1];
        return [0,p]}
      var
       match=caml_call2(Core_List[53],t,_as_),
       versions=match[2],
       protocols=match[1];
      if(! protocols)return [0,[0,0,caml_call1(Core_Int[102][57],versions)]];
      if(protocols[2])
       {var
         _at_=[0,[1,[0,_B_,[0,caml_call2(Core[421],Core[356],versions),0]]],0],
         _au_=
          [0,[1,[0,_C_,[0,caml_call2(Core[421],sexp_of_t,protocols),0]]],_at_],
         _av_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Protocol_version_header_ne),
            _au_]];
        return caml_call1(Core_Or_error[40],_av_)}
      var p=protocols[1];
      return [0,[0,[0,p],caml_call1(Core_Int[102][57],versions)]]}
    function negotiate(allow_legacy_peer,us,peer)
     {function _Z_(param)
       {var us_versions=param[2],us_protocol=param[1];
        function _$_(param)
         {var peer_versions=param[2],peer_protocol=param[1];
          function _ab_(us_protocol)
           {function _af_(peer_protocol)
             {var
               match=caml_int_compare(us_protocol,peer_protocol),
               _aj_=0 === match?1:0;
              if(! _aj_)
               {var
                 _ap_=[0,[1,[0,_G_,[0,sexp_of_t(peer_protocol),0]]],0],
                 _aq_=[0,[1,[0,_H_,[0,sexp_of_t(us_protocol),0]]],_ap_],
                 _ar_=
                  [1,
                   [0,
                    caml_call1
                     (Sexplib0_Sexp_conv[7],cst_Protocol_version_header_ne$1),
                    _aq_]];
                return caml_call1(Core_Or_error[40],_ar_)}
              var
               _ak_=caml_call2(Core_Set[15],us_versions,peer_versions),
               match$0=caml_call1(Core_Set[59],_ak_);
              if(match$0){var version=match$0[1];return [0,version]}
              var
               _al_=[0,[1,[0,_D_,[0,sexp_of_t(us_protocol),0]]],0],
               _am_=
                [0,
                 [1,[0,_E_,[0,caml_call1(Core_Int[102][75],peer_versions),0]]],
                 _al_],
               _an_=
                [0,
                 [1,[0,_F_,[0,caml_call1(Core_Int[102][75],us_versions),0]]],
                 _am_],
               _ao_=
                [1,
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7],cst_Protocol_version_header_ne$0),
                  _an_]];
              return caml_call1(Core_Or_error[40],_ao_)}
            if(peer_protocol)
             var x=peer_protocol[1],_ag_=caml_call1(Base_Or_error[25][1],x);
            else
             if(allow_legacy_peer)
              var _ag_=caml_call1(Base_Or_error[25][1],us_protocol);
             else
              var
               _ah_=
                [0,
                 [1,[0,_K_,[0,sexp_of_t(us_protocol),0]]],
                 [0,[1,[0,_J_,[0,_I_,0]]],0]],
               _ai_=
                [1,
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7],cst_Protocol_version_header_ne$2),
                  _ah_]],
               _ag_=caml_call1(Core_Or_error[40],_ai_);
            return caml_call2(Base_Or_error[25][4][2],_ag_,_af_)}
          if(us_protocol)
           var x=us_protocol[1],_ac_=caml_call1(Base_Or_error[25][1],x);
          else
           var
            _ad_=
             [0,[1,[0,_L_,[0,caml_call1(Core_Int[102][75],us_versions),0]]],0],
            _ae_=
             [1,
              [0,
               caml_call1(Sexplib0_Sexp_conv[7],cst_No_magic_numbers_seen),
               _ad_]],
            _ac_=caml_call1(Core[233],_ae_);
          return caml_call2(Base_Or_error[25][4][2],_ac_,_ab_)}
        var _aa_=get_protocol(peer);
        return caml_call2(Base_Or_error[25][4][2],_aa_,_$_)}
      var ___=get_protocol(us);
      return caml_call2(Base_Or_error[25][4][2],___,_Z_)}
    function matches_magic_prefix(t,protocol)
     {var magic_number$0=magic_number(protocol);
      return caml_call3(Core_List[6],t,magic_number$0,Core_Int[90])}
    function contains_magic_prefix(protocol)
     {var _W_=bin_t[3];
      function _X_(_Y_){return matches_magic_prefix(_Y_,protocol)}
      return caml_call2(Bin_prot_Type_class[159],_X_,_W_)}
    function f(t)
     {function _V_(protocol){return matches_magic_prefix(t,protocol)}
      return caml_call2(Core_List[16],all,_V_)}
    var
     any_magic_prefix=caml_call2(Bin_prot_Type_class[159],f,bin_t[3]),
     _M_=Core[344],
     _N_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$5),0,_M_],0],
     _O_=caml_call1(Bin_prot_Shape[4][1],cst_src_protocol_version_heade$1),
     group$1=caml_call2(Bin_prot_Shape[6],_O_,_N_),
     _P_=caml_call1(Bin_prot_Shape[2][1],cst_t$6);
    caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_P_),0);
    var
     bin_size_t$0=Core[345],
     any_magic_prefix_from_six_byte=
      caml_call1(bin_size_t$0,Bounded_list_in_case_someone_s[12])
      +
      5
      |
      0;
    function bin_read_t$1(buf,pos_ref)
     {caml_call2(Bin_prot_Read[7],buf,pos_ref);
      return caml_call2(Bin_prot_Read[6],buf,pos_ref)}
    var bin_reader_t$0=[0,bin_read_t$1,Core_Int[74]];
    function _Q_(magic_number)
     {return caml_call1(caml_call1(Core_Map[38],by_magic_number),magic_number)}
    var
     any_magic_prefix_from_six_byte$0=
      caml_call2(Bin_prot_Type_class[159],_Q_,bin_reader_t$0);
    function _R_(param)
     {var
       bounded_list_bin_size=
        caml_call1(Core_Int[71],Bounded_list_in_case_someone_s[12]);
      if(! caml_call2(Core[90],bounded_list_bin_size,1))
       throw [0,Assert_failure,_U_];
      if(! caml_call2(Core[90],6,5 + bounded_list_bin_size | 0))
       throw [0,Assert_failure,_T_];
      if
       (caml_call2
         (Core[90],
          any_magic_prefix_from_six_byte,
          5 + bounded_list_bin_size | 0))
       return 0;
      throw [0,Assert_failure,_S_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_bin_sizes_are_not_changed_,
      0,
      cst_src_protocol_version_heade$2,
      137,
      0,
      737,
      _R_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_protocol_version_header$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Protocol_version_header$1);
    var
     Protocol_version_header$0=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       t_of_sexp$0,
       sexp_of_t$0,
       create_exn,
       negotiate,
       contains_magic_prefix,
       any_magic_prefix,
       any_magic_prefix_from_six_byte$0,
       any_magic_prefix_from_six_byte,
       [0,_w_]];
    caml_register_global
     (138,Protocol_version_header$0,"Protocol_version_header");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
