// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_div=runtime.caml_div,
     caml_equal=runtime.caml_equal,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_and=runtime.caml_int64_and,
     caml_int64_div=runtime.caml_int64_div,
     caml_int64_mul=runtime.caml_int64_mul,
     caml_int64_neg=runtime.caml_int64_neg,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_shift_left=runtime.caml_int64_shift_left,
     caml_int64_shift_right=runtime.caml_int64_shift_right,
     caml_int64_shift_right_unsigne=runtime.caml_int64_shift_right_unsigned,
     caml_int64_sub=runtime.caml_int64_sub,
     caml_int64_to_int32=runtime.caml_int64_to_int32,
     caml_int64_xor=runtime.caml_int64_xor,
     caml_lessequal=runtime.caml_lessequal,
     caml_lessthan=runtime.caml_lessthan,
     caml_mul=runtime.caml_mul,
     caml_notequal=runtime.caml_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    var
     global_data=runtime.caml_get_global_data(),
     int64$0=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     cst_float_bounds_are_not_finit=
      caml_string_of_jsbytes("float: bounds are not finite numbers"),
     cst_float_bounds_are_crossed=
      caml_string_of_jsbytes("float: bounds are crossed"),
     cst_int64_crossed_bounds=caml_string_of_jsbytes("int64: crossed bounds"),
     cst_splittable_random=caml_string_of_jsbytes("splittable_random"),
     golden_gamma=runtime.caml_int64_create_lo_mi_hi(4881429,7977343,40503),
     cst_src_splittable_random_ml=
      caml_string_of_jsbytes("src/splittable_random.ml"),
     cst_src_splittable_random_ml$0=
      caml_string_of_jsbytes("src/splittable_random.ml"),
     cst_let_int64_1L_in_fun_unit_f=
      caml_string_of_jsbytes
       ("let int64 = 1L in fun () -> unit_float_from_int64 int64"),
     cst_unit_float_from_int64=caml_string_of_jsbytes("unit_float_from_int64"),
     Base_Int=global_data.Base__Int,
     Assert_failure=global_data.Assert_failure,
     Base=global_data.Base,
     Base_Float=global_data.Base__Float,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Base_Int64=global_data.Base__Int64,
     Base_Int63=global_data.Base__Int63,
     Base_Error=global_data.Base__Error,
     Base_Random=global_data.Base__Random,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Base_Int32=global_data.Base__Int32,
     Base_Nativeint=global_data.Base__Nativeint;
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_splittable_random);
    var
     popcount=Base_Int64[47],
     _o_=[0,caml_string_of_jsbytes("src/splittable_random.ml"),289,6],
     _k_=[0,caml_string_of_jsbytes("hi")],
     _l_=[0,caml_string_of_jsbytes("lo")],
     _m_=[0,caml_string_of_jsbytes("hi")],
     _n_=[0,caml_string_of_jsbytes("lo")],
     _h_=[0,caml_string_of_jsbytes("hi")],
     _i_=[0,caml_string_of_jsbytes("lo")],
     _j_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _f_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _g_=runtime.caml_int64_create_lo_mi_hi(11184810,11184810,43690),
     _d_=runtime.caml_int64_create_lo_mi_hi(15001017,4680988,48984),
     _e_=runtime.caml_int64_create_lo_mi_hi(3215851,4832019,38096),
     _b_=runtime.caml_int64_create_lo_mi_hi(5606605,11524077,65361),
     _c_=runtime.caml_int64_create_lo_mi_hi(8776787,12189210,50382),
     _a_=runtime.caml_int64_create_lo_mi_hi(1,0,0);
    function of_int(seed){return [0,caml_int64_of_int32(seed),golden_gamma]}
    function copy(param)
     {var seed=param[1],odd_gamma=param[2];return [0,seed,odd_gamma]}
    function mix_bits(z,n)
     {return caml_int64_xor(z,caml_int64_shift_right_unsigne(z,n))}
    function mix64(z)
     {var
       z$0=caml_int64_mul(mix_bits(z,33),_b_),
       z$1=caml_int64_mul(mix_bits(z$0,33),_c_);
      return mix_bits(z$1,33)}
    function next_seed(t)
     {var next=caml_int64_add(t[1],t[2]);t[1] = next;return next}
    function of_seed_and_gamma(seed,gamma)
     {var
       seed$0=mix64(seed),
       z=caml_int64_mul(mix_bits(gamma,30),_d_),
       z$0=caml_int64_mul(mix_bits(z,27),_e_),
       z$1=caml_int64_or(mix_bits(z$0,31),_f_),
       n=
        caml_call1
         (popcount,caml_int64_xor(z$1,caml_int64_shift_right_unsigne(z$1,1))),
       odd_gamma=24 <= n?z$1:caml_int64_xor(z$1,_g_);
      return [0,seed$0,odd_gamma]}
    function random_int64(random_state)
     {return caml_call3
              (Base_Random[18][14],random_state,Base_Int64[61],Base_Int64[60])}
    function create(random_state)
     {var seed=random_int64(random_state),gamma=random_int64(random_state);
      return of_seed_and_gamma(seed,gamma)}
    function split(t)
     {var seed=next_seed(t),gamma=next_seed(t);
      return of_seed_and_gamma(seed,gamma)}
    function next_int64(t){return mix64(next_seed(t))}
    function perturb(t,salt)
     {var
       _by_=mix64(caml_int64_of_int32(salt)),
       next=caml_int64_add(t[1],_by_);
      t[1] = next;
      return 0}
    function bool(state)
     {var x=next_int64(state);return caml_equal(caml_int64_or(x,_a_),x)}
    function int64(state,lo,hi)
     {if(caml_greaterthan(lo,hi))
       {var
         _bu_=[0,[1,[0,_h_,[0,caml_call1(Base[133],hi),0]]],0],
         _bv_=[0,[1,[0,_i_,[0,caml_call1(Base[133],lo),0]]],_bu_],
         _bw_=
          [1,
           [0,caml_call1(Sexplib0_Sexp_conv[7],cst_int64_crossed_bounds),_bv_]];
        caml_call1(Base_Error[30],_bw_)}
      var maximum=caml_int64_sub(hi,lo);
      if(caml_equal(maximum,Base_Int64[60]))
       {var _bx_=Base_Int64[60];
        return caml_int64_add(caml_int64_and(next_int64(state),_bx_),lo)}
      if(caml_greaterequal(maximum,_j_))
       for(;;)
        {var
          _bs_=Base_Int64[60],
          draw$0=caml_int64_and(next_int64(state),_bs_),
          _bt_=caml_call1(Base_Int64[40],maximum),
          remainder=caml_call2(Base_Int64[34],draw$0,_bt_);
         if
          (caml_lessequal
            (caml_int64_sub(draw$0,remainder),
             caml_int64_sub(Base_Int64[60],maximum)))
          return caml_int64_add(remainder,lo)}
      for(;;)
       {var draw=next_int64(state);
        if(caml_lessequal(lo,draw) && caml_lessequal(draw,hi))return draw}}
    function int$0(state,lo,hi)
     {var lo$0=caml_int64_of_int32(lo),hi$0=caml_int64_of_int32(hi);
      return caml_int64_to_int32(int64(state,lo$0,hi$0))}
    function int32(state,lo,hi)
     {var lo$0=caml_int64_of_int32(lo),hi$0=caml_int64_of_int32(hi);
      return caml_int64_to_int32(int64(state,lo$0,hi$0))}
    function nativeint(state,lo,hi)
     {var
       lo$0=caml_call1(Base_Int64[80],lo),
       hi$0=caml_call1(Base_Int64[80],hi);
      return caml_int64_to_int32(int64(state,lo$0,hi$0))}
    function int63(state,lo,hi)
     {var
       lo$0=caml_call1(Base_Int63[79],lo),
       hi$0=caml_call1(Base_Int63[79],hi),
       _br_=int64(state,lo$0,hi$0);
      return caml_call1(Base_Int63[105],_br_)}
    var double_ulp=caml_call2(Base[195],2.,-53.);
    function unit_float_from_int64(int64)
     {var
       _bq_=
        caml_call1(Base_Int64[3],caml_int64_shift_right_unsigne(int64,11));
      return caml_call2(Base[192],_bq_,double_ulp)}
    function unit_float(state)
     {return unit_float_from_int64(next_int64(state))}
    function float$0(state,lo$1,hi$0)
     {var
       _bi_=caml_call1(Base_Float[84],lo$1),
       _bj_=_bi_?caml_call1(Base_Float[84],hi$0):_bi_;
      if(1 - _bj_)
       {var
         _bk_=[0,[1,[0,_k_,[0,caml_call1(Base[112],hi$0),0]]],0],
         _bl_=[0,[1,[0,_l_,[0,caml_call1(Base[112],lo$1),0]]],_bk_],
         _bm_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_float_bounds_are_not_finit),
            _bl_]];
        caml_call1(Base[202],_bm_)}
      if(caml_call2(Base_Float[12],lo$1,hi$0))
       {var
         _bn_=[0,[1,[0,_m_,[0,caml_call1(Base[112],hi$0),0]]],0],
         _bo_=[0,[1,[0,_n_,[0,caml_call1(Base[112],lo$1),0]]],_bn_],
         _bp_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_float_bounds_are_crossed),
            _bo_]];
        caml_call1(Base[202],_bp_)}
      var lo=lo$1,hi=hi$0;
      for(;;)
       {var range=caml_call2(Base[191],hi,lo);
        if(caml_call1(Base_Float[84],range))
         {var _bf_=unit_float(state),_bg_=caml_call2(Base[192],_bf_,range);
          return caml_call2(Base[190],lo,_bg_)}
        var
         _bh_=caml_call2(Base[190],hi,lo),
         lo$0=caml_call2(Base[193],_bh_,2.);
        if(bool(state)){var hi=lo$0;continue}
        var lo=lo$0}}
    if(Ppx_bench_lib_Benchmark_accumu[3])
     {var
       f=
        function(param)
         {return function(param){return unit_float_from_int64(int64$0)}};
      caml_call8
       (Ppx_bench_lib_Benchmark_accumu[5],
        cst_unit_float_from_int64,
        cst_let_int64_1L_in_fun_unit_f,
        cst_src_splittable_random_ml$0,
        cst_src_splittable_random_ml,
        278,
        0,
        99,
        [0,f])}
    function Make(M)
     {function bits_to_represent(t)
       {if(! caml_call2(M[12],t,M[38]))throw [0,Assert_failure,_o_];
        var t$0=[0,t],n=[0,0];
        for(;;)
         {if(! caml_call2(M[15],t$0[1],M[38]))return n[1];
          t$0[1] = caml_call2(M[73],t$0[1],1);
          caml_call1(Base_Int[51],n)}}
      function log_uniform(state,lo,hi)
       {var
         min_bits=bits_to_represent(lo),
         max_bits=bits_to_represent(hi),
         n=int$0(state,min_bits,max_bits),
         _ba_=caml_call2(M[72],M[39],n),
         _bb_=caml_call1(M[65],_ba_),
         _bc_=caml_call1(caml_call1(M[20],hi),_bb_);
        if(caml_call2(Base_Int[12],n,0))
         var _bd_=M[38];
        else
         var
          _a$_=caml_call1(Base_Int[41],n),
          _bd_=caml_call2(M[72],M[39],_a$_);
        var _be_=caml_call1(caml_call1(M[21],lo),_bd_);
        return caml_call3(M[96],state,_be_,_bc_)}
      return [0,log_uniform]}
    var
     t_sexp_grammar=Base_Int[1],
     of_float=Base_Int[2],
     to_float=Base_Int[3],
     of_int_exn=Base_Int[4],
     to_int_exn=Base_Int[5],
     hash_fold_t=Base_Int[6],
     hash=Base_Int[7],
     t_of_sexp=Base_Int[8],
     sexp_of_t=Base_Int[9],
     of_string=Base_Int[10],
     to_string=Base_Int[11],
     equal=Base_Int[12],
     compare=Base_Int[13],
     min=Base_Int[14],
     max=Base_Int[15],
     ascending=Base_Int[16],
     descending=Base_Int[17],
     between=Base_Int[18],
     clamp_exn=Base_Int[19],
     clamp=Base_Int[20],
     comparator=Base_Int[21],
     pp=Base_Int[22],
     hashable=Base_Int[23],
     is_positive=Base_Int[24],
     is_non_negative=Base_Int[25],
     is_negative=Base_Int[26],
     is_non_positive=Base_Int[27],
     sign=Base_Int[28],
     invariant=Base_Int[29],
     Hex=Base_Int[30],
     to_string_hum=Base_Int[31],
     one=Base_Int[32],
     minus_one=Base_Int[33],
     rem=Base_Int[34],
     round=Base_Int[35],
     round_towards_zero=Base_Int[36],
     round_down=Base_Int[37],
     round_up=Base_Int[38],
     round_nearest=Base_Int[39],
     succ=Base_Int[40],
     pred=Base_Int[41],
     pow=Base_Int[42],
     bit_and=Base_Int[43],
     bit_or=Base_Int[44],
     bit_xor=Base_Int[45],
     bit_not=Base_Int[46],
     popcount$0=Base_Int[47],
     shift_left=Base_Int[48],
     shift_right=Base_Int[49],
     decr=Base_Int[50],
     incr=Base_Int[51],
     of_int32_exn=Base_Int[52],
     to_int32_exn=Base_Int[53],
     of_int64_exn=Base_Int[54],
     to_int64=Base_Int[55],
     of_nativeint_exn=Base_Int[56],
     to_nativeint_exn=Base_Int[57],
     of_float_unchecked=Base_Int[58],
     num_bits=Base_Int[59],
     max_value=Base_Int[60],
     min_value=Base_Int[61],
     shift_right_logical=Base_Int[62],
     ceil_pow2=Base_Int[63],
     floor_pow2=Base_Int[64],
     ceil_log2=Base_Int[65],
     floor_log2=Base_Int[66],
     is_pow2=Base_Int[67],
     clz=Base_Int[68],
     ctz=Base_Int[69],
     O=Base_Int[70],
     symbol=Base_Int[71],
     lnot=Base_Int[72],
     abs=Base_Int[73],
     zero=Base_Int[74],
     symbol$0=Base_Int[75],
     symbol$1=Base_Int[76],
     symbol$2=Base_Int[77];
    function _p_(_a__,_a9_){return _a__ >>> _a9_ | 0}
    function _q_(_a8_,_a7_){return _a8_ >> _a7_}
    function _r_(_a6_,_a5_){return _a6_ << _a5_}
    var _s_=O[2];
    function _t_(_a4_,_a3_){return _a4_ ^ _a3_}
    function _u_(_a2_,_a1_){return _a2_ | _a1_}
    function _v_(_a0_,_aZ_){return _a0_ & _aZ_}
    var _w_=O[7],_x_=O[6],_y_=O[5],_z_=O[4];
    function _A_(_aY_){return - _aY_ | 0}
    var _B_=O[3];
    function _C_(_aX_,_aW_){return _aX_ !== _aW_?1:0}
    function _D_(_aV_,_aU_){return _aV_ < _aU_?1:0}
    function _E_(_aT_,_aS_){return _aS_ < _aT_?1:0}
    function _F_(_aR_,_aQ_){return _aR_ === _aQ_?1:0}
    function _G_(_aP_,_aO_){return _aP_ <= _aO_?1:0}
    function _H_(_aN_,_aM_){return _aM_ <= _aN_?1:0}
    var _I_=O[1];
    function _J_(_aL_){return - _aL_ | 0}
    var _K_=caml_div,_L_=caml_mul;
    function _M_(_aK_,_aJ_){return _aK_ - _aJ_ | 0}
    var
     _N_=
      [0,
       function(_aI_,_aH_){return _aI_ + _aH_ | 0},
       _M_,
       _L_,
       _K_,
       _J_,
       _I_,
       _H_,
       _G_,
       _F_,
       _E_,
       _D_,
       _C_,
       _B_,
       _A_,
       _z_,
       _y_,
       _x_,
       _w_,
       _v_,
       _u_,
       _t_,
       _s_,
       _r_,
       _q_,
       _p_];
    function _O_(_aG_,_aF_){return _aG_ >>> _aF_ | 0}
    function _P_(_aE_,_aD_){return _aE_ >> _aD_}
    function _Q_(_aC_,_aB_){return _aC_ << _aB_}
    function _R_(_aA_,_az_){return _aA_ ^ _az_}
    function _S_(_ay_,_ax_){return _ay_ | _ax_}
    function _T_(_aw_,_av_){return _aw_ & _av_}
    var _U_=caml_div;
    function _V_(_au_){return - _au_ | 0}
    function _W_(_at_){return - _at_ | 0}
    var _X_=caml_mul;
    function _Y_(_as_,_ar_){return _as_ - _ar_ | 0}
    function _Z_(_aq_,_ap_){return _aq_ + _ap_ | 0}
    function ___(_ao_,_an_){return _ao_ !== _an_?1:0}
    function _$_(_am_,_al_){return _am_ < _al_?1:0}
    function _aa_(_ak_,_aj_){return _aj_ < _ak_?1:0}
    function _ab_(_ai_,_ah_){return _ai_ === _ah_?1:0}
    function _ac_(_ag_,_af_){return _ag_ <= _af_?1:0}
    var
     For_int=
      Make
       ([0,
         t_sexp_grammar,
         of_float,
         to_float,
         of_int_exn,
         to_int_exn,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         function(_ae_,_ad_){return _ad_ <= _ae_?1:0},
         _ac_,
         _ab_,
         _aa_,
         _$_,
         ___,
         equal,
         compare,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         comparator,
         pp,
         hashable,
         is_positive,
         is_non_negative,
         is_negative,
         is_non_positive,
         sign,
         invariant,
         Hex,
         to_string_hum,
         zero,
         one,
         minus_one,
         _Z_,
         _Y_,
         _X_,
         symbol,
         _W_,
         _V_,
         symbol$1,
         symbol$0,
         _U_,
         rem,
         symbol$2,
         _T_,
         _S_,
         _R_,
         lnot,
         _Q_,
         _P_,
         round,
         round_towards_zero,
         round_down,
         round_up,
         round_nearest,
         abs,
         succ,
         pred,
         pow,
         bit_and,
         bit_or,
         bit_xor,
         bit_not,
         popcount$0,
         shift_left,
         shift_right,
         decr,
         incr,
         of_int32_exn,
         to_int32_exn,
         of_int64_exn,
         to_int64,
         of_nativeint_exn,
         to_nativeint_exn,
         of_float_unchecked,
         num_bits,
         max_value,
         min_value,
         _O_,
         shift_right_logical,
         ceil_pow2,
         floor_pow2,
         ceil_log2,
         floor_log2,
         is_pow2,
         clz,
         ctz,
         _N_,
         int$0]),
     t_sexp_grammar$0=Base_Int32[1],
     of_float$0=Base_Int32[2],
     to_float$0=Base_Int32[3],
     of_int_exn$0=Base_Int32[4],
     to_int_exn$0=Base_Int32[5],
     hash_fold_t$0=Base_Int32[6],
     hash$0=Base_Int32[7],
     t_of_sexp$0=Base_Int32[8],
     sexp_of_t$0=Base_Int32[9],
     of_string$0=Base_Int32[10],
     to_string$0=Base_Int32[11],
     symbol$3=Base_Int32[12],
     symbol$4=Base_Int32[13],
     symbol$5=Base_Int32[14],
     symbol$6=Base_Int32[15],
     symbol$7=Base_Int32[16],
     symbol$8=Base_Int32[17],
     equal$0=Base_Int32[18],
     compare$0=Base_Int32[19],
     min$0=Base_Int32[20],
     max$0=Base_Int32[21],
     ascending$0=Base_Int32[22],
     descending$0=Base_Int32[23],
     between$0=Base_Int32[24],
     clamp_exn$0=Base_Int32[25],
     clamp$0=Base_Int32[26],
     comparator$0=Base_Int32[27],
     pp$0=Base_Int32[28],
     hashable$0=Base_Int32[29],
     is_positive$0=Base_Int32[30],
     is_non_negative$0=Base_Int32[31],
     is_negative$0=Base_Int32[32],
     is_non_positive$0=Base_Int32[33],
     sign$0=Base_Int32[34],
     invariant$0=Base_Int32[35],
     Hex$0=Base_Int32[36],
     to_string_hum$0=Base_Int32[37],
     zero$0=Base_Int32[38],
     one$0=Base_Int32[39],
     minus_one$0=Base_Int32[40],
     symbol$9=Base_Int32[41],
     symbol$10=Base_Int32[42],
     symbol$11=Base_Int32[43],
     symbol$12=Base_Int32[44],
     neg=Base_Int32[45],
     symbol$13=Base_Int32[46],
     symbol$14=Base_Int32[47],
     symbol$15=Base_Int32[48],
     symbol$16=Base_Int32[49],
     rem$0=Base_Int32[50],
     symbol$17=Base_Int32[51],
     land=Base_Int32[52],
     lor=Base_Int32[53],
     lxor=Base_Int32[54],
     lnot$0=Base_Int32[55],
     lsl=Base_Int32[56],
     asr=Base_Int32[57],
     round$0=Base_Int32[58],
     round_towards_zero$0=Base_Int32[59],
     round_down$0=Base_Int32[60],
     round_up$0=Base_Int32[61],
     round_nearest$0=Base_Int32[62],
     abs$0=Base_Int32[63],
     succ$0=Base_Int32[64],
     pred$0=Base_Int32[65],
     pow$0=Base_Int32[66],
     bit_and$0=Base_Int32[67],
     bit_or$0=Base_Int32[68],
     bit_xor$0=Base_Int32[69],
     bit_not$0=Base_Int32[70],
     popcount$1=Base_Int32[71],
     shift_left$0=Base_Int32[72],
     shift_right$0=Base_Int32[73],
     decr$0=Base_Int32[74],
     incr$0=Base_Int32[75],
     of_int32_exn$0=Base_Int32[76],
     to_int32_exn$0=Base_Int32[77],
     of_int64_exn$0=Base_Int32[78],
     to_int64$0=Base_Int32[79],
     of_nativeint_exn$0=Base_Int32[80],
     to_nativeint_exn$0=Base_Int32[81],
     of_float_unchecked$0=Base_Int32[82],
     num_bits$0=Base_Int32[83],
     max_value$0=Base_Int32[84],
     min_value$0=Base_Int32[85],
     lsr=Base_Int32[86],
     shift_right_logical$0=Base_Int32[87],
     ceil_pow2$0=Base_Int32[88],
     floor_pow2$0=Base_Int32[89],
     ceil_log2$0=Base_Int32[90],
     floor_log2$0=Base_Int32[91],
     is_pow2$0=Base_Int32[92],
     clz$0=Base_Int32[93],
     ctz$0=Base_Int32[94],
     O$0=Base_Int32[95],
     For_int32=
      Make
       ([0,
         t_sexp_grammar$0,
         of_float$0,
         to_float$0,
         of_int_exn$0,
         to_int_exn$0,
         hash_fold_t$0,
         hash$0,
         t_of_sexp$0,
         sexp_of_t$0,
         of_string$0,
         to_string$0,
         symbol$3,
         symbol$4,
         symbol$5,
         symbol$6,
         symbol$7,
         symbol$8,
         equal$0,
         compare$0,
         min$0,
         max$0,
         ascending$0,
         descending$0,
         between$0,
         clamp_exn$0,
         clamp$0,
         comparator$0,
         pp$0,
         hashable$0,
         is_positive$0,
         is_non_negative$0,
         is_negative$0,
         is_non_positive$0,
         sign$0,
         invariant$0,
         Hex$0,
         to_string_hum$0,
         zero$0,
         one$0,
         minus_one$0,
         symbol$9,
         symbol$10,
         symbol$11,
         symbol$12,
         neg,
         symbol$13,
         symbol$14,
         symbol$15,
         symbol$16,
         rem$0,
         symbol$17,
         land,
         lor,
         lxor,
         lnot$0,
         lsl,
         asr,
         round$0,
         round_towards_zero$0,
         round_down$0,
         round_up$0,
         round_nearest$0,
         abs$0,
         succ$0,
         pred$0,
         pow$0,
         bit_and$0,
         bit_or$0,
         bit_xor$0,
         bit_not$0,
         popcount$1,
         shift_left$0,
         shift_right$0,
         decr$0,
         incr$0,
         of_int32_exn$0,
         to_int32_exn$0,
         of_int64_exn$0,
         to_int64$0,
         of_nativeint_exn$0,
         to_nativeint_exn$0,
         of_float_unchecked$0,
         num_bits$0,
         max_value$0,
         min_value$0,
         lsr,
         shift_right_logical$0,
         ceil_pow2$0,
         floor_pow2$0,
         ceil_log2$0,
         floor_log2$0,
         is_pow2$0,
         clz$0,
         ctz$0,
         O$0,
         int32]),
     t_sexp_grammar$1=Base_Int63[1],
     of_float$1=Base_Int63[2],
     to_float$1=Base_Int63[3],
     of_int_exn$1=Base_Int63[4],
     to_int_exn$1=Base_Int63[5],
     hash_fold_t$1=Base_Int63[6],
     hash$1=Base_Int63[7],
     t_of_sexp$1=Base_Int63[8],
     sexp_of_t$1=Base_Int63[9],
     of_string$1=Base_Int63[10],
     to_string$1=Base_Int63[11],
     symbol$18=Base_Int63[12],
     symbol$19=Base_Int63[13],
     symbol$20=Base_Int63[14],
     symbol$21=Base_Int63[15],
     symbol$22=Base_Int63[16],
     symbol$23=Base_Int63[17],
     equal$1=Base_Int63[18],
     compare$1=Base_Int63[19],
     min$1=Base_Int63[20],
     max$1=Base_Int63[21],
     ascending$1=Base_Int63[22],
     descending$1=Base_Int63[23],
     between$1=Base_Int63[24],
     clamp_exn$1=Base_Int63[25],
     clamp$1=Base_Int63[26],
     comparator$1=Base_Int63[27],
     pp$1=Base_Int63[28],
     hashable$1=Base_Int63[29],
     is_positive$1=Base_Int63[30],
     is_non_negative$1=Base_Int63[31],
     is_negative$1=Base_Int63[32],
     is_non_positive$1=Base_Int63[33],
     sign$1=Base_Int63[34],
     invariant$1=Base_Int63[35],
     Hex$1=Base_Int63[36],
     to_string_hum$1=Base_Int63[37],
     zero$1=Base_Int63[38],
     one$1=Base_Int63[39],
     minus_one$1=Base_Int63[40],
     symbol$24=Base_Int63[41],
     symbol$25=Base_Int63[42],
     symbol$26=Base_Int63[43],
     symbol$27=Base_Int63[44],
     neg$0=Base_Int63[45],
     symbol$28=Base_Int63[46],
     symbol$29=Base_Int63[47],
     symbol$30=Base_Int63[48],
     symbol$31=Base_Int63[49],
     rem$1=Base_Int63[50],
     symbol$32=Base_Int63[51],
     land$0=Base_Int63[52],
     lor$0=Base_Int63[53],
     lxor$0=Base_Int63[54],
     lnot$1=Base_Int63[55],
     lsl$0=Base_Int63[56],
     asr$0=Base_Int63[57],
     round$1=Base_Int63[58],
     round_towards_zero$1=Base_Int63[59],
     round_down$1=Base_Int63[60],
     round_up$1=Base_Int63[61],
     round_nearest$1=Base_Int63[62],
     abs$1=Base_Int63[63],
     succ$1=Base_Int63[64],
     pred$1=Base_Int63[65],
     pow$1=Base_Int63[66],
     bit_and$1=Base_Int63[67],
     bit_or$1=Base_Int63[68],
     bit_xor$1=Base_Int63[69],
     bit_not$1=Base_Int63[70],
     popcount$2=Base_Int63[71],
     shift_left$1=Base_Int63[72],
     shift_right$1=Base_Int63[73],
     decr$1=Base_Int63[74],
     incr$1=Base_Int63[75],
     of_int32_exn$1=Base_Int63[76],
     to_int32_exn$1=Base_Int63[77],
     of_int64_exn$1=Base_Int63[78],
     to_int64$1=Base_Int63[79],
     of_nativeint_exn$1=Base_Int63[80],
     to_nativeint_exn$1=Base_Int63[81],
     of_float_unchecked$1=Base_Int63[82],
     num_bits$1=Base_Int63[83],
     max_value$1=Base_Int63[84],
     min_value$1=Base_Int63[85],
     lsr$0=Base_Int63[86],
     shift_right_logical$1=Base_Int63[87],
     ceil_pow2$1=Base_Int63[88],
     floor_pow2$1=Base_Int63[89],
     ceil_log2$1=Base_Int63[90],
     is_pow2$1=Base_Int63[91],
     clz$1=Base_Int63[92],
     ctz$1=Base_Int63[93],
     O$1=Base_Int63[94],
     floor_log2$1=Base_Int63[113],
     For_int63=
      Make
       ([0,
         t_sexp_grammar$1,
         of_float$1,
         to_float$1,
         of_int_exn$1,
         to_int_exn$1,
         hash_fold_t$1,
         hash$1,
         t_of_sexp$1,
         sexp_of_t$1,
         of_string$1,
         to_string$1,
         symbol$18,
         symbol$19,
         symbol$20,
         symbol$21,
         symbol$22,
         symbol$23,
         equal$1,
         compare$1,
         min$1,
         max$1,
         ascending$1,
         descending$1,
         between$1,
         clamp_exn$1,
         clamp$1,
         comparator$1,
         pp$1,
         hashable$1,
         is_positive$1,
         is_non_negative$1,
         is_negative$1,
         is_non_positive$1,
         sign$1,
         invariant$1,
         Hex$1,
         to_string_hum$1,
         zero$1,
         one$1,
         minus_one$1,
         symbol$24,
         symbol$25,
         symbol$26,
         symbol$27,
         neg$0,
         symbol$28,
         symbol$29,
         symbol$30,
         symbol$31,
         rem$1,
         symbol$32,
         land$0,
         lor$0,
         lxor$0,
         lnot$1,
         lsl$0,
         asr$0,
         round$1,
         round_towards_zero$1,
         round_down$1,
         round_up$1,
         round_nearest$1,
         abs$1,
         succ$1,
         pred$1,
         pow$1,
         bit_and$1,
         bit_or$1,
         bit_xor$1,
         bit_not$1,
         popcount$2,
         shift_left$1,
         shift_right$1,
         decr$1,
         incr$1,
         of_int32_exn$1,
         to_int32_exn$1,
         of_int64_exn$1,
         to_int64$1,
         of_nativeint_exn$1,
         to_nativeint_exn$1,
         of_float_unchecked$1,
         num_bits$1,
         max_value$1,
         min_value$1,
         lsr$0,
         shift_right_logical$1,
         ceil_pow2$1,
         floor_pow2$1,
         ceil_log2$1,
         floor_log2$1,
         is_pow2$1,
         clz$1,
         ctz$1,
         O$1,
         int63]),
     t_sexp_grammar$2=Base_Int64[1],
     of_float$2=Base_Int64[2],
     to_float$2=Base_Int64[3],
     of_int_exn$2=Base_Int64[4],
     to_int_exn$2=Base_Int64[5],
     hash_fold_t$2=Base_Int64[6],
     hash$2=Base_Int64[7],
     t_of_sexp$2=Base_Int64[8],
     sexp_of_t$2=Base_Int64[9],
     of_string$2=Base_Int64[10],
     to_string$2=Base_Int64[11],
     equal$2=Base_Int64[12],
     compare$2=Base_Int64[13],
     min$2=Base_Int64[14],
     max$2=Base_Int64[15],
     ascending$2=Base_Int64[16],
     descending$2=Base_Int64[17],
     between$2=Base_Int64[18],
     clamp_exn$2=Base_Int64[19],
     clamp$2=Base_Int64[20],
     comparator$2=Base_Int64[21],
     pp$2=Base_Int64[22],
     hashable$2=Base_Int64[23],
     is_positive$2=Base_Int64[24],
     is_non_negative$2=Base_Int64[25],
     is_negative$2=Base_Int64[26],
     is_non_positive$2=Base_Int64[27],
     sign$2=Base_Int64[28],
     invariant$2=Base_Int64[29],
     Hex$2=Base_Int64[30],
     to_string_hum$2=Base_Int64[31],
     one$2=Base_Int64[32],
     minus_one$2=Base_Int64[33],
     rem$2=Base_Int64[34],
     round$2=Base_Int64[35],
     round_towards_zero$2=Base_Int64[36],
     round_down$2=Base_Int64[37],
     round_up$2=Base_Int64[38],
     round_nearest$2=Base_Int64[39],
     succ$2=Base_Int64[40],
     pred$2=Base_Int64[41],
     pow$2=Base_Int64[42],
     bit_and$2=Base_Int64[43],
     bit_or$2=Base_Int64[44],
     bit_xor$2=Base_Int64[45],
     bit_not$2=Base_Int64[46],
     popcount$3=Base_Int64[47],
     shift_left$2=Base_Int64[48],
     shift_right$2=Base_Int64[49],
     decr$2=Base_Int64[50],
     incr$2=Base_Int64[51],
     of_int32_exn$2=Base_Int64[52],
     to_int32_exn$2=Base_Int64[53],
     of_int64_exn$2=Base_Int64[54],
     to_int64$2=Base_Int64[55],
     of_nativeint_exn$2=Base_Int64[56],
     to_nativeint_exn$2=Base_Int64[57],
     of_float_unchecked$2=Base_Int64[58],
     num_bits$2=Base_Int64[59],
     max_value$2=Base_Int64[60],
     min_value$2=Base_Int64[61],
     shift_right_logical$2=Base_Int64[62],
     ceil_pow2$2=Base_Int64[63],
     floor_pow2$2=Base_Int64[64],
     ceil_log2$2=Base_Int64[65],
     floor_log2$2=Base_Int64[66],
     is_pow2$2=Base_Int64[67],
     clz$2=Base_Int64[68],
     ctz$2=Base_Int64[69],
     O$2=Base_Int64[70],
     symbol$33=Base_Int64[71],
     lnot$2=Base_Int64[72],
     abs$2=Base_Int64[73],
     zero$2=Base_Int64[74],
     symbol$34=Base_Int64[75],
     symbol$35=Base_Int64[76],
     symbol$36=Base_Int64[77],
     For_int64=
      Make
       ([0,
         t_sexp_grammar$2,
         of_float$2,
         to_float$2,
         of_int_exn$2,
         to_int_exn$2,
         hash_fold_t$2,
         hash$2,
         t_of_sexp$2,
         sexp_of_t$2,
         of_string$2,
         to_string$2,
         caml_greaterequal,
         caml_lessequal,
         caml_equal,
         caml_greaterthan,
         caml_lessthan,
         caml_notequal,
         equal$2,
         compare$2,
         min$2,
         max$2,
         ascending$2,
         descending$2,
         between$2,
         clamp_exn$2,
         clamp$2,
         comparator$2,
         pp$2,
         hashable$2,
         is_positive$2,
         is_non_negative$2,
         is_negative$2,
         is_non_positive$2,
         sign$2,
         invariant$2,
         Hex$2,
         to_string_hum$2,
         zero$2,
         one$2,
         minus_one$2,
         caml_int64_add,
         caml_int64_sub,
         caml_int64_mul,
         symbol$33,
         caml_int64_neg,
         caml_int64_neg,
         symbol$35,
         symbol$34,
         caml_int64_div,
         rem$2,
         symbol$36,
         caml_int64_and,
         caml_int64_or,
         caml_int64_xor,
         lnot$2,
         caml_int64_shift_left,
         caml_int64_shift_right,
         round$2,
         round_towards_zero$2,
         round_down$2,
         round_up$2,
         round_nearest$2,
         abs$2,
         succ$2,
         pred$2,
         pow$2,
         bit_and$2,
         bit_or$2,
         bit_xor$2,
         bit_not$2,
         popcount$3,
         shift_left$2,
         shift_right$2,
         decr$2,
         incr$2,
         of_int32_exn$2,
         to_int32_exn$2,
         of_int64_exn$2,
         to_int64$2,
         of_nativeint_exn$2,
         to_nativeint_exn$2,
         of_float_unchecked$2,
         num_bits$2,
         max_value$2,
         min_value$2,
         caml_int64_shift_right_unsigne,
         shift_right_logical$2,
         ceil_pow2$2,
         floor_pow2$2,
         ceil_log2$2,
         floor_log2$2,
         is_pow2$2,
         clz$2,
         ctz$2,
         [0,
          caml_int64_add,
          caml_int64_sub,
          caml_int64_mul,
          caml_int64_div,
          caml_int64_neg,
          O$2[1],
          caml_greaterequal,
          caml_lessequal,
          caml_equal,
          caml_greaterthan,
          caml_lessthan,
          caml_notequal,
          O$2[3],
          caml_int64_neg,
          O$2[4],
          O$2[5],
          O$2[6],
          O$2[7],
          caml_int64_and,
          caml_int64_or,
          caml_int64_xor,
          O$2[2],
          caml_int64_shift_left,
          caml_int64_shift_right,
          caml_int64_shift_right_unsigne],
         int64]),
     t_sexp_grammar$3=Base_Nativeint[1],
     of_float$3=Base_Nativeint[2],
     to_float$3=Base_Nativeint[3],
     of_int_exn$3=Base_Nativeint[4],
     to_int_exn$3=Base_Nativeint[5],
     hash_fold_t$3=Base_Nativeint[6],
     hash$3=Base_Nativeint[7],
     t_of_sexp$3=Base_Nativeint[8],
     sexp_of_t$3=Base_Nativeint[9],
     of_string$3=Base_Nativeint[10],
     to_string$3=Base_Nativeint[11],
     symbol$37=Base_Nativeint[12],
     symbol$38=Base_Nativeint[13],
     symbol$39=Base_Nativeint[14],
     symbol$40=Base_Nativeint[15],
     symbol$41=Base_Nativeint[16],
     symbol$42=Base_Nativeint[17],
     equal$3=Base_Nativeint[18],
     compare$3=Base_Nativeint[19],
     min$3=Base_Nativeint[20],
     max$3=Base_Nativeint[21],
     ascending$3=Base_Nativeint[22],
     descending$3=Base_Nativeint[23],
     between$3=Base_Nativeint[24],
     clamp_exn$3=Base_Nativeint[25],
     clamp$3=Base_Nativeint[26],
     comparator$3=Base_Nativeint[27],
     pp$3=Base_Nativeint[28],
     hashable$3=Base_Nativeint[29],
     is_positive$3=Base_Nativeint[30],
     is_non_negative$3=Base_Nativeint[31],
     is_negative$3=Base_Nativeint[32],
     is_non_positive$3=Base_Nativeint[33],
     sign$3=Base_Nativeint[34],
     invariant$3=Base_Nativeint[35],
     Hex$3=Base_Nativeint[36],
     to_string_hum$3=Base_Nativeint[37],
     zero$3=Base_Nativeint[38],
     one$3=Base_Nativeint[39],
     minus_one$3=Base_Nativeint[40],
     symbol$43=Base_Nativeint[41],
     symbol$44=Base_Nativeint[42],
     symbol$45=Base_Nativeint[43],
     symbol$46=Base_Nativeint[44],
     neg$1=Base_Nativeint[45],
     symbol$47=Base_Nativeint[46],
     symbol$48=Base_Nativeint[47],
     symbol$49=Base_Nativeint[48],
     symbol$50=Base_Nativeint[49],
     rem$3=Base_Nativeint[50],
     symbol$51=Base_Nativeint[51],
     land$1=Base_Nativeint[52],
     lor$1=Base_Nativeint[53],
     lxor$1=Base_Nativeint[54],
     lnot$3=Base_Nativeint[55],
     lsl$1=Base_Nativeint[56],
     asr$1=Base_Nativeint[57],
     round$3=Base_Nativeint[58],
     round_towards_zero$3=Base_Nativeint[59],
     round_down$3=Base_Nativeint[60],
     round_up$3=Base_Nativeint[61],
     round_nearest$3=Base_Nativeint[62],
     abs$3=Base_Nativeint[63],
     succ$3=Base_Nativeint[64],
     pred$3=Base_Nativeint[65],
     pow$3=Base_Nativeint[66],
     bit_and$3=Base_Nativeint[67],
     bit_or$3=Base_Nativeint[68],
     bit_xor$3=Base_Nativeint[69],
     bit_not$3=Base_Nativeint[70],
     popcount$4=Base_Nativeint[71],
     shift_left$3=Base_Nativeint[72],
     shift_right$3=Base_Nativeint[73],
     decr$3=Base_Nativeint[74],
     incr$3=Base_Nativeint[75],
     of_int32_exn$3=Base_Nativeint[76],
     to_int32_exn$3=Base_Nativeint[77],
     of_int64_exn$3=Base_Nativeint[78],
     to_int64$3=Base_Nativeint[79],
     of_nativeint_exn$3=Base_Nativeint[80],
     to_nativeint_exn$3=Base_Nativeint[81],
     of_float_unchecked$3=Base_Nativeint[82],
     num_bits$3=Base_Nativeint[83],
     max_value$3=Base_Nativeint[84],
     min_value$3=Base_Nativeint[85],
     lsr$1=Base_Nativeint[86],
     shift_right_logical$3=Base_Nativeint[87],
     ceil_pow2$3=Base_Nativeint[88],
     floor_pow2$3=Base_Nativeint[89],
     ceil_log2$3=Base_Nativeint[90],
     floor_log2$3=Base_Nativeint[91],
     is_pow2$3=Base_Nativeint[92],
     clz$3=Base_Nativeint[93],
     ctz$3=Base_Nativeint[94],
     O$3=Base_Nativeint[95],
     For_nativeint=
      Make
       ([0,
         t_sexp_grammar$3,
         of_float$3,
         to_float$3,
         of_int_exn$3,
         to_int_exn$3,
         hash_fold_t$3,
         hash$3,
         t_of_sexp$3,
         sexp_of_t$3,
         of_string$3,
         to_string$3,
         symbol$37,
         symbol$38,
         symbol$39,
         symbol$40,
         symbol$41,
         symbol$42,
         equal$3,
         compare$3,
         min$3,
         max$3,
         ascending$3,
         descending$3,
         between$3,
         clamp_exn$3,
         clamp$3,
         comparator$3,
         pp$3,
         hashable$3,
         is_positive$3,
         is_non_negative$3,
         is_negative$3,
         is_non_positive$3,
         sign$3,
         invariant$3,
         Hex$3,
         to_string_hum$3,
         zero$3,
         one$3,
         minus_one$3,
         symbol$43,
         symbol$44,
         symbol$45,
         symbol$46,
         neg$1,
         symbol$47,
         symbol$48,
         symbol$49,
         symbol$50,
         rem$3,
         symbol$51,
         land$1,
         lor$1,
         lxor$1,
         lnot$3,
         lsl$1,
         asr$1,
         round$3,
         round_towards_zero$3,
         round_down$3,
         round_up$3,
         round_nearest$3,
         abs$3,
         succ$3,
         pred$3,
         pow$3,
         bit_and$3,
         bit_or$3,
         bit_xor$3,
         bit_not$3,
         popcount$4,
         shift_left$3,
         shift_right$3,
         decr$3,
         incr$3,
         of_int32_exn$3,
         to_int32_exn$3,
         of_int64_exn$3,
         to_int64$3,
         of_nativeint_exn$3,
         to_nativeint_exn$3,
         of_float_unchecked$3,
         num_bits$3,
         max_value$3,
         min_value$3,
         lsr$1,
         shift_right_logical$3,
         ceil_pow2$3,
         floor_pow2$3,
         ceil_log2$3,
         floor_log2$3,
         is_pow2$3,
         clz$3,
         ctz$3,
         O$3,
         nativeint]),
     int$1=For_int[1],
     int32$0=For_int32[1],
     int63$0=For_int63[1],
     int64$1=For_int64[1],
     nativeint$0=For_nativeint[1];
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    var
     Splittable_random=
      [0,
       [0,create,of_int,perturb,copy,split],
       bool,
       int$0,
       int32,
       int63,
       int64,
       nativeint,
       float$0,
       unit_float,
       [0,int$1,int32$0,int63$0,int64$1,nativeint$0]];
    runtime.caml_register_global(40,Splittable_random,"Splittable_random");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
