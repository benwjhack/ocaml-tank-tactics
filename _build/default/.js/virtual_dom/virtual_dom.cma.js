// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_js_from_string=runtime.caml_js_from_string,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_src_dom_float_ml$0=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$1=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$2=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$3=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$4=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$5=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$6=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_Virtual_dom_Dom_float=
      caml_string_of_jsbytes("Virtual_dom__Dom_float"),
     cst_virtual_dom=caml_string_of_jsbytes("virtual_dom"),
     cst_src_dom_float_ml=caml_string_of_jsbytes("src/dom_float.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_virtual_dom$0=caml_string_of_jsbytes("virtual_dom"),
     cst_src_dom_float_ml$7=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$8=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$9=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$10=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$11=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$12=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$13=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$14=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$15=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$16=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$17=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$18=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$19=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$20=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$21=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_src_dom_float_ml$22=caml_string_of_jsbytes("src/dom_float.ml"),
     cst_e40141a8c595182b4ac2018c0f=
      caml_string_of_jsbytes("e40141a8c595182b4ac2018c0f4b5904"),
     cst_virtual_dom$1=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Dom_float$0=
      caml_string_of_jsbytes("Virtual_dom__Dom_float"),
     cst_Virtual_dom_Effect=caml_string_of_jsbytes("Virtual_dom__Effect"),
     cst_virtual_dom$2=caml_string_of_jsbytes("virtual_dom"),
     cst_src_effect_ml=caml_string_of_jsbytes("src/effect.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_virtual_dom$3=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Effect_Viewpor=
      caml_string_of_jsbytes("Virtual_dom__Effect.Viewport_changed"),
     cst_Virtual_dom_Effect_Stop_pr=
      caml_string_of_jsbytes("Virtual_dom__Effect.Stop_propagation"),
     cst_Virtual_dom_Effect_Stop_im=
      caml_string_of_jsbytes("Virtual_dom__Effect.Stop_immediate_propagation"),
     cst_Virtual_dom_Effect_Prevent=
      caml_string_of_jsbytes("Virtual_dom__Effect.Prevent_default"),
     cst_virtual_dom$4=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Effect$0=caml_string_of_jsbytes("Virtual_dom__Effect"),
     cst_Virtual_dom_Gen_js_api=
      caml_string_of_jsbytes("Virtual_dom__Gen_js_api"),
     cst_virtual_dom$5=caml_string_of_jsbytes("virtual_dom"),
     cst_src_gen_js_api_ml=caml_string_of_jsbytes("src/gen_js_api.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_virtual_dom$6=caml_string_of_jsbytes("virtual_dom"),
     cst_virtual_dom$7=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Gen_js_api$0=
      caml_string_of_jsbytes("Virtual_dom__Gen_js_api"),
     cst_Virtual_dom_Hooks_intf=
      caml_string_of_jsbytes("Virtual_dom__Hooks_intf"),
     cst_virtual_dom$8=caml_string_of_jsbytes("virtual_dom"),
     cst_src_hooks_intf_ml=caml_string_of_jsbytes("src/hooks_intf.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_virtual_dom$9=caml_string_of_jsbytes("virtual_dom"),
     cst_virtual_dom$10=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Hooks_intf$0=
      caml_string_of_jsbytes("Virtual_dom__Hooks_intf"),
     cst$4=caml_string_of_jsbytes(""),
     cst$5=caml_string_of_jsbytes(""),
     cst_hooks_do_not_have_the_same=
      caml_string_of_jsbytes
       ("hooks do not have the same type, so they cannot be combined; taking the second of the two"),
     cst_Virtual_dom_Hooks=caml_string_of_jsbytes("Virtual_dom__Hooks"),
     cst_virtual_dom$11=caml_string_of_jsbytes("virtual_dom"),
     cst_src_hooks_ml=caml_string_of_jsbytes("src/hooks.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_virtual_dom$12=caml_string_of_jsbytes("virtual_dom"),
     cst_virtual_dom$13=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Hooks$0=caml_string_of_jsbytes("Virtual_dom__Hooks"),
     cst_Map=caml_string_of_jsbytes("Map"),
     cst_Virtual_dom_Js_map=caml_string_of_jsbytes("Virtual_dom__Js_map"),
     cst_virtual_dom$14=caml_string_of_jsbytes("virtual_dom"),
     cst_src_js_map_ml=caml_string_of_jsbytes("src/js_map.ml"),
     cst$6=caml_string_of_jsbytes(""),
     cst_virtual_dom$15=caml_string_of_jsbytes("virtual_dom"),
     cst_virtual_dom$16=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Js_map$0=caml_string_of_jsbytes("Virtual_dom__Js_map"),
     cst_BUG_element_state_not_foun=
      caml_string_of_jsbytes("BUG: element state not found"),
     cst_VirtualDom$4=caml_string_of_jsbytes("VirtualDom"),
     cst_VirtualDom$3=caml_string_of_jsbytes("VirtualDom"),
     cst_VirtualDom$2=caml_string_of_jsbytes("VirtualDom"),
     cst_svg=caml_string_of_jsbytes("svg"),
     cst_VirtualDom$1=caml_string_of_jsbytes("VirtualDom"),
     cst_VText=caml_string_of_jsbytes("VText"),
     cst_VirtualDom$0=caml_string_of_jsbytes("VirtualDom"),
     cst_VNode=caml_string_of_jsbytes("VNode"),
     cst_VirtualDom=caml_string_of_jsbytes("VirtualDom"),
     cst_attributes$1=caml_string_of_jsbytes("attributes"),
     cst_attributes$2=caml_string_of_jsbytes("attributes"),
     cst_attributes$3=caml_string_of_jsbytes("attributes"),
     cst_attributes=caml_string_of_jsbytes("attributes"),
     cst_attributes$0=caml_string_of_jsbytes("attributes"),
     cst_Virtual_dom_Raw=caml_string_of_jsbytes("Virtual_dom__Raw"),
     cst_virtual_dom$17=caml_string_of_jsbytes("virtual_dom"),
     cst_src_raw_ml=caml_string_of_jsbytes("src/raw.ml"),
     cst$7=caml_string_of_jsbytes(""),
     cst_virtual_dom$18=caml_string_of_jsbytes("virtual_dom"),
     cst_virtual_dom$19=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Raw$0=caml_string_of_jsbytes("Virtual_dom__Raw"),
     cst_on$0=caml_string_of_jsbytes("on"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst_class$0=caml_string_of_jsbytes("class"),
     cst_single_focus_hook=caml_string_of_jsbytes("single-focus-hook"),
     cst_always_focus_hook=caml_string_of_jsbytes("always-focus-hook"),
     cst_input$0=caml_string_of_jsbytes("input"),
     cst_draggable=caml_string_of_jsbytes("draggable"),
     cst_rowspan=caml_string_of_jsbytes("rowspan"),
     cst_colspan=caml_string_of_jsbytes("colspan"),
     cst_max=caml_string_of_jsbytes("max"),
     cst_min=caml_string_of_jsbytes("min"),
     cst_src=caml_string_of_jsbytes("src"),
     cst_title=caml_string_of_jsbytes("title"),
     cst_tabindex=caml_string_of_jsbytes("tabindex"),
     cst_value$2=caml_string_of_jsbytes("value"),
     cst_value$1=caml_string_of_jsbytes("value"),
     cst_type=caml_string_of_jsbytes("type"),
     cst_for=caml_string_of_jsbytes("for"),
     cst$15=caml_string_of_jsbytes(""),
     cst_autofocus=caml_string_of_jsbytes("autofocus"),
     cst_placeholder=caml_string_of_jsbytes("placeholder"),
     cst_target=caml_string_of_jsbytes("target"),
     cst_href=caml_string_of_jsbytes("href"),
     cst_name=caml_string_of_jsbytes("name"),
     cst_id=caml_string_of_jsbytes("id"),
     cst_invalid_classnames=caml_string_of_jsbytes("invalid classnames"),
     cst_invalid_classname=caml_string_of_jsbytes("invalid classname"),
     cst_foo_bar$0=caml_string_of_jsbytes("foo bar"),
     cst$9=caml_string_of_jsbytes(""),
     cst_foo_bar=caml_string_of_jsbytes("foo-bar"),
     cst_WARNING_not_combining_prop=
      caml_string_of_jsbytes("WARNING: not combining properties"),
     cst_value=caml_string_of_jsbytes("value"),
     cst_value$0=caml_string_of_jsbytes("value"),
     cst_WARNING_not_combining_attr=
      caml_string_of_jsbytes("WARNING: not combining attributes"),
     cst_on=caml_string_of_jsbytes("on"),
     cst_WARNING_not_combining_hook=
      caml_string_of_jsbytes("WARNING: not combining hooks"),
     cst_WARNING_not_combining_hand=
      caml_string_of_jsbytes("WARNING: not combining handlers"),
     cst_WARNING_not_combining_clas=
      caml_string_of_jsbytes("WARNING: not combining classes"),
     cst_WARNING_not_combining_styl=
      caml_string_of_jsbytes("WARNING: not combining styles"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_class=caml_string_of_jsbytes("class"),
     cst_WARNING_reached_warning_me=
      caml_string_of_jsbytes
       ("WARNING: reached warning message quota; no more messages will be printed"),
     cst_BUG_Type_ids_for_event_han=
      caml_string_of_jsbytes("BUG!  Type-ids for event handlers differ"),
     cst_Virtual_dom_Attr=caml_string_of_jsbytes("Virtual_dom__Attr"),
     cst_virtual_dom$20=caml_string_of_jsbytes("virtual_dom"),
     cst_src_attr_ml=caml_string_of_jsbytes("src/attr.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_virtual_dom$21=caml_string_of_jsbytes("virtual_dom"),
     empty=[6,0],
     cst_src_attr_ml$0=caml_string_of_jsbytes("src/attr.ml"),
     cst_valid=caml_string_of_jsbytes("valid"),
     cst_src_attr_ml$1=caml_string_of_jsbytes("src/attr.ml"),
     cst_invalid_empty=caml_string_of_jsbytes("invalid-empty"),
     cst_src_attr_ml$2=caml_string_of_jsbytes("src/attr.ml"),
     cst_invalid_space=caml_string_of_jsbytes("invalid-space"),
     cst$10=caml_string_of_jsbytes(""),
     cst_checked=caml_string_of_jsbytes("checked"),
     cst$11=caml_string_of_jsbytes(""),
     cst_selected=caml_string_of_jsbytes("selected"),
     cst$12=caml_string_of_jsbytes(""),
     cst_hidden=caml_string_of_jsbytes("hidden"),
     cst$13=caml_string_of_jsbytes(""),
     cst_readonly=caml_string_of_jsbytes("readonly"),
     cst$14=caml_string_of_jsbytes(""),
     cst_disabled=caml_string_of_jsbytes("disabled"),
     cst_event=caml_string_of_jsbytes("event"),
     cst_focusEvent=caml_string_of_jsbytes("focusEvent"),
     cst_mouseEvent=caml_string_of_jsbytes("mouseEvent"),
     cst_keyboardEvent=caml_string_of_jsbytes("keyboardEvent"),
     cst_submitEvent=caml_string_of_jsbytes("submitEvent"),
     cst_mousewheelEvent=caml_string_of_jsbytes("mousewheelEvent"),
     cst_clipboardEvent=caml_string_of_jsbytes("clipboardEvent"),
     cst_dragEvent=caml_string_of_jsbytes("dragEvent"),
     cst_pointerEvent=caml_string_of_jsbytes("pointerEvent"),
     cst_animationEvent=caml_string_of_jsbytes("animationEvent"),
     cst_focus=caml_string_of_jsbytes("focus"),
     cst_blur=caml_string_of_jsbytes("blur"),
     cst_click=caml_string_of_jsbytes("click"),
     cst_contextmenu=caml_string_of_jsbytes("contextmenu"),
     cst_dblclick=caml_string_of_jsbytes("dblclick"),
     cst_drag=caml_string_of_jsbytes("drag"),
     cst_dragstart=caml_string_of_jsbytes("dragstart"),
     cst_dragend=caml_string_of_jsbytes("dragend"),
     cst_dragenter=caml_string_of_jsbytes("dragenter"),
     cst_dragleave=caml_string_of_jsbytes("dragleave"),
     cst_dragover=caml_string_of_jsbytes("dragover"),
     cst_drop=caml_string_of_jsbytes("drop"),
     cst_mousemove=caml_string_of_jsbytes("mousemove"),
     cst_mouseup=caml_string_of_jsbytes("mouseup"),
     cst_mousedown=caml_string_of_jsbytes("mousedown"),
     cst_mouseenter=caml_string_of_jsbytes("mouseenter"),
     cst_mouseleave=caml_string_of_jsbytes("mouseleave"),
     cst_mouseover=caml_string_of_jsbytes("mouseover"),
     cst_mouseout=caml_string_of_jsbytes("mouseout"),
     cst_keyup=caml_string_of_jsbytes("keyup"),
     cst_keypress=caml_string_of_jsbytes("keypress"),
     cst_keydown=caml_string_of_jsbytes("keydown"),
     cst_scroll=caml_string_of_jsbytes("scroll"),
     cst_submit=caml_string_of_jsbytes("submit"),
     cst_pointerdown=caml_string_of_jsbytes("pointerdown"),
     cst_pointerup=caml_string_of_jsbytes("pointerup"),
     cst_mousewheel=caml_string_of_jsbytes("mousewheel"),
     cst_copy=caml_string_of_jsbytes("copy"),
     cst_cut=caml_string_of_jsbytes("cut"),
     cst_paste=caml_string_of_jsbytes("paste"),
     cst_reset=caml_string_of_jsbytes("reset"),
     cst_animationend=caml_string_of_jsbytes("animationend"),
     cst_change=caml_string_of_jsbytes("change"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_virtual_dom$22=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Attr$0=caml_string_of_jsbytes("Virtual_dom__Attr"),
     cst_global_mousemove_listener=
      caml_string_of_jsbytes("global-mousemove-listener"),
     cst_global_mouseup_listener=
      caml_string_of_jsbytes("global-mouseup-listener"),
     cst_Virtual_dom_Global_listene=
      caml_string_of_jsbytes("Virtual_dom__Global_listeners"),
     cst_virtual_dom$23=caml_string_of_jsbytes("virtual_dom"),
     cst_src_global_listeners_ml=
      caml_string_of_jsbytes("src/global_listeners.ml"),
     cst$16=caml_string_of_jsbytes(""),
     cst_virtual_dom$24=caml_string_of_jsbytes("virtual_dom"),
     cst_virtual_dom$25=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Global_listene$0=
      caml_string_of_jsbytes("Virtual_dom__Global_listeners"),
     cst_inner_html_node=caml_string_of_jsbytes("inner-html-node"),
     cst_Vdom_Node_inner_html_was_g=
      caml_string_of_jsbytes("Vdom.Node.inner_html was given a 'none'"),
     cst_Vdom_Node_inner_html_was_g$0=
      caml_string_of_jsbytes("Vdom.Node.inner_html was given a 'text'"),
     cst_Vdom_Node_inner_html_was_g$1=
      caml_string_of_jsbytes("Vdom.Node.inner_html was given a 'widget'"),
     cst$18=caml_string_of_jsbytes(""),
     res1_009=[0,caml_string_of_jsbytes("<opaque>")],
     cst_Virtual_dom_Node=caml_string_of_jsbytes("Virtual_dom__Node"),
     cst_virtual_dom$26=caml_string_of_jsbytes("virtual_dom"),
     cst_src_node_ml=caml_string_of_jsbytes("src/node.ml"),
     cst$17=caml_string_of_jsbytes(""),
     cst_virtual_dom$27=caml_string_of_jsbytes("virtual_dom"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_body=caml_string_of_jsbytes("body"),
     cst_button=caml_string_of_jsbytes("button"),
     cst_code=caml_string_of_jsbytes("code"),
     cst_div=caml_string_of_jsbytes("div"),
     cst_main=caml_string_of_jsbytes("main"),
     cst_fieldset=caml_string_of_jsbytes("fieldset"),
     cst_footer=caml_string_of_jsbytes("footer"),
     cst_h1=caml_string_of_jsbytes("h1"),
     cst_h2=caml_string_of_jsbytes("h2"),
     cst_h3=caml_string_of_jsbytes("h3"),
     cst_h4=caml_string_of_jsbytes("h4"),
     cst_h5=caml_string_of_jsbytes("h5"),
     cst_h6=caml_string_of_jsbytes("h6"),
     cst_header=caml_string_of_jsbytes("header"),
     cst_html=caml_string_of_jsbytes("html"),
     cst_input$1=caml_string_of_jsbytes("input"),
     cst_textarea=caml_string_of_jsbytes("textarea"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_li=caml_string_of_jsbytes("li"),
     cst_p=caml_string_of_jsbytes("p"),
     cst_pre=caml_string_of_jsbytes("pre"),
     cst_section=caml_string_of_jsbytes("section"),
     cst_span=caml_string_of_jsbytes("span"),
     cst_strong=caml_string_of_jsbytes("strong"),
     cst_table=caml_string_of_jsbytes("table"),
     cst_tbody=caml_string_of_jsbytes("tbody"),
     cst_td=caml_string_of_jsbytes("td"),
     cst_th=caml_string_of_jsbytes("th"),
     cst_thead=caml_string_of_jsbytes("thead"),
     cst_tr=caml_string_of_jsbytes("tr"),
     cst_ul=caml_string_of_jsbytes("ul"),
     cst_ol=caml_string_of_jsbytes("ol"),
     cst_br=caml_string_of_jsbytes("br"),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_virtual_dom$28=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Node$0=caml_string_of_jsbytes("Virtual_dom__Node"),
     cst_Virtual_dom_Vdom=caml_string_of_jsbytes("Virtual_dom__Vdom"),
     cst_virtual_dom$29=caml_string_of_jsbytes("virtual_dom"),
     cst_src_vdom_ml=caml_string_of_jsbytes("src/vdom.ml"),
     cst$19=caml_string_of_jsbytes(""),
     cst_virtual_dom$30=caml_string_of_jsbytes("virtual_dom"),
     cst_virtual_dom$31=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom_Vdom$0=caml_string_of_jsbytes("Virtual_dom__Vdom"),
     cst_Virtual_dom=caml_string_of_jsbytes("Virtual_dom"),
     cst_virtual_dom$32=caml_string_of_jsbytes("virtual_dom"),
     cst_src_virtual_dom_ml=caml_string_of_jsbytes("src/virtual_dom.ml"),
     cst$20=caml_string_of_jsbytes(""),
     cst_virtual_dom$33=caml_string_of_jsbytes("virtual_dom"),
     cst_virtual_dom$34=caml_string_of_jsbytes("virtual_dom"),
     cst_Virtual_dom$0=caml_string_of_jsbytes("Virtual_dom"),
     Core=global_data.Core,
     Expect_test_common_File=global_data.Expect_test_common__File,
     Core_Float=global_data.Core__Float,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Expect_test_config=global_data.Expect_test_config,
     Inline_test_config=global_data.Inline_test_config,
     Js_of_ocaml_Dom=global_data.Js_of_ocaml__Dom,
     Base_Option=global_data.Base__Option,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     Base_List=global_data.Base__List,
     include=global_data.Ui_effect,
     Stdlib_Obj=global_data.Stdlib__Obj,
     Base_Hashtbl=global_data.Base__Hashtbl,
     Core_Type_equal=global_data.Core__Type_equal,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     Ojs=global_data.Ojs,
     Base_Type_equal=global_data.Base__Type_equal,
     Base=global_data.Base,
     Core_List=global_data.Core__List,
     Core_String=global_data.Core__String,
     Css_gen=global_data.Css_gen,
     Core_Set=global_data.Core__Set,
     Core_Option=global_data.Core__Option,
     Core_Bool=global_data.Core__Bool,
     Core_Int=global_data.Core__Int,
     Core_Char=global_data.Core__Char,
     Core_Map=global_data.Core__Map,
     Core_Unit=global_data.Core__Unit,
     Base_Staged=global_data.Base__Staged,
     Base_Printf=global_data.Base__Printf,
     Virtual_dom=[0];
    caml_register_global(356,Virtual_dom,"Virtual_dom__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Dom_float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom);
    caml_call1(Expect_test_collector[5][1],cst_src_dom_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$0,cst);
    var
     _b_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _d_=[1,caml_string_of_jsbytes(" 1 ")],
     _e_=[0,caml_string_of_jsbytes("")],
     _h_=[1,caml_string_of_jsbytes(" NaN ")],
     _i_=[0,caml_string_of_jsbytes("")],
     _l_=[1,caml_string_of_jsbytes(" Infinity ")],
     _m_=[0,caml_string_of_jsbytes("")],
     _p_=[1,caml_string_of_jsbytes(" -Infinity ")],
     _q_=[0,caml_string_of_jsbytes("")],
     _t_=[1,caml_string_of_jsbytes(" 1e-8 ")],
     _u_=[0,caml_string_of_jsbytes("")],
     _x_=[1,caml_string_of_jsbytes(" -1 ")],
     _y_=[0,caml_string_of_jsbytes("")],
     _B_=[1,caml_string_of_jsbytes(" 1.0000001 ")],
     _C_=[0,caml_string_of_jsbytes("")],
     _ag_=[0,caml_string_of_jsbytes("<opaque>")],
     _ah_=[0,caml_string_of_jsbytes("id_sexp")],
     _aF_=[1,0],
     _aE_=[0,caml_string_of_jsbytes("classnames")],
     _aD_=[0,caml_string_of_jsbytes("classname")],
     _ax_=[0,caml_string_of_jsbytes("name")],
     _ay_=[0,caml_string_of_jsbytes("name")],
     _aw_=[0,caml_string_of_jsbytes("name")],
     _av_=[0,caml_string_of_jsbytes("name")],
     _at_=[0,caml_string_of_jsbytes("second")],
     _au_=[0,caml_string_of_jsbytes("first")],
     _ar_=[0,caml_string_of_jsbytes("second")],
     _as_=[0,caml_string_of_jsbytes("first")],
     _az_=[0,caml_string_of_jsbytes(" ")],
     _an_=[0,caml_string_of_jsbytes("quota")],
     _ak_=[0,caml_string_of_jsbytes("_")],
     _ai_=[0,caml_string_of_jsbytes("_")],
     _aj_=[0,caml_string_of_jsbytes("rtid")],
     _al_=[0,caml_string_of_jsbytes("ltid")],
     _am_=[0,100],
     _aI_=[0,caml_string_of_jsbytes("inner-html")],
     _aG_=[0,caml_string_of_jsbytes("state")],
     _aH_=[0,caml_string_of_jsbytes("input")];
    function to_js_string(t0){return t0.toString()}
    function to_js_string_fixed(t1,t2){return t2.toFixed(t1)}
    function to_js_string_precision(t3,t4){return t4.toPrecision(t3)}
    function to_js_string_exponential(t5){return t5.toExponential()}
    function to_string(value)
     {return caml_string_of_jsstring(value.toString())}
    function to_string_fixed(digits,value)
     {return caml_string_of_jsstring(value.toFixed(digits))}
    function to_string_precision(digits,value)
     {return caml_string_of_jsstring(value.toPrecision(digits))}
    function to_string_exponential(value)
     {return caml_string_of_jsstring(value.toExponential())}
    var
     Expect_test_collector$0=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _a_(param)
     {function print(f)
       {var _f$_=to_string(f);return caml_call2(Core[250],_b_,_f$_)}
      print(1.);
      var
       _f4_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$0),
         16,
         738,
         742,
         748];
      caml_call1(Expect_test_collector$0[1],_f4_);
      print(Core_Float[9]);
      var
       _f5_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$1),
         18,
         778,
         782,
         788];
      caml_call1(Expect_test_collector$0[1],_f5_);
      print(Core_Float[10]);
      var
       _f6_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$2),
         20,
         825,
         829,
         835];
      caml_call1(Expect_test_collector$0[1],_f6_);
      print(Core_Float[11]);
      var
       _f7_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$3),
         22,
         881,
         885,
         891];
      caml_call1(Expect_test_collector$0[1],_f7_);
      print(1e-08);
      var
       _f8_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$4),
         24,
         930,
         934,
         940];
      caml_call1(Expect_test_collector$0[1],_f8_);
      print(-1.);
      var
       _f9_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$5),
         26,
         969,
         973,
         979];
      caml_call1(Expect_test_collector$0[1],_f9_);
      print(1.0000001);
      var
       _f__=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$6),
         28,
         1010,
         1014,
         1020];
      return caml_call1(Expect_test_collector$0[1],_f__)}
    var
     _c_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$7),
       16,
       738,
       749,
       756],
     _f_=
      [0,
       [0,
        _e_,
        _d_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$8),
         16,
         738,
         742,
         748],
        _c_],
       0],
     _g_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$9),
       18,
       778,
       789,
       798],
     _j_=
      [0,
       [0,
        _i_,
        _h_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$10),
         18,
         778,
         782,
         788],
        _g_],
       _f_],
     _k_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$11),
       20,
       825,
       836,
       850],
     _n_=
      [0,
       [0,
        _m_,
        _l_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$12),
         20,
         825,
         829,
         835],
        _k_],
       _j_],
     _o_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$13),
       22,
       881,
       892,
       907],
     _r_=
      [0,
       [0,
        _q_,
        _p_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$14),
         22,
         881,
         885,
         891],
        _o_],
       _n_],
     _s_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$15),
       24,
       930,
       941,
       951],
     _v_=
      [0,
       [0,
        _u_,
        _t_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$16),
         24,
         930,
         934,
         940],
        _s_],
       _r_],
     _w_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$17),
       26,
       969,
       980,
       988],
     _z_=
      [0,
       [0,
        _y_,
        _x_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$18),
         26,
         969,
         973,
         979],
        _w_],
       _v_],
     _A_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$19),
       28,
       1010,
       1021,
       1036],
     _D_=
      [0,
       [0,
        _C_,
        _B_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$20),
         28,
         1010,
         1014,
         1020],
        _A_],
       _z_],
     _E_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_dom_float_ml$22),
       12,
       642,
       642,
       1037],
     _F_=
      caml_call1(Expect_test_common_File[4][3],cst_e40141a8c595182b4ac2018c0f);
    caml_call9
     (Expect_test_collector$0[3],
      _F_,
      _E_,
      cst_src_dom_float_ml$21,
      0,
      0,
      _D_,
      0,
      Inline_test_config,
      _a_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Dom_float$0);
    var
     Virtual_dom_Dom_float=
      [0,
       to_js_string,
       to_js_string_fixed,
       to_js_string_precision,
       to_js_string_exponential,
       to_string,
       to_string_fixed,
       to_string_precision,
       to_string_exponential];
    caml_register_global(366,Virtual_dom_Dom_float,"Virtual_dom__Dom_float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Effect);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$2);
    caml_call1(Expect_test_collector[5][1],cst_src_effect_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$3,cst$0);
    var
     _G_=include[1],
     _H_=include[2],
     _V_=include[20],
     visibility_handlers=[0,0],
     _I_=include[3],
     _J_=include[4],
     _K_=include[6],
     _L_=include[7],
     _M_=include[8],
     _N_=include[9],
     _O_=include[10],
     _P_=include[11],
     _Q_=include[12],
     _R_=include[14],
     _S_=include[15],
     _T_=include[16],
     _U_=include[17];
    function Define_visibility(VH)
     {visibility_handlers[1] = [0,VH[1],visibility_handlers[1]];return [0]}
    var
     Viewport_changed=[248,cst_Virtual_dom_Effect_Viewpor,caml_fresh_oo_id(0)],
     Stop_propagation=[248,cst_Virtual_dom_Effect_Stop_pr,caml_fresh_oo_id(0)],
     Stop_immediate_propagation=
      [248,cst_Virtual_dom_Effect_Stop_im,caml_fresh_oo_id(0)],
     Prevent_default=[248,cst_Virtual_dom_Effect_Prevent,caml_fresh_oo_id(0)];
    function sequence_as_sibling(left,unless_stopped)
     {function contains_stop(param)
       {if(param[1] !== _H_)return param === Stop_immediate_propagation?1:0;
        var es=param[2];
        return caml_call2(Base_List[13],es,contains_stop)}
      if(contains_stop(left))return left;
      var _f3_=[0,left,[0,caml_call1(unless_stopped,0),0]];
      return [0,include[2],_f3_]}
    var current_dom_event=[0,0];
    function _W_(param)
     {function _f2_(f){return caml_call1(f,0)}
      return caml_call2(Base_List[9],visibility_handlers[1],_f2_)}
    var
     _X_=caml_call1(Stdlib_Obj[22][1],Viewport_changed),
     _Y_=caml_call1(Stdlib_Obj[22][3],_X_);
    caml_call3(Base_Hashtbl[36],_V_[2],_Y_,_W_);
    function _Z_(param)
     {return caml_call2
              (Base_Option[34],current_dom_event[1],Js_of_ocaml_Dom_html[116])}
    var
     ___=caml_call1(Stdlib_Obj[22][1],Stop_propagation),
     _$_=caml_call1(Stdlib_Obj[22][3],___);
    caml_call3(Base_Hashtbl[36],_V_[2],_$_,_Z_);
    function _aa_(param)
     {return caml_call2
              (Base_Option[34],current_dom_event[1],Js_of_ocaml_Dom[18])}
    var
     _ab_=caml_call1(Stdlib_Obj[22][1],Prevent_default),
     _ac_=caml_call1(Stdlib_Obj[22][3],_ab_);
    caml_call3(Base_Hashtbl[36],_V_[2],_ac_,_aa_);
    var handle_non_dom_event_exn=_V_[1];
    function handle(dom_event,event)
     {var old=current_dom_event[1];
      current_dom_event[1] = [0,dom_event];
      caml_call1(_V_[1],event);
      current_dom_event[1] = old;
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Effect$0);
    var
     _ad_=[0,handle,handle_non_dom_event_exn],
     Virtual_dom_Effect=
      [0,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       Viewport_changed,
       Stop_propagation,
       Stop_immediate_propagation,
       Prevent_default,
       sequence_as_sibling,
       Define_visibility,
       _ad_];
    caml_register_global(374,Virtual_dom_Effect,"Virtual_dom__Effect");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Gen_js_api);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$5);
    caml_call1(Expect_test_collector[5][1],cst_src_gen_js_api_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$6,cst$1);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Gen_js_api$0);
    var Virtual_dom_Gen_js_api=[0];
    caml_register_global(375,Virtual_dom_Gen_js_api,"Virtual_dom__Gen_js_api");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Hooks_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$8);
    caml_call1(Expect_test_collector[5][1],cst_src_hooks_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$9,cst$2);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Hooks_intf$0);
    var Virtual_dom_Hooks_intf=[0];
    caml_register_global(376,Virtual_dom_Hooks_intf,"Virtual_dom__Hooks_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Hooks);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$11);
    caml_call1(Expect_test_collector[5][1],cst_src_hooks_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$12,cst$3);
    function sexp_of_t(param)
     {var value=param[2],type_id=param[1];
      return caml_call2(Core_Type_equal[8][6],type_id,value)}
    var
     Extra=[0,sexp_of_t],
     generic_hook=
      [246,function(_f1_){return Js_of_ocaml_Js[52][1].GenericHook}];
    function pack(param)
     {var
       id=param[7],
       destroy=param[6],
       update=param[5],
       init=param[4],
       input_id=param[2],
       input=param[1],
       init$0=caml_js_wrap_callback(caml_call1(init,input)),
       update$0=caml_js_wrap_callback(caml_call1(update,input)),
       destroy$0=caml_js_wrap_callback(destroy),
       _f0_=caml_obj_tag(generic_hook),
       generic_hook$0=
        250 === _f0_
         ?generic_hook[1]
         :246 === _f0_
           ?caml_call1(CamlinternalLazy[2],generic_hook)
           :generic_hook,
       extra=[0,input_id,input];
      return generic_hook$0(init$0,update$0,destroy$0,id,extra)}
    function combine(left,right)
     {var match=caml_call2(Core_Type_equal[8][9],left[2],right[2]);
      if(match)
       {var
         _fT_=right[7],
         _fU_=right[6],
         _fV_=right[5],
         _fW_=right[4],
         _fX_=right[3],
         _fY_=right[2];
        return [0,
                caml_call2(right[3],left[1],right[1]),
                _fY_,
                _fX_,
                _fW_,
                _fV_,
                _fU_,
                _fT_]}
      var
       _fZ_=
        caml_call1(Sexplib0_Sexp_conv[7],cst_hooks_do_not_have_the_same);
      caml_call2(Core[249],0,_fZ_);
      return right}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Hooks$0);
    var _ae_=[0,Extra];
    function _af_(S)
     {function _fS_(param)
       {var
         arg1_002=param[3],
         arg0_001=param[1],
         res0_003=caml_call1(S[2][1],arg0_001),
         res1_004=caml_call1(Core[150],arg1_002);
        return [1,[0,res0_003,[0,res1_004,0]]]}
      var
       id=caml_call2(Core_Type_equal[8][3],cst$4,_fS_),
       input_id=caml_call2(Core_Type_equal[8][3],cst$5,S[2][1]);
      function init(input,element)
       {var state=caml_call2(S[3],input,element);
        function f(param){return caml_call3(S[4],input,state,element)}
        var
         t2=caml_js_wrap_callback(f),
         animation_id=Js_of_ocaml_Dom_html[8].requestAnimationFrame(t2);
        return [0,input,animation_id,state]}
      function update(input,param,element)
       {var state=param[3],animation_id=param[2],old_input=param[1];
        caml_call4(S[5],old_input,input,state,element);
        return [0,input,animation_id,state]}
      function destroy(param,element)
       {var state=param[3],animation_id=param[2],old_input=param[1];
        Js_of_ocaml_Dom_html[8].cancelAnimationFrame(animation_id);
        return caml_call3(S[6],old_input,state,element)}
      function create(input)
       {return [0,input,input_id,S[2][2],init,update,destroy,id]}
      var For_testing=[0,input_id];
      return [0,create,For_testing]}
    var Virtual_dom_Hooks=[0,combine,pack,_af_,_ae_];
    caml_register_global(381,Virtual_dom_Hooks,"Virtual_dom__Hooks");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Js_map);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$14);
    caml_call1(Expect_test_collector[5][1],cst_src_js_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$15,cst$6);
    function create(param){return new (Ojs[18][cst_Map])()}
    function set(x7,x5,x6){x7.set(x5,x6);return 0}
    function get(x11,x10)
     {var _fP_=x11.get(x10);
      function _fQ_(_fR_){return _fR_}
      return caml_call2(Ojs[7],_fQ_,_fP_)}
    function delete$0(x16,x15){x16.delete(x15);return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$16);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Js_map$0);
    var Virtual_dom_Js_map=[0,create,set,get,delete$0];
    caml_register_global(383,Virtual_dom_Js_map,"Virtual_dom__Js_map");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Raw);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$17);
    caml_call1(Expect_test_collector[5][1],cst_src_raw_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$18,cst$7);
    function t_of_js(x){return x}
    function t_to_js(x){return x}
    var Native_node=[0,t_of_js,t_to_js];
    function t_of_js$0(x){return x}
    function t_to_js$0(x){return x}
    function create$0(param){return caml_call1(Ojs[11],0)}
    function set_property(t,name,value){return t[name] = value}
    var has_property=Ojs[12];
    function has_attribute(t,name)
     {var _fN_=caml_call2(Ojs[12],t,cst_attributes);
      if(! _fN_)return _fN_;
      var _fO_=t[cst_attributes$0];
      return caml_call2(Ojs[12],_fO_,name)}
    function set_attribute(t,name,value)
     {var _fM_=t[cst_attributes$1];
      if(caml_call2(Base[203],_fM_,undefined))
       t[cst_attributes$2] = caml_call1(Ojs[11],0);
      return t[cst_attributes$3][name] = value}
    var
     Attrs=
      [0,
       t_of_js$0,
       t_to_js$0,
       create$0,
       has_property,
       has_attribute,
       set_property,
       set_attribute];
    function t_of_js$1(param){return function(_fL_){return _fL_}}
    function t_to_js$1(param){return function(_fK_){return _fK_}}
    var Element_array=[0,t_of_js$1,t_to_js$1];
    function t_of_js$2(x2){return x2}
    function t_to_js$2(x1){return x1}
    function node(x3,x4,x5,x7)
     {var
       _fG_=caml_call2(Ojs[8],caml_js_from_string,x7),
       _fH_=caml_call2(Element_array[2],t_to_js$2,x5),
       _fI_=caml_call1(Attrs[2],x4),
       _fJ_=caml_js_from_string(x3);
      return new (Ojs[18][cst_VirtualDom][cst_VNode])(_fJ_,_fI_,_fH_,_fG_)}
    function text(x9)
     {var _fF_=caml_js_from_string(x9);
      return new (Ojs[18][cst_VirtualDom$0][cst_VText])(_fF_)}
    function svg(x10,x11,x12,x14)
     {var
       _fB_=caml_call2(Ojs[8],caml_js_from_string,x14),
       _fC_=caml_call2(Element_array[2],t_to_js$2,x12),
       _fD_=caml_call1(Attrs[2],x11),
       _fE_=caml_js_from_string(x10);
      return new (Ojs[18][cst_VirtualDom$1][cst_svg])(_fE_,_fD_,_fC_,_fB_)}
    function to_dom(x16)
     {var _fA_=Ojs[18][cst_VirtualDom$2].createElement(x16);
      return caml_call1(Native_node[1],_fA_)}
    var Node=[0,t_of_js$2,t_to_js$2,node,text,svg,to_dom];
    function t_of_js$3(x18){return x18}
    function t_to_js$3(x17){return x17}
    function create$1(x19,x20)
     {var _fy_=caml_call1(Node[2],x20),_fz_=caml_call1(Node[2],x19);
      return Ojs[18][cst_VirtualDom$3].diff(_fz_,_fy_)}
    function apply(x21,x22)
     {var
       _fw_=caml_call1(Native_node[2],x21),
       _fx_=Ojs[18][cst_VirtualDom$4].patch(_fw_,x22);
      return caml_call1(Native_node[1],_fx_)}
    function f(patch)
     {for(var key in patch)if(key !== "a")return false;return true}
    function is_empty(t){return f(t) | 0}
    var Patch=[0,t_of_js$3,t_to_js$3,create$1,apply,is_empty],t=create(0);
    function set$0(id,element,state){return set(t,element,[0,id,state])}
    function get$0(id,element)
     {var match=get(t,element);
      if(match)
       {var match$0=match[1],state=match$0[2],f_id=match$0[1];
        caml_call2(Base_Type_equal[12][11],id,f_id);
        return state}
      function _ft_(param){return _ag_}
      var
       id_sexp=caml_call2(Base_Type_equal[12][1],_ft_,id),
       _fu_=[0,[1,[0,_ah_,[0,caml_call1(Base[84][4],id_sexp),0]]],0],
       _fv_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_element_state_not_foun),
          _fu_]];
      return caml_call1(Base[202],_fv_)}
    function delete$1(element){return delete$0(t,element)}
    var State_keeper=[0,t,set$0,get$0,delete$1];
    function create$2(info,opt,_fr_,id)
     {if(opt)
       var sth=opt[1],destroy=sth;
      else
       var destroy=function(param,_fs_){return 0};
      if(_fr_)
       var sth$0=_fr_[1],update=sth$0;
      else
       var update=function(s,elt){return [0,s,elt]};
      return function(init,param)
       {var t14={};
        t14.type = "Widget";
        t14.name = 0;
        t14.id = id;
        t14.info = info;
        var
         t8=
          caml_js_wrap_callback
           (function(param)
             {var match=caml_call1(init,0),dom_node=match[2],s0=match[1];
              caml_call3(State_keeper[2],id,dom_node,s0);
              return dom_node});
        t14.init = t8;
        var
         t11=
          caml_js_wrap_callback
           (function(prev,dom_node)
             {caml_call2(Base_Type_equal[12][11],prev.id,id);
              var
               prev_state=caml_call2(State_keeper[3],id,dom_node),
               match=caml_call2(update,prev_state,dom_node),
               dom_node$0=match[2],
               state=match[1];
              caml_call1(State_keeper[4],dom_node);
              caml_call3(State_keeper[2],id,dom_node$0,state);
              return dom_node$0});
        t14.update = t11;
        var
         t13=
          caml_js_wrap_callback
           (function(dom_node)
             {var prev_state=caml_call2(State_keeper[3],id,dom_node);
              caml_call2(destroy,prev_state,dom_node);
              return caml_call1(State_keeper[4],dom_node)});
        t14.destroy = t13;
        return caml_call1(Node[1],t14)}}
    var include$0=[0,State_keeper,create$2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$19);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Raw$0);
    var
     Virtual_dom_Raw=
      [0,Native_node,Attrs,Element_array,Node,Patch,include$0];
    caml_register_global(386,Virtual_dom_Raw,"Virtual_dom__Raw");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Attr);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$20);
    caml_call1(Expect_test_collector[5][1],cst_src_attr_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$21,cst$8);
    Css_gen[94][1][1] = to_string_fixed;
    function combine$0(param,right)
     {var
       rhandler=right[2],
       rtid=right[1],
       lhandler=param[2],
       ltid=param[1],
       match=caml_call2(Core_Type_equal[8][9],ltid,rtid);
      if(match)
       return [0,
               ltid,
               function(value)
                {function _fq_(param){return caml_call1(rhandler,value)}
                 return sequence_as_sibling(caml_call1(lhandler,value),_fq_)}];
      var _fi_=0,_fj_=0;
      function _fk_(param){return _ai_}
      var
       _fl_=
        [0,
         [1,[0,_aj_,[0,caml_call2(Core_Type_equal[8][1],_fk_,rtid),_fj_]]],
         _fi_],
       _fm_=0;
      function _fn_(param){return _ak_}
      var
       _fo_=
        [0,
         [1,[0,_al_,[0,caml_call2(Core_Type_equal[8][1],_fn_,ltid),_fm_]]],
         _fl_],
       _fp_=
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_Type_ids_for_event_han),
          _fo_]];
      caml_call2(Core[249],0,_fp_);
      return right}
    function create$3(name,value)
     {return [1,0,name,caml_jsstring_of_string(value)]}
    function create_float(name,value){return [1,0,name,value.toString()]}
    function property(name,value){return [0,0,name,value]}
    function string_property(name,value)
     {return [0,0,name,caml_jsstring_of_string(value)]}
    function bool_property(name,value){return [0,0,name,! ! value]}
    function suppress_merge_warnings(t)
     {switch(t[0])
       {case 0:return [0,1,t[2],t[3]];
        case 1:return [1,1,t[2],t[3]];
        default:return t}}
    function create_hook(name,hook){return [3,name,hook]}
    function many(attrs){return [6,attrs]}
    function many_without_merge(attrs){return [8,attrs]}
    function combine$1(left,right){return [6,[0,left,[0,right,0]]]}
    var warning_count=[0,0],current=[0,_am_];
    function warn_s(s)
     {warning_count[1]++;
      var _fc_=current[1];
      if(typeof _fc_ === "number")return _fc_?caml_call2(Core[249],0,s):0;
      var
       quota=_fc_[1],
       warning_count$0=warning_count[1],
       _fd_=caml_call2(Core[89],warning_count$0,quota);
      if(_fd_)
       {caml_call2(Core[249],0,s);
        var _fe_=caml_call2(Core[90],warning_count$0,quota);
        if(_fe_)
         {var
           _ff_=[0,[1,[0,_an_,[0,caml_call1(Core[356],quota),0]]],0],
           _fg_=
            [1,
             [0,
              caml_call1(Sexplib0_Sexp_conv[7],cst_WARNING_reached_warning_me),
              _ff_]];
          return caml_call2(Core[249],0,_fg_)}
        var _fh_=_fe_}
      else
       var _fh_=_fd_;
      return _fh_}
    function reset_warning_count(param){warning_count[1] = 0;return 0}
    var For_testing=[0,reset_warning_count];
    function combining_map_add(map,key,value,combine)
     {function _fb_(param)
       {if(! param)return value;
        var existing_value=param[1];
        return caml_call3(combine,key,existing_value,value)}
      return caml_call3(Core_Map[37],map,key,_fb_)}
    var
     _ao_=caml_call1(Core_Map[4],[0,Core_String[139]]),
     _ap_=caml_call1(Core_Map[4],[0,Core_String[139]]),
     _aq_=caml_call1(Core_Set[6],[0,Core_String[139]]),
     empty_merge=[0,Css_gen[20],_aq_,_ap_,_ao_];
    function style(css){return [4,css]}
    function valid_class_name(s)
     {var
       _fa_=caml_call1(Core_String[5],s),
       invalid=_fa_ || caml_call2(Core_String[10],s,Core_Char[19]);
      return 1 - invalid}
    function _aA_(param){return valid_class_name(cst_foo_bar)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_valid,
      0,
      cst_src_attr_ml$0,
      382,
      0,
      45,
      _aA_);
    function _aB_(param){return 1 - valid_class_name(cst$9)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_invalid_empty,
      0,
      cst_src_attr_ml$1,
      383,
      0,
      52,
      _aB_);
    function _aC_(param){return 1 - valid_class_name(cst_foo_bar$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_invalid_space,
      0,
      cst_src_attr_ml$2,
      384,
      0,
      59,
      _aC_);
    function class$0(classname)
     {if(1 - valid_class_name(classname))
       {var
         _e__=[0,[1,[0,_aD_,[0,caml_call1(Core[471],classname),0]]],0],
         _e$_=
          [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_invalid_classname),_e__]];
        caml_call1(Core[253],_e$_)}
      return [5,caml_call2(Core_Set[7],[0,Core_String[139]],classname)]}
    function classes(classes){return [5,classes]}
    function classes$0(classnames)
     {if(1 - caml_call2(Core_List[14],classnames,valid_class_name))
       {var
         _e8_=
          [0,[1,[0,_aE_,[0,caml_call2(Core[421],Core[471],classnames),0]]],0],
         _e9_=
          [1,
           [0,caml_call1(Sexplib0_Sexp_conv[7],cst_invalid_classnames),_e8_]];
        caml_call1(Core[253],_e9_)}
      return [5,caml_call2(Core_Set[33],[0,Core_String[139]],classnames)]}
    function id(s){return create$3(cst_id,s)}
    function name(s){return create$3(cst_name,s)}
    function href(r){return create$3(cst_href,r)}
    function target(s){return create$3(cst_target,s)}
    var
     checked=create$3(cst_checked,cst$10),
     selected=create$3(cst_selected,cst$11),
     hidden=create$3(cst_hidden,cst$12),
     readonly=create$3(cst_readonly,cst$13),
     disabled=create$3(cst_disabled,cst$14);
    function placeholder(x){return create$3(cst_placeholder,x)}
    function autofocus(param)
     {return param?create$3(cst_autofocus,cst$15):empty}
    function for$0(x){return create$3(cst_for,x)}
    function type(x){return create$3(cst_type,x)}
    function value(x){return create$3(cst_value$1,x)}
    function value_prop(x){return string_property(cst_value$2,x)}
    function tabindex(x)
     {return create$3(cst_tabindex,caml_call1(Core_Int[82],x))}
    function title(x){return create$3(cst_title,x)}
    function src(x){return create$3(cst_src,x)}
    function min(x){return create_float(cst_min,x)}
    function max(x){return create_float(cst_max,x)}
    function colspan(x)
     {return create$3(cst_colspan,caml_call1(Core_Int[82],x))}
    function rowspan(x)
     {return create$3(cst_rowspan,caml_call1(Core_Int[82],x))}
    function draggable(b)
     {return create$3(cst_draggable,caml_call1(Core_Bool[19],b))}
    function create$4(name)
     {function _e7_(param){return _aF_}
      return caml_call2(Core_Type_equal[8][3],name,_e7_)}
    var
     event=create$4(cst_event),
     focus=create$4(cst_focusEvent),
     mouse=create$4(cst_mouseEvent),
     keyboard=create$4(cst_keyboardEvent),
     submit=create$4(cst_submitEvent),
     mousewheel=create$4(cst_mousewheelEvent),
     clipboard=create$4(cst_clipboardEvent),
     drag=create$4(cst_dragEvent),
     pointer=create$4(cst_pointerEvent),
     animation=create$4(cst_animationEvent);
    function on(type_id,name,handler){return [2,name,[0,type_id,handler]]}
    function on_focus(_e6_){return on(focus,cst_focus,_e6_)}
    function on_blur(_e5_){return on(focus,cst_blur,_e5_)}
    function on_click(_e4_){return on(mouse,cst_click,_e4_)}
    function on_contextmenu(_e3_){return on(mouse,cst_contextmenu,_e3_)}
    function on_double_click(_e2_){return on(mouse,cst_dblclick,_e2_)}
    function on_drag(_e1_){return on(drag,cst_drag,_e1_)}
    function on_dragstart(_e0_){return on(drag,cst_dragstart,_e0_)}
    function on_dragend(_eZ_){return on(drag,cst_dragend,_eZ_)}
    function on_dragenter(_eY_){return on(drag,cst_dragenter,_eY_)}
    function on_dragleave(_eX_){return on(drag,cst_dragleave,_eX_)}
    function on_dragover(_eW_){return on(drag,cst_dragover,_eW_)}
    function on_drop(_eV_){return on(drag,cst_drop,_eV_)}
    function on_mousemove(_eU_){return on(mouse,cst_mousemove,_eU_)}
    function on_mouseup(_eT_){return on(mouse,cst_mouseup,_eT_)}
    function on_mousedown(_eS_){return on(mouse,cst_mousedown,_eS_)}
    function on_mouseenter(_eR_){return on(mouse,cst_mouseenter,_eR_)}
    function on_mouseleave(_eQ_){return on(mouse,cst_mouseleave,_eQ_)}
    function on_mouseover(_eP_){return on(mouse,cst_mouseover,_eP_)}
    function on_mouseout(_eO_){return on(mouse,cst_mouseout,_eO_)}
    function on_keyup(_eN_){return on(keyboard,cst_keyup,_eN_)}
    function on_keypress(_eM_){return on(keyboard,cst_keypress,_eM_)}
    function on_keydown(_eL_){return on(keyboard,cst_keydown,_eL_)}
    function on_scroll(_eK_){return on(event,cst_scroll,_eK_)}
    function on_submit(_eJ_){return on(submit,cst_submit,_eJ_)}
    function on_pointerdown(_eI_){return on(pointer,cst_pointerdown,_eI_)}
    function on_pointerup(_eH_){return on(pointer,cst_pointerup,_eH_)}
    function on_mousewheel(_eG_){return on(mousewheel,cst_mousewheel,_eG_)}
    function on_copy(_eF_){return on(clipboard,cst_copy,_eF_)}
    function on_cut(_eE_){return on(clipboard,cst_cut,_eE_)}
    function on_paste(_eD_){return on(clipboard,cst_paste,_eD_)}
    function on_reset(_eC_){return on(event,cst_reset,_eC_)}
    function on_animationend(_eB_){return on(animation,cst_animationend,_eB_)}
    function const_ignore(param){return _G_}
    function run_coercion(coercion,target,prev)
     {if(prev)return prev;
      var _eA_=caml_call1(coercion,target);
      return caml_call1(Js_of_ocaml_Js[5][10],_eA_)}
    function on_input_event(type_id,event,handler)
     {return on
              (type_id,
               event,
               function(ev)
                {function _ev_(target)
                  {function _ez_(target)
                    {var text=caml_string_of_jsstring(target.value);
                     return caml_call2(handler,ev,text)}
                   var
                    _ew_=run_coercion(Js_of_ocaml_Dom_html[117][33],target,0),
                    _ex_=run_coercion(Js_of_ocaml_Dom_html[117][50],target,_ew_),
                    _ey_=run_coercion(Js_of_ocaml_Dom_html[117][55],target,_ex_);
                   return caml_call3(Core_Option[36],_ey_,_G_,_ez_)}
                 return caml_call3
                         (Js_of_ocaml_Js[5][7],ev.target,const_ignore,_ev_)})}
    function on_change(_eu_){return on_input_event(event,cst_change,_eu_)}
    function on_input(_et_){return on_input_event(event,cst_input,_et_)}
    function to_raw(l)
     {switch(l[0])
       {case 6:case 8:if(! l[1])return caml_call1(Attrs[3],0);break}
      var attrs=[0,l,0],attrs_obj=caml_call1(Attrs[3],0);
      function take_second_styles(first,second)
       {if(1 - caml_call1(Css_gen[21],first))
         {var
           _er_=[0,[1,[0,_ar_,[0,caml_call1(Css_gen[9],second),0]]],0],
           _es_=[0,[1,[0,_as_,[0,caml_call1(Css_gen[9],first),0]]],_er_];
          warn_s
           ([1,
             [0,
              caml_call1(Sexplib0_Sexp_conv[7],cst_WARNING_not_combining_styl),
              _es_]])}
        return second}
      function take_second_classes(first,second)
       {if(1 - caml_call1(Core_Set[9],first))
         {var
           _ep_=
            [0,[1,[0,_at_,[0,caml_call1(Core_String[141][75],second),0]]],0],
           _eq_=
            [0,[1,[0,_au_,[0,caml_call1(Core_String[141][75],first),0]]],_ep_];
          warn_s
           ([1,
             [0,
              caml_call1(Sexplib0_Sexp_conv[7],cst_WARNING_not_combining_clas),
              _eq_]])}
        return second}
      function take_second_handler(name,first,second)
       {var _eo_=[0,[1,[0,_av_,[0,caml_call1(Core[471],name),0]]],0];
        warn_s
         ([1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_WARNING_not_combining_hand),
            _eo_]]);
        return second}
      function take_second_hook(name,first,second)
       {var _en_=[0,[1,[0,_aw_,[0,caml_call1(Core[471],name),0]]],0];
        warn_s
         ([1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_WARNING_not_combining_hook),
            _en_]]);
        return second}
      function merge
       (combine_hook,combine_handler,combine_styles,combine_classes,acc)
       {var _dV_=Core_List[10];
        function _dW_(acc,attr)
         {switch(attr[0])
           {case 0:
             var
              value=attr[3],
              name=attr[2],
              suppress_merge_warnings=attr[1],
              _dY_=caml_call2(Attrs[4],attrs_obj,name),
              _dZ_=_dY_?1 - suppress_merge_warnings:_dY_;
             if(_dZ_)
              {var _d0_=[0,[1,[0,_ax_,[0,caml_call1(Core[471],name),0]]],0];
               warn_s
                ([1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_WARNING_not_combining_prop),
                   _d0_]])}
             if(runtime.caml_string_notequal(name,cst_value))
              caml_call3(Attrs[6],attrs_obj,name,value);
             else
              {var value$0=Js_of_ocaml_Js[52][1].SoftSetHook(value);
               caml_call3(Attrs[6],attrs_obj,cst_value$0,value$0)}
             return acc;
            case 1:
             var
              value$1=attr[3],
              name$0=attr[2],
              suppress_merge_warnings$0=attr[1],
              _d1_=caml_call2(Attrs[5],attrs_obj,name$0),
              _d2_=_d1_?1 - suppress_merge_warnings$0:_d1_;
             if(_d2_)
              {var _d3_=[0,[1,[0,_ay_,[0,caml_call1(Core[471],name$0),0]]],0];
               warn_s
                ([1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_WARNING_not_combining_attr),
                   _d3_]])}
             caml_call3(Attrs[7],attrs_obj,name$0,value$1);
             return acc;
            case 2:
             var
              handler=attr[2],
              name$1=attr[1],
              _d4_=acc[4],
              _d5_=combining_map_add(acc[3],name$1,handler,combine_handler);
             return [0,acc[1],acc[2],_d5_,_d4_];
            case 3:
             var
              hook=attr[2],
              name$2=attr[1],
              _d6_=combining_map_add(acc[4],name$2,hook,combine_hook);
             return [0,acc[1],acc[2],acc[3],_d6_];
            case 4:
             var new_styles=attr[1],_d7_=acc[4],_d8_=acc[3],_d9_=acc[2];
             return [0,
                     caml_call2(combine_styles,acc[1],new_styles),
                     _d9_,
                     _d8_,
                     _d7_];
            case 5:
             var
              new_classes=attr[1],
              _d__=acc[4],
              _d$_=acc[3],
              _ea_=caml_call2(combine_classes,acc[2],new_classes);
             return [0,acc[1],_ea_,_d$_,_d__];
            case 6:
             var
              attrs=attr[1],
              _eb_=Core_Set[13],
              _ec_=Css_gen[27],
              _ed_=function(param){return combine$0},
              sub_merge=
               caml_call1
                (merge
                  (function(param){return combine},_ed_,_ec_,_eb_,empty_merge),
                 attrs),
              _ee_=caml_call3(Core_Map[78],acc[4],sub_merge[4],combine_hook),
              _ef_=
               caml_call3(Core_Map[78],acc[3],sub_merge[3],combine_handler),
              _eg_=caml_call2(combine_classes,acc[2],sub_merge[2]);
             return [0,
                     caml_call2(combine_styles,acc[1],sub_merge[1]),
                     _eg_,
                     _ef_,
                     _ee_];
            case 7:
             var
              map_classes=attr[3],
              map_styles=attr[2],
              attrs$0=attr[1],
              sub_merge$0=
               caml_call1
                (merge
                  (take_second_hook,
                   take_second_handler,
                   Css_gen[27],
                   Core_Set[13],
                   empty_merge),
                 attrs$0),
              _eh_=caml_call3(Core_Map[78],acc[4],sub_merge$0[4],combine_hook),
              _ei_=
               caml_call3(Core_Map[78],acc[3],sub_merge$0[3],combine_handler),
              _ej_=
               caml_call1
                (map_classes,
                 caml_call2(combine_classes,acc[2],sub_merge$0[2]));
             return [0,
                     caml_call1
                      (map_styles,
                       caml_call2(combine_styles,acc[1],sub_merge$0[1])),
                     _ej_,
                     _ei_,
                     _eh_];
            default:
             var
              attrs$1=attr[1],
              sub_merge$1=
               caml_call1
                (merge
                  (take_second_hook,
                   take_second_handler,
                   take_second_styles,
                   take_second_classes,
                   empty_merge),
                 attrs$1),
              _ek_=caml_call3(Core_Map[78],acc[4],sub_merge$1[4],combine_hook),
              _el_=
               caml_call3(Core_Map[78],acc[3],sub_merge$1[3],combine_handler),
              _em_=caml_call2(combine_classes,acc[2],sub_merge$1[2]);
             return [0,
                     caml_call2(combine_styles,acc[1],sub_merge$1[1]),
                     _em_,
                     _el_,
                     _ek_]}}
        return function(_dX_){return caml_call3(_dV_,_dX_,acc,_dW_)}}
      var
       merge$0=
        caml_call1
         (merge
           (take_second_hook,
            take_second_handler,
            take_second_styles,
            take_second_classes,
            empty_merge),
          attrs);
      function _dM_(name,hook)
       {var _dU_=pack(hook);return caml_call3(Attrs[6],attrs_obj,name,_dU_)}
      caml_call2(Core_Map[45],merge$0[4],_dM_);
      function _dN_(name,param)
       {var handler=param[2];
        function f(e)
         {var _dT_=caml_call1(handler,e);
          caml_call2(_ad_[1],e,_dT_);
          return Js_of_ocaml_Js[7]}
        var
         _dR_=caml_call1(Js_of_ocaml_Dom[10],f),
         _dS_=caml_call2(Core[18],cst_on,name);
        return caml_call3(Attrs[6],attrs_obj,_dS_,_dR_)}
      caml_call2(Core_Map[45],merge$0[3],_dN_);
      if(1 - caml_call1(Css_gen[21],merge$0[1]))
       {var
         props=caml_call1(Css_gen[30],merge$0[1]),
         obj=caml_call1(Ojs[11],0),
         _dO_=
          function(param)
           {var v=param[2],k=param[1];return obj[k] = caml_js_from_string(v)};
        caml_call2(Core_List[9],props,_dO_);
        caml_call3(Attrs[6],attrs_obj,cst_style,obj)}
      if(! caml_call1(Core_Set[9],merge$0[2]))
       {var
         _dP_=caml_call1(Core_Set[38],merge$0[2]),
         _dQ_=caml_js_from_string(caml_call2(Core_String[32],_az_,_dP_));
        caml_call3(Attrs[7],attrs_obj,cst_class,_dQ_)}
      return attrs_obj}
    function on_file_input(handler)
     {return on
              (event,
               cst_input$0,
               function(ev)
                {function _dI_(target)
                  {function _dJ_(target)
                    {function _dL_(files){return caml_call2(handler,ev,files)}
                     return caml_call3
                             (Js_of_ocaml_Js[6][7],target.files,const_ignore,_dL_)}
                   var _dK_=caml_call1(Js_of_ocaml_Dom_html[117][33],target);
                   return caml_call3
                           (Js_of_ocaml_Js[5][7],_dK_,const_ignore,_dJ_)}
                 return caml_call3
                         (Js_of_ocaml_Js[5][7],ev.target,const_ignore,_dI_)})}
    var sexp_of_t$0=Core_Unit[15];
    function combine$2(param,_dH_){return 0}
    function init(param,_dG_){return 0}
    function on_mount(param,_dF_,t6){return t6.focus()}
    function update(param,_dE_,_dD_,_dC_){return 0}
    function destroy(param,_dB_,_dA_){return 0}
    var
     Hook=
      _af_([0,[0],[0,sexp_of_t$0,combine$2],init,on_mount,update,destroy]);
    function attr(param)
     {return [3,cst_always_focus_hook,caml_call1(Hook[1],0)]}
    function map_style(t,f)
     {var _dy_=0;return [0,[7,t,f,function(_dz_){return _dz_}],_dy_]}
    function add_class(t,c)
     {var _dv_=0;
      function _dw_(cs){return caml_call2(Core_Set[11],cs,c)}
      return [0,[7,t,function(_dx_){return _dx_},_dw_],_dv_]}
    function add_style(t,s)
     {return map_style(t,function(ss){return caml_call2(Css_gen[27],ss,s)})}
    function merge_classes_and_styles(t)
     {var _dr_=0;
      function _ds_(_du_){return _du_}
      return [0,[7,t,function(_dt_){return _dt_},_ds_],_dr_]}
    function filter_by_kind(t,f)
     {switch(t[0])
       {case 0:return caml_call1(f,99222645)?t:empty;
        case 1:return caml_call1(f,482562044)?t:empty;
        case 2:return caml_call1(f,321312682)?t:empty;
        case 3:return caml_call1(f,803993603)?t:empty;
        case 4:return caml_call1(f,390796561)?t:empty;
        case 5:return caml_call1(f,-611981288)?t:empty;
        case 6:
         var attrs=t[1],_dl_=function(_dp_){return filter_by_kind(_dp_,f)};
         return [6,caml_call2(Core_List[72],attrs,_dl_)];
        case 7:
         var
          b=t[3],
          a=t[2],
          attrs$0=t[1],
          _dm_=function(_do_){return filter_by_kind(_do_,f)};
         return [7,caml_call2(Core_List[72],attrs$0,_dm_),a,b];
        default:
         var attrs$1=t[1],_dn_=function(_dq_){return filter_by_kind(_dq_,f)};
         return [8,caml_call2(Core_List[72],attrs$1,_dn_)]}}
    function contains_name(looking_for,param)
     {switch(param[0])
       {case 2:
         var name$0=param[1],_di_=caml_call2(Core[18],cst_on$0,name$0);
         return caml_call2(Core_String[126],_di_,looking_for);
        case 3:var name=param[1];break;
        case 4:return caml_call2(Core_String[126],looking_for,cst_style$0);
        case 5:return caml_call2(Core_String[126],looking_for,cst_class$0);
        case 0:
        case 1:var name=param[2];break;
        default:
         var
          attrs=param[1],
          _dj_=function(_dk_){return contains_name(looking_for,_dk_)};
         return caml_call2(Core_List[13],attrs,_dj_)}
      return caml_call2(Core_String[126],looking_for,name)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$22);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Attr$0);
    var Expert=[0,contains_name,filter_by_kind];
    function Single_focus_hook(_da_)
     {var has_been_used=[0,0],sexp_of_t=Sexplib0_Sexp_conv[23];
      function combine(left,right){return [0,include[2],[0,left,[0,right,0]]]}
      var Input=[0,sexp_of_t,combine];
      function init(param,_dh_){return 0}
      function on_mount(event,param,element)
       {var _dg_=1 - has_been_used[1];
        return _dg_
                ?(has_been_used[1]
                  =
                  1,
                  element.focus(),
                  caml_call1(_ad_[2],event))
                :_dg_}
      function update(param,_df_,_de_,_dd_){return 0}
      function destroy(param,_dc_,_db_){return 0}
      var Hook=_af_([0,[0],Input,init,on_mount,update,destroy]);
      function attr(param,after)
       {return [3,cst_single_focus_hook,caml_call1(Hook[1],after)]}
      return [0,attr]}
    var
     Always_focus_hook=[0,attr],
     Multi=[0,merge_classes_and_styles,map_style,add_style,add_class],
     Unmerged_warning_mode=[0,current,For_testing],
     include$1=
      [0,
       create$3,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       many,
       many_without_merge,
       empty,
       combine$1,
       combine$1,
       autofocus,
       checked,
       class$0,
       classes$0,
       classes,
       disabled,
       for$0,
       href,
       target,
       id,
       name,
       placeholder,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       value_prop,
       title,
       src,
       on_focus,
       on_blur,
       Unmerged_warning_mode,
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_click,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       Multi,
       Always_focus_hook,
       Single_focus_hook,
       Expert];
    caml_register_global(397,include$1,"Virtual_dom__Attr");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Global_listene);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$23);
    caml_call1(Expect_test_collector[5][1],cst_src_global_listeners_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$24,cst$16);
    function Make(X)
     {function sexp_of_t(param)
       {function _c__(_c$_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_c__)}
      function combine(f,g,event)
       {var _c8_=[0,caml_call1(g,event),0],_c9_=[0,caml_call1(f,event),_c8_];
        return [0,include[2],_c9_]}
      var Input=[0,sexp_of_t,combine];
      function init(f,element)
       {function _c6_(ev)
         {var _c7_=caml_call1(f,ev);
          caml_call1(_ad_[2],_c7_);
          return Js_of_ocaml_Js[7]}
        var handler=caml_call1(Js_of_ocaml_Dom[10],_c6_);
        return [0,
                caml_call4
                 (Js_of_ocaml_Dom_html[17],
                  Js_of_ocaml_Dom_html[8],
                  X[1],
                  handler,
                  Js_of_ocaml_Js[7])]}
      function destroy(input,state,element)
       {return caml_call1(Js_of_ocaml_Dom_html[18],state[1])}
      function update(old_input,f,state,element)
       {destroy(old_input,state,element);
        var new_state=init(f,element);
        state[1] = new_state[1];
        return 0}
      function on_mount(input,state,element){return 0}
      var
       include$0=_af_([0,[0],Input,init,on_mount,update,destroy]),
       create=include$0[1],
       For_testing=include$0[2];
      return [0,create,For_testing]}
    var
     event_kind=Js_of_ocaml_Dom_html[15][7],
     Mouse_up=Make([0,event_kind]),
     event_kind$0=Js_of_ocaml_Dom_html[15][9],
     Mouse_move=Make([0,event_kind$0]);
    function mouseup(f)
     {return [3,cst_global_mouseup_listener,caml_call1(Mouse_up[1],f)]}
    function mousemove(f)
     {return [3,cst_global_mousemove_listener,caml_call1(Mouse_move[1],f)]}
    var
     mouse_up_type_id=Mouse_up[2][1],
     mouse_move_type_id=Mouse_move[2][1],
     For_testing$0=[0,mouse_up_type_id,mouse_move_type_id];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$25);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Global_listene$0);
    var Virtual_dom_Global_listeners=[0,mouseup,mousemove,For_testing$0];
    caml_register_global
     (398,Virtual_dom_Global_listeners,"Virtual_dom__Global_listeners");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Node);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$26);
    caml_call1(Expect_test_collector[5][1],cst_src_node_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$27,cst$17);
    var create$5=include$0[2],Aliases=[0];
    function tag(t){return t[1]}
    function attrs(t){return t[3]}
    function key(t){return t[2]}
    function with_key(t,key){return [0,t[1],[0,key],t[3],t[4],t[5],t[6]]}
    function map_attrs(t,f)
     {var
       attrs=caml_call1(f,t[3]),
       raw_attrs=[246,function(_c5_){return to_raw(attrs)}];
      return [0,t[1],t[2],attrs,raw_attrs,t[5],t[6]]}
    function add_class$0(t,c)
     {return map_attrs(t,function(a){return combine$1(a,class$0(c))})}
    function add_classes(t,c)
     {return map_attrs(t,function(a){return combine$1(a,classes$0(c))})}
    function add_style$0(t,s)
     {return map_attrs(t,function(a){return combine$1(a,[4,s])})}
    function to_raw$0(param)
     {if(typeof param === "number")return caml_call1(Node[4],cst$18);
      switch(param[0])
       {case 0:var s=param[1];return caml_call1(Node[4],s);
        case 1:
         var
          _cY_=param[1],
          _cZ_=_cY_[4],
          _c0_=_cY_[2],
          _c1_=_cY_[1],
          _c2_=caml_obj_tag(_cZ_),
          _c3_=
           250 === _c2_
            ?_cZ_[1]
            :246 === _c2_?caml_call1(CamlinternalLazy[2],_cZ_):_cZ_,
          _c4_=_cY_[5];
         return 4153924 <= _cY_[6]
                 ?caml_call4(Node[5],_c1_,_c3_,_c4_,_c0_)
                 :caml_call4(Node[3],_c1_,_c3_,_c4_,_c0_);
        default:var w=param[1];return w}}
    function element(kind,tag,key,attrs,children)
     {var t2=new (Js_of_ocaml_Js[18])();
      function _cW_(other)
       {if(typeof other === "number")return 0;
        var t1=to_raw$0(other);
        t2.push(t1);
        return 0}
      caml_call2(Base_List[9],children,_cW_);
      var raw_attrs=[246,function(_cX_){return to_raw(attrs)}];
      return [0,tag,key,attrs,raw_attrs,t2,kind]}
    function element_expert(kind,tag,key,attrs,children)
     {var raw_attrs=[246,function(_cV_){return to_raw(attrs)}];
      return [0,tag,key,attrs,raw_attrs,children,kind]}
    function text$0(s){return [0,s]}
    function widget(info,destroy,update,id,init,param)
     {return [2,caml_call6(create$5,info,destroy,update,id,init,0)]}
    function create$6(tag,key,opt,children)
     {if(opt)var sth=opt[1],attr=sth;else var attr=empty;
      return [1,element(-847254184,tag,key,attr,children)]}
    function create_childless(tag,key,attr,param)
     {return create$6(tag,key,attr,0)}
    function create_svg(tag,key,opt,children)
     {if(opt)var sth=opt[1],attr=sth;else var attr=empty;
      return [1,element(4153924,tag,key,attr,children)]}
    var none=0;
    function textf(format){return caml_call2(Base_Printf[4],text$0,format)}
    function widget_of_module(m)
     {function _cN_(param)
       {var
         arg0_006=param[1],
         state_004=arg0_006[2],
         input_002=arg0_006[1],
         arg_005=caml_call1(m[2][1],state_004),
         bnds_001=[0,[1,[0,_aG_,[0,arg_005,0]]],0],
         arg_003=caml_call1(m[1][1],input_002),
         bnds_001$0=[0,[1,[0,_aH_,[0,arg_003,0]]],bnds_001],
         res0_008=[1,bnds_001$0];
        return [1,[0,res0_008,[0,res1_009,0]]]}
      var id=caml_call2(Base_Type_equal[12][4],m[3],_cN_);
      function _cO_(input)
       {var
         info=[246,function(_cU_){return caml_call1(m[1][1],input)}],
         _cR_=0;
        function _cS_(param)
         {var match=caml_call1(m[4],input),element=match[2],state=match[1];
          return [0,[0,input,state],element]}
        var
         _cT_=
          [0,
           function(param,element)
            {var
              state=param[2],
              prev_input=param[1],
              match=caml_call4(m[5],prev_input,input,state,element),
              element$0=match[2],
              state$0=match[1];
             return [0,[0,input,state$0],element$0]}];
        return caml_call6
                (create$5,
                 [0,info],
                 [0,
                  function(param,element)
                   {var state=param[2],prev_input=param[1];
                    return caml_call3(m[6],prev_input,state,element)}],
                 _cT_,
                 id,
                 _cS_,
                 _cR_)}
      var
       _cP_=caml_call1(Base_Staged[1],_cO_),
       f=caml_call1(Base_Staged[2],_cP_);
      function _cQ_(i){return [2,caml_call1(f,i)]}
      return caml_call1(Base_Staged[1],_cQ_)}
    function to_dom$0(t){var _cM_=to_raw$0(t);return caml_call1(Node[6],_cM_)}
    function inner_html(create,tag,attr,content)
     {var element=caml_call3(create,tag,attr,0);
      function build_sexp(extra,content)
       {return [1,[0,_aI_,[0,extra,[0,[0,content],0]]]]}
      function _cG_(param)
       {var match=param[1],content=match[2],element=match[1];
        return build_sexp(element,content)}
      var id=caml_call2(Base_Type_equal[12][4],cst_inner_html_node,_cG_);
      if(typeof element === "number")
       var debug=caml_call1(Base[200],cst_Vdom_Node_inner_html_was_g);
      else
       switch(element[0])
        {case 0:
          var debug=caml_call1(Base[200],cst_Vdom_Node_inner_html_was_g$0);
          break;
         case 1:var element$0=element[1],debug=[0,element$0[1]];break;
         default:
          var debug=caml_call1(Base[200],cst_Vdom_Node_inner_html_was_g$1)}
      var _cH_=0;
      function _cI_(param)
       {var t4=to_dom$0(element),t3=caml_jsstring_of_string(content);
        t4.innerHTML = t3;
        return [0,[0,debug,content],t4]}
      var _cJ_=0,_cK_=0;
      return widget
              ([0,[246,function(_cL_){return build_sexp(debug,content)}]],
               _cK_,
               _cJ_,
               id,
               _cI_,
               _cH_)}
    function _aJ_(tag,attr)
     {var key=0;
      return function(children)
       {return [1,element(4153924,tag,key,attr,children)]}}
    function inner_html_svg(_cD_,_cE_,_cF_)
     {return inner_html(_aJ_,_cD_,_cE_,_cF_)}
    function _aK_(tag,attr)
     {var _cA_=[0,attr],_cB_=0;
      return function(_cC_){return create$6(tag,_cB_,_cA_,_cC_)}}
    function inner_html$0(_cx_,_cy_,_cz_)
     {return inner_html(_aK_,_cx_,_cy_,_cz_)}
    function a(_cu_,_cv_,_cw_){return create$6(cst_a,_cu_,_cv_,_cw_)}
    function body(_cr_,_cs_,_ct_){return create$6(cst_body,_cr_,_cs_,_ct_)}
    function button(_co_,_cp_,_cq_)
     {return create$6(cst_button,_co_,_cp_,_cq_)}
    function code(_cl_,_cm_,_cn_){return create$6(cst_code,_cl_,_cm_,_cn_)}
    function div(_ci_,_cj_,_ck_){return create$6(cst_div,_ci_,_cj_,_ck_)}
    function main(_cf_,_cg_,_ch_){return create$6(cst_main,_cf_,_cg_,_ch_)}
    function fieldset(_cc_,_cd_,_ce_)
     {return create$6(cst_fieldset,_cc_,_cd_,_ce_)}
    function footer(_b$_,_ca_,_cb_)
     {return create$6(cst_footer,_b$_,_ca_,_cb_)}
    function h1(_b8_,_b9_,_b__){return create$6(cst_h1,_b8_,_b9_,_b__)}
    function h2(_b5_,_b6_,_b7_){return create$6(cst_h2,_b5_,_b6_,_b7_)}
    function h3(_b2_,_b3_,_b4_){return create$6(cst_h3,_b2_,_b3_,_b4_)}
    function h4(_bZ_,_b0_,_b1_){return create$6(cst_h4,_bZ_,_b0_,_b1_)}
    function h5(_bW_,_bX_,_bY_){return create$6(cst_h5,_bW_,_bX_,_bY_)}
    function h6(_bT_,_bU_,_bV_){return create$6(cst_h6,_bT_,_bU_,_bV_)}
    function header(_bQ_,_bR_,_bS_)
     {return create$6(cst_header,_bQ_,_bR_,_bS_)}
    function html(_bN_,_bO_,_bP_){return create$6(cst_html,_bN_,_bO_,_bP_)}
    function input(_bK_,_bL_,_bM_)
     {return create$6(cst_input$1,_bK_,_bL_,_bM_)}
    function textarea(_bH_,_bI_,_bJ_)
     {return create$6(cst_textarea,_bH_,_bI_,_bJ_)}
    function select(_bE_,_bF_,_bG_)
     {return create$6(cst_select,_bE_,_bF_,_bG_)}
    function option(_bB_,_bC_,_bD_)
     {return create$6(cst_option,_bB_,_bC_,_bD_)}
    function label(_by_,_bz_,_bA_){return create$6(cst_label,_by_,_bz_,_bA_)}
    function li(_bv_,_bw_,_bx_){return create$6(cst_li,_bv_,_bw_,_bx_)}
    function p(_bs_,_bt_,_bu_){return create$6(cst_p,_bs_,_bt_,_bu_)}
    function pre(_bp_,_bq_,_br_){return create$6(cst_pre,_bp_,_bq_,_br_)}
    function section(_bm_,_bn_,_bo_)
     {return create$6(cst_section,_bm_,_bn_,_bo_)}
    function span(_bj_,_bk_,_bl_){return create$6(cst_span,_bj_,_bk_,_bl_)}
    function strong(_bg_,_bh_,_bi_)
     {return create$6(cst_strong,_bg_,_bh_,_bi_)}
    function table(_bd_,_be_,_bf_){return create$6(cst_table,_bd_,_be_,_bf_)}
    function tbody(_ba_,_bb_,_bc_){return create$6(cst_tbody,_ba_,_bb_,_bc_)}
    function td(_a9_,_a__,_a$_){return create$6(cst_td,_a9_,_a__,_a$_)}
    function th(_a6_,_a7_,_a8_){return create$6(cst_th,_a6_,_a7_,_a8_)}
    function thead(_a3_,_a4_,_a5_){return create$6(cst_thead,_a3_,_a4_,_a5_)}
    function tr(_a0_,_a1_,_a2_){return create$6(cst_tr,_a0_,_a1_,_a2_)}
    function ul(_aX_,_aY_,_aZ_){return create$6(cst_ul,_aX_,_aY_,_aZ_)}
    function ol(_aU_,_aV_,_aW_){return create$6(cst_ol,_aU_,_aV_,_aW_)}
    function br(_aR_,_aS_,_aT_)
     {return create_childless(cst_br,_aR_,_aS_,_aT_)}
    function hr(_aO_,_aP_,_aQ_)
     {return create_childless(cst_hr,_aO_,_aP_,_aQ_)}
    function sexp_for_debugging(indent,sexp)
     {var _aN_=[0,caml_call2(Base[84][13],indent,sexp)];
      return pre(0,[0,empty],caml_call1(Base_List[28],_aN_))}
    function create$7(previous,current)
     {var _aL_=to_raw$0(current),_aM_=to_raw$0(previous);
      return caml_call2(Patch[3],_aM_,_aL_)}
    function apply$0(t,elt){return caml_call2(Patch[4],elt,t)}
    function is_empty$0(t){return caml_call1(Patch[5],t)}
    var Patch$0=[0,create$7,apply$0,is_empty$0];
    function create$8(key,tag,attrs,children)
     {return [1,element_expert(-847254184,tag,key,attrs,children)]}
    function create_svg$0(key,tag,attrs,children)
     {return [1,element_expert(4153924,tag,key,attrs,children)]}
    var Expert$0=[0,create$8,create_svg$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$28);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Node$0);
    var
     Virtual_dom_Node=
      [0,
       [0,
        tag,
        attrs,
        key,
        with_key,
        map_attrs,
        add_style$0,
        add_class$0,
        add_classes],
       [0],
       Aliases,
       none,
       text$0,
       textf,
       a,
       body,
       button,
       code,
       div,
       main,
       footer,
       fieldset,
       h1,
       h2,
       h3,
       h4,
       h5,
       h6,
       header,
       html,
       input,
       textarea,
       select,
       option,
       label,
       li,
       p,
       pre,
       section,
       span,
       strong,
       table,
       tbody,
       td,
       th,
       thead,
       tr,
       ul,
       ol,
       br,
       hr,
       sexp_for_debugging,
       inner_html$0,
       inner_html_svg,
       create$6,
       create_svg,
       to_dom$0,
       to_raw$0,
       widget,
       widget_of_module,
       Patch$0,
       Expert$0];
    caml_register_global(401,Virtual_dom_Node,"Virtual_dom__Node");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom_Vdom);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$29);
    caml_call1(Expect_test_collector[5][1],cst_src_vdom_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$30,cst$19);
    var
     Attr=
      [0,
       create$3,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       many,
       many_without_merge,
       empty,
       combine$1,
       combine$1,
       autofocus,
       checked,
       class$0,
       classes$0,
       classes,
       disabled,
       for$0,
       href,
       target,
       id,
       name,
       placeholder,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       value_prop,
       title,
       src,
       on_focus,
       on_blur,
       Unmerged_warning_mode,
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_click,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       Multi,
       Always_focus_hook,
       Single_focus_hook,
       Expert];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$31);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom_Vdom$0);
    var Virtual_dom_Vdom=[0,Attr];
    caml_register_global(402,Virtual_dom_Vdom,"Virtual_dom__Vdom");
    caml_call1(Ppx_module_timer_runtime[4],cst_Virtual_dom);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_virtual_dom$32);
    caml_call1(Expect_test_collector[5][1],cst_src_virtual_dom_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_virtual_dom$33,cst$20);
    Css_gen[94][1][1] = to_string_fixed;
    var Top_level_effects=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_virtual_dom$34);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Virtual_dom$0);
    var Virtual_dom$0=[0,Top_level_effects];
    caml_register_global(403,Virtual_dom$0,"Virtual_dom");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
